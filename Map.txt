//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zealot Hockey PBE
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_PeriodTime = 240.0;
const fixed gv_oVERTIME_LENGTH = 240.0;
const fixed gv_bOARDS_ELASTICITY_FACTOR = 0.85;
const fixed gv_rIGHT_CLICK_SHOT_POWER_DECREASE_PERCENTAGE = 20.0;
const fixed gv_rINK_TOP_Y = 142.0;
const fixed gv_rINK_BOT_Y = 81.0;
const int gv_pRIVATE_KEY = 2582937;
const int gv_oFFSET_NUMBER_X = 4967;
const int gv_oFFSET_NUMBER_Y = 5189;
const int gv_oFFSET_NUMBER_ANGLE = 242;
const string gv_dEFAULT_LIGHTING = "ZealotHockeyLighting";
const fixed gv_tIME_UNTIL_LEAVER_HAS_GRAYNAME = 30.0;
const int gv_vOTE_TYPE_KICK = 1;
const int gv_vOTE_TYPE_REDLINE = 2;
const int gv_vOTE_TYPE_TRADE = 3;
const string gv_hANDLE_CREATOR2 = "1-S2-1-2728203";
const string gv_hANDLE_CREATOR2EU = "2-S2-1-4351045";
const string gv_hANDLE_CREATOR1 = "1-S2-1-1308057";
const string gv_hANDLE_ANGLEFIRE = "1-S2-1-4728926";
const string gv_hANDLE_SNIPER = "1-S2-1-1457189";
const string gv_hANDLE_CRUSH = "1-S2-1-2042947";
const string gv_hANDLE_LEEROY_EU = "2-S2-1-4567402";
const string gv_hANDLE_SNIPER_EU = "2-S2-1-4703032";
const string gv_hANDLE_KYLE = "a";
const string gv_hANDLE_CERVANTEZ = "1-S2-1-823531";
const string gv_hANDLE_EMERY = "1-S2-1-986532";
const string gv_hANDLE_YODAEU = "2-S2-1-3579010";
const string gv_hANDLE_YODA = "1-S2-1-4431485";
const string gv_hANDLE_XAPOS = "1-S2-1-5352807";
const string gv_hANDLE_MAHARISHIEU = "2-S2-1-3434295";
const string gv_hANDLE_MAHARISHI = "1-S2-1-388429";
const string gv_hANDLE_KAIOKEN = "1-S2-1-1272111";
const string gv_hANDLE_RUCKLE = "1-S2-1-1529911";
const string gv_hANDLE_VAPOUR = "1-S2-1-1439173";
const string gv_hANDLE_VAPOUREU = "2-S2-1-3765022";
const string gv_hANDLE_PETERDLAI = "1-S2-1-1795423";
const string gv_hANDLE_THENEWGIRL = "undefined";
const string gv_hANDLE_STEALTH = "1-S2-1-3256684";
const string gv_hANDLE_STEALTHEU = "2-S2-1-3439455";
const string gv_hANDLE_TKEU = "2-S2-13868093";
const string gv_hANDLE_TINGBM = "undefined";
const string gv_hANDLE_APPLESOUP = "1-S2-1-1069488";
const string gv_hANDLE_ECUNAMI = "undefined";
const string gv_hANDLE_SEAN = "1-S2-1-2109995";
const string gv_hANDLE_SEANEU = "2-S2-1-4757853";
const string gv_hANDLE_CERVANTEZEU = "2-S2-1-4104755";
const string gv_hANDLE_RASPUTIN = "1-S2-1-2700072";
const string gv_hANDLE_NAVYSEALS = "1-S2-1-295072";
const string gv_hANDLE_PERPLEX = "1-S2-1-4535139";
const string gv_hANDLE_KIMJONGSKILL = "1-S2-1-288640";
const string gv_hANDLE_KIMJONGSKILLEU = "2-S2-1-4790302";
const string gv_hANDLE_PLUTOONFIRE = "undefined";
const string gv_hANDLE_BULBASAAUR = "1-S2-1-2592288";
const string gv_hANDLE_BOBBYO = "1-S2-1-4887847";
const string gv_hANDLE_GENERALEU = "2-S2-1-506041";
const string gv_hANDLE_SNAKEEU = "2-S2-1-3127277";
const string gv_hANDLE_ONLYSPEU = "2-S2-1-225591";
const string gv_hANDLE_CHLAMYDIAEU = "2-S2-1-225591";
const string gv_hANDLE_LiNGKing = "1-S2-1-3124636";
const string gv_hANDLE_LiNGKingEU = "2-S2-1-3562352";
const string gv_hANDLE_themusic = "1-S2-1-2586754";
const string gv_hANDLE_JOkeREU = "2-S2-1-2311152";
const string gv_hANDLE_JOkeRNA = "1-S1-1-4196995";
const string gv_hANDLE_SplatterArtEU = "2-S2-1-1965396";
const string gv_hANDLE_JunkyEU = "2-S2-1-771591";
const string gv_hANDLE_NEXEU = "2-S2-1-386335";
const string gv_hANDLE_COUNTRYkeN = "1-s2-1-372337";
const string gv_hANDLE_STRAWBERRY = "1-S2-1-5887559";
const string gv_hANDLE_RIOT = "1-S2-1-2914984";
const string gv_hANDLE_MAXWELL = "1-S2-1-5562952";
const string gv_hANDLE_TWODEUCE = "1-S2-1-3185489";
const string gv_hANDLE_RAVEN = "1-S2-1-882776";
const string gv_hANDLE_HOTPIE = "1-S2-1-1021349";
const string gv_hANDLE_HOTPIEEU = "2-S2-1-5027149";
const string gv_hANDLE_BULBASAAUREU = "2-S2-1-4431012";
const string gv_hANDLE_REIMER = "1-S2-1-3025145";
const string gv_hANDLE_ZACHSMACK = "1-S2-1-3697370";
const string gv_hANDLE_ZACHSMACKEU = "2-S2-1-4982960";
const string gv_hANDLE_HTCP = "1-S2-1-835340";
const string gv_hANDLE_ADOG = "1-S2-1-5531583";
const string gv_hANDLE_DARKANGEL = "1-S2-1-1958359";
const string gv_hANDLE_ZOTZ = "1-S2-1992499";
const string gv_hANDLE_SWIFT = "1-S2-1-817076";
const string gv_hANDLE_DUSTDEVIL = "1-S2-1-3328977";
const string gv_hANDLE_FANCYPANTS = "1-S2-1-1173430";
const string gv_hANDLE_DAUNTLESS = "1-S2-1-865866";
const string gv_hANDLE_MCDOUDLESEU = "2-S2-1-2139568";
const string gv_hANDLE_MCDOUDLES = "1-S2-1-5796997";
const string gv_hANDLE_STUDENT = "1-S2-1-2660110";
const string gv_hANDLE_JMONEY = "1-S2-1-340149";
const string gv_hANDLE_LEVI = "1-S2-1-6066524";
const string gv_hANDLE_RESSLAYEREU = "2-S2-1-3686388";
const string gv_hANDLE_RESSLAYER = "1-S2-1-4518541";
const string gv_hANDLE_MLGBX = "1-S2-1-350548";
const string gv_hANDLE_NOVA = "1-S2-1-1593481";
const string gv_hANDLE_TENKZ = "1-S2-1-4092817";
const string gv_hANDLE_RAININGWAVE = "1-S2-1-4096795";
const string gv_hANDLE_CHADGG = "1-S2-1-5225995";
const string gv_hANDLE_RUSH = "1-S2-1-1358995";
const string gv_hANDLE_PORNHACK = "1-S2-1-515276";
const string gv_hANDLE_WILDFIRE = "1-S2-1-281572";
const string gv_hANDLE_OOTER = "1-S2-1-1299889";
const string gv_hANDLE_CHADBRO = "1-S2-1-1280160";
const string gv_hANDLE_FULLA = "1-S2-1-4255532";
const string gv_hANDLE_FULLAEU = "2-S2-1-232484";
const string gv_hANDLE_CAFCA = "1-S2-1-553345";
const string gv_hANDLE_TOWNKRIER = "1-S2-1-277650";
const string gv_hANDLE_KURT = "1-S2-1-681392";
const string gv_hANDLE_KURTEU = "2-S2-1-3938300";
const string gv_hANDLE_DROPLETS = "1-S2-1-3346984";
const string gv_hANDLE_WATERMELON = "1-S2-1-4498644";
const string gv_hANDLE_TEROH = "1-S2-1-1155062";
const string gv_hANDLE_STEEZYSTEVE = "1-S2-1-2061415";
const string gv_hANDLE_KRAZYMEN = "1-S2-1-1263369";
const string gv_hANDLE_BORBORYGMUS = "1-S2-1-5266558";
const string gv_hANDLE_TURA = "1-S2-1-276647";
const string gv_hANDLE_NAVYSEALSEU = "2-S2-1-4196832";

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_HalfCourtTimer {
    bool lv_halfCourtTimersShouldbeTracking;
    timer[3] lv_halfCourtTimers;
    int lv_halfCourtTimerLimit;
    int[3] lv_teamisatrisk;
    int lv_previousPossessingTeam;
    int lv_possessingTeam;
    int lv_sideofrink1left2right;
};

struct gs_Powerplay {
    bool lv_powerplayMode;
    fixed[16] lv_customvalue0;
    fixed[16] lv_customvalue1;
    timer[3] lv_powerplayTimers;
    int lv_powerplayCooldownTime;
    bool[3] lv_teamisrecalling;
    fixed[3] lv_powerplayLimitTime;
    int lv_powerplayLimitTimeMax;
    int[3] lv_ppuinumber;
    int[3] lv_ppuitext;
    int[3] lv_ppuibar;
    int[3] lv_ppuibg;
    int[3] lv_ppuireadytext;
};

struct gs_RedlineMode {
    bool lv_redlineAllReady;
    bool lv_redlineTeamSetupisRunning;
    bool[9] lv_leaversPlayerishere;
    bool lv_redlineUIAnimationsShouldbePlaying;
    int lv_menuRedBackground;
    int[3] lv_menuRedBackgroundImage;
    int lv_menuTopleft;
    int lv_menuTopleftSparkImage;
    int lv_menuTopleftTitleBlackBar;
    int lv_menuTopleftTitleBlackBarLine;
    int lv_menuTopleftRedlineTitle;
    int lv_menuFuzzDialog;
    int lv_menuMainselection;
    int lv_menuMainselectionSelectaTeamTitle;
    int lv_menuMainselectionSettingsTitle;
    int[5] lv_menuMainselectionBlackBar;
    int[14] lv_menuMainselectionSlots;
    int[14] lv_menuMainselectionSlotsBorder;
    int[14] lv_menuMainselectionSlotsBorderHover;
    int[14] lv_menuMainselectionSlotsMoveText;
    int[14] lv_menuMainselectionSlotsPlayername;
    int[14] lv_menuMainselectionSlotsRecord;
    int[14] lv_menuMainselectionSlotsHotspot;
    int[7] lv_menuMainselectionSettingsPeriodLengthBG;
    int[7] lv_menuMainselectionSettingsPeriodLengthNumber;
    int[7] lv_menuMainselectionSettingsPeriodLengthHotspot;
    int[3] lv_menuMainselectionSettingsInfiniteOTCheckbox;
    int lv_menuMainselectionSettingsInfiniteOTHotspot;
    int[3] lv_menuMainselectionSettingsFreeplayCheckbox;
    int lv_menuMainselectionSettingsFreeplayHotspot;
    int[3] lv_menuMainselectionSettingsPowerupsCheckbox;
    int lv_menuMainselectionSettingsPowerupsHotspot;
    int[3] lv_menuMainselectionSettingsCreaseCheckbox;
    int lv_menuMainselectionSettingsCreaseHotspot;
    int[3] lv_menuMainselectionSettingsCheckingCheckbox;
    int lv_menuMainselectionSettingsCheckingHotspot;
    int lv_menuMainselectionSettingsCreaseLabel;
    int lv_menuSlotCreationInt;
    int lv_menuBotright;
    int lv_menuBotrightGlow;
    int lv_menuBotrightButtons;
    int lv_menuBotrightButton;
    int lv_menuBotrightButtonCANCEL;
    int lv_menuBotrightButtonHoverImage;
    int lv_menuBotrightButtonHotspot;
    int lv_menuBotrightReadyStatusText;
    int lv_menuBotrightErrorMessage;
    bool lv_slotsCanplayersmoveslots;
    int[9] lv_slotsWhichplayerisinwhichslot;
    bool[9] lv_slotsIsPlayerReady;
    int[9] lv_slotsDesiredSlot;
    playergroup lv_slotsPlayerswaitingtoupdate;
    bool lv_slotsIsthereaGoalie;
    bool lv_slotsIsthereaatleast1player;
    int lv_slotsTotalPlayersinSlots;
    int lv_permagoalie;
    bool lv_isgamecountdownrunning;
    int[6] lv_slotsReadyicons;
    int[9] lv_statsWins;
    int[9] lv_statsLosses;
    bool lv_shieldblockAccepted;
    sound lv_redlineMusic;
    int lv_settingsPeriodLength;
    bool lv_settingsInfiniteOT;
    bool lv_settingsFreeplay;
    bool lv_settingsPowerups;
    bool lv_settingsCrease;
    bool lv_settingsChecking;
    point[5] lv_rLFaceoffStartPointsP13;
    point[5] lv_rLFaceoffStartPointsP2OT;
    point lv_netarea1position;
    point lv_netarea2position;
    region lv_oOBRegionLeft;
    region lv_oOBRegionRight;
    region lv_takebackRegionLeft;
    region lv_takebackRegionRight;
    region lv_faceoffClearzone;
    actor lv_takebackLine;
    actor lv_normalLine;
    actor lv_oOBLineLeft;
    actor lv_oOBLineLeft2;
    actor lv_oOBLineRight;
    actor lv_oOBLineRight2;
    actor lv_oOBZoneRight;
    actor lv_oOBZoneLeft;
    actor lv_oOBTextRight;
    actor lv_oOBTextLeft;
    actor[5] lv_goalWallsLeft;
    actor[5] lv_goalWallsRight;
    actor lv_middleCircle;
    bool[16] lv_ghosted;
    int lv_whatteamiscurrentlyghosted;
    int lv_lastteamtohavepossession;
    bool lv_timerpauseduntiltakeback;
    int lv_goalieHelperDialog;
    int lv_goalieHelperDialogText;
    bool lv_canagoalbescored;
    int lv_offensiveTeam;
    int lv_defensiveTeam;
    bool lv_searchingforInitialPossession;
    bool[9] lv_restartVotes;
    int[9] lv_shotsonGoal;
    int[9] lv_saves;
};

struct gs_RedlinePowerups {
    int[9] lv_powerupCD1Speed;
    int[9] lv_powerupCD2Shotpower;
    int[9] lv_powerupCD3Boost;
    int[9] lv_powerupCD4Silence;
    int[9] lv_powerupCD5Ghost;
    int[9] lv_powerupCD6GoldenGoal;
    bool lv_arepowerupsaloudtoexist;
    bool lv_arepowerupsabletospawn;
    region[5] lv_leftsidespawnregion;
    region[5] lv_rightsidespawnregion;
};

struct gs_Stadiums {
    actor[100] lv_stadiumLights;
    int lv_lightingint;
};

struct gs_JerseyVars {
    int lv_team1TeamNumber;
    int lv_team2TeamNumber;
    bool[3] lv_jerseysareonforteam;
};

struct gs_TeamUIVars {
    int[7] lv_mainbarbottons;
    int[7] lv_buttonText;
    fixed[16] lv_storedCamDistance;
    int lv_team3Dialog;
    bool[16] lv_camFollow;
    int lv_puckcambox;
    int[5] lv_setperiodbuttons;
    int[6] lv_panels;
    int[5] lv_periodselectbuttons;
    int lv_timeMinutesTextarea;
    int lv_timeSecondsTextarea;
    int lv_timeSet;
    int[3] lv_teamScoreLabels;
    int[5] lv_teamScoreArrows;
    int[16] lv_quickStatScreenDialog;
    int lv_showHideTip;
    int[16] lv_aPMDialogs;
    bool[16] lv_limitedAccess;
    int[3] lv_remakeDialogButtons;
    bool[16] lv_savegameHasGameSaved;
    int[16] lv_savegamePeriod;
    int[16][3] lv_savegameScores;
    fixed[16] lv_savegameTime;
    int lv_savegameLoadbuttontext;
    int[16] lv_savegamePregamePromptDialog;
    int[16][3] lv_savegamePregamePromptButtons;
    int lv_scoreboardLogosHome;
    int lv_scoreboardLogosAway;
    int lv_scoreboardLogosLeague;
    int lv_scoreboardLogosHomeTeamText;
    int lv_scoreboardLogosAwayTeamText;
};

struct gs_TigerCelebration {
    bool lv_isrunning;
    int lv_tigerTeam;
    int[16] lv_attackCooldown;
};

struct gs_Warpigcelebration {
    bool lv_isrunning;
};

struct gs_HatTrick {
    unitgroup lv_hatUnits;
    int lv_hatTrickPlayer;
    int lv_hatTrickdialog;
    int lv_hatTrickdialogimage;
    sound lv_hatTrickSound;
    bool lv_ishattrickhappening;
};

struct gs_ThrowBoards {
    bool lv_canthrowboards;
    bool[9] lv_areboardsthrown;
    actor[9] lv_actualBoards;
    region[9] lv_pickupRegions;
    unit lv_throwingskater;
    bool lv_isholdingaboard;
    unit lv_theboardthatsbeingheld;
};

struct gs_Kimskill {
    bool lv_iskimskillrunning;
    unit lv_kimskillUnit;
    bool lv_shootCD;
};

struct gs_YodaVars {
    int lv_yodaOwner;
    unit lv_yoda;
    actor lv_lightSabre;
    actor lv_lightSabreHandle;
    actor lv_lighting;
    bool lv_canyodaattack;
    unit[5] lv_tiefigthers;
    bool lv_yodaisholdingafighter;
};

struct gs_BunkerSwarmVars {
    int lv_bunkeroccupants;
    bool lv_canbunkerloadmore;
    int lv_bunkerOwnerPlayer;
    unit lv_bunkerUnit;
    region lv_bunkerLoadRegion;
    unitgroup lv_bunkerOccupantUnitGroup;
    bool lv_hasbunkerbeenbuilt;
    int lv_bunkerText;
    bool lv_swarmStartLeft;
    unitgroup lv_swarmUnits;
    unit lv_swarmcollisionunit;
    bool lv_checkforcolissions;
};

struct gs_WaterVars {
    bool lv_shouldshipsberunning;
    actor[101] lv_actorstoclean;
    unit[3] lv_unitstoclean;
    int lv_actorint;
    int lv_whoismainpirate;
    unit[16] lv_boats;
    fixed[16] lv_cooldowns;
    bool[16] lv_alive;
    int lv_hitsRemainingonPirate;
    int[16] lv_totalBooty;
    unitgroup lv_bootyUnits;
    int lv_hPDialog;
    int lv_hPBar;
    int lv_bootyQtyDialog;
    int lv_bootyQtyText;
    int lv_bootytimes;
};

struct gs_RainVars {
    unitgroup lv_skyMoney;
    unitgroup lv_boostMoney;
    unitgroup lv_onetimerMoney;
    bool lv_shouldmoneybefalling;
    unit lv_jmoneyUnit;
    bool lv_boostisover;
};

struct gs_CityPlatformVars {
    actor[6] lv_fallingdebri;
    actor lv_lights;
    bool lv_platformshouldberunning;
    region lv_safezone;
    bool[16] lv_hasunitfalled;
    bool lv_canunitsbefalling;
    bool[16] lv_unitisindropship;
    unit lv_platform;
    bool[16] lv_cooldowns;
    actor lv_platformfire;
    unitgroup lv_arenaassets;
    point[7] lv_rightpoints;
    point[7] lv_leftpoints;
};

struct gs_Lingcannon {
    unit lv_cannon;
    bool lv_cannonismounted;
    unit lv_theMounter;
    bool lv_islingcannonrunning;
    region lv_theinteractionregion;
    unit lv_mounterdummy;
    fixed lv_mousepositionx;
    fixed lv_mousepositiony;
    unitgroup lv_lings;
};

struct gs_Ninja {
    bool lv_active;
};

struct gs_InitialVote {
    bool lv_teamSelectModeEnabled;
    bool lv_readytoproceedtopregamestats;
    bool lv_iscountdownreadytoshow;
    int lv_selectionDialog;
    int lv_fullscreenbgdialog;
    int[4] lv_buttonBG;
    int[4] lv_buttonBar;
    int[4] lv_button;
    int[4] lv_modetotals;
    int[4] lv_buttonText;
    int[9] lv_playerVotes;
    int lv_selectedgamemode;
};

struct gs_Sort {
    int[9] lv_playerGamePlayed;
    int[9] lv_scoresBeforeSort;
    int[9] lv_bestPlayerOrder;
};

struct gs_Mousebot {
    unit lv_mousebotUnit;
    bool lv_shouldMousebotBeTracking;
    int lv_activePicker;
    point lv_mouseLocationCaptain1;
    point lv_mouseLocationCaptain2;
};

struct gs_SingleDraft {
    int lv_captainOptindialog;
    int[3] lv_captainOptinVoteButton;
    int[3] lv_captainOptinVoteButtonBG;
    int[3] lv_captainOptinVoteButtonBar;
    int[3] lv_captainOptinVoteButtonText;
    bool[9] lv_captainVoteValues;
    int[3] lv_totalplayersvstotalvotes;
    point[7] lv_notSelectedPoint;
    point[3] lv_captainPoint;
    point[4] lv_selectedPointTeam1;
    point[4] lv_selectedPointTeam2;
    point lv_draftmiddlepoint;
    unit[9] lv_zealotPickerUnits;
    int[9] lv_nametexttags;
    int[9] lv_roleiconimage;
    int[9] lv_nametagnames;
    int[9] lv_selectedRole;
    playergroup lv_playerslefttobepicked;
    int[9] lv_pickButtons;
    doodad[4] lv_beaconUnitSlotsRedTeam;
    doodad[4] lv_beaconUnitSlotsBlueTeam;
    int lv_roleMenuDialog;
    int[6] lv_roleMenuButtonBG;
    int[6] lv_roleMenuButtonIcons;
    int[6] lv_roleMenuButtonHotspots;
    int[3] lv_actualCaptains;
    int[7] lv_whopicksonwhichturn;
    int lv_currentTurnNumber;
    int[3] lv_whichslotisupforwhichteam;
    bool lv_stopTimer;
    int lv_timeremainingforpicktextdialog;
    int[3] lv_timeremainingforpicktext;
    int lv_pillmenubg;
    int lv_pillmenudialog;
    int[7] lv_pills;
    int[3] lv_teamsTurnText;
    int lv_pillPointer;
    bool lv_shouldwecheckforleavers;
    bool[9] lv_ismarkedasaleaver;
    bool lv_iscaptainbattlehappening;
    point[16] lv_battlespawnpoints;
    unit[16] lv_battleunits;
    bool lv_canbulletsexist;
    sound lv_battleMusic;
    playergroup lv_playersStillAlive;
    int[16] lv_battleNametags;
    int lv_battleRunnerup;
    doodad[7] lv_nonpickedunitplatforms;
    int[16] lv_whichplayerisonwhichnonpickplatform;
};

struct gs_UIScoreboardItems {
    int lv_scoreboardDialog;
    int lv_scoreboardBG;
    int lv_scoreboardScore1;
    int lv_scoreboardScore2;
    int lv_scoreboardTimer;
    int lv_scoreboardPeriodText;
    int lv_scoreboardPeriod1;
    int lv_scoreboardPeriod2;
    int lv_scoreboardPeriod3;
};

struct gs_UIElements {
    int lv_commandPanel;
    int lv_menubar;
    int lv_chat;
    int lv_cDDialog;
    int[4] lv_cDHotkeyZXCV1234;
    int[4] lv_cDBGZXCV1234;
    int[4] lv_cDBGDARKZXCV1234;
    int[4] lv_cDBARZXCV1234;
    int[16] lv_boostCharges;
    bool[16] lv_chargebarIsBeingChanged;
    int[3] lv_chargebarValues;
    int lv_chargebarDialog;
};

struct gs__3kIntro {
    bool lv_run3k;
    int lv_blackBG;
    int lv_logoDialog;
    int lv_textdialog;
    bool lv_stopeverything;
};

struct gs_UIIntro {
    int lv_uIIntroMainDialog;
    int lv_uIBlackBG;
    int lv_uIBlueBG;
    int lv_uIIceBG1;
    int lv_uIIceBG2;
    int lv_uIIceBG3;
    int lv_uIIceBG4;
    int lv_uISpinner1;
    int lv_uISpinner2;
    int lv_uISpinner3;
    int lv_uISpotlight1;
    int lv_uISpotlight2;
    int lv_uISpotlight3;
    int lv_uIGalre1;
    int lv_uIGalre2;
    int lv_uIGalre3;
    int lv_uILogo;
    bool lv_uIIceResize;
    bool lv_uISpinners;
    bool lv_uISpotlightmovement;
};

struct gs_HeatmapVars {
    int lv_totalShots;
    int lv_tempShotPlayer;
    point lv_tempShotPoint;
    bool lv_tempShotOneTimer;
    int lv_tempShotTime;
    fixed lv_tempShotAngle;
    int[121] lv_shotPlayer;
    point[121] lv_shotPoint;
    bool[121] lv_shotScored;
    bool[121] lv_shotOneTimer;
    int[121] lv_shotPeriod;
    int[121] lv_shotTime;
    int[121] lv_shotTeam;
    fixed[121] lv_shotAngle;
    int lv_heatmapDialogContainer;
    int[121] lv_plotsTeam1Shots;
    int[121] lv_plotsTeam2Shots;
    int[121] lv_plotsGoals;
    int[121] lv_plotsNotGoals;
    int[121] lv_plotsPeriod1Plots;
    int[121] lv_plotsPeriod2Plots;
    int[121] lv_plotsPeriod3Plots;
    int[121] lv_plotsPeriod4Plots;
    int lv_plotFilterTeamDropdown;
    int lv_plotFilterPeriodDropdown;
    int lv_plotFilterOnlyGoalsCheckbox;
};

struct gs_UIPeriodStats2 {
    int lv_canvasDialog;
    int lv_mainStatsDialog;
    int lv_canvasBG;
    int lv_topBarBG;
    int lv_bottomBarBG;
    int lv_bottomBarLine;
    int lv_circle;
    int lv_zealicon;
    int lv_redbar;
    int lv_bluebar;
    int lv_glowyred;
    int lv_glowyblue;
    int lv_bluebarbg;
    int lv_redbarbg;
    int lv_redScoreBG;
    int lv_blueScoreBG;
    int lv_mainStatsBG;
    int lv_iceBG1;
    int lv_iceBG2;
    int lv_topbarShadow1;
    int lv_topbarShadow2;
    int lv_giantCloseButton;
    bool lv_showindefinitely;
    int lv_winningteamred1blue2;
    int[3] lv_teamShots;
    int[3] lv_teamPossessionPercentage;
    int[3] lv_teamPasses;
    int[3] lv_teamSteals;
};

struct gs_TabStatVars {
    int[16] lv_tabShowCharges;
};

struct gs_GoalieShutouts {
    int[5][16] lv_periodShutouts;
    fixed[5][16] lv_timeinnetperiodstart;
    fixed[5][16] lv_timeinnetperiodend;
    int[3][5] lv_teamScorePeriodStart;
    int[3][5] lv_teamScorePeriodEnd;
};

struct gs_Timeinnet {
    timer[16] lv_nettimeTimers;
};

struct gs_UIPregameStats {
    int lv_canvasDialog;
    int lv_canvasBG;
    int lv_statsBG;
};

struct gs_UIPeriodStats {
    int lv_canvasDialog;
    int lv_mainStatsDialog;
    int lv_canvasBG;
    int lv_topBarBG;
    int lv_bottomBarBG;
    int lv_bottomBarLine;
    int lv_circle;
    int lv_zealicon;
    int lv_redbar;
    int lv_bluebar;
    int lv_glowyred;
    int lv_glowyblue;
    int lv_bluebarbg;
    int lv_redbarbg;
    int lv_redScoreBG;
    int lv_blueScoreBG;
    int lv_mainStatsBG;
    int lv_iceBG1;
    int lv_iceBG2;
    int lv_topbarShadow1;
    int lv_topbarShadow2;
    int lv_giantCloseButton;
    bool lv_showindefinitely;
    int lv_winningteamred1blue2;
    int[3] lv_teamShots;
    int[3] lv_teamPossessionPercentage;
    int[3] lv_teamPasses;
    int[3] lv_teamSteals;
    int lv_nextperioddialog;
    int lv_timesshownAKAperiod;
    int lv_statexportdialog;
    int lv_statgraphsdialog;
    int lv_shotheatmapdialog;
    int lv_switchviewdialog;
    int[5] lv_switchviewbuttonimages;
    int[5] lv_switchviewbuttonhotspots;
    bool[16] lv_bestST;
    bool[16] lv_bestGoals;
    bool[16] lv_bestAssists;
    bool[16] lv_bestPickups;
    bool[16] lv_bestPasses;
    bool[16] lv_bestPassesRevd;
    bool[16] lv_bestPosessionTime;
    bool[16] lv_bestTotalPoints;
    bool[16] lv_bestSave;
    bool lv_arestatsbeingdisplayed;
    int lv_visualStatTimer;
    int lv_visualStatTimerBarBG;
    int lv_visualStatTimerBarValue;
    int lv_exportSaveGameButtonHotspot;
    int lv_exportSaveGameButtonBG;
    int lv_exportSaveGameButtonText;
};

struct gs_StatExports {
    int lv_sT;
};

struct gs_AntiCheat {
    int[16][3] lv_leftClickDown;
    int[16][3] lv_rightClickDown;
    int lv_actionLimit;
    int lv_cheatDialog;
    int lv_cheatDialogBG;
    int lv_cheatDialogText;
    int lv_cheatDialogIMG;
    int lv_totalOffenses;
    int[16] lv_leftClickSpread;
    int[16] lv_shotChargeID;
};

struct gs_GoalLightingVars {
    actor[4] lv_leftgoallights;
    actor[4] lv_rightgoallights;
    unit lv_leftGoal;
    unit lv_rightGoal;
};

struct gs_GoaliePositionQueue {
    int lv_totalGoalieSlotsT1;
    int lv_totalGoalieSlotsT2;
    int lv_currentlySelectedSlot1;
    int lv_currentlySelectedSlot2;
    int[21] lv_goaliePositionQueueT1;
    int[21] lv_goaliePositionQueueT2;
    int lv_currentlySelectedGoalieT1;
    int lv_currentlySelectedGoalieT2;
};

struct gs_PuckWrapping {
    int lv_puckisWrapping;
    fixed lv_maxWrapAngle;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_StateChangeType_PossessionChangeRed = 0;
const int ge_StateChangeType_PossessionChangeBlue = 1;
const int ge_StateChangeType_PossessionChangeNoOne = 2;
const int ge_StateChangeType_PuckEntersRightSide = 3;
const int ge_StateChangeType_PuckEntersLeftSide = 4;
const int ge_GoalSide_LeftGoal = 0;
const int ge_GoalSide_RightGoal = 1;
const int ge_GoalSide_BothGoals = 2;
const int ge_GameplayEvent_GoalScored = 0;
const int ge_GameplayEvent_GoalieHold = 1;
const int ge_GameplayEvent_PeriodEnd = 2;
const int ge_GameplayEvent_FaceoffStartReverttonormalstate = 3;
const int ge_WrappingDirection_NotWrapping = 0;
const int ge_WrappingDirection_TopLeftClockwise = 1;
const int ge_WrappingDirection_TopLeftCounterClockwise = 2;
const int ge_WrappingDirection_BottomLeftClockwise = 3;
const int ge_WrappingDirection_BottomLeftCounterClockwise = 4;
const int ge_WrappingDirection_TopRightClockwise = 5;
const int ge_WrappingDirection_TopRightCounterClockwise = 6;
const int ge_WrappingDirection_BottomRightClockwise = 7;
const int ge_WrappingDirection_BottomRightCounterClockwise = 8;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_skipstart;
bool gv_skipintro;
bool gv_testteam3ui;
bool gv_useGoalTestingTrigger;
bool gv_testSingleDraft;
bool gv_testredlinemode;
bool gv_testskins;
bool gv_tESTING;
int gv_public_Key;
gs_HalfCourtTimer gv_halfCourtTimer;
bool gv_remoteShieldMode;
gs_Powerplay gv_powerplay;
int gv_initialFaceoffTimerValue;
bool gv_ranked;
text[101] gv_initialFaceoffTimerValue2;
int gv_Period;
bool gv_goldenGoal;
bool gv_gameOver;
bool gv_introOver;
fixed[16] gv_eloOLD;
fixed gv_team1ELO;
fixed gv_team2ELO;
fixed gv_eloDifference1;
unit gv_centerIcoLogoUnit;
fixed[16] gv_eloChange;
int gv_scoreboardPeriodDialog;
unit gv_pUCK;
fixed gv_rINK_CENTER_X;
fixed gv_rINK_CENTER_Y;
bool gv_roundedRinkEnabled;
fixed[16] gv_currentRotationAngles;
bool gv_canuserotation;
bool[16] gv_postcontrastisshowing;
bool[16] gv_guidecontrastisshowing;
int[16] gv_altGoalieSave;
int[21] gv_skinTest;
int gv_overtimenumber;
bool gv_noshootout;
int gv_pressed;
int gv_cmddiag;
int[6] gv_cmddiagitems;
int gv_lighttestint;
fixed[16] gv_overall;
fixed[16] gv_defense;
fixed[16] gv_offense;
fixed[16] gv_goalie;
fixed[16] gv_handling;
int[16] gv_hoverStatsDialog;
string gv_teamName1;
string gv_teamName2;
string[21] gv_teamNames;
bool[21] gv_soExcited;
int[21] gv_teamColors;
string[21] gv_teamLogos;
unit[3] gv_teamLogoUnits;
bool gv_goalsAllowed;
bool gv_dunkmode;
bool gv_powershot;
string[11] gv_sWITCHLIGHTS;
bool gv_nametagshadow;
int[16] gv_shieldcolor;
int[16] gv_boostcolor;
bool[16] gv_rewardstatusOFF;
bool[16] gv_skitest;
bool[16] gv_goaliecam;
bool[16] gv_altgoalie;
bool[16] gv_altgoalie2;
bool[16] gv_altgoalie4;
int[16] gv_kickDialog;
bool[16] gv_kickDialogOpenForPlayer;
int[10] gv_kickPlayerButtons;
bool gv_vOTE_IN_PROGRESS;
timer gv_vOTE_TIMER;
int gv_vOTES_NEEDED_TO_PASS;
bool[16] gv_pLAYER_HAS_INITIATED_VOTE;
bool[16] gv_pLAYER_HAS_VOTED_THIS_ROUND;
int gv_vOTED_YES;
int gv_vOTED_NO;
string gv_vOTE_PLAYER_AFFECTED;
string gv_vOTE_PLAYER_INITIATED;
int gv_vOTE_TYPE;
bool gv_rEDLINE_MODE;
gs_RedlineMode gv_redlineMode;
gs_RedlinePowerups gv_redlinePowerups;
gs_Stadiums gv_stadiums;
int[4] gv_pausetimeremaining;
bool gv_gameispaused;
fixed[16] gv_customVar0store;
fixed[16] gv_customVar1store;
fixed[16] gv_customVar2store;
fixed[16] gv_customVar3store;
fixed[5] gv_customVarPuckstore;
bool[16] gv_goalieTimersArePaused;
fixed[16] gv_baseMovementSpeeds;
bool gv_maintimerwaspaused;
int gv_pausedpossession;
int gv_pausetimeremainingdialog;
int gv_pausetimeremainingdialogitem;
int gv_pauseresumebutton;
int gv_pPDialog;
bool[3] gv_canteampausegame;
bool gv_startresumecountdown;
gs_JerseyVars gv_jerseyVars;
string gv_team1LogoUnitType;
string gv_team2LogoUnitType;
unit[4] gv_leagueTeamLogoIntroUnits;
string gv_leagueBannerImage;
actor[11] gv_walladvertisements;
actor[4] gv_leagueBanners;
gs_TeamUIVars gv_team3UI;
unit[3] gv_casterUnits;
gs_TigerCelebration gv_tigerCelebration;
gs_Warpigcelebration gv_warpigcelebration;
bank[16] gv_Banks2;
bank[16] gv_Banks;
string gv_save_Key;
int gv_key_Dialog;
int[11] gv_key_Dialog_Items;
int gv_load_Key_Box;
bool gv_loading;
fixed[16] gv_xVel;
fixed[16] gv_yVel;
string[16] gv_playerHandles;
int[11][11] gv_checkStats;
bool[16] gv_options_Visible;
bool[16] gv_options_OptInGoalie;
bool[16] gv_options_OptOutGoalie;
bool[16] gv_options_CursorBoost;
int[16] gv_stats_GamesPlayed;
int[16] gv_stats_GamesWon;
int[16] gv_stats_Points;
int[16] gv_stats_Goals;
int[16] gv_stats_SkaterPossessionTime;
int[16] gv_stats_OverallGoalieBlocks;
int[16] gv_stats_Faceoffs;
int[16] gv_stats_FaceoffWins;
int[16] gv_stats_Pickups;
int[16] gv_stats_SkaterTime;
int[16] gv_stats_Version;
int[16] gv_stats_GoalieTime;
fixed[16] gv_stats_GoalieELO;
int[16] gv_stats_Shots;
int[16] gv_stats_SSattempts;
int[16] gv_stats_SSgoals;
int[16] gv_stats_OverallGoalieLets;
int[16] gv_stats_Steals;
int[16] gv_stats_Turnovers;
int[16] gv_stats_Passes;
int[16] gv_stats_Assists;
int[16] gv_stats_WinningGoals;
int[16] gv_stats_OvertimeGoals;
int[16] gv_stats_OverallDefensiveLets;
int[16] gv_stats_DefensivePoints;
int gv_p_exp;
int gv_p_score;
int gv_p_stats;
int gv_p_skills;
int gv_p_levels;
string gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
string gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
string gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
string gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
int gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
int gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
gs_HatTrick gv_hatTrick;
string gv_hANDLE_ISPYGECKO;
string gv_hANDLE_MEEPOMART;
string gv_hANDLE_SHARP;
string gv_hANDLE_NEX;
string gv_hANDLE_SHARPEU;
string gv_hANDLE_MALDU;
string gv_hANDLE_SNAKE;
string gv_hANDLE_BURCHESTER;
string gv_hANDLE_PROFESSORX;
string gv_hANDLE_DOOMRAWRUS_NA;
string gv_hANDLE_DOOMRAWRUS_EU;
string gv_hANDLE_BLOODSHOT;
string gv_hANDLE_GUERRILA;
string gv_hANDLE_HOK;
string gv_hANDLE_HWCUBSFTW;
string gv_hANDLE_KHOLIN;
string gv_hANDLE_ALOMINUS;
string gv_hANDLE_BLUNTANE;
string gv_hANDLE_CHERRY;
string gv_hANDLE_COUNTRYKEN;
string gv_hANDLE_PROSTER;
string gv_hANDLE_GIRLPOWER;
string gv_hANDLE_NSGANDALF;
string gv_hANDLE_NSGANDALFEU;
string gv_hANDLE_SALMANAZAREU;
string gv_hANDLE_SLIDEEU;
string gv_hANDLE_SLIDE;
string gv_hANDLE_FELIXEU;
string gv_hANDLE_PINKVOIDEU;
string gv_hANDLE_PINKVOID;
string gv_hANDLE_THEROBSTR;
string gv_hANDLE_THEROBSTREU;
string gv_hANDLE_BRUCE;
string gv_hANDLE_BRUCE_SECONDARY;
string gv_hANDLE_ALERTEYES;
string gv_hANDLE_MYSTERY1;
string gv_hANDLE_DEATH;
string gv_hANDLE_PERSAMIN;
string gv_hANDLE_ART;
string gv_hANDLE_CHANCELLOR;
string gv_hANDLE_DAGGIUS;
string gv_hANDLE_FOURCADE;
string gv_hANDLE_THEAMERICANR;
string gv_hANDLE_ELDERSAGE;
string gv_hANDLE_ELDERSAGEEU;
string gv_hANDLE_MOFOWH;
string gv_hANDLE_BOANERGES;
string gv_hANDLE_BOANERGESEU;
string gv_hANDLE_DUCKSLAYEREU;
string gv_hANDLE_KIngsrangER;
string gv_hANDLE_DUCKHUNTER;
string gv_hANDLE_DUCKHUNTEREU;
string gv_hANDLE_CARLITO;
string gv_hANDLE_BLITZERG;
string gv_hANDLE_GIGIDAPOPPER;
string gv_hANDLE_DANCINGMOOSE;
string gv_hANDLE_SHUSUKEEU;
string gv_hANDLE_SHUSUKE;
string gv_hANDLE_JINXEU;
string gv_hANDLE_ONEGUN;
string gv_hANDLE_DALTONEU;
string gv_hANDLE_DALTONUS;
string gv_hANDLE_MALDURASEU;
string gv_hANDLE_HWCUBSFTW_EU;
string gv_hANDLE_PROSTEREU;
string gv_hANDLE_KRONICKOFFEE;
string gv_hANDLE_TUBBY;
string gv_hANDLE_BACKFISCH;
string gv_hANDLE_BACKFISCHEU;
string gv_hANDLE_ILVSNTRS;
string gv_hANDLE_ILVSNTRSEU;
string gv_hANDLE_MORPHEOUS;
string gv_hANDLE_WACK;
string gv_hANDLE_WACKEU;
string gv_hANDLE_THREE;
string gv_hANDLE_BANANAHER;
string gv_hANDLE_BANANAHEREU;
string gv_hANDLE_BLUEDREAM;
string gv_hANDLE_SILENTART;
string gv_hANDLE_SILENTARTEU;
string gv_hANDLE_SQUIRTLE;
string gv_hANDLE_ENTROPY;
string gv_hANDLE_ENTROPYEU;
string gv_hANDLE_DANTE;
string gv_hANDLE_DANTEEU;
string gv_hANDLE_AZULITE;
string gv_hANDLE_LIME;
string gv_hANDLE_LIMEEU;
string gv_hANDLE_EWOK;
string gv_hANDLE_EWOKEU;
string gv_hANDLE_CHAOTIC;
string gv_hANDLE_MYTHIC;
string gv_hANDLE_NGLOOGIK;
string gv_hANDLE_NGLOOGIKEU;
string gv_hANDLE_HALO;
string gv_hANDLE_SPITFIRE;
string gv_hANDLE_SPITFIREEU;
string gv_hANDLE_UNFORGIVEN;
string gv_hANDLE_UNFORGIVENEU;
string gv_hANDLE_JEROUSEK;
string gv_hANDLE_JEROUSEKEU;
string gv_hANDLE_ANGRYTITS;
string gv_hANDLE_ANGRYTITSEU;
string gv_hANDLE_SUNSHINE;
string gv_hANDLE_SUNSHINEEU;
string gv_hANDLE_YEPHANEU;
string gv_hANDLE_CRESCENDO;
string gv_hANDLE_CRESCENDOEU;
string gv_hANDLE_LINDHOLM;
string gv_hANDLE_LINDHOLMEU;
string gv_hANDLE_KEVENKEU;
string gv_hANDLE_MOSEU;
string gv_hANDLE_SITTINGDUCK;
string gv_hANDLE_SITTINGDUCKEU;
string gv_hANDLE_YEUYEU;
string gv_hANDLE_YEUYEUEU;
string gv_hANDLE_COWSMOKE;
string gv_hANDLE_COWSMOKE2;
string gv_hANDLE_COWSMOKE3;
bool gv_barrywhiteison;
sound gv_bostonSound;
playergroup gv_goalSoundGroup;
playergroup gv_goalSoundOptOutGroup;
sound gv_ootersound;
int[16] gv_duckHuntScore;
int gv_duckHuntPlayer;
bool gv_duckHuntScoreON;
gs_ThrowBoards gv_throwBoards;
unit gv_entropyGoalieUnit;
unit gv_entropyStickUnit;
unit gv_tumbleweedsUnit;
gs_Kimskill gv_kimskill;
bool gv_isAdeleOn;
actor[61] gv_adeleStageModels;
int gv_adeleStageModelCount;
bool gv_wasgoalowngoal;
int gv_jetpackActivation;
int gv_jetpackTriggered;
sound gv_jetpacksound;
gs_YodaVars gv_yodaVars;
bool gv_isnydusholerunning;
gs_BunkerSwarmVars gv_bunkerSwarmVars;
gs_WaterVars gv_waterVars;
gs_RainVars gv_rainVars;
gs_CityPlatformVars gv_cityPlatformVars;
bool gv_isdanceactive;
unit gv_explosiongoal;
point gv_explosionpoint;
gs_Lingcannon gv_lingcannon;
int gv_totalPrizeEvents;
string[16][101] gv_prizes;
string gv_winterClassic;
string gv_zHLS1;
string gv_bo3;
string gv_clanWar;
string gv_eUIHL;
string gv_zHLS1Top4Paid;
string gv_zHLS2;
string gv_zHLS3;
string gv_zHLS4;
string gv_zHLS5;
string gv_commissioner;
string gv_zHLS6;
string gv_developer;
string gv_eUIHL2;
string gv_heart;
string gv_clanWar2;
string gv_replay;
string gv_target;
string gv_gM;
string gv_test2;
string gv_zHLS7;
string gv_yT;
string gv__3ktourny;
string gv_newspaper;
string gv_showhost;
int[10][11] gv_shopDialog;
int[16] gv_shop;
int[16] gv_shopScrollIndex;
string[101][4] gv_skinTexture;
text[101] gv_skinName;
int[101] gv_skinPrice;
bool[16] gv_altgoalie3;
bool[101] gv_skinInStore;
int gv_ofAvailableSkins;
int[101] gv_availableSkins;
int[101] gv_skinShowOrder;
int gv_ofStoreSkins;
color[16] gv_selectedColor;
int[16] gv_selectedColorDI;
int[16] gv_colorSelectionBorder;
int[16] gv_colorEquippedCheckMark;
int[16] gv_specialBladeGlow;
bool[16] gv_permitOpen;
string gv_playerwhohasgoldenstick;
bool[16] gv_goldenStickEnabled;
gs_Ninja gv_ninja;
bool[16] gv_muerteHatEnabled;
bool[16] gv_dragonStickEnabled;
bool[16] gv_gokuHairEnabled;
bool gv_isAfroModeOn;
bool[16] gv_afrosAllowedtoPlayer;
int gv_afrocurrentrequestor;
actor gv_currentAfro;
bool gv_helmetsOn;
bool[16] gv_stormTrooperEnabled;
playergroup[4] gv_actualPlayerzonTeam;
gs_InitialVote gv_initialVote;
gs_Sort gv_sort;
gs_Mousebot gv_mousebot;
gs_SingleDraft gv_singleDraft;
bool[16] gv_isZealotBouncing;
bool[3] gv_pullGoalie;
int gv_pullGoalieDialog;
int gv_pullGoalieButton;
int gv_cancelGoalieButton;
int gv_pullingGoalieLabel;
bool[3] gv_pullingGoalie;
bool[3] gv_teamHasUsedPullgoaliePowerplay;
bool[3] gv_powerplayisavailableforteam;
bool gv_NoCount;
gs_UIScoreboardItems gv_uIScoreboardItems;
int gv_ScoreDialog;
int gv_ScoreDialogItem1;
int gv_ScoreDialogItem2;
int gv_shotsOnGoal1;
int gv_shotsOnGoal2;
timer gv_Timer;
int gv_timerDialog;
int gv_timer;
int[16] gv_optinuidialog;
bool[16] gv_toggleDelay;
int gv_options;
int[31] gv_optionsItems;
int gv_voteKickButton;
int gv_uIOptionsDialog;
int gv_optionsViewController;
int gv_optionVCI;
int gv_optionVCB;
actor[7] gv_snowactors;
gs_UIElements gv_uIElements;
int gv_votekick;
int gv_votekickPlayer;
int gv_watchlist_Dialog_Item;
int gv_watchlist_Dialog_Item2;
bool[17] gv_puckMarkerShow;
bool[17] gv_nameTagShow;
bool[17] gv_verticalCamera;
bool[17] gv_mirroredCamera;
int gv_options_Camera_Dialog;
int gv_options_Camera_Items;
gs__3kIntro gv__3kIntro;
gs_UIIntro gv_uIIntro;
gs_HeatmapVars gv_heatmapVars;
bool gv_statsOK;
int[16] gv_playerTotalPoints;
int gv_inGameStatsDialog;
int[16] gv_inGameStatsSteals;
int[16] gv_inGameStatsTurnovers;
int[16] gv_inGameStatsGoals;
int[16] gv_inGameStatsBlocks;
int[16] gv_inGameStatsAssists;
int[16] gv_inGameStatsGoalieBlock;
int[16] gv_inGameStatsGoalieAllow;
int[16] gv_inGameStatsPasses;
int[16] gv_inGameStatsPossesionTime;
int[16] gv_inGameStatsPassedTo;
int[4] gv_TeamScores;
int gv_StatsDialog;
fixed gv_eLOCompressionFactor;
fixed[3] gv_possession;
gs_UIPeriodStats2 gv_uIPeriodStats2;
gs_TabStatVars gv_tabStatVars;
gs_GoalieShutouts gv_goalieShutouts;
gs_Timeinnet gv_timeinnet;
int gv_goalieStatsDialog;
int[16] gv_goalieStatsInfo;
int[21][21] gv_playerDataDialogItemMatrix;
int gv_playerDataDialog;
int[11][5] gv_teamStats;
gs_UIPregameStats gv_uIPregameStats;
gs_UIPeriodStats gv_uIPeriodStats;
gs_StatExports gv_statExports;
int gv_benchSwapDialog;
int[16] gv_benchSwapDialog2;
int[16] gv_benchSwapDialog3;
int gv_benchSwapButton;
int gv_benchSwapOptionsButton1;
int gv_benchSwapOptionsButton2;
int gv_benchSwapOptionsButton3;
int gv_benchSwapOptionsButton4;
int gv_benchSwapOptionsButton5;
int gv_benchSwapOptionsButton6;
int gv_benchSwapOptionsButton7;
int gv_benchSwapOptionsButton8;
int gv_benchSwapOptionsButton9;
int gv_benchSwapOptionsButton10;
int gv_benchSwapOptionsButton11;
int gv_benchSwapOptionsButton12;
int gv_team1Captain;
int gv_team2Captain;
playergroup gv_teamPlayersGroup1;
playergroup gv_teamPlayersGroup2;
int[6] gv_benchPlayers;
int[16] gv_playerSubOutChoice;
bool[16] gv_swapDialogOpen;
gs_AntiCheat gv_antiCheat;
gs_GoalLightingVars gv_goalLightingVars;
fixed[16] gv_skaterVelocity;
bool gv_ischeckingon;
bool[3] gv_cancelForcefield;
bool gv_stopG2;
bool gv_stopG1;
bool[16] gv_cantStop;
fixed gv_goalieStopSpeed;
int gv_lasttouchedby;
int gv_lastPass;
point[16] gv_mousePositions;
int[16] gv_PowerBarDialog;
int[16] gv_PowerBarImage;
fixed[16] gv_ShotPower;
bool[16] gv_ShotCount;
bool[16] gv_ShotCount2;
int gv_ShootingPlayer;
bool gv_onTargetRedNet;
bool gv_onTargetBlueNet;
bool gv_potentialSOG;
int gv_sOG1;
int gv_sOG2;
bool gv_doNotIncreaseSOG;
int[16] gv_meters;
bool[16] gv_windingUp;
bool[16] gv_decreaseShotPower;
int gv_potentialUnshot;
bool[16] gv_Shoot;
trigger[16] gv_mouselocationtriggers;
bool gv_incrementsogdelay;
trigger[16] gv_shotpowertriggers;
bool[16] gv_mousePosIsChargingShot;
bool[16] gv_mousePosIsQueueingOnetimer;
bool[16] gv_Steal;
bool[16] gv_StealDelay;
bool[16] gv_StealShow;
int[16] gv_stealBlockedTime;
bool[16] gv_playerNoCheck;
int[16] gv_playerCheckCount;
int[16] gv_goalieCheckStatus;
bool[16] gv_isCheckingInProgress;
bool[16] gv_cannotblockonetimer;
bool[16] gv_oneTiming;
bool[16] gv_oneTimering;
int gv_playerOneTimering;
bool gv_isChecktoendRunning;
sound[16] gv_onetimerPersonalSounds;
sound[16] gv_onetimerAllySounds;
bool gv_spinning;
actor gv_spotlight;
bool gv_faceoffHoldTrigger;
int[4] gv_FaceoffHoldTimer;
int gv_FaceoffTimer;
bool gv_checkFaceoffWinner;
int[16] gv_badgeTextTag;
int[3] gv_invulnerableToGoalie;
gs_GoaliePositionQueue gv_goaliePositionQueue;
bool gv_largestick;
fixed gv_goaliestickoffset;
fixed gv_goaliemovespeedincrease;
fixed gv_goaliemovespeedoutsidecrease;
bool gv_ShootouttimerCount;
int[3] gv_shootoutScore;
int gv_Team1GoaliesWent;
int gv_Team2GoaliesWent;
bool[16] gv_ShootoutGoalieWent;
bool gv_ShootoutTeamBool;
bool gv_Shootout;
bool[16] gv_ShootoutWent;
bool gv_ShootoutShooting;
bool gv_ShootoutShooting2;
int gv_shootoutCheckScore1;
int gv_shootoutCheckScore2;
int gv_highestActivePlayers;
bool gv_checkingRebound;
bool gv_rotateShootout;
int gv_shootoutDialog;
int gv_shootout;
int gv_shootoutRounds;
int gv_leftXStart;
int gv_rightXStart;
int gv_adv;
bool gv_shootoutGoal;
bool gv_beginCountdown;
int gv_shootoutSecondsAllowed;
actor gv_shootoutNoBackLineLeagueMode;
playergroup gv_activePlayersOnT1;
playergroup gv_activePlayersOnT2;
bool[16] gv_grayName;
bool gv_cancelallbotdrops;
bool gv_playerforfeit;
bool[16] gv_playerforfeit2;
int gv_puckMarker;
int gv_puckMarkerImage;
fixed gv_puckAngle;
fixed gv_lastPuckVelocity;
point[16] gv_stickTipPoint;
int[16] gv_unitSetType;
bool[16] gv_GoalieBlockBool;
bool gv_FreezeUnits;
int gv_Possession;
unit[16] gv_Skaters;
unit[16] gv_Sticks;
bool[16] gv_NoShoot;
int[16] gv_Players;
int[16] gv_TextTags;
fixed gv_puckMagnitude;
bool gv_stoppageOfPlay;
point[11] gv_interpolationPoints;
int gv_numOfRelevantIPs;
actor gv_puckArrow;
fixed gv_possibleIcing;
int[16] gv_playerRank;
fixed[3] gv_rotation;
unitgroup gv_ProjectileGroup;
unitgroup gv_PlayerUnits;
unitgroup gv_WallUnits;
bool[16] gv_goalieBlocking;
fixed[16] gv_lastStickAngle;
point[16] gv_lastSkaterPos;
point[21] gv_sTICKIP;
int gv_ofStickInterpolationChecks;
bool gv_pUCK_IN_TOP;
bool gv_pUCK_IN_BOTTOM;
bool gv_pUCK_IN_RIGHT;
bool gv_pUCK_IN_LEFT;
bool gv_pUCK_IN_NET1;
bool gv_pUCK_IN_NET2;
bool[10] gv_pUCK_NEAR_PLAYER;
bool[10] gv_pLAYER_IN_TOP;
bool gv_speedSkateBoolean;
bool gv_PuckBounceBool;
bool gv_PuckBounceBool2;
bool gv_allshotdecreaseareoff;
bool gv_injecttime;
unitgroup gv_stufftomove;
gs_PuckWrapping gv_puckWrapping;
bool gv_movespeedtest;
fixed gv_puckPossessionSlowPercent;
fixed gv_goalieMovementSpeed;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    gv_skipstart = true;
    gv_testskins = true;
    gv_public_Key = 99;
    gv_halfCourtTimer.lv_halfCourtTimersShouldbeTracking = true;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_halfCourtTimer.lv_halfCourtTimers[init_i1] = TimerCreate();
    }
    gv_halfCourtTimer.lv_halfCourtTimerLimit = 20;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_powerplayTimers[init_i1] = TimerCreate();
    }
    gv_powerplay.lv_powerplayCooldownTime = 50;
    gv_powerplay.lv_powerplayLimitTimeMax = 30;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_ppuinumber[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_ppuitext[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_ppuibar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_ppuibg[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_powerplay.lv_ppuireadytext[init_i1] = c_invalidDialogControlId;
    }
    gv_initialFaceoffTimerValue = 40;
    gv_Period = 1;
    gv_team1ELO = 1000.0;
    gv_team2ELO = 1000.0;
    gv_scoreboardPeriodDialog = c_invalidDialogId;
    gv_pUCK = UnitFromId(4);
    gv_rINK_CENTER_X = 128.0;
    gv_rINK_CENTER_Y = 111.5;
    gv_roundedRinkEnabled = true;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_currentRotationAngles[init_i] = 90.0;
    }
    gv_overtimenumber = 1;
    gv_cmddiag = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_cmddiagitems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_hoverStatsDialog[init_i] = c_invalidDialogId;
    }
    gv_teamName1 = "";
    gv_teamName2 = "";
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_teamNames[init_i] = "";
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_teamColors[init_i] = 1;
    }
    gv_goalsAllowed = true;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_sWITCHLIGHTS[init_i] = "ZealotHockeyLighting";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_kickDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_kickPlayerButtons[init_i] = c_invalidDialogControlId;
    }
    gv_vOTE_TIMER = TimerCreate();
    gv_vOTE_PLAYER_AFFECTED = "";
    gv_vOTE_PLAYER_INITIATED = "";
    gv_redlineMode.lv_menuRedBackground = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuRedBackgroundImage[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuTopleft = c_invalidDialogId;
    gv_redlineMode.lv_menuTopleftSparkImage = c_invalidDialogControlId;
    gv_redlineMode.lv_menuTopleftTitleBlackBar = c_invalidDialogControlId;
    gv_redlineMode.lv_menuTopleftTitleBlackBarLine = c_invalidDialogControlId;
    gv_redlineMode.lv_menuTopleftRedlineTitle = c_invalidDialogControlId;
    gv_redlineMode.lv_menuFuzzDialog = c_invalidDialogId;
    gv_redlineMode.lv_menuMainselection = c_invalidDialogId;
    gv_redlineMode.lv_menuMainselectionSelectaTeamTitle = c_invalidDialogControlId;
    gv_redlineMode.lv_menuMainselectionSettingsTitle = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionBlackBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlots[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsBorder[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsBorderHover[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsMoveText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsPlayername[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsRecord[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSlotsHotspot[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTHotspot = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuMainselectionSettingsFreeplayHotspot = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuMainselectionSettingsPowerupsHotspot = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuMainselectionSettingsCreaseHotspot = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_menuMainselectionSettingsCheckingHotspot = c_invalidDialogControlId;
    gv_redlineMode.lv_menuMainselectionSettingsCreaseLabel = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotright = c_invalidDialogId;
    gv_redlineMode.lv_menuBotrightGlow = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightButtons = c_invalidDialogId;
    gv_redlineMode.lv_menuBotrightButton = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightButtonCANCEL = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightButtonHoverImage = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightButtonHotspot = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightReadyStatusText = c_invalidDialogControlId;
    gv_redlineMode.lv_menuBotrightErrorMessage = c_invalidDialogControlId;
    gv_redlineMode.lv_slotsPlayerswaitingtoupdate = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_redlineMode.lv_slotsReadyicons[init_i1] = c_invalidDialogControlId;
    }
    gv_redlineMode.lv_goalieHelperDialog = c_invalidDialogId;
    gv_redlineMode.lv_goalieHelperDialogText = c_invalidDialogControlId;
    gv_redlineMode.lv_canagoalbescored = true;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_pausetimeremaining[init_i] = 90;
    }
    gv_pausetimeremainingdialog = c_invalidDialogId;
    gv_pausetimeremainingdialogitem = c_invalidDialogControlId;
    gv_pauseresumebutton = c_invalidDialogControlId;
    gv_pPDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_team3UI.lv_mainbarbottons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_team3UI.lv_buttonText[init_i1] = c_invalidDialogControlId;
    }
    gv_team3UI.lv_team3Dialog = c_invalidDialogId;
    gv_team3UI.lv_puckcambox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_team3UI.lv_setperiodbuttons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_team3UI.lv_panels[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_team3UI.lv_periodselectbuttons[init_i1] = c_invalidDialogControlId;
    }
    gv_team3UI.lv_timeMinutesTextarea = c_invalidDialogControlId;
    gv_team3UI.lv_timeSecondsTextarea = c_invalidDialogControlId;
    gv_team3UI.lv_timeSet = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_team3UI.lv_teamScoreLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_team3UI.lv_teamScoreArrows[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_team3UI.lv_quickStatScreenDialog[init_i1] = c_invalidDialogId;
    }
    gv_team3UI.lv_showHideTip = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_team3UI.lv_aPMDialogs[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_team3UI.lv_remakeDialogButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_team3UI.lv_savegameLoadbuttontext = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_team3UI.lv_savegamePregamePromptDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            gv_team3UI.lv_savegamePregamePromptButtons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_team3UI.lv_scoreboardLogosHome = c_invalidDialogControlId;
    gv_team3UI.lv_scoreboardLogosAway = c_invalidDialogControlId;
    gv_team3UI.lv_scoreboardLogosLeague = c_invalidDialogControlId;
    gv_team3UI.lv_scoreboardLogosHomeTeamText = c_invalidDialogControlId;
    gv_team3UI.lv_scoreboardLogosAwayTeamText = c_invalidDialogControlId;
    gv_save_Key = "";
    gv_key_Dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_key_Dialog_Items[init_i] = c_invalidDialogControlId;
    }
    gv_load_Key_Box = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerHandles[init_i] = "";
    }
    gv_p_exp = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "Experience", "Description", c_playerAny));
    gv_p_score = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "Score", "Description", c_playerAny));
    gv_p_stats = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "Stats", "Description", c_playerAny));
    gv_p_skills = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "Skills", "Description", c_playerAny));
    gv_p_levels = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "Levels", "Description", c_playerAny));
    gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = CatalogFieldValueGet(c_gameCatalogUnit, "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny);
    gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = CatalogFieldValueGet(c_gameCatalogUnit, "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny);
    gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = CatalogFieldValueGet(c_gameCatalogUnit, "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny);
    gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = CatalogFieldValueGet(c_gameCatalogUnit, "llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny);
    gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 5;
    gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 61;
    gv_hatTrick.lv_hatUnits = UnitGroupEmpty();
    gv_hatTrick.lv_hatTrickdialog = c_invalidDialogId;
    gv_hatTrick.lv_hatTrickdialogimage = c_invalidDialogControlId;
    gv_hANDLE_ISPYGECKO = "1-S2-1-3149261";
    gv_hANDLE_MEEPOMART = "1-S2-1-1073047";
    gv_hANDLE_SHARP = "1-S2-1-5808761";
    gv_hANDLE_NEX = "1-S2-1-58407";
    gv_hANDLE_SHARPEU = "2-S2-1-3512197";
    gv_hANDLE_MALDU = "1-S2-1-5672953";
    gv_hANDLE_SNAKE = "1-S2-1-5590672";
    gv_hANDLE_BURCHESTER = "1-S2-1-1757248";
    gv_hANDLE_PROFESSORX = "1-S2-1-2487884";
    gv_hANDLE_DOOMRAWRUS_NA = "1-S2-1-1106242";
    gv_hANDLE_DOOMRAWRUS_EU = "2-S2-1-3456710";
    gv_hANDLE_BLOODSHOT = "1-S2-1-1274315";
    gv_hANDLE_GUERRILA = "1-S2-1-2386724";
    gv_hANDLE_HOK = "2-S2-1-3431502";
    gv_hANDLE_HWCUBSFTW = "1-S2-1-4022066";
    gv_hANDLE_KHOLIN = "1-S2-1-2937581";
    gv_hANDLE_ALOMINUS = "1-S2-1-309451";
    gv_hANDLE_BLUNTANE = "1-S2-1-278884";
    gv_hANDLE_CHERRY = "1-S2-1-1630673";
    gv_hANDLE_COUNTRYKEN = "1-S2-1-372337";
    gv_hANDLE_PROSTER = "1-S2-1-1379968";
    gv_hANDLE_GIRLPOWER = "1-S2-1-2349422";
    gv_hANDLE_NSGANDALF = "1-S2-1-5875531";
    gv_hANDLE_NSGANDALFEU = "1-S2-1-5875531";
    gv_hANDLE_SALMANAZAREU = "2-S2-1-2602093";
    gv_hANDLE_SLIDEEU = "2-S2-1-2633953";
    gv_hANDLE_SLIDE = "1-S2-1-4287843";
    gv_hANDLE_FELIXEU = "2-S2-1-4530262";
    gv_hANDLE_PINKVOIDEU = "2-S2-1-2787258";
    gv_hANDLE_PINKVOID = "1-S2-1-4378657";
    gv_hANDLE_THEROBSTR = "1-S2-1-4043044";
    gv_hANDLE_THEROBSTREU = "2-S2-1-2756890";
    gv_hANDLE_BRUCE = "1-S2-1-1949797";
    gv_hANDLE_BRUCE_SECONDARY = "1-S2-1-6789497";
    gv_hANDLE_ALERTEYES = "1-S2-1-3720915";
    gv_hANDLE_MYSTERY1 = "1-S2-1-2449840";
    gv_hANDLE_DEATH = "1-S2-1-5783453";
    gv_hANDLE_PERSAMIN = "1-S2-1-4961835";
    gv_hANDLE_ART = "1-S2-1-5981731";
    gv_hANDLE_CHANCELLOR = "1-S2-1-610103";
    gv_hANDLE_DAGGIUS = "1-S2-1-4929913";
    gv_hANDLE_FOURCADE = "1-S2-1-1356596";
    gv_hANDLE_THEAMERICANR = "1-S2-1-5156458";
    gv_hANDLE_ELDERSAGE = "1-S2-1-268295";
    gv_hANDLE_ELDERSAGEEU = "2-S2-1-4309100";
    gv_hANDLE_MOFOWH = "1-S2-1-1356596";
    gv_hANDLE_BOANERGES = "1-S2-1-2012597";
    gv_hANDLE_BOANERGESEU = "2-s2-1-1468202";
    gv_hANDLE_DUCKSLAYEREU = "2-S2-1-5271412";
    gv_hANDLE_KIngsrangER = "1-S2-1-3249774";
    gv_hANDLE_DUCKHUNTER = "1-S2-1-6130835";
    gv_hANDLE_DUCKHUNTEREU = "2-S2-1-5267154";
    gv_hANDLE_CARLITO = "1-S2-1-2895553";
    gv_hANDLE_BLITZERG = "1-S2-1-649757";
    gv_hANDLE_GIGIDAPOPPER = "1-S2-1-2678983";
    gv_hANDLE_DANCINGMOOSE = "1-S2-1-1538422";
    gv_hANDLE_SHUSUKEEU = "2-S2-1-307718";
    gv_hANDLE_SHUSUKE = "1-S2-1-4293710";
    gv_hANDLE_JINXEU = "2-S2-1-678511";
    gv_hANDLE_ONEGUN = "1-S2-1-4203003";
    gv_hANDLE_DALTONEU = "2-S2-1-2288757";
    gv_hANDLE_DALTONUS = "1-S2-1-4350106";
    gv_hANDLE_MALDURASEU = "2-S2-1-3142037";
    gv_hANDLE_HWCUBSFTW_EU = "2-S2-1-4444274";
    gv_hANDLE_PROSTEREU = "2-SC-1-3808174";
    gv_hANDLE_KRONICKOFFEE = "1-S2-1-5638459";
    gv_hANDLE_TUBBY = "2-S2-1-5256997";
    gv_hANDLE_BACKFISCH = "1-S2-1-4617691";
    gv_hANDLE_BACKFISCHEU = "2-S2-1-3064010";
    gv_hANDLE_ILVSNTRS = "1-S2-1-3587670";
    gv_hANDLE_ILVSNTRSEU = "2-S2-1-1828951";
    gv_hANDLE_MORPHEOUS = "1-S2-1-5807227";
    gv_hANDLE_WACK = "1-S2-1-1823402";
    gv_hANDLE_WACKEU = "2-S2-1-4790261";
    gv_hANDLE_THREE = "1-S2-1-4403682";
    gv_hANDLE_BANANAHER = "1-S2-1-5907775";
    gv_hANDLE_BANANAHEREU = "2-S2-1-6053573";
    gv_hANDLE_BLUEDREAM = "1-S2-1-3045503";
    gv_hANDLE_SILENTART = "1-S2-1-5097985";
    gv_hANDLE_SILENTARTEU = "2-S2-1-1786503";
    gv_hANDLE_SQUIRTLE = "1-S2-1-669060";
    gv_hANDLE_ENTROPY = "1-S2-1-5612140";
    gv_hANDLE_ENTROPYEU = "2-S2-1-7018128";
    gv_hANDLE_DANTE = "1-S2-1-3031207";
    gv_hANDLE_DANTEEU = "2-S2-1-4333986";
    gv_hANDLE_AZULITE = "1-S2-1-7789090";
    gv_hANDLE_LIME = "1-S2-1-5484899";
    gv_hANDLE_LIMEEU = "2-S2-1-377654";
    gv_hANDLE_EWOK = "1-S2-1-8051346";
    gv_hANDLE_EWOKEU = "2-S2-1-7058880";
    gv_hANDLE_CHAOTIC = "1-S2-1-4855870";
    gv_hANDLE_MYTHIC = "1-S2-1-4858499";
    gv_hANDLE_NGLOOGIK = "1-S2-1-611608";
    gv_hANDLE_NGLOOGIKEU = "2-S2-1-4379125";
    gv_hANDLE_HALO = "1-S2-1-1664069";
    gv_hANDLE_SPITFIRE = "1-S2-1-2738762";
    gv_hANDLE_SPITFIREEU = "2-S2-1-3929500";
    gv_hANDLE_UNFORGIVEN = "1-S2-1-5503571";
    gv_hANDLE_UNFORGIVENEU = "2-S2-1-5798057";
    gv_hANDLE_JEROUSEK = "1-S2-1-7987759";
    gv_hANDLE_JEROUSEKEU = "2-S2-1-6868060";
    gv_hANDLE_ANGRYTITS = "1-S2-1-4840275";
    gv_hANDLE_ANGRYTITSEU = "2-S2-1-2799805";
    gv_hANDLE_SUNSHINE = "1-S2-1-7513627";
    gv_hANDLE_SUNSHINEEU = "2-S2-1-4930674";
    gv_hANDLE_YEPHANEU = "2-S2-2-1477706";
    gv_hANDLE_CRESCENDO = "1-S2-1-7849279";
    gv_hANDLE_CRESCENDOEU = "2-S2-1-3419671";
    gv_hANDLE_LINDHOLM = "1-S2-1-7554509";
    gv_hANDLE_LINDHOLMEU = "2-S2-1-2617767";
    gv_hANDLE_KEVENKEU = "2-S2-1-1198015";
    gv_hANDLE_MOSEU = "2-S2-1-860150";
    gv_hANDLE_SITTINGDUCK = "1-S2-1-7919076";
    gv_hANDLE_SITTINGDUCKEU = "2-S2-1-4048196";
    gv_hANDLE_YEUYEU = "1-S2-1-5004285";
    gv_hANDLE_YEUYEUEU = "2-S2-1-4255884";
    gv_hANDLE_COWSMOKE = "1-S2-1-399459";
    gv_hANDLE_COWSMOKE2 = "1-S2-1-5949046";
    gv_hANDLE_COWSMOKE3 = "1-S2-1-5989483";
    gv_goalSoundGroup = PlayerGroupEmpty();
    gv_goalSoundOptOutGroup = PlayerGroupEmpty();
    gv_yodaVars.lv_canyodaattack = true;
    gv_bunkerSwarmVars.lv_bunkerOccupantUnitGroup = UnitGroupEmpty();
    gv_bunkerSwarmVars.lv_bunkerText = c_textTagNone;
    gv_bunkerSwarmVars.lv_swarmUnits = UnitGroupEmpty();
    gv_waterVars.lv_bootyUnits = UnitGroupEmpty();
    gv_waterVars.lv_hPDialog = c_invalidDialogId;
    gv_waterVars.lv_hPBar = c_invalidDialogControlId;
    gv_waterVars.lv_bootyQtyDialog = c_invalidDialogId;
    gv_waterVars.lv_bootyQtyText = c_invalidDialogControlId;
    gv_rainVars.lv_skyMoney = UnitGroupEmpty();
    gv_rainVars.lv_boostMoney = UnitGroupEmpty();
    gv_rainVars.lv_onetimerMoney = UnitGroupEmpty();
    gv_rainVars.lv_boostisover = true;
    gv_cityPlatformVars.lv_arenaassets = UnitGroupEmpty();
    gv_lingcannon.lv_lings = UnitGroupEmpty();
    gv_totalPrizeEvents = 60;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 100; init_j += 1) {
            gv_prizes[init_i][init_j] = "";
        }
    }
    gv_winterClassic = "Assets\\Textures\\ui_hots_icon_kerrigan_kitcheckmark_blue.dds";
    gv_zHLS1 = "Assets\\Textures\\ui_hots_icon_generic_mutation.dds";
    gv_bo3 = "Assets\\Textures\\wireframe-pickup-dna.dds";
    gv_clanWar = "Assets\\Textures\\decal_terran_0067_01.dds";
    gv_eUIHL = "Assets\\Textures\\btn-tips-scrap.dds";
    gv_zHLS1Top4Paid = "Assets\\Textures\\ui_glues_helpmenu_achievementicon.dds";
    gv_zHLS2 = "Assets\\Textures\\btn-tips-sellzergbiosamples.dds";
    gv_zHLS3 = "ZHLS3.dds";
    gv_zHLS4 = "ZHLS4.dds";
    gv_zHLS5 = "Assets\\Textures\\ui_battlenet_glue_tournament_signeduptrophyicon.dds";
    gv_commissioner = "ZHLS5.dds";
    gv_zHLS6 = "Assets\\Textures\\ui_battlenet_glue_tournament_ghosttrophyglowmask.dds";
    gv_developer = "Assets\\Textures\\devicon.dds";
    gv_eUIHL2 = "Assets\\Textures\\btn-critter-tastelope.dds";
    gv_heart = "Assets\\Textures\\icon-biomass-protoss.dds";
    gv_clanWar2 = "Assets\\Textures\\icon-gas-zerg-nobg.dds";
    gv_replay = "Assets\\Textures\\icon-replay.dds";
    gv_target = "Assets\\Textures\\ui_attackmove_ringlmp.dds";
    gv_gM = "Assets\\Textures\\ui_battlenet_glue_icons_league_grandmaster.dds";
    gv_test2 = "Assets\\Textures\\ui_battlenet_glue_tournament_ghosttrophy.dds";
    gv_zHLS7 = "Assets\\Textures\\ui_battlenet_glue_tournament_ghosttrophyglowmask.dds";
    gv_yT = "ZHLYT.dds";
    gv__3ktourny = "3ktournament1st.dds";
    gv_newspaper = "zhnewspaper.dds";
    gv_showhost = "ZHshowhost.dds";
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_shopDialog[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_shop[init_i] = c_invalidDialogId;
    }
    gv_ofStoreSkins = 99;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_selectedColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_selectedColorDI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_colorSelectionBorder[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_colorEquippedCheckMark[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_specialBladeGlow[init_i] = c_invalidDialogControlId;
    }
    gv_playerwhohasgoldenstick = gv_hANDLE_LiNGKing;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_actualPlayerzonTeam[init_i] = PlayerGroupEmpty();
    }
    gv_initialVote.lv_selectionDialog = c_invalidDialogId;
    gv_initialVote.lv_fullscreenbgdialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_initialVote.lv_buttonBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_initialVote.lv_buttonBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_initialVote.lv_button[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_initialVote.lv_modetotals[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_initialVote.lv_buttonText[init_i1] = c_invalidDialogControlId;
    }
    gv_initialVote.lv_selectedgamemode = 1;
    gv_singleDraft.lv_captainOptindialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_captainOptinVoteButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_captainOptinVoteButtonBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_captainOptinVoteButtonBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_captainOptinVoteButtonText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_nametexttags[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_roleiconimage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_nametagnames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_selectedRole[init_i1] = 1;
    }
    gv_singleDraft.lv_playerslefttobepicked = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_pickButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_roleMenuDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_singleDraft.lv_roleMenuButtonBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_singleDraft.lv_roleMenuButtonIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_singleDraft.lv_roleMenuButtonHotspots[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_timeremainingforpicktextdialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_timeremainingforpicktext[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_pillmenubg = c_invalidDialogId;
    gv_singleDraft.lv_pillmenudialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_singleDraft.lv_pills[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_teamsTurnText[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_pillPointer = c_invalidDialogControlId;
    gv_singleDraft.lv_playersStillAlive = PlayerGroupEmpty();
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_singleDraft.lv_battleNametags[init_i1] = c_textTagNone;
    }
    gv_pullGoalieDialog = c_invalidDialogId;
    gv_pullGoalieButton = c_invalidDialogControlId;
    gv_cancelGoalieButton = c_invalidDialogControlId;
    gv_pullingGoalieLabel = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardDialog = c_invalidDialogId;
    gv_uIScoreboardItems.lv_scoreboardBG = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardScore1 = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardScore2 = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardTimer = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardPeriodText = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardPeriod1 = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardPeriod2 = c_invalidDialogControlId;
    gv_uIScoreboardItems.lv_scoreboardPeriod3 = c_invalidDialogControlId;
    gv_ScoreDialog = c_invalidDialogId;
    gv_ScoreDialogItem1 = c_invalidDialogControlId;
    gv_ScoreDialogItem2 = c_invalidDialogControlId;
    gv_shotsOnGoal1 = c_invalidDialogControlId;
    gv_shotsOnGoal2 = c_invalidDialogControlId;
    gv_Timer = TimerCreate();
    gv_timerDialog = c_invalidDialogId;
    gv_timer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_optinuidialog[init_i] = c_invalidDialogId;
    }
    gv_options = c_invalidDialogId;
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_optionsItems[init_i] = c_invalidDialogControlId;
    }
    gv_voteKickButton = c_invalidDialogControlId;
    gv_uIOptionsDialog = c_invalidDialogId;
    gv_optionsViewController = c_invalidDialogId;
    gv_optionVCI = c_invalidDialogControlId;
    gv_optionVCB = c_invalidDialogControlId;
    gv_uIElements.lv_commandPanel = c_invalidDialogControlId;
    gv_uIElements.lv_menubar = c_invalidDialogControlId;
    gv_uIElements.lv_chat = c_invalidDialogControlId;
    gv_uIElements.lv_cDDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_uIElements.lv_cDHotkeyZXCV1234[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_uIElements.lv_cDBGZXCV1234[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_uIElements.lv_cDBGDARKZXCV1234[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_uIElements.lv_cDBARZXCV1234[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_uIElements.lv_chargebarValues[init_i1] = c_invalidDialogControlId;
    }
    gv_uIElements.lv_chargebarDialog = c_invalidDialogId;
    gv_watchlist_Dialog_Item = c_invalidDialogControlId;
    gv_watchlist_Dialog_Item2 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_puckMarkerShow[init_i] = true;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_nameTagShow[init_i] = true;
    }
    gv_options_Camera_Dialog = c_invalidDialogId;
    gv_options_Camera_Items = c_invalidDialogControlId;
    gv__3kIntro.lv_blackBG = c_invalidDialogId;
    gv__3kIntro.lv_logoDialog = c_invalidDialogId;
    gv__3kIntro.lv_textdialog = c_invalidDialogId;
    gv_uIIntro.lv_uIIntroMainDialog = c_invalidDialogId;
    gv_uIIntro.lv_uIBlackBG = c_invalidDialogControlId;
    gv_uIIntro.lv_uIBlueBG = c_invalidDialogControlId;
    gv_uIIntro.lv_uIIceBG1 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIIceBG2 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIIceBG3 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIIceBG4 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpinner1 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpinner2 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpinner3 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpotlight1 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpotlight2 = c_invalidDialogControlId;
    gv_uIIntro.lv_uISpotlight3 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIGalre1 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIGalre2 = c_invalidDialogControlId;
    gv_uIIntro.lv_uIGalre3 = c_invalidDialogControlId;
    gv_uIIntro.lv_uILogo = c_invalidDialogControlId;
    gv_uIIntro.lv_uIIceResize = true;
    gv_uIIntro.lv_uISpinners = true;
    gv_uIIntro.lv_uISpotlightmovement = true;
    gv_heatmapVars.lv_heatmapDialogContainer = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsTeam1Shots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsTeam2Shots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsGoals[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsNotGoals[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsPeriod1Plots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsPeriod2Plots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsPeriod3Plots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 120; init_i1 += 1) {
        gv_heatmapVars.lv_plotsPeriod4Plots[init_i1] = c_invalidDialogControlId;
    }
    gv_heatmapVars.lv_plotFilterTeamDropdown = c_invalidDialogControlId;
    gv_heatmapVars.lv_plotFilterPeriodDropdown = c_invalidDialogControlId;
    gv_heatmapVars.lv_plotFilterOnlyGoalsCheckbox = c_invalidDialogControlId;
    gv_inGameStatsDialog = c_invalidDialogId;
    gv_StatsDialog = c_invalidDialogId;
    gv_uIPeriodStats2.lv_canvasDialog = c_invalidDialogId;
    gv_uIPeriodStats2.lv_mainStatsDialog = c_invalidDialogId;
    gv_uIPeriodStats2.lv_canvasBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_topBarBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_bottomBarBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_bottomBarLine = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_circle = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_zealicon = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_redbar = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_bluebar = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_glowyred = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_glowyblue = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_bluebarbg = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_redbarbg = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_redScoreBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_blueScoreBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_mainStatsBG = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_iceBG1 = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_iceBG2 = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_topbarShadow1 = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_topbarShadow2 = c_invalidDialogControlId;
    gv_uIPeriodStats2.lv_giantCloseButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        gv_timeinnet.lv_nettimeTimers[init_i1] = TimerCreate();
    }
    gv_goalieStatsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_goalieStatsInfo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            gv_playerDataDialogItemMatrix[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_playerDataDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_teamStats[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_uIPregameStats.lv_canvasDialog = c_invalidDialogId;
    gv_uIPregameStats.lv_canvasBG = c_invalidDialogControlId;
    gv_uIPregameStats.lv_statsBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_canvasDialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_mainStatsDialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_canvasBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_topBarBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_bottomBarBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_bottomBarLine = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_circle = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_zealicon = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_redbar = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_bluebar = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_glowyred = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_glowyblue = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_bluebarbg = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_redbarbg = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_redScoreBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_blueScoreBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_mainStatsBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_iceBG1 = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_iceBG2 = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_topbarShadow1 = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_topbarShadow2 = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_giantCloseButton = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_nextperioddialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_timesshownAKAperiod = 1;
    gv_uIPeriodStats.lv_statexportdialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_statgraphsdialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_shotheatmapdialog = c_invalidDialogId;
    gv_uIPeriodStats.lv_switchviewdialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_uIPeriodStats.lv_switchviewbuttonimages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_uIPeriodStats.lv_switchviewbuttonhotspots[init_i1] = c_invalidDialogControlId;
    }
    gv_uIPeriodStats.lv_visualStatTimer = c_invalidDialogId;
    gv_uIPeriodStats.lv_visualStatTimerBarBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_visualStatTimerBarValue = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_exportSaveGameButtonHotspot = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_exportSaveGameButtonBG = c_invalidDialogControlId;
    gv_uIPeriodStats.lv_exportSaveGameButtonText = c_invalidDialogControlId;
    gv_benchSwapDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_benchSwapDialog2[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_benchSwapDialog3[init_i] = c_invalidDialogId;
    }
    gv_benchSwapButton = c_invalidDialogControlId;
    gv_benchSwapOptionsButton1 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton2 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton3 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton4 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton5 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton6 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton7 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton8 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton9 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton10 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton11 = c_invalidDialogControlId;
    gv_benchSwapOptionsButton12 = c_invalidDialogControlId;
    gv_teamPlayersGroup1 = PlayerGroupEmpty();
    gv_teamPlayersGroup2 = PlayerGroupEmpty();
    gv_antiCheat.lv_actionLimit = 12;
    gv_antiCheat.lv_cheatDialog = c_invalidDialogId;
    gv_antiCheat.lv_cheatDialogBG = c_invalidDialogControlId;
    gv_antiCheat.lv_cheatDialogText = c_invalidDialogControlId;
    gv_antiCheat.lv_cheatDialogIMG = c_invalidDialogControlId;
    gv_goalieStopSpeed = 0.5;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_PowerBarDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_PowerBarImage[init_i] = c_invalidDialogControlId;
    }
    gv_FaceoffTimer = gv_initialFaceoffTimerValue;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_badgeTextTag[init_i] = c_textTagNone;
    }
    gv_largestick = true;
    gv_goaliestickoffset = 1.26;
    gv_goaliemovespeedincrease = 0.06;
    gv_goaliemovespeedoutsidecrease = 0.05;
    gv_ShootoutTeamBool = true;
    gv_shootoutDialog = c_invalidDialogId;
    gv_rightXStart = 350;
    gv_adv = c_invalidDialogControlId;
    gv_shootoutSecondsAllowed = 8;
    gv_activePlayersOnT1 = PlayerGroupEmpty();
    gv_activePlayersOnT2 = PlayerGroupEmpty();
    gv_puckMarker = c_invalidDialogId;
    gv_puckMarkerImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_unitSetType[init_i] = 1;
    }
    gv_Possession = -1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_TextTags[init_i] = c_textTagNone;
    }
    gv_ProjectileGroup = UnitGroupEmpty();
    gv_PlayerUnits = UnitGroupEmpty();
    gv_WallUnits = UnitGroupEmpty();
    gv_ofStickInterpolationChecks = 4;
    gv_allshotdecreaseareoff = true;
    gv_stufftomove = UnitGroupEmpty();
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_NotWrapping;
    gv_puckWrapping.lv_maxWrapAngle = 45.0;
    gv_puckPossessionSlowPercent = 0.9955;
    gv_goalieMovementSpeed = 0.25;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_HalfCourtTimerInit ();
void gf_HalfCourtTimerPauseUnpauseHalfcourtTimer (int lp_team, bool lp_pauseUnpause);
void gf_HalfCourtTimerResetHalfcourtTimer (int lp_team, bool lp_pauseimmediatelyonreset);
void gf_HalfCourtTimerStoppageResetallHalfCourtTimerData ();
void gf_HalfCourtTimerUpdateState (int lp_stateChangeType);
void gf_HalfCourtTimerPossessionChange (int lp_player);
void gf_CreateShieldOutlineAnimation (int lp_team, point lp_point);
void gf_UpdateCDRemoteShild (int lp_player, unit lp_unit);
void gf_DisableRemoteShields ();
void gf_InitPowerplayTimer ();
void gf_InitPowerplayStatusDialog ();
void gf_TogglePowerplayTimers (bool lp_pauseResume);
void gf_ResetPowerplayTimerforTeam (int lp_team);
void gf_StartPowerplayLimitTimer (int lp_team);
void gf_Settheppuiblue (int lp_uISide);
void gf_Settheppuigreen (int lp_uISide);
void gf_Settheppuiyellow (int lp_uISide);
void gf_Settheppuired (int lp_uISide);
void gf_PulseGoalie (unit lp_unit);
void gf_ApplyPPReadyAnimation ();
void gf_PEResetPlayerWindup ();
void gf_PEDisplayUIandLogGoalieShutouts ();
void gf_PEResetVarsandChangeLighting ();
void gf_PEWait3secondandupdateperiodcircles ();
void gf_PEResetGoalLightingvarsanddirectivemessages ();
void gf_PEUpdateLightingandScoreboardUI ();
void gf_PEActionEndofP1 ();
void gf_PEActionEndofP2 ();
void gf_PEActionEndofP3NotTied ();
void gf_PEActionEndofP3Tied ();
void gf_PEActionEndofOTShootoutAllowed ();
void gf_PEActionEndofOTShootoutNOTAllowed ();
void gf_Kick (int lp_player);
void gf_BanPerma (int lp_player);
void gf_BLUpdate ();
void gf_BLCheck ();
void gf_InitializeZHLVariables ();
void gf_CreateUnitsColor ();
void gf_CreateTeamLogos ();
void gf_computevotesneeded (bool lp_showmessage);
void gf_votestarted ();
void gf_Waitforproperreset ();
void gf_RestartRedlineGame ();
void gf_ResetAllStats ();
void gf_ResetTeams ();
void gf_RedlineCheckforsaves ();
void gf_RedlineTakebackwaitforpossession (region lp_region);
void gf_RedlineGoalScoredLighting ();
void gf_RedlineStartPeriod (int lp_period);
void gf_RedlineEndPeriod ();
void gf_RedlineGoalScoredUpdater ();
void gf_RedlineCheckifOT ();
void gf_RedlineIncrementGoalieSave ();
void gf_RedlineDoubleGoalMessage ();
void gf_RedlineInitPowerupSpawn ();
void gf_RedlineCreatePowerup ();
void gf_RedlineFadeoutPowerup (actor lp_actor, actor lp_actorGlow);
void gf_RedlineAssignPowerup (int lp_type, int lp_player);
void gf_RedlineRemoveAllPowerups ();
void gf_RedlineResetallpowerupCD ();
void gf_RedlineCreatepowerupanimation (unit lp_unit, color lp_color, fixed lp_hDR, bool lp_firstRun);
void gf_RedlineCleartintifnopowerups (int lp_player);
void gf_RedlineGivePowerup1Speed (int lp_player);
void gf_RedlineGivePowerup2Shotpower (int lp_player);
void gf_RedlineGivePowerup3Boost (int lp_player);
void gf_RedlineGivePowerup4Silence (int lp_player);
void gf_RedlineGivePowerup5Ghost (int lp_player);
void gf_RedlineGivePowerup6GoldenGoal (int lp_player);
void gf_RedlineSetHelperDialogText (int lp_team);
void gf_RedlineResetGoalieCDs ();
void gf_RedlineRandomizeFaceoffPositions (int lp_offensiveTeam);
void gf_RedlineForceFaceoff (int lp_givepossessionto, text lp_reason);
void gf_RedlineSetinitialrole ();
void gf_RedlineCycleRedlineOpacity ();
void gf_RedlineSetRoles (int lp_offense, int lp_defense);
void gf_RedlineGoalLockIndicators (playergroup lp_playerGroup, bool lp_showHide);
void gf_RedlineSetGhosted (int lp_team);
void gf_RedlineTakebackTimer (int lp_defensiveTeamRequiringTakeback);
void gf_RedlineRemovechargeshot (int lp_player);
void gf_TitleBarLinesInit ();
void gf_TitleBarCreateLine ();
void gf_TitleBarMoveLines (int lp_dialogItem, int lp_startx, int lp_speed, fixed lp_duration);
void gf_BottomFuzzInit ();
void gf_BottomFuzzCreateFuzz ();
void gf_BottomFuzzMoveFuzz (int lp_dialogItem, int lp_startx, int lp_speed, int lp_rotation, fixed lp_duration);
void gf_Createslot (int lp_xOffset, int lp_yOffset);
void gf_Hideallreadyicons ();
void gf_Setreadyicon (int lp_slot, bool lp_ready);
void gf_RedlinePeriodSetallinactive ();
void gf_PeriodSetActive (int lp_number);
void gf_RedlineHandleLeavers ();
void gf_CreateRedlineUI ();
void gf_Checkforslotupdates ();
void gf_UpdateSlotValues ();
void gf_ResetReadyStatus ();
void gf_Startcountdown ();
void gf_StartRedlineGame ();
void gf_CreateTerrainObject (string lp_model, int lp_variation, point lp_point, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, fixed lp_height, fixed lp_rotationx, fixed lp_rotationy, int lp_isaLight);
void gf_CreateGroundTerrain (string lp_model, int lp_terrainType, point lp_point, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, fixed lp_height, fixed lp_rotationx, fixed lp_rotationy);
void gf_Addtolightinggroup (actor lp_actor);
void gf_CreateProbeStadium ();
void gf_CreateZHLStadium ();
void gf_CreateJungleStadium ();
void gf_Checkforleaguepausecapability ();
void gf_Startpausecounter (int lp_team);
void gf_PauseGame (int lp_team);
void gf_Team3uidisable ();
void gf_Team3uienable ();
void gf_GameResumed ();
void gf_UnpaseGame ();
void gf_LeagueJerseys ();
void gf_Jersey1 (int lp_player, bool lp_isGoalie);
void gf_Jersey2 (int lp_player, bool lp_isGoalie);
void gf_Jersey3 (int lp_player, bool lp_isGoalie);
void gf_Jersey4 (int lp_player, bool lp_isGoalie);
void gf_Jersey5 (int lp_player, bool lp_isGoalie);
void gf_Jersey6 (int lp_player, bool lp_isGoalie);
void gf_Jersey7 (int lp_player, bool lp_isGoalie);
void gf_Jersey8 (int lp_player, bool lp_isGoalie);
void gf_Jersey9 (int lp_player, bool lp_isGoalie);
void gf_Jersey10 (int lp_player, bool lp_isGoalie);
void gf_Jersey11 (int lp_player, bool lp_isGoalie);
void gf_Jersey12 (int lp_player, bool lp_isGoalie);
void gf_Jersey13 (int lp_player, bool lp_isGoalie);
void gf_DetectJersiesonoroff ();
string gf_Selectrandomad ();
void gf_Createwallads ();
void gf_Createteamwalllogos ();
void gf_Setcentericelogo ();
void gf_CreateIntroLogos ();
void gf_CreateWallBanners ();
void gf_Cleanupintrologos ();
void gf_Team3UIDetectSavedGames ();
void gf_Team3UILoadinPregameSavedGamesUI ();
void gf_Team3UILoadSavedGame (int lp_player);
void gf_Team3UIExecutePregameLoad ();
void gf_Createteam3interface ();
void gf_Createteam3scoreboardlogos ();
void gf_ShowTeam3UI ();
void gf_Team3UITogglePauseButton ();
void gf_Team3UIGrantLimitedAccess (int lp_player);
void gf_Team3UIDenyLimitedAccess (int lp_player);
void gf_Team3UIUpdateLimitedAccess ();
void gf_StartGoalFollow (int lp_player, unit lp_scoringunit);
void gf_EndGoalFollow (int lp_player, unit lp_scoringunit);
void gf_StopPuckCam (int lp_player, bool lp_endofperiod);
void gf_StartPuckCam (int lp_player);
void gf_Createcasterboothactors ();
void gf_InitAPMDialog (int lp_player);
void gf_HideAPMDialog (int lp_player);
void gf_CheckPassiveTeamCelebrations (int lp_shootingPlayer);
int gf_Checkteamgoalmusic (int lp_shootingPlayer);
void gf_PlayTeamGoalMusic (int lp_team);
void gf_StartTigerCelebration ();
void gf_Preservegoaliesize (unit lp_unit);
void gf_TigerAttackCooldown (int lp_player);
void gf_TigerCreatebloodimpact (int lp_type, point lp_location);
void gf_TigerAttackGo (unit lp_unit, fixed lp_angle, bool lp_goalieAttack);
void gf_StartWarpigCelebration ();
void gf_Checkforallplayers ();
void gf_StartSpiral ();
void gf_ClearBank (int lp_player);
void gf_NextSaveSection ();
void gf_ResumeVelocity ();
void gf_InitializeKeyDialog ();
string gf_AddZeroesBeforeNumber (int lp_number, int lp_totalDigits);
void gf_SaveBank (int lp_player);
void gf_SMH (int lp_player);
void gf_MHC (int lp_player);
void gf_InitializePlayerData ();
void gf_SetDefaultBankValues (int lp_player);
bool gf_CoinFlip (fixed lp_weight_false, fixed lp_weight_true);
int gf_IntFlip (int lp_val1, int lp_val2, fixed lp_weight1, fixed lp_weight2);
fixed gf_PolarUnitStar (fixed lp_theta);
int gf_RoundToMultiple (int lp_val, int lp_multiple);
fixed gf_Cotangent (fixed lp_theta);
color gf_SelectColor (color lp_color1, color lp_color2, bool lp_flag);
unit gf_RandomUnitInRegion (string lp_type, region lp_region, int lp_owner);
int gf_RandomPlayerFromPlayerGroup (playergroup lp_player_group);
int gf_RandomLivingPlayerFromPlayerGroup (playergroup lp_player_group);
text gf_NameWithColor (int lp_player);
text gf_FormatNumber (int lp_val);
text gf_FormatTime (int lp_seconds);
fixed gf_LERP (fixed lp_min, fixed lp_max, fixed lp_t);
int gf_MaxIndex3 (int lp_var1, int lp_var2, int lp_var3);
int gf_Max3 (int lp_var1, int lp_var2, int lp_var3);
int gf_MinIndex3 (int lp_var1, int lp_var2, int lp_var3);
int gf_MinIndex3Positives (int lp_var1, int lp_var2, int lp_var3);
int gf_Min3 (int lp_var1, int lp_var2, int lp_var3);
int gf_Min3Positives (int lp_var1, int lp_var2, int lp_var3);
bool gf_Equal (int lp_a, int lp_b);
bool gf_BoolToChecked (bool lp_bool);
bool gf_BoolToFollowingOption (bool lp_bool);
bool gf_BoolToCameraUseTargetOption (bool lp_bool);
text gf_MapToText (int lp_map);
text gf_DifficultyToText (int lp_difficulty);
int gf_MapNameLength (int lp_map);
int gf_DifficultyNameLength (int lp_difficulty);
int gf_LeaderboardTitleXOffset (int lp_nchars);
bool gf_WithinRangeReal (fixed lp_val, fixed lp_lower, fixed lp_upper);
bool gf_WithinRangeInteger (int lp_val, int lp_lower, int lp_upper);
string gf_AddStringsDigitwise (string lp_string1, string lp_string2);
bool gf_Ash_CompareStrings (string lp_string1, string lp_string2);
color gf_ColorWithAlpha (color lp_color, fixed lp_alpha_percent);
string gf_EncodePlayerHandle (int lp_player);
string gf_Ash_AddHandleValidation (string lp_input_string);
string gf_Ash_HandleE (int lp_player);
string gf_TemplarAssassin (int lp_player);
void gf_LoadOptions (string lp_s, int lp_player);
string gf_EncodeOptions (int lp_player);
void gf_LoadStats (string lp_s, int lp_player);
string gf_EncodeStats (int lp_player);
void gf_LoadRunlingData (string lp_s, int lp_player, int lp_class);
string gf_EncodeCurrentRunlingData (int lp_player);
string gf_EncodeRunlingDataForClass (int lp_player, int lp_class);
int gf_Pow10 (int lp_pow);
string gf_IntToDDString (int lp_value);
string gf_IntToXDString (int lp_value, int lp_length);
string gf_BoolToString (bool lp_flag);
bool gf_StringToBool (string lp_s);
string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_s, int lp_pos);
int gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_s, int lp_pos);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_ciphertext);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string);
bool gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string);
int gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
int gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
int gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_plaintext, int lp_skip_N);
string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_ciphertext, int lp_player, int lp_skip_N);
void gf_OwnGoalAnimation (int lp_player);
void gf_AnimalAttack (int lp_player);
void gf_CheckforHatTrick (int lp_player);
void gf_EndHatTrickAnimation ();
void gf_InitHats (int lp_player);
void gf_Createahat (point lp_starLocation, point lp_endLocation);
void gf_MoveHat (point lp_starLocation, point lp_endLocation, unit lp_hatunit);
void gf_SetPrize ();
void gf_DuckHunt (int lp_player);
void gf_InitBoardThrowing ();
void gf_PickupBoard (int lp_board);
void gf_Throwboardmovement (unit lp_theBoard, point lp_clickpos);
void gf_EntropyCrickets (int lp_player);
void gf_InitKimskill (unit lp_unit);
void gf_KimskillShootCD ();
void gf_KimskillMissile (point lp_point);
void gf_KimskillProjectile (point lp_start, point lp_end);
void gf_InitAdele (unit lp_adeleUnit);
void gf_CreateStageItem (point lp_point, fixed lp_height, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, string lp_model, int lp_variation, int lp_direction1U2R3D4L5BR, bool lp_useTint, color lp_tint, fixed lp_hDR);
void gf_Forcecorrectstage ();
void gf_CheckGoalieActions ();
void gf_Turngoalieintochicken (unit lp_unit);
void gf_Jetpack (unit lp_jetpackUnit);
void gf_Jetpack2 (unit lp_jetpackUnit);
void gf_StartYoda (unit lp_yodaUnit);
void gf_Endyoda ();
void gf_AttackImpact (unit lp_impactunit, fixed lp_angle);
void gf_Attackcooldown ();
void gf_TieFigtherFlyby1 ();
void gf_TieFigtherFlyby2 ();
void gf_TieFigtherFlyby3 ();
void gf_TieFigtherFlyby4 ();
void gf_TieFighterAttack1 ();
void gf_TieFighterAttack2 ();
void gf_Tossfigther (unit lp_unit, point lp_location);
void gf_Chad ();
void gf_Setheight (actor lp_nydus);
void gf_Setheight2 (unit lp_zealot, point lp_point);
void gf_Checkfornydushole (region lp_holeregion);
void gf_Nydusdeathfall (unit lp_unit, point lp_point);
void gf_StartBunker (unit lp_unit);
void gf_BuildBunker (point lp_point);
void gf_StartSwarm ();
void gf_SwarmCollisionChecker ();
void gf_SwarmKillUnit (unit lp_zealot, point lp_point);
void gf_Createbootystats (int lp_statdialog);
void gf_InitBattleships (int lp_battleshipPlayer);
void gf_CreateBootyDialog ();
void gf_UpdateBootyDialog ();
void gf_Makeunitsintoships (unit lp_unit);
void gf_CreateWaterStuff ();
void gf_Cleanupwateractors ();
void gf_ResetCDforShip (int lp_player, fixed lp_cD);
void gf_ShootMissileMainShip (point lp_destinationPoint, int lp_player);
void gf_Hidedeadship (unit lp_unit);
void gf_CreateRandomBooty ();
void gf_Checkforbootycollision ();
void gf_Createbootyatdeadshiplocation (point lp_point);
void gf_UpdateHPDialog ();
void gf_JmoneyInit (unit lp_unit);
void gf_OnetimerInit (unit lp_unit);
void gf_OnetimerExplosion ();
void gf_OnetimerMoneyFall ();
void gf_OnetimerMoneyMove (unit lp_unit);
void gf_RainMoneyInit ();
void gf_Makemoneyfall (unit lp_moneyUnit);
void gf_BoostMoneyInit (unit lp_unit);
void gf_BoostMoneyFall (unit lp_moneyUnit, fixed lp_angle);
void gf_BoostMoneyMove (unit lp_moneyUnit, fixed lp_angle);
void gf_CleanupMoney ();
void gf_CityPlatformInit (unit lp_unit);
void gf_showhidearena (bool lp_showhide);
void gf_Flyindropship (point lp_point);
void gf_Asteriodimpact (point lp_point);
void gf_CityShootmissile (unit lp_shootingUnit, fixed lp_angle);
void gf_Shootinganimation (point lp_point);
void gf_Citymissileimpact (unit lp_unit, fixed lp_angle);
void gf_CityResetCD (int lp_player);
void gf_Fall (unit lp_unit);
void gf_Checkifunitsarefalling ();
void gf_MakeBCflyby ();
void gf_MakeBCflyby2 ();
void gf_MakeBCflyby3 ();
void gf_FallingMeteors ();
void gf_FallingShips ();
void gf_GirlPower ();
void gf_PartyLights ();
void gf_GirlpowerSpotlights ();
void gf_ReloopDance (fixed lp_waittime, unit lp_unit);
void gf_Supplydepotdance (unit lp_unit);
void gf_ExplodePuck ();
void gf_ExplodeGoal ();
void gf_ExplodeUnits ();
void gf_LingCannonInit (unit lp_shooter);
void gf_Firealing (point lp_destinationPoint);
void gf_Moveling (unit lp_ling, point lp_startPoint, point lp_endPoint, fixed lp_angle);
void gf_Playdeathlinganimation (unit lp_unit);
void gf_Startcheckingforunit ();
void gf_Mountthecannon ();
void gf_Endlingcannon ();
void gf_Resetlighting ();
void gf_Dance ();
void gf_Dance2 ();
void gf_Dance3 ();
void gf_Dance4 ();
void gf_Dance5 ();
void gf_Dance6 ();
void gf_Dance7 ();
void gf_Dance8 ();
void gf_Dance9 ();
void gf_Dance10 ();
void gf_Dance11 ();
void gf_Dance12 ();
void gf_Anglefire ();
void gf_BloodShot ();
void gf_Guerrila ();
void gf_Cherry ();
void gf_ThemusicDance ();
void gf_SpinShield (unit lp_shield, int lp_anglemodifier);
void gf_SpinShield2 (unit lp_shield);
void gf_SpinShield3 (unit lp_shield);
void gf_SpinShield4 ();
void gf_SpinShield5 ();
void gf_Onegun ();
void gf_Carlito ();
void gf_Death ();
void gf_Daggius ();
void gf_Sheep (unit lp_unit);
void gf_Watermelons (unit lp_unit);
void gf_TKTIger ();
void gf_GoldenStickInit ();
void gf_AssignGoldenStick ();
void gf_this_map_is_not_supposed_to_be_shared (int lp_player);
void gf_ApplyNinja (int lp_player, unit lp_zealot, unit lp_stick);
void gf_AssignNinjaSkin ();
void gf_ApplyMuerteHatSingle (int lp_player);
void gf_AssignMuerteHattoAll ();
void gf_DragonStickInit ();
void gf_AssignDragonSticks ();
void gf_ApplyGokuHairSingle (int lp_player);
void gf_AssignGokuHairtoAll ();
void gf_ApplyAfro (unit lp_unit);
void gf_AssignStormTrooperHelmet ();
void gf_AssignStormTrooperHelmetDeath (int lp_player);
void gf_UpdateShop (int lp_player, string lp_command);
void gf_AddPlayerHasColorBorder (int lp_player, int lp_relativeDialogItem);
void gf_PlayAttackAnimation (actor lp_actor);
void gf_SortByPrice ();
void gf_ApplyCustomizations ();
void gf_ApplySkins ();
void gf_ApplyModel (int lp_helm, int lp_shoulders, int lp_player);
void gf_ApplySaveGoalieSound (int lp_player, bool lp_fF);
void gf_RewardPoints (int lp_player);
void gf_ShowScoreboard3 (int lp_playerNumber, bool lp_duringPeriod, bool lp_fade);
void gf_Setboundsformaingame ();
void gf_SetNewAlliancesandSettings ();
void gf_Cleanupsingledraftarea ();
void gf_InitTeamSelection ();
void gf_UpdateVoteTotals ();
void gf_DisableModeButton (int lp_button, playergroup lp_playerGroup);
void gf_DetectMode ();
void gf_Setautobalanceteams ();
void gf_Sortthescorearray ();
void gf_Checkforleaversingledraft ();
void gf_Initsingledraft ();
void gf_CaptainBattleStartcaptainbattle ();
void gf_CaptainBattleCountdown ();
void gf_CaptainBattleKnockback (unit lp_unit, fixed lp_angle);
void gf_CaptainBattleShootmissile (unit lp_shootingUnit, fixed lp_angle);
void gf_CaptainBattlemissileimpact (unit lp_unit, fixed lp_angle);
void gf_CaptainBattlemissileoob (unit lp_unit);
void gf_G15Charge (unit lp_unit);
void gf_CaptainBattleEndcaptainbattle ();
void gf_StartPlayerTurn ();
void gf_StartTurnTimer (int lp_team, int lp_totalTime);
void gf_Pickaplayer (int lp_pickedPlayer, int lp_captainwhopicked, bool lp_pickingbecausetimertimedout);
void gf_DisableCaptainButton (int lp_button, playergroup lp_playerGroup);
void gf_AnimatePointertoNextTurn ();
void gf_ShowPickButtonstoPlayer (int lp_player);
void gf_HidePickButtonsfromPlayer (int lp_player);
void gf_Createpillmenu ();
void gf_BounceZealot (int lp_player);
void gf_SpawnOutAnimation (int lp_player);
void gf_Createspawninanimation (fixed lp_animationheight, fixed lp_unitheight, point lp_point, color lp_color, int lp_player, bool lp_picked);
void gf_Createrolemenu ();
void gf_Updateroleicons ();
void gf_Endsingledraft ();
void gf_ApplyForcePolar2 (int lp_player, int lp_team);
void gf_ApplyForcePolar3 (int lp_player, int lp_team);
void gf_Setpowerplaynotavailable ();
void gf_ShowScoreboard ();
void gf_ShowScoreboard2 ();
void gf_CheckWatchlist ();
void gf_Info (int lp_player);
void gf_GoalieToggleNotification (int lp_player, bool lp_onlyGoalie);
void gf_CreateUIOptionsDialog ();
void gf_HideLightSettingsInit (playergroup lp_players);
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate);
void gf_SetAllHotkeys3 (int lp_player, bool lp_zXCV);
void gf_UpdateChargeProgress (int lp_player, unit lp_unit);
void gf_Floatafuzzy (int lp_startXcoordinate, int lp_startYcoordinate, int lp_width, int lp_height, string lp_image, fixed lp_transparency, int lp_lessthanheight, int lp_rotationMOD, int lp_xMOD, int lp_yMOD, color lp_color);
void gf_Movebgup (int lp_dialogitem);
void gf_Moveimageleft (int lp_dialogitem);
void gf_Moveimageleft3 (int lp_dialogitem);
void gf_Moveimageright (int lp_dialogitem);
void gf_Moveimageright2 (int lp_dialogitem);
void gf_Makefuzzies ();
void gf_Destroyfinaldialog (int lp_dialog);
void gf_MoveIcebg1 (int lp_dialogitem, int lp_increment, int lp_startw, int lp_starth, fixed lp_duration);
void gf_SpinDialogItem (int lp_dialogitem, int lp_angle, fixed lp_duration);
void gf_MoveIcebg2 (int lp_dialogitem, int lp_increment);
void gf_LogHeatmapTempContainerSOG (int lp_shootingPlayer, point lp_pointoftheShot, bool lp_oneTimer, fixed lp_angle);
void gf_HeatmapLogLastShotasaRealShot ();
void gf_HeatmapConvertLastRealShottoGoal ();
void gf_CreateInstantStatsScreen (int lp_player);
void gf_ResetTabstatCDs (int lp_player);
void gf_Setinitialtabstatcharges ();
void gf_GoalieShutoutsLogScorePeriodStart (int lp_period);
void gf_GoalieShutoutsLogScorePeriodEnd (int lp_period);
void gf_GoalieShutoutsLogtimeinnetPeriodStart (int lp_period);
void gf_GoalieShutoutsLogtimeinnetPeriodEnd (int lp_period);
void gf_GoalieShutoutsCalculategoalieshutouts (int lp_period);
int gf_Returntimeinnet (int lp_player);
void gf_CreatePlayerStats (int lp_player);
void gf_CreateAchievmentIcons ();
void gf_JetFlyby ();
void gf_BuildPregameStats ();
void gf_BuildPregameStatsforSingleDraftNoTeams ();
void gf_SpinDialogItem4 (int lp_dialog, int lp_team1Players, int lp_team2Players, bool lp_intermission);
void gf_CalculateBestScores ();
void gf_ClearBestScores ();
void gf_SpinDialogItem2 (int lp_dialogitem, int lp_angle, fixed lp_duration);
void gf_SpinDialogItem3 (int lp_dialogitem, int lp_yoffset, fixed lp_duration);
int gf_GetTotalPlayerPoints (int lp_player);
void gf_GenerateHeatmap ();
void gf_FilterPlots (int lp_player, int lp_team1red2blue3both, int lp_period, bool lp_onlyGoals);
void gf_VisualStatTimer (int lp_timetodisplay);
void gf_PeriodStatsCasterCam ();
string gf_CSVRows (int lp_player);
void gf_CreateStatExports (int lp_dialog);
void gf_AntiCheatRecorder ();
void gf_CheatDialogDisplayOffense (int lp_player, bool lp_leftClick);
void gf_SetGoalLighting (int lp_goal, int lp_event);
void gf_Initandhidegoallighting ();
void gf_CreateCollision (unit lp_collidingUnit, unit lp_victimUnit);
void gf_Resetcollisionpossiblities (unit lp_unit, int lp_collidingplayernumber);
void gf_Collision2 (int lp_Object1);
void gf_MeterRemove (bool lp_hadPossession);
void gf_FastFire ();
bool gf_CheckPotentialSOGLeftNet ();
bool gf_CheckPotentialSOGRightNet ();
bool gf_CheckPotentialSOG ();
bool gf_ShooterIsTeam1 ();
bool gf_ShooterIsTeam2 ();
void gf_FullchargeAnimation ();
void gf_TintActorWithPlayerColor (int lp_player, actor lp_actor);
void gf_Checkanimationgoalie (unit lp_unit);
void gf_Checkanimationskater (unit lp_unit);
void gf_CheckingCollisionGoalie (unit lp_unit);
void gf_CheckingCollisionSkater (unit lp_unit);
void gf_BoostStealAnimation (unit lp_unit, unit lp_stick);
void gf_Definewhocantblockonetimer (int lp_shootingPlayer, fixed lp_angle);
void gf_CancelOneTimer (int lp_player);
void gf_CreateBadgeTextTag (unit lp_unit, int lp_player, string lp_image);
fixed gf_FaceoffTimer (fixed lp_X1, fixed lp_X2, fixed lp_Y1, fixed lp_Y2);
void gf_CheckResetFaceoffTimer ();
void gf_FaceoffBotDrop (point lp_location, bool lp_waitforscoreboard);
void gf_FaceoffBotCancel ();
void gf_RandomizeFaceoffHoldLocations ();
void gf_IncrementGoalieQueue (bool lp_team1, bool lp_team2);
void gf_ShowGoalieQueueUI (int lp_team);
void gf_SetCooldownsandChargesforUnit (int lp_player);
void gf_RotateShootout (bool lp_scored);
void gf_CheckShootoutConditions ();
void gf_CheckIfRebounded ();
void gf_CheckBeginShootoutClock ();
void gf_FadeSound (sound lp_sound);
void gf_SetPlayers ();
void gf_SetGrayname (int lp_player);
void gf_ForfeitValidate ();
void gf_Removeleaveranimation (int lp_skaternumber);
void gf_SeperateUnits (unit lp_Unit1, unit lp_Unit2);
void gf_CollideBounce (unit lp_Object1, unit lp_Object2);
void gf_CheckIfCanPossess (int lp_player, bool lp_oneTimer);
bool gf_PuckWillScore (fixed lp_x, fixed lp_y, int lp_netred1blue2);
fixed gf_CalculateBounceAngleMovingCircleOnPost (unit lp_movingCircle, fixed lp_movingCircleVelocityAngle, region lp_stationaryObjectRegion, string lp_stationaryObjectShape);
void gf_BoardsBounce (unit lp_movingCircle, string lp_stationaryObjectShape);
fixed gf_ConvertOffsetToPolarOffsetMagnitutude (fixed lp_Object1, fixed lp_Object2);
fixed gf_ConvertOffsetToPolarOffsetAngle (fixed lp_Object1, fixed lp_Object2);
void gf_Collision (unit lp_Object1, unit lp_Object2);
fixed gf_VectorMagnitude (fixed lp_VectorX, fixed lp_VectorY, fixed lp_VectorZ);
fixed gf_VectorMagnitude2 (fixed lp_VectorX, fixed lp_VectorY, fixed lp_VectorZ);
void gf_ApplyForceCartesian (unit lp_Victim, fixed lp_ForceX, fixed lp_ForceY);
void gf_ApplyForcePolar (unit lp_Victim, fixed lp_Force, fixed lp_Angle);
void gf_ApplyForcePolarNoMomentum (unit lp_Victim, fixed lp_Force, fixed lp_Angle);
void gf_CancelWrap ();
point gf_ReturnIntersectingPoint (point lp_endPoint, point lp_startPoint, region lp_curvedRegion);
point gf_WrapPointTopLeftClockwise (fixed lp_speed, point lp_startposition);
point gf_WrapPointTopLeftCounterClockwise (fixed lp_speed, point lp_startposition);
point gf_ReturnTheoreticalPointTopLeft (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise);
int gf_CheckWrappingConditionsTopLeft (point lp_interpolationPoint);
point gf_WrapPointBottomLeftClockwise (fixed lp_speed, point lp_startposition);
point gf_WrapPointBottomLeftCounterClockwise (fixed lp_speed, point lp_startposition);
point gf_ReturnTheoreticalPointBottomLeft (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise);
int gf_CheckWrappingConditionsBottomLeft (point lp_interpolationPoint);
point gf_WrapPointBottomRightClockwise (fixed lp_speed, point lp_startposition);
point gf_WrapPointBottomRightCounterClockwise (fixed lp_speed, point lp_startposition);
point gf_ReturnTheoreticalPointBottomRight (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise);
int gf_CheckWrappingConditionsBottomRight (point lp_interpolationPoint);
point gf_WrapPointTopRightClockwise (fixed lp_speed, point lp_startposition);
point gf_WrapPointTopRightCounterClockwise (fixed lp_speed, point lp_startposition);
point gf_ReturnTheoreticalPointTopRight (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise);
int gf_CheckWrappingConditionsTopRight (point lp_interpolationPoint);
point gf_CheckSkaterCollision (unit lp_unit);
point gf_CheckPuckCollision (point lp_startPoint, int lp_recursionDepth, int lp_steps);
fixed gf_Distance3Dmade2d (unit lp_Unit1, unit lp_Unit2);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInit;
trigger gt_Changes;
trigger gt_HalfCourtTimerTimerExpires;
trigger gt_HalfCourtTimerPuckentersrightside;
trigger gt_HalfCourtTimerPuckentersleftside;
trigger gt_Turnonremoteshield;
trigger gt_UpdateCDRemoteShield;
trigger gt_ForceField2;
trigger gt_Turnonpp;
trigger gt_Team1SkaterWarpInReady;
trigger gt_Team2SkaterWarpInReady;
trigger gt_WarpIn;
trigger gt_Recall;
trigger gt_PeriodEnd2;
trigger gt_Rotate;
trigger gt_Showgamestats;
trigger gt_Hidegamestats;
trigger gt_Turncontrastonoff;
trigger gt_Turnguidesonoff;
trigger gt_cmd1;
trigger gt_cmd2;
trigger gt_cmd3;
trigger gt_cmd4;
trigger gt_altgs;
trigger gt_altgoalie;
trigger gt_altgoalie2;
trigger gt_altgoalie3;
trigger gt_altgoalie4;
trigger gt_isranked;
trigger gt_TextHandles;
trigger gt_TextMyHandle;
trigger gt_TextMyHandle2;
trigger gt_TextMyHandle4;
trigger gt_TextMyHandle5;
trigger gt_cmdentered;
trigger gt_cmdclose;
trigger gt_hidecmdline;
trigger gt_modcmds;
trigger gt_goaliecam;
trigger gt_noshootout;
trigger gt_dunkmode;
trigger gt_soexcited;
trigger gt_setpowerplay;
trigger gt_powershot;
trigger gt_nocds;
trigger gt_setnamesize;
trigger gt_setnameshadow;
trigger gt_setnamecolor;
trigger gt_setskintest;
trigger gt_setboostcolor;
trigger gt_setshieldcolor;
trigger gt_switch;
trigger gt_kickplayer;
trigger gt_resetelo;
trigger gt_settime;
trigger gt_setskin;
trigger gt_setscore;
trigger gt_setnogoalsmode;
trigger gt_setperiod;
trigger gt_testscoareboard;
trigger gt_testmodelsize;
trigger gt_v10;
trigger gt_nametag;
trigger gt_Igloo;
trigger gt_Help;
trigger gt_VoteKick;
trigger gt_ShowVotekickDialog;
trigger gt_voteyes;
trigger gt_voteno;
trigger gt_executevoteorder;
trigger gt_votetimerexpired;
trigger gt_RedlineInit;
trigger gt_RestartCMD;
trigger gt_ForceStartForTestingRedline;
trigger gt_Test1;
trigger gt_Detectshotsongoal;
trigger gt_GoalieEntersLeftHalf;
trigger gt_GoalieEntersRightHalf;
trigger gt_PuckEntersOOBLeft;
trigger gt_PuckEntersOOBRight;
trigger gt_PuckEntersTakebackLeft;
trigger gt_PuckEntersTakebackRight;
trigger gt_RedlineIdentifyInitialRoleFaceoff;
trigger gt_RedlineSelectNewSlot;
trigger gt_RedlinePressStart;
trigger gt_RedlineSelectPeriod;
trigger gt_RedlineSelectInfiniteOT;
trigger gt_RedlineSelectPowerups;
trigger gt_RedlineSelectFreeplay;
trigger gt_RedlineSelectCrease;
trigger gt_RedlineSelectChecking;
trigger gt_Jungle;
trigger gt_Unpausebutton;
trigger gt_StartPause;
trigger gt_Checkpuckfollow;
trigger gt_Puckfollowhotkey;
trigger gt_Showhidehotkey;
trigger gt_APMShowHotkey;
trigger gt_APMHideHotkey;
trigger gt_PeriodUIOpenClose;
trigger gt_PeriodUIExecute;
trigger gt_TimeUIOpenClose;
trigger gt_TimeUIExecute;
trigger gt_ScoreUIOpenClose;
trigger gt_ScoreUIExecute;
trigger gt_APMUIOpenCloseButton;
trigger gt_RemakeUIOpenClose;
trigger gt_Team3UIPregameSavedGamesDialogButtonClick;
trigger gt_RemakeUIExecuteSave;
trigger gt_RemakeUIExecuteLoad;
trigger gt_PauseExecute;
trigger gt_CasterDanceatTable;
trigger gt_TigerAttack;
trigger gt_SaveEncryiption;
trigger gt_LoadDecryption;
trigger gt_KeyDialogShow;
trigger gt_KeyDialogClose;
trigger gt_KeyDialogSaveTab;
trigger gt_KeyDialogLoadTab;
trigger gt_PrizeToggle;
trigger gt_GoalSpecial;
trigger gt_GoalTesting;
trigger gt_DuckHuntKill;
trigger gt_DuckHuntScore;
trigger gt_PickupBoard;
trigger gt_ThowBoard;
trigger gt_ShusukeBlink;
trigger gt_Crickets;
trigger gt_KimskillFireMissile;
trigger gt_AdeleOnOff;
trigger gt_JetpackIgnition;
trigger gt_JetpackRelease;
trigger gt_YodaAttack;
trigger gt_YodaFighterselect;
trigger gt_YodaFighterToss;
trigger gt_RemoveSwarmUnitsLeft;
trigger gt_RemoveSwarmUnitsRight;
trigger gt_ActivateBunker;
trigger gt_ShootMissileMainShip;
trigger gt_ShootMissileSmallShip;
trigger gt_BoostMoney;
trigger gt_OnetimerMoney;
trigger gt_CityShootMissile;
trigger gt_BarryToggle;
trigger gt_TrackLingcannonMouse;
trigger gt_FireLingcannon;
trigger gt_ToggleGoldenStick;
trigger gt_Toggleninja;
trigger gt_ToggleMuerteHat;
trigger gt_ToggleDragonStick;
trigger gt_ToggleGokuHair;
trigger gt_AfroOnOff;
trigger gt_AfroAllow;
trigger gt_HelmetsOn;
trigger gt_ToggleStormTrooper;
trigger gt_ToggleStormTrooperTeam;
trigger gt_InitializeShop;
trigger gt_OpenCloseShop;
trigger gt_TogglePermitOpen;
trigger gt_InitializeSkins;
trigger gt_Scroll;
trigger gt_BuyEquipSkin;
trigger gt_EquipColor;
trigger gt_Inject;
trigger gt_Set;
trigger gt_VoteClick;
trigger gt_DraftVoteClick1;
trigger gt_DraftRoleClick;
trigger gt_PickaplayerClick;
trigger gt_PlatformDance;
trigger gt_CaptainBattleAttack;
trigger gt_CaptainBattleBurst;
trigger gt_CaptainBattleMissileOOB;
trigger gt_CaptainBattleUnitDeath;
trigger gt_PlatformEasterEgg;
trigger gt_InitiatePullGoalie;
trigger gt_CancelPullGoalie;
trigger gt_PullGoalie;
trigger gt_CheckForEnablePullGoaliePP;
trigger gt_PeriodicPullGoaliePinger;
trigger gt_UpdateTimer;
trigger gt_ToggleGoalieKeypress;
trigger gt_ToggleOptions;
trigger gt_CloseSettingsWindow;
trigger gt_Changegamelighting;
trigger gt_ChangeShowHideSnowSettings;
trigger gt_ChangeShowHideLightSettings;
trigger gt_ChangeHotkeySettings;
trigger gt_ShowHideButtons;
trigger gt_UpdateCDBoost;
trigger gt_UpdateCDSlidestop;
trigger gt_UpdateCDOnetimer;
trigger gt_UpdateCDGoalieshield;
trigger gt_GoalieOptIn;
trigger gt_PuckMarkerShowHide;
trigger gt_NameTagShowHide;
trigger gt_VerticalCamera;
trigger gt_MirroredCamera;
trigger gt_AdjustCameraOptions;
trigger gt_run3kintro;
trigger gt_UIInitialintro;
trigger gt_Zamboni;
trigger gt_StatusHotkeyDown;
trigger gt_StatusHotkeyup;
trigger gt_PossesionTimeAdd;
trigger gt_AwardGamePlayed;
trigger gt_Initiatetimeinnettimers;
trigger gt_PregameStats;
trigger gt_PeriodStats;
trigger gt_PeriodStatsSaveGameButton;
trigger gt_ToggleHeatmapFilter;
trigger gt_ChangeStatViews;
trigger gt_LeaveGameButton;
trigger gt_CreateSwapOutDialog;
trigger gt_CreateSwapOutDialog2a;
trigger gt_CreateSwapOutDialog2b;
trigger gt_CreateSwapOutDialog3a;
trigger gt_CreateSwapOutDialog3b;
trigger gt_RightClickRecord;
trigger gt_CursorOverride;
trigger gt_Test;
trigger gt_ForceField;
trigger gt_GoalieStop;
trigger gt_Stop;
trigger gt_Stop2;
trigger gt_StoreMouseLocationsp1;
trigger gt_StoreMouseLocationsp2;
trigger gt_StoreMouseLocationsp3;
trigger gt_StoreMouseLocationsp4;
trigger gt_StoreMouseLocationsp5;
trigger gt_StoreMouseLocationsp6;
trigger gt_StoreMouseLocationsp7;
trigger gt_StoreMouseLocationsp8;
trigger gt_StoreMouseLocationsp9;
trigger gt_StoreMouseLocationsp10;
trigger gt_StoreMouseLocationsp11;
trigger gt_StoreMouseLocationsp12;
trigger gt_StoreMouseLocationsp13;
trigger gt_StoreMouseLocationsp14;
trigger gt_StoreMouseLocationsp15;
trigger gt_Checkwhichplayerstotrackmouseposition;
trigger gt_DecreaseShotPower;
trigger gt_DecreaseShotPower2;
trigger gt_DecreaseShotPower5;
trigger gt_DecreaseShotPower6;
trigger gt_DecreaseShotPower7;
trigger gt_DecreaseShotPower8;
trigger gt_DecreaseShotPower9;
trigger gt_DecreaseShotPower10;
trigger gt_DecreaseShotPower11;
trigger gt_DecreaseShotPower12;
trigger gt_DecreaseShotPower13;
trigger gt_DecreaseShotPower14;
trigger gt_DecreaseShotPower15;
trigger gt_DecreaseShotPower16;
trigger gt_DecreaseShotPower17;
trigger gt_ShotPower2;
trigger gt_ShootPuck;
trigger gt_StealPuck;
trigger gt_Check;
trigger gt_ShootPuck3;
trigger gt_ShootPuck2;
trigger gt_CancelOneTimer;
trigger gt_PingUsed;
trigger gt_RevealPingtoAllies;
trigger gt_Spacebar;
trigger gt_ToggleSpacebar;
trigger gt_ReleaseSpacebar;
trigger gt_SuperFlail;
trigger gt_MapRotate;
trigger gt_LeftGoal;
trigger gt_RightGoal;
trigger gt_RandomizeUnits;
trigger gt_RandomizeUnits2;
trigger gt_RandomizeUnitsShootout;
trigger gt_RandomizeUnitsShootoutGoalie;
trigger gt_CreateUnits2;
trigger gt_CreateUnits;
trigger gt_CreateUnitsFOL;
trigger gt_CreateUnitsFOR;
trigger gt_FaceoffHold;
trigger gt_FaceoffWinner;
trigger gt_RemoveUnits;
trigger gt_ShooutoutTimer;
trigger gt_CreateUnitsShootout;
trigger gt_CheckShootoutRotate;
trigger gt_GameEnd;
trigger gt_CheckForfeit;
trigger gt_Testleaveanimation2;
trigger gt_PostSound;
trigger gt_NetSound;
trigger gt_PostSound2;
trigger gt_AddPuck;
trigger gt_HockeyStick;
trigger gt_UnitsReset2;
trigger gt_UnitsReset3;
trigger gt_CheckPuckCollisionsAndMove;
trigger gt_CheckSkaterCollisionsAndMove;
trigger gt_UpdatePossessionTime;
trigger gt_UpdateTime;
trigger gt_MoveObjects;
trigger gt_movespeedtest;
trigger gt_PlayerSkate;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_HalfCourtTimerInit () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_halfCourtTimer.lv_halfCourtTimers[1], gv_halfCourtTimer.lv_halfCourtTimerLimit, false, c_timeReal);
    TimerPause(TimerLastStarted(), true);
    TimerStart(gv_halfCourtTimer.lv_halfCourtTimers[2], gv_halfCourtTimer.lv_halfCourtTimerLimit, false, c_timeReal);
    TimerPause(TimerLastStarted(), true);
}

void gf_HalfCourtTimerPauseUnpauseHalfcourtTimer (int lp_team, bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    TimerPause(gv_halfCourtTimer.lv_halfCourtTimers[lp_team], lp_pauseUnpause);
}

void gf_HalfCourtTimerResetHalfcourtTimer (int lp_team, bool lp_pauseimmediatelyonreset) {
    // Automatic Variable Declarations
    // Implementation
    TimerRestart(gv_halfCourtTimer.lv_halfCourtTimers[lp_team]);
    if ((lp_pauseimmediatelyonreset == true)) {
        TimerPause(gv_halfCourtTimer.lv_halfCourtTimers[lp_team], true);
    }
    else {
        TimerPause(gv_halfCourtTimer.lv_halfCourtTimers[lp_team], false);
    }
}

void gf_HalfCourtTimerStoppageResetallHalfCourtTimerData () {
    // Automatic Variable Declarations
    // Implementation
    gf_HalfCourtTimerResetHalfcourtTimer(1, true);
    gf_HalfCourtTimerResetHalfcourtTimer(2, true);
    gf_HalfCourtTimerPossessionChange(0);
    gv_halfCourtTimer.lv_teamisatrisk[1] = 0;
    gv_halfCourtTimer.lv_teamisatrisk[2] = 0;
    gv_halfCourtTimer.lv_sideofrink1left2right = 0;
}

void gf_HalfCourtTimerUpdateState (int lp_stateChangeType) {
    // Variable Declarations
    region lv_redSideofRinkRegion;
    region lv_blueSideofRinkRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((ModI(gv_Period, 2) == 0)) {
        lv_blueSideofRinkRegion = RegionRect(57.24, 74.74, 128.0, 145.91);
        lv_redSideofRinkRegion = RegionRect(128.0, 74.48, 203.0, 145.97);
    }
    else {
        lv_redSideofRinkRegion = RegionRect(57.24, 74.74, 128.0, 145.91);
        lv_blueSideofRinkRegion = RegionRect(128.0, 74.48, 203.0, 145.97);
    }
    if ((lp_stateChangeType == ge_StateChangeType_PossessionChangeRed) && (libNtve_gf_UnitInRegion(gv_pUCK, lv_redSideofRinkRegion) == true)) {
        if ((gv_halfCourtTimer.lv_teamisatrisk[1] == 1)) {
            gf_HalfCourtTimerPauseUnpauseHalfcourtTimer(1, false);
        }
        else {
            gf_HalfCourtTimerResetHalfcourtTimer(1, false);
        }
        gv_halfCourtTimer.lv_teamisatrisk[1] = 1;
        gv_halfCourtTimer.lv_teamisatrisk[2] = 0;
    }
    else {
        if ((lp_stateChangeType == ge_StateChangeType_PossessionChangeBlue) && (libNtve_gf_UnitInRegion(gv_pUCK, lv_blueSideofRinkRegion) == true)) {
            if ((gv_halfCourtTimer.lv_teamisatrisk[2] == 1)) {
                gf_HalfCourtTimerPauseUnpauseHalfcourtTimer(2, false);
            }
            else {
                gf_HalfCourtTimerResetHalfcourtTimer(2, false);
            }
            gv_halfCourtTimer.lv_teamisatrisk[1] = 0;
            gv_halfCourtTimer.lv_teamisatrisk[2] = 1;
        }

    }
}

void gf_HalfCourtTimerPossessionChange (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player == 0)) {
        gv_halfCourtTimer.lv_possessingTeam = 0;
        gv_halfCourtTimer.lv_previousPossessingTeam = 0;
    }
    else {
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_player) == true)) {
            gv_halfCourtTimer.lv_previousPossessingTeam = gv_halfCourtTimer.lv_possessingTeam;
            gv_halfCourtTimer.lv_possessingTeam = 1;
        }
        else {
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_player) == true)) {
                gv_halfCourtTimer.lv_previousPossessingTeam = gv_halfCourtTimer.lv_possessingTeam;
                gv_halfCourtTimer.lv_possessingTeam = 2;
            }

        }
    }
}

trigger auto_gf_CreateShieldOutlineAnimation_Trigger = null;
int auto_gf_CreateShieldOutlineAnimation_lp_team;
point auto_gf_CreateShieldOutlineAnimation_lp_point;

void gf_CreateShieldOutlineAnimation (int lp_team, point lp_point) {
    auto_gf_CreateShieldOutlineAnimation_lp_team = lp_team;
    auto_gf_CreateShieldOutlineAnimation_lp_point = lp_point;

    if (auto_gf_CreateShieldOutlineAnimation_Trigger == null) {
        auto_gf_CreateShieldOutlineAnimation_Trigger = TriggerCreate("auto_gf_CreateShieldOutlineAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateShieldOutlineAnimation_Trigger, false, false);
}

bool auto_gf_CreateShieldOutlineAnimation_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_CreateShieldOutlineAnimation_lp_team;
    point lp_point = auto_gf_CreateShieldOutlineAnimation_lp_point;

    // Variable Declarations
    int lv_castingTeam;
    int lv_enemyTeam;
    unit lv_outline;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 1)) {
        lv_castingTeam = 1;
        lv_enemyTeam = 2;
    }
    else {
        lv_castingTeam = 2;
        lv_enemyTeam = 1;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RemoteForceFieldOutline", c_unitCreateIgnorePlacement, 0, PointFromId(986448992));
    lv_outline = UnitLastCreated();
    gf_ShowHideActorForPlayerGroup(gv_actualPlayerzonTeam[lv_enemyTeam], libNtve_gf_MainActorofUnit(lv_outline), false);
    gf_ShowHideActorForPlayerGroup(gv_actualPlayerzonTeam[lv_castingTeam], libNtve_gf_MainActorofUnit(lv_outline), true);
    UnitSetPosition(lv_outline, lp_point, false);
    Wait(0.4, c_timeGame);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lv_outline), true);
    Wait(1.5, c_timeGame);
    UnitRemove(lv_outline);
    return true;
}

trigger auto_gf_UpdateCDRemoteShild_Trigger = null;
int auto_gf_UpdateCDRemoteShild_lp_player;
unit auto_gf_UpdateCDRemoteShild_lp_unit;

void gf_UpdateCDRemoteShild (int lp_player, unit lp_unit) {
    auto_gf_UpdateCDRemoteShild_lp_player = lp_player;
    auto_gf_UpdateCDRemoteShild_lp_unit = lp_unit;

    if (auto_gf_UpdateCDRemoteShild_Trigger == null) {
        auto_gf_UpdateCDRemoteShild_Trigger = TriggerCreate("auto_gf_UpdateCDRemoteShild_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateCDRemoteShild_Trigger, false, false);
}

bool auto_gf_UpdateCDRemoteShild_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UpdateCDRemoteShild_lp_player;
    unit lp_unit = auto_gf_UpdateCDRemoteShild_lp_unit;

    // Variable Declarations
    fixed lv_cdmax;
    fixed lv_cdcurrent;
    int lv_barwidth;
    int lv_barheight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barwidth = 154;
    lv_barheight = DialogControlGetHeight(gv_uIElements.lv_cDBARZXCV1234[3], lp_player);

    // Implementation
    if ((gv_remoteShieldMode == true)) {
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], lp_player) == false)) {
            lv_cdcurrent = UnitAbilityGetCooldown(lp_unit, "RemoteShield", "Abil/SkaterWarpIn");
            lv_cdmax = UnitAbilityGetCooldown(lp_unit, "RemoteShield", "Abil/SkaterWarpIn");
            DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[3], PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[3], PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[3], PlayerGroupSingle(lp_player), true);
            while ((lv_cdcurrent > 0.1)) {
                lv_cdcurrent = UnitAbilityGetCooldown(lp_unit, "RemoteShield", "Abil/SkaterWarpIn");
                DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(lp_player), FixedToInt(((lv_cdcurrent / lv_cdmax) * lv_barwidth)), lv_barheight);
                Wait(0.0625, c_timeGame);
            }
            DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[3], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[3], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[3], PlayerGroupSingle(lp_player), false);
            DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(lp_player), lv_barwidth, lv_barheight);
        }

    }

    return true;
}

void gf_DisableRemoteShields () {
    // Automatic Variable Declarations
    playergroup auto123452FD_g;
    int auto123452FD_var;

    // Implementation
    if ((gv_remoteShieldMode == false)) {
        auto123452FD_g = PlayerGroupAll();
        auto123452FD_var = -1;
        while (true) {
            auto123452FD_var = PlayerGroupNextPlayer(auto123452FD_g, auto123452FD_var);
            if (auto123452FD_var < 0) { break; }
            TechTreeAbilityAllow(auto123452FD_var, AbilityCommand("RemoteShield", 0), false);
        }
    }

}

trigger auto_gf_InitPowerplayTimer_Trigger = null;

void gf_InitPowerplayTimer () {
    if (auto_gf_InitPowerplayTimer_Trigger == null) {
        auto_gf_InitPowerplayTimer_Trigger = TriggerCreate("auto_gf_InitPowerplayTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitPowerplayTimer_Trigger, false, false);
}

bool auto_gf_InitPowerplayTimer_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        TimerStart(gv_powerplay.lv_powerplayTimers[1], gv_powerplay.lv_powerplayCooldownTime, false, c_timeReal);
        TimerPause(TimerLastStarted(), true);
        TimerStart(gv_powerplay.lv_powerplayTimers[2], gv_powerplay.lv_powerplayCooldownTime, false, c_timeReal);
        TimerPause(TimerLastStarted(), true);
    }

    return true;
}

trigger auto_gf_InitPowerplayStatusDialog_Trigger = null;

void gf_InitPowerplayStatusDialog () {
    if (auto_gf_InitPowerplayStatusDialog_Trigger == null) {
        auto_gf_InitPowerplayStatusDialog_Trigger = TriggerCreate("auto_gf_InitPowerplayStatusDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitPowerplayStatusDialog_Trigger, false, false);
}

bool auto_gf_InitPowerplayStatusDialog_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[3] lv_teamDialog;
    int[3] lv_number;
    int[3] lv_pplaytext;
    int lv_loop;
    int[3] lv_pplaybar;
    int[3] lv_pplaybarbg;
    int lv_redTeamNumber;
    int lv_blueTeamNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_teamDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_number[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_pplaytext[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_pplaybar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_pplaybarbg[init_i] = c_invalidDialogControlId;
    }
    lv_redTeamNumber = 1;
    lv_blueTeamNumber = 2;

    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        DialogCreate(284, 17, c_anchorTop, -310, 0, true);
        lv_teamDialog[1] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 17, c_anchorTopLeft, 90, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(16.86, 0.00, 0.00), PlayerGroupAll());
        gv_powerplay.lv_ppuibg[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 17, c_anchorTopLeft, 90, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(85.10, 0.00, 0.00), PlayerGroupAll());
        gv_powerplay.lv_ppuibar[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 284, 17, c_anchorTopLeft, 0, 0, StringToText(""), "ppbar-left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 20, c_anchorTopLeft, 22, 2, StringExternal("Param/Value/C22E4BC7"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_powerplay.lv_ppuitext[1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Powerplay", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 20.00, 20.00), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 20, c_anchorTopLeft, 184, 2, StringExternal("Param/Value/E869F75B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PowerplayNumber", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(75.29, 75.29, 75.29), PlayerGroupAll());
        gv_powerplay.lv_ppuinumber[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 17, c_anchorTopLeft, 90, 2, StringExternal("Param/Value/0F781DF6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PowerplayNumber", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        gv_powerplay.lv_ppuireadytext[1] = DialogControlLastCreated();
        DialogCreate(284, 17, c_anchorTop, 320, 0, true);
        lv_teamDialog[2] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 17, c_anchorTopLeft, 132, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 14.51, 29.02), PlayerGroupAll());
        gv_powerplay.lv_ppuibg[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 17, c_anchorTopLeft, 132, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 0.00, 100.00), PlayerGroupAll());
        gv_powerplay.lv_ppuibar[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 284, 17, c_anchorTopLeft, 0, 0, StringToText(""), "ppbar-right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 20, c_anchorTopLeft, 63, 2, StringExternal("Param/Value/8F2D835B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_powerplay.lv_ppuitext[2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Powerplay", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(32.55, 66.27, 100.00), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 20, c_anchorTopLeft, 228, 2, StringExternal("Param/Value/9AC9E7CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PowerplayNumber", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(75.29, 75.29, 75.29), PlayerGroupAll());
        gv_powerplay.lv_ppuinumber[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 17, c_anchorTopLeft, 132, 2, StringExternal("Param/Value/7E5124BF"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PowerplayNumber", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        gv_powerplay.lv_ppuireadytext[2] = DialogControlLastCreated();
        while ((lv_loop == 0)) {
            if ((ModI(gv_Period, 2) == 1)) {
                lv_redTeamNumber = 1;
                lv_blueTeamNumber = 2;
            }
            else {
                lv_redTeamNumber = 2;
                lv_blueTeamNumber = 1;
            }
            if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]) > 0)) {
                gf_Settheppuired(lv_redTeamNumber);
                DialogControlSetSize(gv_powerplay.lv_ppuibar[lv_redTeamNumber], PlayerGroupAll(), FixedToInt(((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]) / gv_powerplay.lv_powerplayCooldownTime) * 100.0)), 17);
                libNtve_gf_SetDialogItemText(gv_powerplay.lv_ppuinumber[lv_redTeamNumber], IntToText(FixedToInt(TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]))), PlayerGroupAll());
            }
            else {
                if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]) <= 0) && (gv_pullGoalie[1] == false)) {
                    gf_Settheppuigreen(lv_redTeamNumber);
                    UnitAbilityEnable(gv_Skaters[gv_Players[2]], "SkaterWarpIn", true);
                }
                else {
                    if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]) <= 0) && (gv_pullGoalie[1] == true)) {
                        gf_Settheppuiyellow(lv_redTeamNumber);
                        DialogControlSetSize(gv_powerplay.lv_ppuibar[lv_redTeamNumber], PlayerGroupAll(), FixedToInt(((gv_powerplay.lv_powerplayLimitTime[1] / gv_powerplay.lv_powerplayLimitTimeMax) * 100.0)), 17);
                        libNtve_gf_SetDialogItemText(gv_powerplay.lv_ppuinumber[lv_redTeamNumber], IntToText(FixedToInt(gv_powerplay.lv_powerplayLimitTime[1])), PlayerGroupAll());
                    }

                }
            }
            if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]) > 0)) {
                gf_Settheppuiblue(lv_blueTeamNumber);
                DialogControlSetSize(gv_powerplay.lv_ppuibar[lv_blueTeamNumber], PlayerGroupAll(), FixedToInt(((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]) / gv_powerplay.lv_powerplayCooldownTime) * 100.0)), 17);
                libNtve_gf_SetDialogItemText(gv_powerplay.lv_ppuinumber[lv_blueTeamNumber], IntToText(FixedToInt(TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]))), PlayerGroupAll());
            }
            else {
                if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]) <= 0) && (gv_pullGoalie[2] == false)) {
                    gf_Settheppuigreen(lv_blueTeamNumber);
                    UnitAbilityEnable(gv_Skaters[gv_Players[6]], "SkaterWarpIn", true);
                }
                else {
                    if ((TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]) <= 0) && (gv_pullGoalie[2] == true)) {
                        gf_Settheppuiyellow(lv_blueTeamNumber);
                        DialogControlSetSize(gv_powerplay.lv_ppuibar[lv_blueTeamNumber], PlayerGroupAll(), FixedToInt(((gv_powerplay.lv_powerplayLimitTime[2] / gv_powerplay.lv_powerplayLimitTimeMax) * 100.0)), 17);
                        libNtve_gf_SetDialogItemText(gv_powerplay.lv_ppuinumber[lv_blueTeamNumber], IntToText(FixedToInt(gv_powerplay.lv_powerplayLimitTime[2])), PlayerGroupAll());
                    }

                }
            }
            Wait(0.0625, c_timeGame);
        }
    }

    return true;
}

trigger auto_gf_TogglePowerplayTimers_Trigger = null;
bool auto_gf_TogglePowerplayTimers_lp_pauseResume;

void gf_TogglePowerplayTimers (bool lp_pauseResume) {
    auto_gf_TogglePowerplayTimers_lp_pauseResume = lp_pauseResume;

    if (auto_gf_TogglePowerplayTimers_Trigger == null) {
        auto_gf_TogglePowerplayTimers_Trigger = TriggerCreate("auto_gf_TogglePowerplayTimers_TriggerFunc");
    }

    TriggerExecute(auto_gf_TogglePowerplayTimers_Trigger, false, false);
}

bool auto_gf_TogglePowerplayTimers_TriggerFunc (bool testConds, bool runActions) {
    bool lp_pauseResume = auto_gf_TogglePowerplayTimers_lp_pauseResume;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        TimerPause(gv_powerplay.lv_powerplayTimers[1], lp_pauseResume);
        TimerPause(gv_powerplay.lv_powerplayTimers[2], lp_pauseResume);
    }

    return true;
}

trigger auto_gf_ResetPowerplayTimerforTeam_Trigger = null;
int auto_gf_ResetPowerplayTimerforTeam_lp_team;

void gf_ResetPowerplayTimerforTeam (int lp_team) {
    auto_gf_ResetPowerplayTimerforTeam_lp_team = lp_team;

    if (auto_gf_ResetPowerplayTimerforTeam_Trigger == null) {
        auto_gf_ResetPowerplayTimerforTeam_Trigger = TriggerCreate("auto_gf_ResetPowerplayTimerforTeam_TriggerFunc");
    }

    TriggerExecute(auto_gf_ResetPowerplayTimerforTeam_Trigger, false, false);
}

bool auto_gf_ResetPowerplayTimerforTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_ResetPowerplayTimerforTeam_lp_team;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        TimerRestart(gv_powerplay.lv_powerplayTimers[lp_team]);
    }

    return true;
}

trigger auto_gf_StartPowerplayLimitTimer_Trigger = null;
int auto_gf_StartPowerplayLimitTimer_lp_team;

void gf_StartPowerplayLimitTimer (int lp_team) {
    auto_gf_StartPowerplayLimitTimer_lp_team = lp_team;

    if (auto_gf_StartPowerplayLimitTimer_Trigger == null) {
        auto_gf_StartPowerplayLimitTimer_Trigger = TriggerCreate("auto_gf_StartPowerplayLimitTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartPowerplayLimitTimer_Trigger, false, false);
}

bool auto_gf_StartPowerplayLimitTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_StartPowerplayLimitTimer_lp_team;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        gv_powerplay.lv_powerplayLimitTime[lp_team] = gv_powerplay.lv_powerplayLimitTimeMax;
        while ((gv_powerplay.lv_powerplayLimitTime[lp_team] > 0.0) && (gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0) && (gv_pullGoalie[lp_team] == true) && (gv_uIPeriodStats.lv_arestatsbeingdisplayed == false)) {
            gv_powerplay.lv_powerplayLimitTime[lp_team] -= 0.125;
            if ((gv_powerplay.lv_powerplayLimitTime[lp_team] == 3.0) && (lp_team == 1)) {
                gf_PulseGoalie(gv_Skaters[gv_Players[2]]);
            }
            else {
                if ((gv_powerplay.lv_powerplayLimitTime[lp_team] == 3.0) && (lp_team == 2)) {
                    gf_PulseGoalie(gv_Skaters[gv_Players[6]]);
                }

            }
            Wait(0.125, c_timeReal);
        }
        if ((gv_pullGoalie[lp_team] == true) && (gv_powerplay.lv_teamisrecalling[lp_team] == false) && (gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0) && (gv_uIPeriodStats.lv_arestatsbeingdisplayed == false)) {
            if ((lp_team == 1)) {
                UnitIssueOrder(gv_Skaters[gv_Players[2]], Order(AbilityCommand("GoalieRecall", 0)), c_orderQueueReplace);
                UnitAbilityShow(gv_Skaters[gv_Players[2]], "GoalieRecall", false);
                gv_powerplay.lv_powerplayLimitTime[lp_team] = 0.0;
            }
            else {
                UnitIssueOrder(gv_Skaters[gv_Players[6]], Order(AbilityCommand("GoalieRecall", 0)), c_orderQueueReplace);
                UnitAbilityShow(gv_Skaters[gv_Players[6]], "GoalieRecall", false);
                gv_powerplay.lv_powerplayLimitTime[lp_team] = 0.0;
            }
        }

    }

    return true;
}

trigger auto_gf_Settheppuiblue_Trigger = null;
int auto_gf_Settheppuiblue_lp_uISide;

void gf_Settheppuiblue (int lp_uISide) {
    auto_gf_Settheppuiblue_lp_uISide = lp_uISide;

    if (auto_gf_Settheppuiblue_Trigger == null) {
        auto_gf_Settheppuiblue_Trigger = TriggerCreate("auto_gf_Settheppuiblue_TriggerFunc");
    }

    TriggerExecute(auto_gf_Settheppuiblue_Trigger, false, false);
}

bool auto_gf_Settheppuiblue_TriggerFunc (bool testConds, bool runActions) {
    int lp_uISide = auto_gf_Settheppuiblue_lp_uISide;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        DialogControlSetVisible(gv_powerplay.lv_ppuibar[lp_uISide], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_powerplay.lv_ppuireadytext[lp_uISide], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemColor(gv_powerplay.lv_ppuitext[lp_uISide], Color(32.55, 66.27, 100.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibg[lp_uISide], Color(0.00, 14.51, 29.02), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibar[lp_uISide], Color(0.00, 0.00, 100.00), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_Settheppuigreen_Trigger = null;
int auto_gf_Settheppuigreen_lp_uISide;

void gf_Settheppuigreen (int lp_uISide) {
    auto_gf_Settheppuigreen_lp_uISide = lp_uISide;

    if (auto_gf_Settheppuigreen_Trigger == null) {
        auto_gf_Settheppuigreen_Trigger = TriggerCreate("auto_gf_Settheppuigreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_Settheppuigreen_Trigger, false, false);
}

bool auto_gf_Settheppuigreen_TriggerFunc (bool testConds, bool runActions) {
    int lp_uISide = auto_gf_Settheppuigreen_lp_uISide;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        DialogControlSetVisible(gv_powerplay.lv_ppuireadytext[lp_uISide], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_powerplay.lv_ppuibar[lp_uISide], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibg[lp_uISide], Color(0.00, 29.02, 0.00), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_Settheppuiyellow_Trigger = null;
int auto_gf_Settheppuiyellow_lp_uISide;

void gf_Settheppuiyellow (int lp_uISide) {
    auto_gf_Settheppuiyellow_lp_uISide = lp_uISide;

    if (auto_gf_Settheppuiyellow_Trigger == null) {
        auto_gf_Settheppuiyellow_Trigger = TriggerCreate("auto_gf_Settheppuiyellow_TriggerFunc");
    }

    TriggerExecute(auto_gf_Settheppuiyellow_Trigger, false, false);
}

bool auto_gf_Settheppuiyellow_TriggerFunc (bool testConds, bool runActions) {
    int lp_uISide = auto_gf_Settheppuiyellow_lp_uISide;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        DialogControlSetVisible(gv_powerplay.lv_ppuibar[lp_uISide], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_powerplay.lv_ppuireadytext[lp_uISide], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemColor(gv_powerplay.lv_ppuitext[lp_uISide], Color(100.00, 100.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibg[lp_uISide], Color(28.24, 28.24, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibar[lp_uISide], Color(100.00, 100.00, 0.00), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_Settheppuired_Trigger = null;
int auto_gf_Settheppuired_lp_uISide;

void gf_Settheppuired (int lp_uISide) {
    auto_gf_Settheppuired_lp_uISide = lp_uISide;

    if (auto_gf_Settheppuired_Trigger == null) {
        auto_gf_Settheppuired_Trigger = TriggerCreate("auto_gf_Settheppuired_TriggerFunc");
    }

    TriggerExecute(auto_gf_Settheppuired_Trigger, false, false);
}

bool auto_gf_Settheppuired_TriggerFunc (bool testConds, bool runActions) {
    int lp_uISide = auto_gf_Settheppuired_lp_uISide;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        DialogControlSetVisible(gv_powerplay.lv_ppuibar[lp_uISide], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_powerplay.lv_ppuireadytext[lp_uISide], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemColor(gv_powerplay.lv_ppuitext[lp_uISide], Color(100.00, 20.00, 20.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibg[lp_uISide], Color(16.86, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_powerplay.lv_ppuibar[lp_uISide], Color(85.10, 0.00, 0.00), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_PulseGoalie_Trigger = null;
unit auto_gf_PulseGoalie_lp_unit;

void gf_PulseGoalie (unit lp_unit) {
    auto_gf_PulseGoalie_lp_unit = lp_unit;

    if (auto_gf_PulseGoalie_Trigger == null) {
        auto_gf_PulseGoalie_Trigger = TriggerCreate("auto_gf_PulseGoalie_TriggerFunc");
    }

    TriggerExecute(auto_gf_PulseGoalie_Trigger, false, false);
}

bool auto_gf_PulseGoalie_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_PulseGoalie_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        SoundPlayForPlayer(SoundLink("PowerplayEndWarning", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(lp_unit)), 100.0, 0.0);
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetTintColor {202,255,255 4.000000} 0.600000 Bounce");
    }

    return true;
}

trigger auto_gf_ApplyPPReadyAnimation_Trigger = null;

void gf_ApplyPPReadyAnimation () {
    if (auto_gf_ApplyPPReadyAnimation_Trigger == null) {
        auto_gf_ApplyPPReadyAnimation_Trigger = TriggerCreate("auto_gf_ApplyPPReadyAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyPPReadyAnimation_Trigger, false, false);
}

bool auto_gf_ApplyPPReadyAnimation_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_powerplay.lv_powerplayMode == true)) {
        if ((gv_pullGoalie[1] == false) && (TimerGetRemaining(gv_powerplay.lv_powerplayTimers[1]) <= 0.0)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[2]]), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
        }

        if ((gv_pullGoalie[2] == false) && (TimerGetRemaining(gv_powerplay.lv_powerplayTimers[2]) <= 0.0)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[6]]), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
        }

    }

    return true;
}

void gf_PEResetPlayerWindup () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_Possession > 0)) {
        gv_windingUp[gv_Possession] = false;
        gv_ShotCount[gv_Possession] = false;
        gv_ShotCount2[gv_Possession] = false;
        gv_decreaseShotPower[gv_Possession] = false;
        DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
        DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
    }

}

void gf_PEDisplayUIandLogGoalieShutouts () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_Period == 1) || (gv_Period == 2) || (gv_Period == 3))) {
        TextExpressionSetToken("Param/Expression/DF3FAB8B", "A", IntToText(gv_Period));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/DF3FAB8B"));
        gf_GoalieShutoutsLogScorePeriodEnd(gv_Period);
        gf_GoalieShutoutsLogtimeinnetPeriodEnd(gv_Period);
    }
    else {
        if ((gv_Period == 4) && (gv_noshootout == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B2C30E6C"));
            gf_GoalieShutoutsLogScorePeriodEnd(4);
            gf_GoalieShutoutsLogtimeinnetPeriodEnd(4);
            gv_goldenGoal = false;
        }
        else {
            if ((gv_Period >= 4) && (gv_noshootout == true)) {
                TextExpressionSetToken("Param/Expression/9DA35685", "A", IntToText(gv_overtimenumber));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/9DA35685"));
                gv_overtimenumber += 1;
                gv_goldenGoal = false;
            }

        }
    }
}

void gf_PEResetVarsandChangeLighting () {
    // Automatic Variable Declarations
    playergroup autoC1CAE9F9_g;
    int autoC1CAE9F9_var;
    playergroup auto0BE48A8E_g;
    int auto0BE48A8E_var;
    playergroup auto09B7EA11_g;
    int auto09B7EA11_var;

    // Implementation
    gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_PeriodEnd);
    gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_PeriodEnd);
    SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    gv_stoppageOfPlay = true;
    gv_Possession = -1;
    gv_stats_Shots[gv_potentialUnshot] -= 1;
    gv_potentialUnshot = 0;
    if ((gv_checkFaceoffWinner == true)) {
        gv_stats_Faceoffs[gv_Players[1]] -= 1;
        gv_stats_Faceoffs[gv_Players[5]] -= 1;
    }

    if ((gv_testteam3ui == true)) {
        auto09B7EA11_g = PlayerGroupAll();
        auto09B7EA11_var = -1;
        while (true) {
            auto09B7EA11_var = PlayerGroupNextPlayer(auto09B7EA11_g, auto09B7EA11_var);
            if (auto09B7EA11_var < 0) { break; }
            gf_StopPuckCam(auto09B7EA11_var, true);
        }
    }
    else {
        autoC1CAE9F9_g = GameAttributePlayersForTeam(3);
        autoC1CAE9F9_var = -1;
        while (true) {
            autoC1CAE9F9_var = PlayerGroupNextPlayer(autoC1CAE9F9_g, autoC1CAE9F9_var);
            if (autoC1CAE9F9_var < 0) { break; }
            gf_StopPuckCam(autoC1CAE9F9_var, true);
        }
        auto0BE48A8E_g = PlayerGroupActive();
        auto0BE48A8E_var = -1;
        while (true) {
            auto0BE48A8E_var = PlayerGroupNextPlayer(auto0BE48A8E_g, auto0BE48A8E_var);
            if (auto0BE48A8E_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[auto0BE48A8E_var] == true)) {
                gf_StopPuckCam(auto0BE48A8E_var, true);
            }

        }
    }
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    gv_FreezeUnits = true;
}

void gf_PEWait3secondandupdateperiodcircles () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_Period == 3) || (gv_Period >= 4)) && (!((gv_TeamScores[1] == gv_TeamScores[2])))) {
    }
    else {
        Wait(3.0, c_timeReal);
        if ((gv_Period == 1)) {
            libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/604A2895"), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
        }
        else {
            if ((gv_Period == 2)) {
                libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/1A72AECE"), PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            }

        }
    }
}

void gf_PEResetGoalLightingvarsanddirectivemessages () {
    // Automatic Variable Declarations
    // Implementation
    gv_stoppageOfPlay = false;
    gv_Possession = -1;
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/BCAFE748"));
}

void gf_PEUpdateLightingandScoreboardUI () {
    // Automatic Variable Declarations
    // Implementation
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, -103, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, 110, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupAll());
        if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), c_anchorTopLeft, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), c_anchorTopLeft, 60, 100);
        }

        if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), c_anchorTopRight, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), c_anchorTopRight, 60, 100);
        }

    }
    else {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, 110, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, -103, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupAll());
        if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), c_anchorTopRight, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), c_anchorTopRight, 60, 100);
        }

        if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), c_anchorTopLeft, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), c_anchorTopLeft, 60, 100);
        }

    }
}

void gf_PEActionEndofP1 () {
    // Automatic Variable Declarations
    playergroup auto2DE633F0_g;
    int auto2DE633F0_var;
    playergroup auto7B744260_g;
    int auto7B744260_var;
    playergroup auto77D8E4D2_g;
    int auto77D8E4D2_var;

    // Implementation
    TriggerExecute(gt_PeriodStats, true, false);
    Wait(2.0, c_timeGame);
    if (((GameAttributeGameValue("2") == "0003") || (gv_testredlinemode == true))) {
        TimerStart(gv_Timer, (IntToFixed(gv_redlineMode.lv_settingsPeriodLength) * 60.0), false, c_timeReal);
        gf_RedlineResetallpowerupCD();
        TimerPause(gv_Timer, true);
    }
    else {
        TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
        TimerPause(gv_Timer, true);
    }
    TriggerExecute(gt_UpdateTime, true, false);
    if ((GameAttributeGameValue("2") == "0002")) {
        gv_FaceoffTimer = (gv_initialFaceoffTimerValue + 42);
    }
    else {
        gv_FaceoffTimer = gv_initialFaceoffTimerValue;
    }
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    if ((gv_testteam3ui == true)) {
        auto77D8E4D2_g = PlayerGroupAll();
        auto77D8E4D2_var = -1;
        while (true) {
            auto77D8E4D2_var = PlayerGroupNextPlayer(auto77D8E4D2_g, auto77D8E4D2_var);
            if (auto77D8E4D2_var < 0) { break; }
            gf_StartPuckCam(auto77D8E4D2_var);
        }
    }
    else {
        auto2DE633F0_g = GameAttributePlayersForTeam(3);
        auto2DE633F0_var = -1;
        while (true) {
            auto2DE633F0_var = PlayerGroupNextPlayer(auto2DE633F0_g, auto2DE633F0_var);
            if (auto2DE633F0_var < 0) { break; }
            gf_StartPuckCam(auto2DE633F0_var);
        }
        auto7B744260_g = PlayerGroupActive();
        auto7B744260_var = -1;
        while (true) {
            auto7B744260_var = PlayerGroupNextPlayer(auto7B744260_g, auto7B744260_var);
            if (auto7B744260_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[auto7B744260_var] == true)) {
                gf_StartPuckCam(auto7B744260_var);
            }

        }
    }
    gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), true);
    gv_Period += 1;
    gf_GoalieShutoutsLogScorePeriodStart(gv_Period);
    gf_GoalieShutoutsLogtimeinnetPeriodStart(gv_Period);
    if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
        gf_RedlineEndPeriod();
        gf_RedlineRandomizeFaceoffPositions(0);
        TriggerExecute(gt_RandomizeUnits2, true, false);
        gf_RedlineStartPeriod(gv_Period);
    }
    else {
        TriggerExecute(gt_RandomizeUnits, true, false);
    }
}

void gf_PEActionEndofP2 () {
    // Automatic Variable Declarations
    playergroup auto1343F84B_g;
    int auto1343F84B_var;
    playergroup autoDE2983FB_g;
    int autoDE2983FB_var;
    playergroup autoB29C36AD_g;
    int autoB29C36AD_var;

    // Implementation
    TriggerExecute(gt_PeriodStats, true, false);
    Wait(2.0, c_timeGame);
    if (((GameAttributeGameValue("2") == "0003") || (gv_testredlinemode == true))) {
        TimerStart(gv_Timer, (IntToFixed(gv_redlineMode.lv_settingsPeriodLength) * 60.0), false, c_timeReal);
        gf_RedlineResetallpowerupCD();
        TimerPause(gv_Timer, true);
    }
    else {
        TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
        TimerPause(gv_Timer, true);
    }
    TriggerExecute(gt_UpdateTime, true, false);
    if ((GameAttributeGameValue("2") == "0002")) {
        gv_FaceoffTimer = (gv_initialFaceoffTimerValue + 42);
    }
    else {
        gv_FaceoffTimer = gv_initialFaceoffTimerValue;
    }
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    if ((gv_testteam3ui == true)) {
        autoB29C36AD_g = PlayerGroupAll();
        autoB29C36AD_var = -1;
        while (true) {
            autoB29C36AD_var = PlayerGroupNextPlayer(autoB29C36AD_g, autoB29C36AD_var);
            if (autoB29C36AD_var < 0) { break; }
            gf_StartPuckCam(autoB29C36AD_var);
        }
    }
    else {
        auto1343F84B_g = GameAttributePlayersForTeam(3);
        auto1343F84B_var = -1;
        while (true) {
            auto1343F84B_var = PlayerGroupNextPlayer(auto1343F84B_g, auto1343F84B_var);
            if (auto1343F84B_var < 0) { break; }
            gf_StartPuckCam(auto1343F84B_var);
        }
        autoDE2983FB_g = PlayerGroupActive();
        autoDE2983FB_var = -1;
        while (true) {
            autoDE2983FB_var = PlayerGroupNextPlayer(autoDE2983FB_g, autoDE2983FB_var);
            if (autoDE2983FB_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[autoDE2983FB_var] == true)) {
                gf_StartPuckCam(autoDE2983FB_var);
            }

        }
    }
    gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), true);
    gv_Period += 1;
    gf_GoalieShutoutsLogScorePeriodStart(gv_Period);
    gf_GoalieShutoutsLogtimeinnetPeriodStart(gv_Period);
    if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
        gf_RedlineEndPeriod();
        gf_RedlineRandomizeFaceoffPositions(0);
        TriggerExecute(gt_RandomizeUnits2, true, false);
        gf_RedlineStartPeriod(gv_Period);
    }
    else {
        TriggerExecute(gt_RandomizeUnits, true, false);
    }
}

void gf_PEActionEndofP3NotTied () {
    // Automatic Variable Declarations
    // Implementation
    gv_uIPeriodStats.lv_showindefinitely = true;
    TriggerExecute(gt_PeriodStats, true, false);
    TriggerExecute(gt_GameEnd, true, false);
}

void gf_PEActionEndofP3Tied () {
    // Automatic Variable Declarations
    playergroup auto3C151AD9_g;
    int auto3C151AD9_var;
    playergroup autoF00A7927_g;
    int autoF00A7927_var;
    playergroup auto21D2358F_g;
    int auto21D2358F_var;

    // Implementation
    TriggerExecute(gt_PeriodStats, true, false);
    Wait(2.0, c_timeGame);
    if ((gv_noshootout == false)) {
        libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/83755126"), PlayerGroupAll());
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
        gv_goldenGoal = true;
    }
    else {
        TextExpressionSetToken("Param/Expression/F22FDB37", "A", IntToText(gv_overtimenumber));
        libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, TextExpressionAssemble("Param/Expression/F22FDB37"), PlayerGroupAll());
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
        gv_goldenGoal = true;
    }
    if ((gv_noshootout == false)) {
        gv_goldenGoal = true;
        if ((gv_redlineMode.lv_settingsInfiniteOT == true)) {
            TimerStart(gv_Timer, 9999.0, false, c_timeReal);
            TimerPause(gv_Timer, true);
        }
        else {
            TimerStart(gv_Timer, gv_oVERTIME_LENGTH, false, c_timeReal);
            TimerPause(gv_Timer, true);
            if ((GameAttributeGameValue("2") == "0002")) {
                TimerStart(gv_Timer, 240.0, false, c_timeReal);
                TimerPause(gv_Timer, true);
            }

        }
        TriggerExecute(gt_UpdateTime, true, false);
    }
    else {
        gv_goldenGoal = true;
        TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
        TimerPause(gv_Timer, true);
        TriggerExecute(gt_UpdateTime, true, false);
    }
    if ((GameAttributeGameValue("2") == "0002")) {
        gv_FaceoffTimer = (gv_initialFaceoffTimerValue + 42);
    }
    else {
        gv_FaceoffTimer = gv_initialFaceoffTimerValue;
    }
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    if ((gv_testteam3ui == true)) {
        auto21D2358F_g = PlayerGroupAll();
        auto21D2358F_var = -1;
        while (true) {
            auto21D2358F_var = PlayerGroupNextPlayer(auto21D2358F_g, auto21D2358F_var);
            if (auto21D2358F_var < 0) { break; }
            gf_StartPuckCam(auto21D2358F_var);
        }
    }
    else {
        auto3C151AD9_g = GameAttributePlayersForTeam(3);
        auto3C151AD9_var = -1;
        while (true) {
            auto3C151AD9_var = PlayerGroupNextPlayer(auto3C151AD9_g, auto3C151AD9_var);
            if (auto3C151AD9_var < 0) { break; }
            gf_StartPuckCam(auto3C151AD9_var);
        }
        autoF00A7927_g = PlayerGroupActive();
        autoF00A7927_var = -1;
        while (true) {
            autoF00A7927_var = PlayerGroupNextPlayer(autoF00A7927_g, autoF00A7927_var);
            if (autoF00A7927_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[autoF00A7927_var] == true)) {
                gf_StartPuckCam(autoF00A7927_var);
            }

        }
    }
    gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), true);
    gv_Period += 1;
    gf_GoalieShutoutsLogScorePeriodStart(gv_Period);
    gf_GoalieShutoutsLogtimeinnetPeriodStart(gv_Period);
    if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
        gf_RedlineEndPeriod();
        gf_RedlineRandomizeFaceoffPositions(0);
        TriggerExecute(gt_RandomizeUnits2, true, false);
        gf_RedlineStartPeriod(gv_Period);
    }
    else {
        TriggerExecute(gt_RandomizeUnits, true, false);
    }
}

void gf_PEActionEndofOTShootoutAllowed () {
    // Automatic Variable Declarations
    playergroup auto4F003D4F_g;
    int auto4F003D4F_var;
    int autoF5CE8D55_ae;
    int autoF5CE8D55_var;

    // Implementation
    gv_Period = (gv_Period+1);
    auto4F003D4F_g = PlayerGroupAll();
    auto4F003D4F_var = -1;
    while (true) {
        auto4F003D4F_var = PlayerGroupNextPlayer(auto4F003D4F_g, auto4F003D4F_var);
        if (auto4F003D4F_var < 0) { break; }
        gf_ShowScoreboard3(auto4F003D4F_var, true, false);
    }
    DialogCreate(2500, 200, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((PlayerGroupCount(gv_teamPlayersGroup1) >= PlayerGroupCount(gv_teamPlayersGroup2))) {
        gv_highestActivePlayers = PlayerGroupCount(gv_teamPlayersGroup1);
    }
    else {
        gv_highestActivePlayers = PlayerGroupCount(gv_teamPlayersGroup2);
    }
    gv_shootoutRounds = (gv_highestActivePlayers * 2);
    if ((gv_highestActivePlayers == 4)) {
        gv_leftXStart = -575;
    }
    else {
        if ((gv_highestActivePlayers == 3)) {
            gv_leftXStart = -500;
        }
        else {
            if ((gv_highestActivePlayers == 2)) {
                gv_leftXStart = -425;
            }
            else {
                if ((gv_highestActivePlayers == 1)) {
                    gv_leftXStart = -350;
                }

            }
        }
    }
    autoF5CE8D55_ae = (gv_highestActivePlayers - 1);
    autoF5CE8D55_var = 0;
    for ( ; autoF5CE8D55_var <= autoF5CE8D55_ae; autoF5CE8D55_var += 1 ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTop, (gv_leftXStart + (75 * autoF5CE8D55_var)), 45, StringToText(""), "Assets\\Textures\\circleofpower_zerg_diffuse.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTop, (gv_rightXStart + (75 * autoF5CE8D55_var)), 45, StringToText(""), "Assets\\Textures\\circleofpower_protoss_diffuse.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/79A38D76"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
    gv_adv = DialogControlLastCreated();
    DialogControlSetVisible(gv_adv, PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_shootoutDialog = DialogLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/EA515D57"));
    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/14BFCBAE"), PlayerGroupAll());
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
    DialogSetVisible(gv_inGameStatsDialog, PlayerGroupAll(), false);
    gv_Shootout = true;
    TriggerExecute(gt_CheckShootoutRotate, true, false);
    TriggerExecute(gt_RandomizeUnitsShootout, true, false);
}

void gf_PEActionEndofOTShootoutNOTAllowed () {
    // Automatic Variable Declarations
    playergroup autoEEE12D3A_g;
    int autoEEE12D3A_var;
    playergroup autoF0411813_g;
    int autoF0411813_var;
    playergroup autoEE0E0026_g;
    int autoEE0E0026_var;

    // Implementation
    TriggerExecute(gt_PeriodStats, true, false);
    Wait(2.0, c_timeGame);
    gv_Period += 1;
    TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
    TimerPause(gv_Timer, true);
    TriggerExecute(gt_UpdateTime, true, false);
    if ((GameAttributeGameValue("2") == "0002")) {
        gv_FaceoffTimer = (gv_initialFaceoffTimerValue + 42);
    }
    else {
        gv_FaceoffTimer = gv_initialFaceoffTimerValue;
    }
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    if ((gv_testteam3ui == true)) {
        autoEE0E0026_g = PlayerGroupAll();
        autoEE0E0026_var = -1;
        while (true) {
            autoEE0E0026_var = PlayerGroupNextPlayer(autoEE0E0026_g, autoEE0E0026_var);
            if (autoEE0E0026_var < 0) { break; }
            gf_StartPuckCam(autoEE0E0026_var);
        }
    }
    else {
        autoEEE12D3A_g = GameAttributePlayersForTeam(3);
        autoEEE12D3A_var = -1;
        while (true) {
            autoEEE12D3A_var = PlayerGroupNextPlayer(autoEEE12D3A_g, autoEEE12D3A_var);
            if (autoEEE12D3A_var < 0) { break; }
            gf_StartPuckCam(autoEEE12D3A_var);
        }
        autoF0411813_g = PlayerGroupActive();
        autoF0411813_var = -1;
        while (true) {
            autoF0411813_var = PlayerGroupNextPlayer(autoF0411813_g, autoF0411813_var);
            if (autoF0411813_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[autoF0411813_var] == true)) {
                gf_StartPuckCam(autoF0411813_var);
            }

        }
    }
    TriggerExecute(gt_RandomizeUnits, true, false);
}

trigger auto_gf_Kick_Trigger = null;
int auto_gf_Kick_lp_player;

void gf_Kick (int lp_player) {
    auto_gf_Kick_lp_player = lp_player;

    if (auto_gf_Kick_Trigger == null) {
        auto_gf_Kick_Trigger = TriggerCreate("auto_gf_Kick_TriggerFunc");
    }

    TriggerExecute(auto_gf_Kick_Trigger, false, false);
}

bool auto_gf_Kick_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Kick_lp_player;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.0, c_timeGame);
    GameOver(lp_player, c_gameOverDefeat, false, false);
    gf_ForfeitValidate();
    TextExpressionSetToken("Param/Expression/6A28793A", "A", PlayerName(lp_player));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/6A28793A"));
    return true;
}

void gf_BanPerma (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCA6767D2_ae = 8;
    const int autoCA6767D2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoCA6767D2_ai >= 0 && lv_i <= autoCA6767D2_ae) || (autoCA6767D2_ai < 0 && lv_i >= autoCA6767D2_ae) ) ; lv_i += autoCA6767D2_ai ) {
        if ((gv_ranked == true)) {
            BankValueSetFromString(gv_Banks2[lv_i], "b", gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gf_EncodePlayerHandle(lp_player), 17), "");
            BankSave(gv_Banks2[lv_i]);
        }

    }
    gf_Kick(lp_player);
}

void gf_BLUpdate () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_k;
    int lv_l;
    bool lv_found;

    // Automatic Variable Declarations
    const int autoD0586540_ae = 8;
    const int autoD0586540_ai = 1;
    int autoA4073DD9_ae;
    const int autoA4073DD9_ai = 1;
    const int auto06F96970_ae = 8;
    const int auto06F96970_ai = 1;
    int auto4895F101_ae;
    const int auto4895F101_ai = 1;
    const int auto69EA9516_ae = 8;
    const int auto69EA9516_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoD0586540_ai >= 0 && lv_i <= autoD0586540_ae) || (autoD0586540_ai < 0 && lv_i >= autoD0586540_ae) ) ; lv_i += autoD0586540_ai ) {
        autoA4073DD9_ae = BankKeyCount(gv_Banks2[lv_i], "b");
        lv_j = 1;
        for ( ; ( (autoA4073DD9_ai >= 0 && lv_j <= autoA4073DD9_ae) || (autoA4073DD9_ai < 0 && lv_j >= autoA4073DD9_ae) ) ; lv_j += autoA4073DD9_ai ) {
            lv_k = 1;
            for ( ; ( (auto06F96970_ai >= 0 && lv_k <= auto06F96970_ae) || (auto06F96970_ai < 0 && lv_k >= auto06F96970_ae) ) ; lv_k += auto06F96970_ai ) {
                lv_found = false;
                auto4895F101_ae = BankKeyCount(gv_Banks2[lv_k], "b");
                lv_l = 1;
                for ( ; ( (auto4895F101_ai >= 0 && lv_l <= auto4895F101_ae) || (auto4895F101_ai < 0 && lv_l >= auto4895F101_ae) ) ; lv_l += auto4895F101_ai ) {
                    if ((gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(BankKeyName(gv_Banks2[lv_k], "b", lv_l), lv_k, 17) == gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(BankKeyName(gv_Banks2[lv_i], "b", lv_j), lv_i, 17))) {
                        lv_found = true;
                        break;
                    }

                }
                if ((lv_found == false)) {
                    BankValueSetFromString(gv_Banks2[lv_k], "b", BankKeyName(gv_Banks2[lv_i], "b", lv_j), "");
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto69EA9516_ai >= 0 && lv_i <= auto69EA9516_ae) || (auto69EA9516_ai < 0 && lv_i >= auto69EA9516_ae) ) ; lv_i += auto69EA9516_ai ) {
        if ((gv_ranked == true)) {
            BankSave(gv_Banks2[lv_i]);
        }

    }
}

void gf_BLCheck () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_k;
    string lv_h;

    // Automatic Variable Declarations
    const int autoEEC7ED05_ae = 8;
    const int autoEEC7ED05_ai = 1;
    int auto9AC8B194_ae;
    const int auto9AC8B194_ai = 1;
    const int autoD9336E51_ae = 8;
    const int autoD9336E51_ai = 1;

    // Variable Initialization
    lv_h = "";

    // Implementation
    lv_i = 1;
    for ( ; ( (autoEEC7ED05_ai >= 0 && lv_i <= autoEEC7ED05_ae) || (autoEEC7ED05_ai < 0 && lv_i >= autoEEC7ED05_ae) ) ; lv_i += autoEEC7ED05_ai ) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            auto9AC8B194_ae = BankKeyCount(gv_Banks2[lv_i], "b");
            lv_j = 1;
            for ( ; ( (auto9AC8B194_ai >= 0 && lv_j <= auto9AC8B194_ae) || (auto9AC8B194_ai < 0 && lv_j >= auto9AC8B194_ae) ) ; lv_j += auto9AC8B194_ai ) {
                lv_h = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(BankKeyName(gv_Banks2[lv_i], "b", lv_j), lv_i, 17);
                lv_k = 1;
                for ( ; ( (autoD9336E51_ai >= 0 && lv_k <= autoD9336E51_ae) || (autoD9336E51_ai < 0 && lv_k >= autoD9336E51_ae) ) ; lv_k += autoD9336E51_ai ) {
                    if ((gf_EncodePlayerHandle(lv_k) != "") && (gf_EncodePlayerHandle(lv_k) == lv_h)) {
                        gf_Kick(lv_k);
                    }

                }
            }
            break;
        }

    }
}

void gf_InitializeZHLVariables () {
    // Automatic Variable Declarations
    // Implementation
    gv_teamNames[1] = "Zenn Freeze";
    gv_teamNames[2] = "Kaldir Yetis";
    gv_teamNames[3] = "Korhal Warpigs";
    gv_teamNames[4] = "Mar Sara Threat Agents";
    gv_teamNames[5] = "New Gettysburg Flyers";
    gv_teamNames[6] = "Tarsonis City Tigers";
    gv_teamNames[7] = "Zerus Redlings";
    gv_teamNames[8] = "Shakuras Inquisition";
    gv_teamColors[1] = 3;
    gv_teamColors[2] = 0;
    gv_teamColors[3] = 2;
    gv_teamColors[4] = 7;
    gv_teamColors[5] = 6;
    gv_teamColors[6] = 5;
    gv_teamColors[7] = 1;
    gv_teamColors[8] = 4;
    gv_teamLogos[1] = "ZHL01";
    gv_teamLogos[2] = "ZHL02";
    gv_teamLogos[3] = "ZHL03";
    gv_teamLogos[4] = "ZHL04";
    gv_teamLogos[5] = "ZHL05";
    gv_teamLogos[6] = "ZHL06";
    gv_teamLogos[7] = "ZHL07";
    gv_teamLogos[8] = "ZHL08";
}

void gf_CreateUnitsColor () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int autoECDF811D_ae = 8;
    const int autoECDF811D_ai = 1;
    const int auto6441E5ED_ae = 8;
    const int auto6441E5ED_ai = 1;
    const int autoE0C74157_ae = 4;
    const int autoE0C74157_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoECDF811D_ai >= 0 && lv_i <= autoECDF811D_ae) || (autoECDF811D_ai < 0 && lv_i >= autoECDF811D_ae) ) ; lv_i += autoECDF811D_ai ) {
        if ((gv_teamName1 == gv_teamNames[lv_i])) {
            lv_j = 1;
            for ( ; ( (autoE0C74157_ai >= 0 && lv_j <= autoE0C74157_ae) || (autoE0C74157_ai < 0 && lv_j >= autoE0C74157_ae) ) ; lv_j += autoE0C74157_ai ) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_Players[lv_j]], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i]), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i])));
                TextTagSetColor(gv_TextTags[gv_Players[lv_j]], c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i]));
            }
        }
        else {
            if ((gv_teamName2 == gv_teamNames[lv_i])) {
                lv_j = 5;
                for ( ; ( (auto6441E5ED_ai >= 0 && lv_j <= auto6441E5ED_ae) || (auto6441E5ED_ai < 0 && lv_j >= auto6441E5ED_ae) ) ; lv_j += auto6441E5ED_ai ) {
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_Players[lv_j]], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i]), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i])));
                    TextTagSetColor(gv_TextTags[gv_Players[lv_j]], c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_i]));
                }
            }

        }
    }
}

void gf_CreateTeamLogos () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int autoF1F34917_ae = 8;
    const int autoF1F34917_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoF1F34917_ai >= 0 && lv_i <= autoF1F34917_ae) || (autoF1F34917_ai < 0 && lv_i >= autoF1F34917_ae) ) ; lv_i += autoF1F34917_ai ) {
        if ((gv_teamName1 == gv_teamNames[lv_i])) {
            UnitRemove(gv_teamLogoUnits[1]);
            UnitCreate(1, gv_teamLogos[lv_i], 0, 0, PointWithOffset(PointFromId(112), -20.0, 0.0), 270.0);
            gv_teamLogoUnits[1] = UnitLastCreated();
        }
        else {
            if ((gv_teamName2 == gv_teamNames[lv_i])) {
                UnitRemove(gv_teamLogoUnits[2]);
                UnitCreate(1, gv_teamLogos[lv_i], 0, 0, PointWithOffset(PointFromId(112), 20.0, 0.0), 270.0);
                gv_teamLogoUnits[2] = UnitLastCreated();
            }

        }
    }
}

void gf_computevotesneeded (bool lp_showmessage) {
    // Variable Declarations
    int lv_playerChecked;
    int lv_playersInGame;

    // Automatic Variable Declarations
    playergroup autoEDE11AD7_g;
    playergroup autoC58FC895_g;

    // Variable Initialization

    // Implementation
    gv_activePlayersOnT1 = PlayerGroupEmpty();
    gv_activePlayersOnT2 = PlayerGroupEmpty();
    autoEDE11AD7_g = gv_actualPlayerzonTeam[1];
    lv_playerChecked = -1;
    while (true) {
        lv_playerChecked = PlayerGroupNextPlayer(autoEDE11AD7_g, lv_playerChecked);
        if (lv_playerChecked < 0) { break; }
        if ((PlayerStatus(lv_playerChecked) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_activePlayersOnT1, lv_playerChecked);
        }

    }
    autoC58FC895_g = gv_actualPlayerzonTeam[2];
    lv_playerChecked = -1;
    while (true) {
        lv_playerChecked = PlayerGroupNextPlayer(autoC58FC895_g, lv_playerChecked);
        if (lv_playerChecked < 0) { break; }
        if ((PlayerStatus(lv_playerChecked) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_activePlayersOnT2, lv_playerChecked);
        }

    }
    lv_playersInGame = PlayerGroupCount(gv_activePlayersOnT1);
    lv_playersInGame += PlayerGroupCount(gv_activePlayersOnT2);
    gv_vOTES_NEEDED_TO_PASS = ((lv_playersInGame / 2) + 1);
    if ((lp_showmessage == true)) {
        TextExpressionSetToken("Param/Expression/4347A647", "A", IntToText(gv_vOTES_NEEDED_TO_PASS));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/4347A647"));
    }

}

void gf_votestarted () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1EFD1C92_ae = 15;
    const int auto1EFD1C92_ai = 1;

    // Variable Initialization

    // Implementation
    gf_computevotesneeded(false);
    lv_i = 1;
    for ( ; ( (auto1EFD1C92_ai >= 0 && lv_i <= auto1EFD1C92_ae) || (auto1EFD1C92_ai < 0 && lv_i >= auto1EFD1C92_ae) ) ; lv_i += auto1EFD1C92_ai ) {
        gv_pLAYER_HAS_VOTED_THIS_ROUND[gv_Players[lv_i]] = false;
    }
    TimerStart(gv_vOTE_TIMER, 45.0, false, c_timeGame);
}

trigger auto_gf_Waitforproperreset_Trigger = null;

void gf_Waitforproperreset () {
    if (auto_gf_Waitforproperreset_Trigger == null) {
        auto_gf_Waitforproperreset_Trigger = TriggerCreate("auto_gf_Waitforproperreset_TriggerFunc");
    }

    TriggerExecute(auto_gf_Waitforproperreset_Trigger, false, false);
}

bool auto_gf_Waitforproperreset_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_stoppageOfPlay == true) || (gv_FaceoffTimer > 0) || (gv_uIPeriodStats.lv_arestatsbeingdisplayed == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/98D011E2"));
    }

    while (((gv_stoppageOfPlay == true) || (gv_FaceoffTimer > 0) || (gv_uIPeriodStats.lv_arestatsbeingdisplayed == true))) {
        Wait(0.0625, c_timeGame);
    }
    gf_RestartRedlineGame();
    return true;
}

void gf_RestartRedlineGame () {
    // Automatic Variable Declarations
    const int auto7E3326D4_ae = 8;
    int auto7E3326D4_var;
    playergroup auto28E3F5B1_g;
    int auto28E3F5B1_var;
    playergroup auto1F12684F_g;
    int auto1F12684F_var;
    playergroup autoD4BE6129_g;
    int autoD4BE6129_var;

    // Implementation
    auto7E3326D4_var = 1;
    for ( ; auto7E3326D4_var <= auto7E3326D4_ae; auto7E3326D4_var += 1 ) {
        gv_redlineMode.lv_restartVotes[auto7E3326D4_var] = false;
        CameraLockInput(auto7E3326D4_var, false);
    }
    if ((gv_Possession != -1)) {
        gv_windingUp[gv_Possession] = false;
        gv_ShotCount[gv_Possession] = false;
        gv_ShotCount2[gv_Possession] = false;
        gv_decreaseShotPower[gv_Possession] = false;
        DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
        DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
    }

    TriggerExecute(gt_RemoveUnits, true, false);
    gv_Possession = -1;
    gv_NoCount = true;
    gv_stoppageOfPlay = true;
    gv_Period = 1;
    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/DAC77566"), PlayerGroupAll());
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
    gv_uIPeriodStats.lv_timesshownAKAperiod = 1;
    TimerPause(gv_Timer, true);
    SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    if ((gv_testteam3ui == true)) {
        autoD4BE6129_g = PlayerGroupAll();
        autoD4BE6129_var = -1;
        while (true) {
            autoD4BE6129_var = PlayerGroupNextPlayer(autoD4BE6129_g, autoD4BE6129_var);
            if (autoD4BE6129_var < 0) { break; }
            gf_StopPuckCam(autoD4BE6129_var, true);
        }
    }
    else {
        auto28E3F5B1_g = GameAttributePlayersForTeam(3);
        auto28E3F5B1_var = -1;
        while (true) {
            auto28E3F5B1_var = PlayerGroupNextPlayer(auto28E3F5B1_g, auto28E3F5B1_var);
            if (auto28E3F5B1_var < 0) { break; }
            gf_StopPuckCam(auto28E3F5B1_var, true);
        }
        auto1F12684F_g = PlayerGroupActive();
        auto1F12684F_var = -1;
        while (true) {
            auto1F12684F_var = PlayerGroupNextPlayer(auto1F12684F_g, auto1F12684F_var);
            if (auto1F12684F_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[auto1F12684F_var] == true)) {
                gf_StopPuckCam(auto1F12684F_var, true);
            }

        }
    }
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
    TriggerStop(gt_UpdateTime);
    TriggerStop(gt_UpdateTimer);
    gv_uIPeriodStats.lv_showindefinitely = false;
    gv_uIPeriodStats.lv_arestatsbeingdisplayed = false;
    DialogDestroy(gv_uIPeriodStats.lv_canvasDialog);
    DialogDestroy(gv_uIPeriodStats.lv_mainStatsDialog);
    DialogDestroy(gv_uIPeriodStats.lv_nextperioddialog);
    DialogDestroy(gv_uIPeriodStats.lv_statexportdialog);
    DialogDestroy(gv_uIPeriodStats.lv_switchviewdialog);
    DialogDestroy(gv_uIPeriodStats.lv_statgraphsdialog);
    DialogDestroy(gv_uIPeriodStats.lv_shotheatmapdialog);
    DialogDestroy(gv_heatmapVars.lv_heatmapDialogContainer);
    gf_ResetTeams();
    gf_ResetAllStats();
    gf_CreateRedlineUI();
}

void gf_ResetAllStats () {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    const int auto38B19346_ae = 8;
    int auto38B19346_var;
    const int auto8E34BDDB_ae = 15;
    const int auto8E34BDDB_ai = 1;

    // Variable Initialization

    // Implementation
    gv_shootoutScore[1] = 0;
    gv_shootoutScore[2] = 0;
    gv_TeamScores[1] = 0;
    gv_TeamScores[2] = 0;
    gv_TeamScores[3] = 0;
    TextExpressionSetToken("Param/Expression/2F074657", "A", IntToText(gv_TeamScores[1]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/2F074657"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/E97908DE", "A", IntToText(gv_TeamScores[2]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/E97908DE"), PlayerGroupAll());
    gv_shootoutCheckScore1 = 0;
    gv_shootoutCheckScore2 = 0;
    gv_uIPeriodStats.lv_winningteamred1blue2 = 0;
    TextExpressionSetToken("Param/Expression/4A3FB268", "A", IntToText(gv_TeamScores[1]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/4A3FB268"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/B12AFBF7", "A", IntToText(gv_TeamScores[2]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/B12AFBF7"), PlayerGroupAll());
    auto38B19346_var = 1;
    for ( ; auto38B19346_var <= auto38B19346_ae; auto38B19346_var += 1 ) {
        gv_redlineMode.lv_saves[auto38B19346_var] = 0;
        gv_redlineMode.lv_shotsonGoal[auto38B19346_var] = 0;
    }
    lv_enumint = 1;
    for ( ; ( (auto8E34BDDB_ai >= 0 && lv_enumint <= auto8E34BDDB_ae) || (auto8E34BDDB_ai < 0 && lv_enumint >= auto8E34BDDB_ae) ) ; lv_enumint += auto8E34BDDB_ai ) {
        gv_inGameStatsAssists[lv_enumint] = 0;
        gv_inGameStatsBlocks[lv_enumint] = 0;
        gv_inGameStatsGoalieAllow[lv_enumint] = 0;
        gv_inGameStatsGoalieBlock[lv_enumint] = 0;
        gv_inGameStatsGoals[lv_enumint] = 0;
        gv_inGameStatsPassedTo[lv_enumint] = 0;
        gv_inGameStatsPasses[lv_enumint] = 0;
        gv_inGameStatsPossesionTime[lv_enumint] = 0;
        gv_inGameStatsSteals[lv_enumint] = 0;
        gv_inGameStatsTurnovers[lv_enumint] = 0;
        gv_inGameStatsTurnovers[lv_enumint] = 0;
        TimerRestart(gv_timeinnet.lv_nettimeTimers[lv_enumint]);
        TimerPause(TimerLastStarted(), true);
    }
}

void gf_ResetTeams () {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    playergroup auto6237781F_g;
    int auto6237781F_var;
    playergroup autoAFC4CBA7_g;
    int autoAFC4CBA7_var;

    // Variable Initialization

    // Implementation
    PlayerGroupClear(gv_actualPlayerzonTeam[1]);
    PlayerGroupClear(gv_actualPlayerzonTeam[2]);
    PlayerGroupClear(gv_teamPlayersGroup1);
    PlayerGroupClear(gv_teamPlayersGroup2);
    auto6237781F_g = GameAttributePlayersForTeam(1);
    auto6237781F_var = -1;
    while (true) {
        auto6237781F_var = PlayerGroupNextPlayer(auto6237781F_g, auto6237781F_var);
        if (auto6237781F_var < 0) { break; }
        PlayerSetColorIndex(auto6237781F_var, 0, true);
    }
    autoAFC4CBA7_g = GameAttributePlayersForTeam(2);
    autoAFC4CBA7_var = -1;
    while (true) {
        autoAFC4CBA7_var = PlayerGroupNextPlayer(autoAFC4CBA7_g, autoAFC4CBA7_var);
        if (autoAFC4CBA7_var < 0) { break; }
        PlayerSetColorIndex(autoAFC4CBA7_var, 0, true);
    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
}

trigger auto_gf_RedlineCheckforsaves_Trigger = null;

void gf_RedlineCheckforsaves () {
    if (auto_gf_RedlineCheckforsaves_Trigger == null) {
        auto_gf_RedlineCheckforsaves_Trigger = TriggerCreate("auto_gf_RedlineCheckforsaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineCheckforsaves_Trigger, false, false);
}

bool auto_gf_RedlineCheckforsaves_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_time < 3.0)) {
        if ((gv_Possession == gv_Players[2])) {
            gv_redlineMode.lv_saves[gv_Players[2]] += 1;
            break;
        }

        if ((gv_Possession > 0)) {
            break;
        }

        lv_time += 0.0625;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_RedlineTakebackwaitforpossession (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    while ((libNtve_gf_UnitInRegion(gv_pUCK, lp_region) == true)) {
        if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[3]))) {
            gf_RedlineSetRoles(1, 2);
            gf_RedlineSetGhosted(0);
        }
        else {
            if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[7]))) {
                gf_RedlineSetRoles(2, 1);
                gf_RedlineSetGhosted(0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
}

trigger auto_gf_RedlineGoalScoredLighting_Trigger = null;

void gf_RedlineGoalScoredLighting () {
    if (auto_gf_RedlineGoalScoredLighting_Trigger == null) {
        auto_gf_RedlineGoalScoredLighting_Trigger = TriggerCreate("auto_gf_RedlineGoalScoredLighting_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGoalScoredLighting_Trigger, false, false);
}

bool auto_gf_RedlineGoalScoredLighting_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_GoalScored);
    gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_GoalScored);
    Wait(3.0, c_timeGame);
    gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_FaceoffStartReverttonormalstate);
    gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_FaceoffStartReverttonormalstate);
    return true;
}

trigger auto_gf_RedlineStartPeriod_Trigger = null;
int auto_gf_RedlineStartPeriod_lp_period;

void gf_RedlineStartPeriod (int lp_period) {
    auto_gf_RedlineStartPeriod_lp_period = lp_period;

    if (auto_gf_RedlineStartPeriod_Trigger == null) {
        auto_gf_RedlineStartPeriod_Trigger = TriggerCreate("auto_gf_RedlineStartPeriod_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineStartPeriod_Trigger, false, false);
}

bool auto_gf_RedlineStartPeriod_TriggerFunc (bool testConds, bool runActions) {
    int lp_period = auto_gf_RedlineStartPeriod_lp_period;

    // Variable Declarations
    bool lv_rightside;
    bool lv_leftside;
    int lv_enumint;

    // Automatic Variable Declarations
    playergroup auto44538C27_g;
    playergroup autoA8436966_g;
    playergroup autoF3361090_g;
    int autoF3361090_var;

    // Variable Initialization
    lv_rightside = true;
    lv_leftside = true;

    // Implementation
    gf_RedlineResetallpowerupCD();
    if ((gv_redlineMode.lv_goalieHelperDialog != c_invalidDialogId)) {
        DialogDestroy(gv_redlineMode.lv_goalieHelperDialog);
    }

    DialogCreate(500, 100, c_anchorTop, 0, 60, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_redlineMode.lv_goalieHelperDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/652811A9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_redlineMode.lv_goalieHelperDialogText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    auto44538C27_g = PlayerGroupActive();
    lv_enumint = -1;
    while (true) {
        lv_enumint = PlayerGroupNextPlayer(auto44538C27_g, lv_enumint);
        if (lv_enumint < 0) { break; }
        if ((lv_enumint != gv_Players[1]) && (lv_enumint != gv_Players[3]) && (lv_enumint != gv_Players[5]) && (lv_enumint != gv_Players[7])) {
            DialogSetVisible(gv_redlineMode.lv_goalieHelperDialog, PlayerGroupSingle(lv_enumint), true);
        }

    }
    gf_RedlineSetHelperDialogText(0);
    if ((ModI(gv_Period, 2) == 1) && (gv_Shootout == false)) {
        lv_rightside = false;
        lv_leftside = true;
        TriggerEnable(gt_PuckEntersOOBLeft, false);
        TriggerEnable(gt_PuckEntersTakebackLeft, false);
        TriggerEnable(gt_GoalieEntersLeftHalf, false);
        TriggerEnable(gt_PuckEntersOOBRight, true);
        TriggerEnable(gt_PuckEntersTakebackRight, true);
        TriggerEnable(gt_GoalieEntersRightHalf, true);
    }
    else {
        if ((ModI(gv_Period, 2) != 1) && (gv_Shootout == false)) {
            lv_rightside = true;
            lv_leftside = false;
            TriggerEnable(gt_PuckEntersOOBLeft, true);
            TriggerEnable(gt_PuckEntersTakebackLeft, true);
            TriggerEnable(gt_GoalieEntersLeftHalf, true);
            TriggerEnable(gt_PuckEntersOOBRight, false);
            TriggerEnable(gt_PuckEntersTakebackRight, false);
            TriggerEnable(gt_GoalieEntersRightHalf, false);
        }
        else {
            if ((gv_Shootout == true)) {
                lv_rightside = true;
                lv_leftside = true;
                TriggerEnable(gt_PuckEntersOOBLeft, false);
                TriggerEnable(gt_PuckEntersTakebackLeft, false);
                TriggerEnable(gt_PuckEntersOOBRight, false);
                TriggerEnable(gt_PuckEntersTakebackRight, false);
                TriggerEnable(gt_GoalieEntersLeftHalf, false);
                TriggerEnable(gt_GoalieEntersRightHalf, false);
            }

        }
    }
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(220)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(221)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(241)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(242)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(245)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(246)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(240)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(239)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(244)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(243)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(52)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), ActorFromDoodad(DoodadFromId(1383742038)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(248)), lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBLineLeft, lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBLineLeft2, lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBZoneLeft, lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBTextLeft, lv_rightside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(219)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(218)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(237)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(238)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(233)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(234)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(236)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(235)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(232)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(222)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(130)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), ActorFromDoodad(DoodadFromId(1444566333)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(247)), lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBLineRight, lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBLineRight2, lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBZoneRight, lv_leftside);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_oOBTextRight, lv_leftside);
    gf_RedlineGoalLockIndicators(PlayerGroupAll(), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_normalLine, false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_takebackLine, false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_middleCircle, true);
    autoA8436966_g = PlayerGroupActive();
    lv_enumint = -1;
    while (true) {
        lv_enumint = PlayerGroupNextPlayer(autoA8436966_g, lv_enumint);
        if (lv_enumint < 0) { break; }
        if ((PlayerStatus(lv_enumint) == c_playerStatusActive) && (lv_enumint != gv_Players[1]) && (lv_enumint != gv_Players[3]) && (lv_enumint != gv_Players[5]) && (lv_enumint != gv_Players[7])) {
            gf_RedlineGoalLockIndicators(PlayerGroupSingle(lv_enumint), false);
        }

    }
    gv_redlineMode.lv_searchingforInitialPossession = true;
    gv_redlineMode.lv_lastteamtohavepossession = 0;
    gv_redlineMode.lv_timerpauseduntiltakeback = false;
    gv_redlineMode.lv_canagoalbescored = true;
    TriggerEnable(gt_RedlineIdentifyInitialRoleFaceoff, true);
    gf_RedlineSetGhosted(0);
    gv_FreezeUnits = false;
    autoF3361090_g = PlayerGroupAll();
    autoF3361090_var = -1;
    while (true) {
        autoF3361090_var = PlayerGroupNextPlayer(autoF3361090_g, autoF3361090_var);
        if (autoF3361090_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], autoF3361090_var) == true)) {
            DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(autoF3361090_var), c_anchorBottom, 0, -20);
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(autoF3361090_var), c_anchorBottomRight, 0, 0);
            DialogSetPosition(gv_PowerBarDialog[autoF3361090_var], c_anchorBottom, 0, 300);
        }
        else {
            UISetFrameVisible(PlayerGroupSingle(autoF3361090_var), c_syncFrameTypeAllianceButton, false);
            DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(autoF3361090_var), c_anchorBottom, 0, -9999);
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(autoF3361090_var), c_anchorBottomRight, 0, -9999);
            DialogSetPosition(gv_PowerBarDialog[autoF3361090_var], c_anchorBottom, 0, 150);
        }
    }
    return true;
}

void gf_RedlineEndPeriod () {
    // Automatic Variable Declarations
    playergroup auto5D317154_g;
    int auto5D317154_var;
    playergroup autoD652AD69_g;
    int autoD652AD69_var;

    // Implementation
    gv_redlineMode.lv_searchingforInitialPossession = false;
    gv_redlineMode.lv_lastteamtohavepossession = 0;
    gv_redlineMode.lv_timerpauseduntiltakeback = false;
    gf_RedlineSetRoles(0, 0);
    gf_RedlineGoalLockIndicators(PlayerGroupAll(), false);
    gf_RedlineSetGhosted(0);
    gf_RedlineRemoveAllPowerups();
    auto5D317154_g = gv_actualPlayerzonTeam[1];
    auto5D317154_var = -1;
    while (true) {
        auto5D317154_var = PlayerGroupNextPlayer(auto5D317154_g, auto5D317154_var);
        if (auto5D317154_var < 0) { break; }
        gf_RedlineRemovechargeshot(auto5D317154_var);
    }
    autoD652AD69_g = gv_actualPlayerzonTeam[2];
    autoD652AD69_var = -1;
    while (true) {
        autoD652AD69_var = PlayerGroupNextPlayer(autoD652AD69_g, autoD652AD69_var);
        if (autoD652AD69_var < 0) { break; }
        gf_RedlineRemovechargeshot(autoD652AD69_var);
    }
}

void gf_RedlineGoalScoredUpdater () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_redlineMode.lv_settingsFreeplay == true)) {
        if ((gf_ShooterIsTeam1() == true) && (gv_ShootingPlayer != gv_redlineMode.lv_permagoalie)) {
            gv_TeamScores[1] += 1;
            gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
            if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[gv_ShootingPlayer] > 0)) {
                gv_TeamScores[1] += 1;
                gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                gf_RedlineDoubleGoalMessage();
            }

            SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
            gf_RedlineGoalScoredLighting();
            gf_RedlineCheckifOT();
        }
        else {
            if ((gf_ShooterIsTeam2() == true) && (gv_ShootingPlayer != gv_redlineMode.lv_permagoalie)) {
                gv_TeamScores[2] += 1;
                gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[gv_ShootingPlayer] > 0)) {
                    gv_TeamScores[2] += 1;
                    gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                    gf_RedlineDoubleGoalMessage();
                }

                SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                gf_RedlineGoalScoredLighting();
                gf_RedlineCheckifOT();
            }

        }
        TextExpressionSetToken("Param/Expression/1AD215D3", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/1AD215D3"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/60D76486", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/60D76486"), PlayerGroupAll());
        return ;
    }
    else {
        if ((gv_uIPeriodStats.lv_showindefinitely == false)) {
            if ((gf_ShooterIsTeam1() == true) && (gv_redlineMode.lv_offensiveTeam == 1) && (gv_ShootingPlayer != gv_redlineMode.lv_permagoalie) && (gv_redlineMode.lv_canagoalbescored == true)) {
                gv_redlineMode.lv_canagoalbescored = false;
                gv_TeamScores[1] += 1;
                gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[gv_ShootingPlayer] > 0)) {
                    gv_TeamScores[1] += 1;
                    gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                    gf_RedlineDoubleGoalMessage();
                }

                SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                gf_RedlineGoalScoredLighting();
                gf_RedlineSetGhosted(1);
                gv_redlineMode.lv_timerpauseduntiltakeback = true;
                TimerPause(gv_Timer, true);
                gf_RedlineCheckifOT();
            }
            else {
                if ((gf_ShooterIsTeam2() == true) && (gv_redlineMode.lv_offensiveTeam == 2) && (gv_ShootingPlayer != gv_redlineMode.lv_permagoalie) && (gv_redlineMode.lv_canagoalbescored == true)) {
                    gv_redlineMode.lv_canagoalbescored = false;
                    gv_TeamScores[2] += 1;
                    gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                    if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[gv_ShootingPlayer] > 0)) {
                        gv_TeamScores[2] += 1;
                        gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
                        gf_RedlineDoubleGoalMessage();
                    }

                    SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                    gf_RedlineGoalScoredLighting();
                    gf_RedlineSetGhosted(2);
                    gv_redlineMode.lv_timerpauseduntiltakeback = true;
                    TimerPause(gv_Timer, true);
                    gf_RedlineCheckifOT();
                }
                else {
                    if ((gv_ShootingPlayer == gv_redlineMode.lv_permagoalie) && (gv_redlineMode.lv_canagoalbescored == true)) {
                        if ((gv_redlineMode.lv_offensiveTeam == 1) && (gv_redlineMode.lv_whatteamiscurrentlyghosted != 1)) {
                            gv_redlineMode.lv_canagoalbescored = false;
                            gv_TeamScores[1] += 1;
                            SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                            gf_RedlineGoalScoredLighting();
                            gf_RedlineSetGhosted(1);
                            gv_redlineMode.lv_timerpauseduntiltakeback = true;
                            TimerPause(gv_Timer, true);
                            gf_RedlineCheckifOT();
                        }
                        else {
                            if ((gv_redlineMode.lv_offensiveTeam == 2) && (gv_redlineMode.lv_whatteamiscurrentlyghosted != 2)) {
                                gv_redlineMode.lv_canagoalbescored = false;
                                gv_TeamScores[2] += 1;
                                SoundPlayForPlayer(SoundLink("RedlineGoal", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                                gf_RedlineGoalScoredLighting();
                                gf_RedlineSetGhosted(2);
                                gv_redlineMode.lv_timerpauseduntiltakeback = true;
                                TimerPause(gv_Timer, true);
                                gf_RedlineCheckifOT();
                            }
                            else {
                                SoundPlayForPlayer(SoundLink("RedlineGoalFAIL", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/682E271F"));
                                gf_RedlineForceFaceoff(0, StringToText(""));
                            }
                        }
                    }
                    else {
                        if ((gv_redlineMode.lv_offensiveTeam == 0)) {
                            SoundPlayForPlayer(SoundLink("RedlineGoalFAIL", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5D4F751A"));
                            gf_RedlineForceFaceoff(0, StringToText(""));
                        }
                        else {
                            SoundPlayForPlayer(SoundLink("RedlineGoalFAIL", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A3810529"));
                            if ((gv_redlineMode.lv_defensiveTeam == 1)) {
                                gf_RedlineForceFaceoff(2, StringToText(""));
                            }
                            else {
                                if ((gv_redlineMode.lv_defensiveTeam == 2)) {
                                    gf_RedlineForceFaceoff(1, StringToText(""));
                                }

                            }
                        }
                    }
                }
            }
        }

    }
}

void gf_RedlineCheckifOT () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_goldenGoal == true)) {
        gv_uIPeriodStats.lv_showindefinitely = true;
        TriggerExecute(gt_PeriodStats, true, false);
        gv_goldenGoal = false;
        TimerPause(gv_Timer, true);
        gv_FreezeUnits = true;
    }

}

trigger auto_gf_RedlineIncrementGoalieSave_Trigger = null;

void gf_RedlineIncrementGoalieSave () {
    if (auto_gf_RedlineIncrementGoalieSave_Trigger == null) {
        auto_gf_RedlineIncrementGoalieSave_Trigger = TriggerCreate("auto_gf_RedlineIncrementGoalieSave_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineIncrementGoalieSave_Trigger, false, false);
}

bool auto_gf_RedlineIncrementGoalieSave_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_redlineMode.lv_shieldblockAccepted == false)) {
        gv_redlineMode.lv_shieldblockAccepted = true;
        gv_redlineMode.lv_saves[gv_Players[2]] += 1;
        Wait(2.0, c_timeGame);
        gv_redlineMode.lv_shieldblockAccepted = false;
    }

    return true;
}

trigger auto_gf_RedlineDoubleGoalMessage_Trigger = null;

void gf_RedlineDoubleGoalMessage () {
    if (auto_gf_RedlineDoubleGoalMessage_Trigger == null) {
        auto_gf_RedlineDoubleGoalMessage_Trigger = TriggerCreate("auto_gf_RedlineDoubleGoalMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineDoubleGoalMessage_Trigger, false, false);
}

bool auto_gf_RedlineDoubleGoalMessage_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0F7C5742"));
    SoundPlayForPlayer(SoundLink("RedlineTakeback26", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    Wait(2.5, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_RedlineInitPowerupSpawn_Trigger = null;

void gf_RedlineInitPowerupSpawn () {
    if (auto_gf_RedlineInitPowerupSpawn_Trigger == null) {
        auto_gf_RedlineInitPowerupSpawn_Trigger = TriggerCreate("auto_gf_RedlineInitPowerupSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineInitPowerupSpawn_Trigger, false, false);
}

bool auto_gf_RedlineInitPowerupSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_redlinePowerups.lv_arepowerupsabletospawn = true;
    gv_redlinePowerups.lv_arepowerupsaloudtoexist = true;
    gv_redlinePowerups.lv_leftsidespawnregion[1] = RegionRect(70.38, 81.37, 135.11, 100.19);
    gv_redlinePowerups.lv_leftsidespawnregion[2] = RegionRect(84.85, 101.47, 134.23, 120.39);
    gv_redlinePowerups.lv_leftsidespawnregion[3] = RegionRect(70.83, 122.31, 134.27, 140.33);
    gv_redlinePowerups.lv_leftsidespawnregion[4] = RegionRect(59.9, 91.63, 69.49, 130.96);
    gv_redlinePowerups.lv_rightsidespawnregion[1] = RegionRect(119.92, 81.94, 184.64, 100.77);
    gv_redlinePowerups.lv_rightsidespawnregion[2] = RegionRect(186.69, 91.76, 196.2, 130.98);
    gv_redlinePowerups.lv_rightsidespawnregion[3] = RegionRect(120.4, 122.78, 183.77, 141.16);
    gv_redlinePowerups.lv_rightsidespawnregion[4] = RegionRect(121.86, 101.99, 171.33, 121.44);
    while ((gv_redlinePowerups.lv_arepowerupsabletospawn == true)) {
        lv_randomint = RandomInt(1, 25);
        if ((lv_randomint == 5) && (gv_redlinePowerups.lv_arepowerupsaloudtoexist == true) && (gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
            gf_RedlineCreatePowerup();
        }

        Wait(1.0, c_timeGame);
    }
    gf_RedlineRemoveAllPowerups();
    return true;
}

trigger auto_gf_RedlineCreatePowerup_Trigger = null;

void gf_RedlineCreatePowerup () {
    if (auto_gf_RedlineCreatePowerup_Trigger == null) {
        auto_gf_RedlineCreatePowerup_Trigger = TriggerCreate("auto_gf_RedlineCreatePowerup_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineCreatePowerup_Trigger, false, false);
}

bool auto_gf_RedlineCreatePowerup_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_canceled;
    actor lv_powerupActor;
    actor lv_powerupActorGlow;
    unitgroup lv_possibleUnits;
    point lv_powerupPoint;
    fixed lv_timeElapsed;
    bool lv_hasrunfadeout;
    int lv_powerupType;

    // Automatic Variable Declarations
    unitgroup auto846B0EBF_g;
    int auto846B0EBF_u;
    unit auto846B0EBF_var;

    // Variable Initialization
    lv_possibleUnits = UnitGroupEmpty();

    // Implementation
    lv_powerupType = RandomInt(1, 6);
    if (((gv_Period == 1) || (gv_Period == 3))) {
        lv_powerupPoint = RegionRandomPoint(gv_redlinePowerups.lv_leftsidespawnregion[RandomInt(1, 4)]);
    }
    else {
        if (((gv_Period == 4) || (gv_Period == 2))) {
            lv_powerupPoint = RegionRandomPoint(gv_redlinePowerups.lv_rightsidespawnregion[RandomInt(1, 4)]);
        }
        else {
            lv_canceled = true;
        }
    }
    if ((lv_canceled == false)) {
        libNtve_gf_CreateModelAtPoint("ShapeSphere", lv_powerupPoint);
        lv_powerupActor = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("GravitonBeamImpact", lv_powerupPoint);
        lv_powerupActorGlow = libNtve_gf_ActorLastCreated();
        ActorSend(lv_powerupActor, "SetScale 1.350000");
        ActorSend(lv_powerupActor, "SetHeight");
        ActorSend(lv_powerupActorGlow, "SetScale 0.500000");
        ActorSend(lv_powerupActorGlow, "SetHeight 0.600000");
        ActorSend(lv_powerupActorGlow, "SetOpacity 0.400000");
        libNtve_gf_PlayAnimation(lv_powerupActorGlow, c_animNameDefault, "Birth", 0, c_animTimeDefault);
        if ((lv_powerupType == 1)) {
            ActorSend(lv_powerupActor, "SetTintColor 0,128,255");
        }
        else {
            if ((lv_powerupType == 2)) {
                ActorSend(lv_powerupActor, "SetTintColor 255,0,0");
            }
            else {
                if ((lv_powerupType == 3)) {
                    ActorSend(lv_powerupActor, "SetTintColor 0,128,0");
                }
                else {
                    if ((lv_powerupType == 4)) {
                        ActorSend(lv_powerupActor, "SetTintColor {0,0,0 10.000000}");
                    }
                    else {
                        if ((lv_powerupType == 5)) {
                        }
                        else {
                            if ((lv_powerupType == 6)) {
                                ActorSend(lv_powerupActor, "SetTintColor 255,255,0");
                            }

                        }
                    }
                }
            }
        }
    }

    while ((gv_redlinePowerups.lv_arepowerupsaloudtoexist == true) && (lv_canceled == false)) {
        if ((lv_powerupActor != null)) {
            auto846B0EBF_g = UnitGroup(null, c_playerAny, RegionCircle(lv_powerupPoint, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto846B0EBF_u = UnitGroupCount(auto846B0EBF_g, c_unitCountAll);
            for (;; auto846B0EBF_u -= 1) {
                auto846B0EBF_var = UnitGroupUnitFromEnd(auto846B0EBF_g, auto846B0EBF_u);
                if (auto846B0EBF_var == null) { break; }
                if (((gv_Skaters[gv_Players[1]] == auto846B0EBF_var) || (gv_Skaters[gv_Players[2]] == auto846B0EBF_var) || (gv_Skaters[gv_Players[3]] == auto846B0EBF_var) || (gv_Skaters[gv_Players[5]] == auto846B0EBF_var) || (gv_Skaters[gv_Players[7]] == auto846B0EBF_var))) {
                    UnitGroupAdd(lv_possibleUnits, auto846B0EBF_var);
                }

            }
            if ((UnitGroupCount(lv_possibleUnits, c_unitCountAlive) > 0)) {
                gf_RedlineAssignPowerup(lv_powerupType, UnitGetOwner(UnitGroupClosestToPoint(lv_possibleUnits, lv_powerupPoint)));
                lv_canceled = true;
            }

            lv_timeElapsed += 0.0625;
            if ((lv_timeElapsed > 15.0) && (lv_hasrunfadeout == false) && (lv_canceled == false)) {
                lv_hasrunfadeout = true;
                gf_RedlineFadeoutPowerup(lv_powerupActor, lv_powerupActorGlow);
            }

            if ((lv_timeElapsed > 17.2)) {
                lv_canceled = true;
            }

            Wait(0.0625, c_timeGame);
        }
        else {
            lv_canceled = true;
        }
    }
    if ((lv_powerupActor != null)) {
        ActorSend(lv_powerupActor, "Destroy Immediate");
    }

    if ((lv_powerupActorGlow != null)) {
        ActorSend(lv_powerupActorGlow, "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_RedlineFadeoutPowerup_Trigger = null;
actor auto_gf_RedlineFadeoutPowerup_lp_actor;
actor auto_gf_RedlineFadeoutPowerup_lp_actorGlow;

void gf_RedlineFadeoutPowerup (actor lp_actor, actor lp_actorGlow) {
    auto_gf_RedlineFadeoutPowerup_lp_actor = lp_actor;
    auto_gf_RedlineFadeoutPowerup_lp_actorGlow = lp_actorGlow;

    if (auto_gf_RedlineFadeoutPowerup_Trigger == null) {
        auto_gf_RedlineFadeoutPowerup_Trigger = TriggerCreate("auto_gf_RedlineFadeoutPowerup_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineFadeoutPowerup_Trigger, false, false);
}

bool auto_gf_RedlineFadeoutPowerup_TriggerFunc (bool testConds, bool runActions) {
    actor lp_actor = auto_gf_RedlineFadeoutPowerup_lp_actor;
    actor lp_actorGlow = auto_gf_RedlineFadeoutPowerup_lp_actorGlow;

    // Variable Declarations
    fixed lv_opacity;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_opacity = 1.0;

    // Implementation
    while ((lp_actor != null) && (lv_opacity > 0.0)) {
        ActorSend(lp_actor, libNtve_gf_SetOpacity(lv_opacity, 0.0625));
        ActorSend(lp_actorGlow, libNtve_gf_SetOpacity(lv_opacity, 0.0625));
        lv_opacity -= 0.03;
        Wait(0.0625, c_timeGame);
    }
    if ((lp_actor != null)) {
        ActorSend(lp_actor, "Destroy Immediate");
    }

    if ((lp_actorGlow != null)) {
        ActorSend(lp_actorGlow, "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_RedlineAssignPowerup_Trigger = null;
int auto_gf_RedlineAssignPowerup_lp_type;
int auto_gf_RedlineAssignPowerup_lp_player;

void gf_RedlineAssignPowerup (int lp_type, int lp_player) {
    auto_gf_RedlineAssignPowerup_lp_type = lp_type;
    auto_gf_RedlineAssignPowerup_lp_player = lp_player;

    if (auto_gf_RedlineAssignPowerup_Trigger == null) {
        auto_gf_RedlineAssignPowerup_Trigger = TriggerCreate("auto_gf_RedlineAssignPowerup_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineAssignPowerup_Trigger, false, false);
}

bool auto_gf_RedlineAssignPowerup_TriggerFunc (bool testConds, bool runActions) {
    int lp_type = auto_gf_RedlineAssignPowerup_lp_type;
    int lp_player = auto_gf_RedlineAssignPowerup_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == 1)) {
        gf_RedlineGivePowerup1Speed(lp_player);
        TextExpressionSetToken("Param/Expression/D1AC79DE", "A", PlayerName(lp_player));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/D1AC79DE"));
        SoundPlayForPlayer(SoundLink("RedlineTakeback2", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    }
    else {
        if ((lp_type == 2)) {
            gf_RedlineGivePowerup2Shotpower(lp_player);
            TextExpressionSetToken("Param/Expression/8E1B912A", "A", PlayerName(lp_player));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8E1B912A"));
            SoundPlayForPlayer(SoundLink("RedlineTakeback22", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((lp_type == 3)) {
                gf_RedlineGivePowerup3Boost(lp_player);
                TextExpressionSetToken("Param/Expression/00D069D2", "A", PlayerName(lp_player));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/00D069D2"));
                SoundPlayForPlayer(SoundLink("RedlineTakeback23", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
            }
            else {
                if ((lp_type == 4)) {
                    TextExpressionSetToken("Param/Expression/277E8DFC", "A", PlayerName(lp_player));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/277E8DFC"));
                    SoundPlayForPlayer(SoundLink("RedlineTakeback24", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    if (((lp_player == gv_Players[1]) || (lp_player == gv_Players[3]))) {
                        gf_RedlineGivePowerup4Silence(gv_Players[5]);
                        gf_RedlineGivePowerup4Silence(gv_Players[7]);
                    }
                    else {
                        if (((lp_player == gv_Players[5]) || (lp_player == gv_Players[7]))) {
                            gf_RedlineGivePowerup4Silence(gv_Players[1]);
                            gf_RedlineGivePowerup4Silence(gv_Players[3]);
                        }
                        else {
                            if ((lp_player == gv_Players[2])) {
                                gf_RedlineGivePowerup4Silence(gv_Players[1]);
                                gf_RedlineGivePowerup4Silence(gv_Players[3]);
                                gf_RedlineGivePowerup4Silence(gv_Players[5]);
                                gf_RedlineGivePowerup4Silence(gv_Players[7]);
                            }

                        }
                    }
                }
                else {
                    if ((lp_type == 5)) {
                        TextExpressionSetToken("Param/Expression/0FC4DEBE", "A", PlayerName(lp_player));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/0FC4DEBE"));
                        SoundPlayForPlayer(SoundLink("RedlineTakeback25", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        if (((lp_player == gv_Players[1]) || (lp_player == gv_Players[3]))) {
                            gf_RedlineGivePowerup5Ghost(gv_Players[5]);
                            gf_RedlineGivePowerup5Ghost(gv_Players[7]);
                        }
                        else {
                            if (((lp_player == gv_Players[5]) || (lp_player == gv_Players[7]))) {
                                gf_RedlineGivePowerup5Ghost(gv_Players[1]);
                                gf_RedlineGivePowerup5Ghost(gv_Players[3]);
                            }
                            else {
                                if ((lp_player == gv_Players[2])) {
                                    gf_RedlineGivePowerup5Ghost(gv_Players[5]);
                                    gf_RedlineGivePowerup5Ghost(gv_Players[7]);
                                    gf_RedlineGivePowerup5Ghost(gv_Players[1]);
                                    gf_RedlineGivePowerup5Ghost(gv_Players[3]);
                                }

                            }
                        }
                    }
                    else {
                        if ((lp_type == 6)) {
                            SoundPlayForPlayer(SoundLink("RedlineTakeback26", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
                            TextExpressionSetToken("Param/Expression/DD47EF6B", "A", PlayerName(lp_player));
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/DD47EF6B"));
                            gf_RedlineGivePowerup6GoldenGoal(lp_player);
                        }

                    }
                }
            }
        }
    }
    Wait(1.5, c_timeGame);
    return true;
}

trigger auto_gf_RedlineRemoveAllPowerups_Trigger = null;

void gf_RedlineRemoveAllPowerups () {
    if (auto_gf_RedlineRemoveAllPowerups_Trigger == null) {
        auto_gf_RedlineRemoveAllPowerups_Trigger = TriggerCreate("auto_gf_RedlineRemoveAllPowerups_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineRemoveAllPowerups_Trigger, false, false);
}

bool auto_gf_RedlineRemoveAllPowerups_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_redlinePowerups.lv_arepowerupsaloudtoexist = false;
    Wait(3.0, c_timeGame);
    gv_redlinePowerups.lv_arepowerupsaloudtoexist = true;
    return true;
}

void gf_RedlineResetallpowerupCD () {
    // Automatic Variable Declarations
    const int auto72434751_ae = 8;
    int auto72434751_var;

    // Implementation
    auto72434751_var = 1;
    for ( ; auto72434751_var <= auto72434751_ae; auto72434751_var += 1 ) {
        gv_redlinePowerups.lv_powerupCD1Speed[auto72434751_var] = 0;
        gv_redlinePowerups.lv_powerupCD2Shotpower[auto72434751_var] = 0;
        gv_redlinePowerups.lv_powerupCD3Boost[auto72434751_var] = 0;
        gv_redlinePowerups.lv_powerupCD4Silence[auto72434751_var] = 0;
        gv_redlinePowerups.lv_powerupCD5Ghost[auto72434751_var] = 0;
        gv_redlinePowerups.lv_powerupCD6GoldenGoal[auto72434751_var] = 0;
    }
}

trigger auto_gf_RedlineCreatepowerupanimation_Trigger = null;
unit auto_gf_RedlineCreatepowerupanimation_lp_unit;
color auto_gf_RedlineCreatepowerupanimation_lp_color;
fixed auto_gf_RedlineCreatepowerupanimation_lp_hDR;
bool auto_gf_RedlineCreatepowerupanimation_lp_firstRun;

void gf_RedlineCreatepowerupanimation (unit lp_unit, color lp_color, fixed lp_hDR, bool lp_firstRun) {
    auto_gf_RedlineCreatepowerupanimation_lp_unit = lp_unit;
    auto_gf_RedlineCreatepowerupanimation_lp_color = lp_color;
    auto_gf_RedlineCreatepowerupanimation_lp_hDR = lp_hDR;
    auto_gf_RedlineCreatepowerupanimation_lp_firstRun = lp_firstRun;

    if (auto_gf_RedlineCreatepowerupanimation_Trigger == null) {
        auto_gf_RedlineCreatepowerupanimation_Trigger = TriggerCreate("auto_gf_RedlineCreatepowerupanimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineCreatepowerupanimation_Trigger, false, false);
}

bool auto_gf_RedlineCreatepowerupanimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_RedlineCreatepowerupanimation_lp_unit;
    color lp_color = auto_gf_RedlineCreatepowerupanimation_lp_color;
    fixed lp_hDR = auto_gf_RedlineCreatepowerupanimation_lp_hDR;
    bool lp_firstRun = auto_gf_RedlineCreatepowerupanimation_lp_firstRun;

    // Variable Declarations
    actor lv_particleActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_firstRun == true)) {
        libNtve_gf_AttachModelToUnit(lp_unit, "MothershipCoreEnergizeImpact", "Ref_Shield");
        lv_particleActor = libNtve_gf_ActorLastCreated();
        ActorSend(lv_particleActor, libNtve_gf_SetTintColor(lp_color, lp_hDR, 0.0));
        ActorSend(lv_particleActor, libNtve_gf_SetScale(1.5, 1.5, 1.5, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetTintColor(lp_color, lp_hDR, 1.0));
        Wait(5.0, c_timeGame);
        if ((lv_particleActor != null)) {
            ActorSend(lv_particleActor, "Destroy Immediate");
        }

    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetTintColor(lp_color, lp_hDR, 0.0));
    }
    return true;
}

void gf_RedlineCleartintifnopowerups (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD1Speed[lp_player] > 0)) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor 0,128,255");
    }
    else {
        if ((gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] > 0)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor 255,0,0");
        }
        else {
            if ((gv_redlinePowerups.lv_powerupCD3Boost[lp_player] > 0)) {
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor 0,128,0");
            }
            else {
                if ((gv_redlinePowerups.lv_powerupCD4Silence[lp_player] > 0)) {
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor {0,0,0 10.000000}");
                }
                else {
                    if ((gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] > 0)) {
                        ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor {255,255,255 10.000000}");
                        ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetTintColor {255,255,255 10.000000}");
                    }
                    else {
                        if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] > 0)) {
                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetTintColor {255,255,0 3.000000}");
                        }
                        else {
                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "ClearTintColor 1.000000");
                            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "ClearTintColor 1.000000");
                        }
                    }
                }
            }
        }
    }
}

trigger auto_gf_RedlineGivePowerup1Speed_Trigger = null;
int auto_gf_RedlineGivePowerup1Speed_lp_player;

void gf_RedlineGivePowerup1Speed (int lp_player) {
    auto_gf_RedlineGivePowerup1Speed_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup1Speed_Trigger == null) {
        auto_gf_RedlineGivePowerup1Speed_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup1Speed_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup1Speed_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup1Speed_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup1Speed_lp_player;

    // Variable Declarations
    unit lv_victimUnit;
    actor lv_animationActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD1Speed[lp_player] <= 0)) {
        gv_redlinePowerups.lv_powerupCD1Speed[lp_player] = 320;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 100.00), 1.0, true);
        libNtve_gf_AttachModelToUnit(lv_victimUnit, "ProtossFireMedium", "Ref_Shield");
        lv_animationActor = libNtve_gf_ActorLastCreated();
        while ((gv_redlinePowerups.lv_powerupCD1Speed[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD1Speed[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                if ((lv_animationActor != null)) {
                    ActorSend(lv_animationActor, "Destroy Immediate");
                }

                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD1Speed[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 100.00), 1.0, false);
                libNtve_gf_AttachModelToUnit(lv_victimUnit, "ProtossFireMedium", "Ref_Shield");
                lv_animationActor = libNtve_gf_ActorLastCreated();
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD1Speed[lp_player] -= 1;
            }

            if ((gv_FaceoffTimer <= 0)) {
                gf_ApplyForcePolar(gv_Skaters[lp_player], 0.017, UnitGetFacing(gv_Skaters[lp_player]));
            }

            Wait(0.0625, c_timeGame);
        }
        if ((lv_animationActor != null)) {
            ActorSend(lv_animationActor, "Destroy Immediate");
        }

        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD1Speed[lp_player] = 320;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 100.00), 1.0, false);
    }
    return true;
}

trigger auto_gf_RedlineGivePowerup2Shotpower_Trigger = null;
int auto_gf_RedlineGivePowerup2Shotpower_lp_player;

void gf_RedlineGivePowerup2Shotpower (int lp_player) {
    auto_gf_RedlineGivePowerup2Shotpower_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup2Shotpower_Trigger == null) {
        auto_gf_RedlineGivePowerup2Shotpower_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup2Shotpower_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup2Shotpower_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup2Shotpower_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup2Shotpower_lp_player;

    // Variable Declarations
    unit lv_victimUnit;
    actor lv_animationActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] <= 0)) {
        gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] = 320;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 0.00, 0.00), 1.0, true);
        libNtve_gf_AttachModelToUnit(lv_victimUnit, "KerriganApocalypseChannel", "Ref_Shield");
        lv_animationActor = libNtve_gf_ActorLastCreated();
        ActorSend(lv_animationActor, "SetScale 0.600000");
        ActorSend(lv_animationActor, "SetTintColor {255,0,0 2.000000}");
        while ((gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                if ((lv_animationActor != null)) {
                    ActorSend(lv_animationActor, "Destroy Immediate");
                }

                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 0.00, 0.00), 1.0, false);
                libNtve_gf_AttachModelToUnit(lv_victimUnit, "KerriganApocalypseChannel", "Ref_Shield");
                lv_animationActor = libNtve_gf_ActorLastCreated();
                ActorSend(lv_animationActor, "SetScale 0.600000");
                ActorSend(lv_animationActor, "SetTintColor {255,0,0 2.000000}");
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] -= 1;
            }

            Wait(0.0625, c_timeGame);
        }
        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

        if ((lv_animationActor != null)) {
            ActorSend(lv_animationActor, "Destroy Immediate");
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD2Shotpower[lp_player] = 320;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 0.00, 0.00), 1.0, false);
    }
    return true;
}

trigger auto_gf_RedlineGivePowerup3Boost_Trigger = null;
int auto_gf_RedlineGivePowerup3Boost_lp_player;

void gf_RedlineGivePowerup3Boost (int lp_player) {
    auto_gf_RedlineGivePowerup3Boost_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup3Boost_Trigger == null) {
        auto_gf_RedlineGivePowerup3Boost_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup3Boost_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup3Boost_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup3Boost_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup3Boost_lp_player;

    // Variable Declarations
    unit lv_victimUnit;
    actor lv_animationActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD3Boost[lp_player] <= 0)) {
        UnitAbilityReset(gv_Skaters[lp_player], AbilityCommand("Check", 0), c_spendLocationAbility);
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "2.5");
        gv_redlinePowerups.lv_powerupCD3Boost[lp_player] = 320;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 0.00), 1.0, true);
        libNtve_gf_AttachModelToUnit(lv_victimUnit, "KerriganApocalypseChannel", "Ref_Shield");
        lv_animationActor = libNtve_gf_ActorLastCreated();
        ActorSend(lv_animationActor, "SetScale 0.600000");
        ActorSend(lv_animationActor, "SetTintColor {0,128,0 2.000000}");
        while ((gv_redlinePowerups.lv_powerupCD3Boost[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD3Boost[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                if ((lv_animationActor != null)) {
                    ActorSend(lv_animationActor, "Destroy Immediate");
                }

                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD3Boost[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 0.00), 1.0, false);
                libNtve_gf_AttachModelToUnit(lv_victimUnit, "KerriganApocalypseChannel", "Ref_Shield");
                lv_animationActor = libNtve_gf_ActorLastCreated();
                ActorSend(lv_animationActor, "SetScale 0.600000");
                ActorSend(lv_animationActor, "SetTintColor {0,128,0 2.000000}");
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD3Boost[lp_player] -= 1;
            }

            Wait(0.0625, c_timeGame);
        }
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "10");
        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

        if ((lv_animationActor != null)) {
            ActorSend(lv_animationActor, "Destroy Immediate");
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD3Boost[lp_player] = 320;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 50.20, 0.00), 1.0, false);
        UnitAbilityReset(gv_Skaters[lp_player], AbilityCommand("Check", 0), c_spendLocationAbility);
    }
    return true;
}

trigger auto_gf_RedlineGivePowerup4Silence_Trigger = null;
int auto_gf_RedlineGivePowerup4Silence_lp_player;

void gf_RedlineGivePowerup4Silence (int lp_player) {
    auto_gf_RedlineGivePowerup4Silence_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup4Silence_Trigger == null) {
        auto_gf_RedlineGivePowerup4Silence_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup4Silence_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup4Silence_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup4Silence_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup4Silence_lp_player;

    // Variable Declarations
    unit lv_victimUnit;
    actor lv_animationActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD4Silence[lp_player] <= 0)) {
        gv_redlinePowerups.lv_powerupCD4Silence[lp_player] = 140;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 0.00, 0.00), 8.0, true);
        libNtve_gf_AttachModelToUnit(lv_victimUnit, "SmokeMedium", "Ref_Shield");
        lv_animationActor = libNtve_gf_ActorLastCreated();
        while ((gv_redlinePowerups.lv_powerupCD4Silence[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD4Silence[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                if ((lv_animationActor != null)) {
                    ActorSend(lv_animationActor, "Destroy Immediate");
                }

                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD4Silence[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 0.00, 0.00), 8.0, false);
                libNtve_gf_AttachModelToUnit(lv_victimUnit, "SmokeMedium", "Ref_Shield");
                lv_animationActor = libNtve_gf_ActorLastCreated();
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD4Silence[lp_player] -= 1;
            }

            UnitAbilityEnable(lv_victimUnit, "Check", false);
            UnitAbilityEnable(lv_victimUnit, "NewOneTimer", false);
            UnitAbilityEnable(lv_victimUnit, "SlideStop", false);
            UnitAbilityEnable(lv_victimUnit, "NewForceField", false);
            Wait(0.0625, c_timeGame);
        }
        UnitAbilityEnable(lv_victimUnit, "Check", true);
        UnitAbilityEnable(lv_victimUnit, "NewOneTimer", true);
        UnitAbilityEnable(lv_victimUnit, "SlideStop", true);
        UnitAbilityEnable(lv_victimUnit, "NewForceField", true);
        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

        if ((lv_animationActor != null)) {
            ActorSend(lv_animationActor, "Destroy Immediate");
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD4Silence[lp_player] = 140;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(0.00, 0.00, 0.00), 8.0, false);
    }
    return true;
}

trigger auto_gf_RedlineGivePowerup5Ghost_Trigger = null;
int auto_gf_RedlineGivePowerup5Ghost_lp_player;

void gf_RedlineGivePowerup5Ghost (int lp_player) {
    auto_gf_RedlineGivePowerup5Ghost_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup5Ghost_Trigger == null) {
        auto_gf_RedlineGivePowerup5Ghost_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup5Ghost_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup5Ghost_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup5Ghost_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup5Ghost_lp_player;

    // Variable Declarations
    unit lv_victimUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] <= 0)) {
        gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] = 112;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 100.00), 8.0, true);
        if ((gv_Possession == lp_player)) {
            gv_Possession = -1;
            gf_RedlineRemovechargeshot(lp_player);
        }

        while ((gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 100.00), 10.0, false);
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetOpacity 0.300000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetOpacity 0.300000");
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] -= 1;
            }

            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetOpacity 0.300000");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetOpacity 0.300000");
            gv_redlineMode.lv_ghosted[lp_player] = true;
            Wait(0.0625, c_timeGame);
        }
        if ((lp_player == gv_Players[2])) {
            gv_redlineMode.lv_ghosted[lp_player] = false;
            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetOpacity 1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetOpacity 1.000000");
        }
        else {
            if (((lp_player == gv_Players[1]) || (lp_player == gv_Players[3])) && (gv_redlineMode.lv_whatteamiscurrentlyghosted != 1)) {
                gv_redlineMode.lv_ghosted[lp_player] = false;
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetOpacity 1.000000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetOpacity 1.000000");
            }
            else {
                if (((lp_player == gv_Players[5]) || (lp_player == gv_Players[7])) && (gv_redlineMode.lv_whatteamiscurrentlyghosted != 2)) {
                    gv_redlineMode.lv_ghosted[lp_player] = false;
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), "SetOpacity 1.000000");
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[lp_player]), "SetOpacity 1.000000");
                }

            }
        }
        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD5Ghost[lp_player] = 112;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 100.00), 10.0, false);
    }
    return true;
}

trigger auto_gf_RedlineGivePowerup6GoldenGoal_Trigger = null;
int auto_gf_RedlineGivePowerup6GoldenGoal_lp_player;

void gf_RedlineGivePowerup6GoldenGoal (int lp_player) {
    auto_gf_RedlineGivePowerup6GoldenGoal_lp_player = lp_player;

    if (auto_gf_RedlineGivePowerup6GoldenGoal_Trigger == null) {
        auto_gf_RedlineGivePowerup6GoldenGoal_Trigger = TriggerCreate("auto_gf_RedlineGivePowerup6GoldenGoal_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineGivePowerup6GoldenGoal_Trigger, false, false);
}

bool auto_gf_RedlineGivePowerup6GoldenGoal_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RedlineGivePowerup6GoldenGoal_lp_player;

    // Variable Declarations
    unit lv_victimUnit;
    actor lv_animationActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] <= 0)) {
        gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] = 600;
        lv_victimUnit = gv_Skaters[lp_player];
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 0.00), 3.0, true);
        libNtve_gf_AttachModelToUnit(lv_victimUnit, "MendBuffState", "Ref_Shield");
        lv_animationActor = libNtve_gf_ActorLastCreated();
        ActorSend(lv_animationActor, "SetScale 3.500000");
        while ((gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] > 0) && (TimerGetDuration(gv_Timer) > 0.0)) {
            if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
                gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] = 0;
                break;
            }

            if ((UnitIsAlive(lv_victimUnit) == false)) {
                if ((lv_animationActor != null)) {
                    ActorSend(lv_animationActor, "Destroy Immediate");
                }

                while (!(((UnitIsAlive(gv_Skaters[lp_player]) == true) || (gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] <= 0)))) {
                    Wait(0.0625, c_timeGame);
                }
                lv_victimUnit = gv_Skaters[lp_player];
                gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 0.00), 3.0, false);
                libNtve_gf_AttachModelToUnit(lv_victimUnit, "MendBuffState", "Ref_Shield");
                lv_animationActor = libNtve_gf_ActorLastCreated();
                ActorSend(lv_animationActor, "SetScale 3.500000");
            }

            if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0)) {
                gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] -= 1;
            }

            Wait(0.0625, c_timeGame);
        }
        if ((UnitIsAlive(gv_Skaters[lp_player]) == true)) {
            gf_RedlineCleartintifnopowerups(lp_player);
        }

        if ((lv_animationActor != null)) {
            ActorSend(lv_animationActor, "Destroy Immediate");
        }

    }
    else {
        gv_redlinePowerups.lv_powerupCD6GoldenGoal[lp_player] = 600;
        gf_RedlineCreatepowerupanimation(lv_victimUnit, Color(100.00, 100.00, 0.00), 3.0, false);
    }
    return true;
}

void gf_RedlineSetHelperDialogText (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        libNtve_gf_SetDialogItemText(gv_redlineMode.lv_goalieHelperDialogText, StringExternal("Param/Value/74A6E91C"), PlayerGroupAll());
    }
    else {
        if ((lp_team == 2)) {
            libNtve_gf_SetDialogItemText(gv_redlineMode.lv_goalieHelperDialogText, StringExternal("Param/Value/C670499D"), PlayerGroupAll());
        }
        else {
            if ((lp_team == 0)) {
                libNtve_gf_SetDialogItemText(gv_redlineMode.lv_goalieHelperDialogText, StringExternal("Param/Value/BD164018"), PlayerGroupAll());
            }

        }
    }
}

void gf_RedlineResetGoalieCDs () {
    // Automatic Variable Declarations
    // Implementation
    UnitAbilityReset(gv_Skaters[gv_Players[2]], AbilityCommand("Check", 0), c_spendLocationAbility);
    UnitAbilityReset(gv_Skaters[gv_Players[2]], AbilityCommand("NewForceField", 0), c_spendLocationAbility);
}

void gf_RedlineRandomizeFaceoffPositions (int lp_offensiveTeam) {
    // Variable Declarations
    int lv_randomint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomint = RandomInt(1, 3);
    if ((lp_offensiveTeam == 0)) {
        if ((lv_randomint == 1)) {
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(121.5, 114.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(121.5, 108.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(125.0, 105.0);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(125.0, 118.0);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(134.5, 114.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(134.5, 108.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(131.5, 105.0);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(131.0, 118.0);
        }
        else {
            if ((lv_randomint == 2)) {
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(121.0, 113.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(121.0, 109.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(121.0, 117.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(121.0, 105.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(135.0, 113.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(135.0, 109.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(135.0, 117.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(135.0, 105.5);
            }
            else {
                if ((lv_randomint == 3)) {
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(128.0, 106.0);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(128.0, 116.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(123.0, 103.0);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(123.0, 119.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(128.0, 106.0);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(128.0, 116.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(135.0, 103.0);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(135.0, 119.5);
                }

            }
        }
    }

    if ((lp_offensiveTeam == 1)) {
        if ((lv_randomint == 1)) {
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(132.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(116.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(136.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(112.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(124.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(140.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(120.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(144.0, 111.5);
        }
        else {
            if ((lv_randomint == 2)) {
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(132.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(116.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(132.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(116.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(124.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(140.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(124.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(140.0, 107.5);
            }
            else {
                if ((lv_randomint == 3)) {
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(128.0, 107.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(116.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(128.0, 115.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(112.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(128.0, 107.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(140.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(128.0, 115.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(144.0, 119.5);
                }

            }
        }
    }

    if ((lp_offensiveTeam == 2)) {
        if ((lv_randomint == 1)) {
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(132.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(116.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(136.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(112.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(124.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(140.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(120.0, 111.5);
            gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(144.0, 111.5);
        }
        else {
            if ((lv_randomint == 2)) {
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(132.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(116.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(132.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(116.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(124.0, 107.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(140.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(124.0, 115.5);
                gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(140.0, 107.5);
            }
            else {
                if ((lv_randomint == 3)) {
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2] = Point(128.0, 107.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1] = Point(116.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4] = Point(128.0, 115.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3] = Point(112.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[2] = Point(128.0, 107.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[1] = Point(140.0, 111.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[4] = Point(128.0, 115.5);
                    gv_redlineMode.lv_rLFaceoffStartPointsP13[3] = Point(144.0, 119.5);
                }

            }
        }
    }

}

trigger auto_gf_RedlineForceFaceoff_Trigger = null;
int auto_gf_RedlineForceFaceoff_lp_givepossessionto;
text auto_gf_RedlineForceFaceoff_lp_reason;

void gf_RedlineForceFaceoff (int lp_givepossessionto, text lp_reason) {
    auto_gf_RedlineForceFaceoff_lp_givepossessionto = lp_givepossessionto;
    auto_gf_RedlineForceFaceoff_lp_reason = lp_reason;

    if (auto_gf_RedlineForceFaceoff_Trigger == null) {
        auto_gf_RedlineForceFaceoff_Trigger = TriggerCreate("auto_gf_RedlineForceFaceoff_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineForceFaceoff_Trigger, false, false);
}

bool auto_gf_RedlineForceFaceoff_TriggerFunc (bool testConds, bool runActions) {
    int lp_givepossessionto = auto_gf_RedlineForceFaceoff_lp_givepossessionto;
    text lp_reason = auto_gf_RedlineForceFaceoff_lp_reason;

    // Automatic Variable Declarations
    playergroup auto2223FAEA_g;
    int auto2223FAEA_var;
    playergroup auto8DABA2A9_g;
    int auto8DABA2A9_var;

    // Implementation
    gf_RedlineSetGhosted(0);
    gv_redlineMode.lv_canagoalbescored = true;
    gv_redlineMode.lv_searchingforInitialPossession = false;
    if ((lp_givepossessionto == 1)) {
        gf_RedlineSetRoles(1, 2);
    }
    else {
        if ((lp_givepossessionto == 2)) {
            gf_RedlineSetRoles(2, 1);
        }
        else {
            if ((lp_givepossessionto == 0)) {
                gf_RedlineSetRoles(0, 0);
            }

        }
    }
    if ((gv_redlineMode.lv_settingsFreeplay == true)) {
        gf_RedlineRandomizeFaceoffPositions(0);
    }
    else {
        gf_RedlineRandomizeFaceoffPositions(lp_givepossessionto);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lp_reason);
    gv_Possession = -1;
    auto2223FAEA_g = gv_actualPlayerzonTeam[1];
    auto2223FAEA_var = -1;
    while (true) {
        auto2223FAEA_var = PlayerGroupNextPlayer(auto2223FAEA_g, auto2223FAEA_var);
        if (auto2223FAEA_var < 0) { break; }
        gf_RedlineRemovechargeshot(auto2223FAEA_var);
    }
    auto8DABA2A9_g = gv_actualPlayerzonTeam[2];
    auto8DABA2A9_var = -1;
    while (true) {
        auto8DABA2A9_var = PlayerGroupNextPlayer(auto8DABA2A9_g, auto8DABA2A9_var);
        if (auto8DABA2A9_var < 0) { break; }
        gf_RedlineRemovechargeshot(auto8DABA2A9_var);
    }
    gv_NoCount = true;
    gv_stoppageOfPlay = true;
    TimerPause(gv_Timer, true);
    SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
    Wait(5.0, c_timeGame);
    gv_NoCount = false;
    gv_stoppageOfPlay = false;
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
    gv_faceoffHoldTrigger = true;
    TriggerExecute(gt_RandomizeUnits2, true, true);
    gv_faceoffHoldTrigger = false;
    TriggerExecute(gt_CreateUnits2, true, false);
    gv_FaceoffTimer = 7;
    gf_RedlineResetGoalieCDs();
    if ((lp_givepossessionto == 0)) {
        gv_redlineMode.lv_searchingforInitialPossession = true;
        TriggerEnable(gt_RedlineIdentifyInitialRoleFaceoff, true);
    }

    return true;
}

trigger auto_gf_RedlineSetinitialrole_Trigger = null;

void gf_RedlineSetinitialrole () {
    if (auto_gf_RedlineSetinitialrole_Trigger == null) {
        auto_gf_RedlineSetinitialrole_Trigger = TriggerCreate("auto_gf_RedlineSetinitialrole_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineSetinitialrole_Trigger, false, false);
}

bool auto_gf_RedlineSetinitialrole_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_redlineMode.lv_searchingforInitialPossession == true) && (gv_stoppageOfPlay == false)) {
        if ((gv_Possession > 0) && (gv_Possession != gv_redlineMode.lv_permagoalie)) {
            gv_redlineMode.lv_searchingforInitialPossession = false;
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_Possession) == true)) {
                gf_RedlineSetRoles(1, 2);
            }
            else {
                gf_RedlineSetRoles(2, 1);
            }
        }

        if ((gv_Possession == gv_redlineMode.lv_permagoalie)) {
            gv_redlineMode.lv_searchingforInitialPossession = false;
            gf_RedlineForceFaceoff(0, StringExternal("Param/Value/2EE110D3"));
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_RedlineCycleRedlineOpacity_Trigger = null;

void gf_RedlineCycleRedlineOpacity () {
    if (auto_gf_RedlineCycleRedlineOpacity_Trigger == null) {
        auto_gf_RedlineCycleRedlineOpacity_Trigger = TriggerCreate("auto_gf_RedlineCycleRedlineOpacity_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineCycleRedlineOpacity_Trigger, false, false);
}

bool auto_gf_RedlineCycleRedlineOpacity_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_cycle == 0)) {
        ActorSend(gv_redlineMode.lv_takebackLine, "SetOpacity 0.500000 0.500000");
        Wait(0.5, c_timeGame);
        ActorSend(gv_redlineMode.lv_takebackLine, "SetOpacity 1.000000 0.500000");
        Wait(0.5, c_timeGame);
    }
    return true;
}

void gf_RedlineSetRoles (int lp_offense, int lp_defense) {
    // Variable Declarations
    bool lv_previouspossessionwasdifferent;
    int lv_enumint;

    // Automatic Variable Declarations
    playergroup auto90C48AEF_g;
    playergroup autoAFAA0A0A_g;

    // Variable Initialization

    // Implementation
    if ((gv_redlineMode.lv_settingsFreeplay == true)) {
        gf_RedlineSetHelperDialogText(0);
        gv_redlineMode.lv_offensiveTeam = 1;
        gv_redlineMode.lv_defensiveTeam = 1;
        gf_RedlineGoalLockIndicators(PlayerGroupActive(), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_middleCircle, false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_normalLine, true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_takebackLine, false);
    }
    else {
        if ((gv_redlineMode.lv_offensiveTeam != lp_offense)) {
            lv_previouspossessionwasdifferent = true;
        }

        if ((lp_offense == 1)) {
            TextTagSetColor(gv_TextTags[gv_Players[2]], c_textTagColorText, Color(0.00, 0.00, 100.00));
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_Players[2]], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
            gf_RedlineSetHelperDialogText(1);
            gv_redlineMode.lv_offensiveTeam = 1;
            gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[1]), false);
            gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[3]), false);
            gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[5]), true);
            gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[7]), true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_middleCircle, false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[1]), gv_redlineMode.lv_normalLine, true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[3]), gv_redlineMode.lv_normalLine, true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[5]), gv_redlineMode.lv_normalLine, false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[7]), gv_redlineMode.lv_normalLine, false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[1]), gv_redlineMode.lv_takebackLine, false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[3]), gv_redlineMode.lv_takebackLine, false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[5]), gv_redlineMode.lv_takebackLine, true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[7]), gv_redlineMode.lv_takebackLine, true);
            autoAFAA0A0A_g = PlayerGroupActive();
            lv_enumint = -1;
            while (true) {
                lv_enumint = PlayerGroupNextPlayer(autoAFAA0A0A_g, lv_enumint);
                if (lv_enumint < 0) { break; }
                if ((PlayerStatus(lv_enumint) == c_playerStatusActive) && (lv_enumint != gv_Players[1]) && (lv_enumint != gv_Players[3]) && (lv_enumint != gv_Players[5]) && (lv_enumint != gv_Players[7])) {
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_normalLine, true);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_middleCircle, false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_takebackLine, false);
                }

            }
            if ((lv_previouspossessionwasdifferent == true)) {
                SoundPlayForPlayer(SoundLink("RedlineTakeback", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
            }

        }
        else {
            if ((lp_offense == 2)) {
                TextTagSetColor(gv_TextTags[gv_Players[2]], c_textTagColorText, Color(100.00, 0.00, 0.00));
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_Players[2]], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                gf_RedlineSetHelperDialogText(2);
                gv_redlineMode.lv_offensiveTeam = 2;
                gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[1]), true);
                gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[3]), true);
                gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[5]), false);
                gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[7]), false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_middleCircle, false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[1]), gv_redlineMode.lv_normalLine, false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[3]), gv_redlineMode.lv_normalLine, false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[5]), gv_redlineMode.lv_normalLine, true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[7]), gv_redlineMode.lv_normalLine, true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[1]), gv_redlineMode.lv_takebackLine, true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[3]), gv_redlineMode.lv_takebackLine, true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[5]), gv_redlineMode.lv_takebackLine, false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(gv_Players[7]), gv_redlineMode.lv_takebackLine, false);
                auto90C48AEF_g = PlayerGroupActive();
                lv_enumint = -1;
                while (true) {
                    lv_enumint = PlayerGroupNextPlayer(auto90C48AEF_g, lv_enumint);
                    if (lv_enumint < 0) { break; }
                    if ((PlayerStatus(lv_enumint) == c_playerStatusActive) && (lv_enumint != gv_Players[1]) && (lv_enumint != gv_Players[3]) && (lv_enumint != gv_Players[5]) && (lv_enumint != gv_Players[7])) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_normalLine, true);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_middleCircle, false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_takebackLine, false);
                    }

                }
                if ((lv_previouspossessionwasdifferent == true)) {
                    SoundPlayForPlayer(SoundLink("RedlineTakeback", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                }

            }
            else {
                if ((lp_offense == 0)) {
                    TextTagSetColor(gv_TextTags[gv_Players[2]], c_textTagColorText, Color(0.00, 66.67, 0.00));
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_Players[2]], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(7), libNtve_gf_ConvertPlayerColorToColor(7)));
                    gf_RedlineSetHelperDialogText(0);
                    gv_redlineMode.lv_offensiveTeam = 0;
                    gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[1]), true);
                    gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[3]), true);
                    gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[5]), true);
                    gf_RedlineGoalLockIndicators(PlayerGroupSingle(gv_Players[7]), true);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_middleCircle, true);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), gv_redlineMode.lv_normalLine, false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_redlineMode.lv_takebackLine, false);
                }

            }
        }
        if ((lp_defense == 1)) {
            gv_redlineMode.lv_defensiveTeam = 1;
        }
        else {
            if ((lp_defense == 2)) {
                gv_redlineMode.lv_defensiveTeam = 2;
            }
            else {
                if ((lp_defense == 0)) {
                    gv_redlineMode.lv_defensiveTeam = 0;
                }

            }
        }
    }
}

void gf_RedlineGoalLockIndicators (playergroup lp_playerGroup, bool lp_showHide) {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    const int auto7F3ECFEC_ae = 4;
    int auto7F3ECFEC_var;
    const int auto6782C91D_ae = 4;
    int auto6782C91D_var;
    const int autoD9CEACFE_ae = 4;
    int autoD9CEACFE_var;
    playergroup auto49CA9679_g;
    const int auto5CBBB61B_ae = 4;
    int auto5CBBB61B_var;

    // Variable Initialization

    // Implementation
    if ((lp_showHide == true)) {
        if ((ModI(gv_Period, 2) == 1) && (gv_Shootout == false)) {
            auto6782C91D_var = 1;
            for ( ; auto6782C91D_var <= auto6782C91D_ae; auto6782C91D_var += 1 ) {
                gf_ShowHideActorForPlayerGroup(lp_playerGroup, gv_redlineMode.lv_goalWallsLeft[auto6782C91D_var], true);
            }
        }
        else {
            if ((ModI(gv_Period, 2) != 1) && (gv_Shootout == false)) {
                autoD9CEACFE_var = 1;
                for ( ; autoD9CEACFE_var <= autoD9CEACFE_ae; autoD9CEACFE_var += 1 ) {
                    gf_ShowHideActorForPlayerGroup(lp_playerGroup, gv_redlineMode.lv_goalWallsRight[autoD9CEACFE_var], true);
                }
            }

        }
    }
    else {
        if ((lp_showHide == false)) {
            auto7F3ECFEC_var = 1;
            for ( ; auto7F3ECFEC_var <= auto7F3ECFEC_ae; auto7F3ECFEC_var += 1 ) {
                gf_ShowHideActorForPlayerGroup(lp_playerGroup, gv_redlineMode.lv_goalWallsRight[auto7F3ECFEC_var], false);
                gf_ShowHideActorForPlayerGroup(lp_playerGroup, gv_redlineMode.lv_goalWallsLeft[auto7F3ECFEC_var], false);
            }
        }

    }
    auto49CA9679_g = PlayerGroupActive();
    lv_enumint = -1;
    while (true) {
        lv_enumint = PlayerGroupNextPlayer(auto49CA9679_g, lv_enumint);
        if (lv_enumint < 0) { break; }
        if ((PlayerStatus(lv_enumint) == c_playerStatusActive) && (lv_enumint != gv_Players[1]) && (lv_enumint != gv_Players[2]) && (lv_enumint != gv_Players[3]) && (lv_enumint != gv_Players[5]) && (lv_enumint != gv_Players[7])) {
            auto5CBBB61B_var = 1;
            for ( ; auto5CBBB61B_var <= auto5CBBB61B_ae; auto5CBBB61B_var += 1 ) {
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_goalWallsRight[auto5CBBB61B_var], false);
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumint), gv_redlineMode.lv_goalWallsLeft[auto5CBBB61B_var], false);
            }
        }

    }
}

void gf_RedlineSetGhosted (int lp_team) {
    // Automatic Variable Declarations
    const int auto1F8CC26F_ae = 8;
    int auto1F8CC26F_var;

    // Implementation
    if (((lp_team == 0) || (gv_redlineMode.lv_settingsFreeplay == true))) {
        gv_redlineMode.lv_whatteamiscurrentlyghosted = 0;
        auto1F8CC26F_var = 1;
        for ( ; auto1F8CC26F_var <= auto1F8CC26F_ae; auto1F8CC26F_var += 1 ) {
            gv_redlineMode.lv_ghosted[auto1F8CC26F_var] = false;
            if ((UnitIsAlive(gv_Skaters[gv_Players[auto1F8CC26F_var]]) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[auto1F8CC26F_var]]), "SetOpacity 1.000000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[auto1F8CC26F_var]]), "SetOpacity 1.000000");
            }

        }
    }
    else {
        if ((lp_team == 1)) {
            gf_RedlineTakebackTimer(2);
            gf_RedlineRemovechargeshot(gv_Players[1]);
            gf_RedlineRemovechargeshot(gv_Players[3]);
            gv_redlineMode.lv_whatteamiscurrentlyghosted = 1;
            if ((UnitIsAlive(gv_Skaters[gv_Players[1]]) == true)) {
                gv_redlineMode.lv_ghosted[gv_Players[1]] = true;
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[1]]), "SetOpacity 0.500000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[1]]), "SetOpacity 0.500000");
            }

            if ((UnitIsAlive(gv_Skaters[gv_Players[3]]) == true)) {
                gv_redlineMode.lv_ghosted[gv_Players[3]] = true;
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[3]]), "SetOpacity 0.500000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[3]]), "SetOpacity 0.500000");
            }

            if ((UnitIsAlive(gv_Skaters[gv_Players[5]]) == true)) {
                gv_redlineMode.lv_ghosted[gv_Players[5]] = false;
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[5]]), "SetOpacity 1.000000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[5]]), "SetOpacity 1.000000");
            }

            if ((UnitIsAlive(gv_Skaters[gv_Players[7]]) == true)) {
                gv_redlineMode.lv_ghosted[gv_Players[7]] = false;
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[7]]), "SetOpacity 1.000000");
                ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[7]]), "SetOpacity 1.000000");
            }

        }
        else {
            if ((lp_team == 2)) {
                gf_RedlineTakebackTimer(1);
                gf_RedlineRemovechargeshot(gv_Players[5]);
                gf_RedlineRemovechargeshot(gv_Players[7]);
                gv_redlineMode.lv_whatteamiscurrentlyghosted = 2;
                if ((UnitIsAlive(gv_Skaters[gv_Players[1]]) == true)) {
                    gv_redlineMode.lv_ghosted[gv_Players[1]] = false;
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[1]]), "SetOpacity 1.000000");
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[1]]), "SetOpacity 1.000000");
                }

                if ((UnitIsAlive(gv_Skaters[gv_Players[3]]) == true)) {
                    gv_redlineMode.lv_ghosted[gv_Players[3]] = false;
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[3]]), "SetOpacity 1.000000");
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[3]]), "SetOpacity 1.000000");
                }

                if ((UnitIsAlive(gv_Skaters[gv_Players[5]]) == true)) {
                    gv_redlineMode.lv_ghosted[gv_Players[5]] = true;
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[5]]), "SetOpacity 0.500000");
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[5]]), "SetOpacity 0.500000");
                }

                if ((UnitIsAlive(gv_Skaters[gv_Players[7]]) == true)) {
                    gv_redlineMode.lv_ghosted[gv_Players[7]] = true;
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[7]]), "SetOpacity 0.500000");
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[gv_Players[7]]), "SetOpacity 0.500000");
                }

            }

        }
    }
}

trigger auto_gf_RedlineTakebackTimer_Trigger = null;
int auto_gf_RedlineTakebackTimer_lp_defensiveTeamRequiringTakeback;

void gf_RedlineTakebackTimer (int lp_defensiveTeamRequiringTakeback) {
    auto_gf_RedlineTakebackTimer_lp_defensiveTeamRequiringTakeback = lp_defensiveTeamRequiringTakeback;

    if (auto_gf_RedlineTakebackTimer_Trigger == null) {
        auto_gf_RedlineTakebackTimer_Trigger = TriggerCreate("auto_gf_RedlineTakebackTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineTakebackTimer_Trigger, false, false);
}

bool auto_gf_RedlineTakebackTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_defensiveTeamRequiringTakeback = auto_gf_RedlineTakebackTimer_lp_defensiveTeamRequiringTakeback;

    // Variable Declarations
    bool[7] lv_hasnumberbeennotified;
    fixed lv_takebackTime;
    bool lv_textwasdisplayed;
    bool lv_failed;
    sound lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_takebackTime = 20.0;

    // Implementation
    while ((lp_defensiveTeamRequiringTakeback != gv_redlineMode.lv_offensiveTeam) && (gv_stoppageOfPlay == false) && (gv_Shootout == false) && (lv_failed == false)) {
        Wait(0.1, c_timeGame);
        lv_takebackTime -= 0.1;
        if ((lv_takebackTime < 6.0) && (lv_hasnumberbeennotified[6] == false)) {
            lv_textwasdisplayed = true;
            lv_hasnumberbeennotified[6] = true;
            SoundPlayForPlayer(SoundLink("Event_Lab02_AlarmIncomingAttack", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            lv_sound = SoundLastPlayed();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/229D049A"));
        }
        else {
            if ((lv_takebackTime < 5.0) && (lv_hasnumberbeennotified[5] == false)) {
                lv_hasnumberbeennotified[5] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/8D2AB4AF"));
            }
            else {
                if ((lv_takebackTime < 4.0) && (lv_hasnumberbeennotified[4] == false)) {
                    lv_hasnumberbeennotified[4] = true;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/9FDCD296"));
                }
                else {
                    if ((lv_takebackTime < 3.0) && (lv_hasnumberbeennotified[3] == false)) {
                        lv_hasnumberbeennotified[3] = true;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/579B04DE"));
                    }
                    else {
                        if ((lv_takebackTime < 2.0) && (lv_hasnumberbeennotified[2] == false)) {
                            lv_hasnumberbeennotified[2] = true;
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/207E8674"));
                        }
                        else {
                            if ((lv_takebackTime < 1.0) && (lv_hasnumberbeennotified[1] == false)) {
                                lv_hasnumberbeennotified[1] = true;
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/97684F8B"));
                            }
                            else {
                                if ((lv_takebackTime <= 0.0)) {
                                    lv_failed = true;
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    if ((lv_textwasdisplayed == true)) {
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        SoundStop(lv_sound, true);
    }

    if ((lv_failed == true) && (lp_defensiveTeamRequiringTakeback == 1)) {
        gf_RedlineForceFaceoff(2, StringExternal("Param/Value/B59827BC"));
    }
    else {
        if ((lv_failed == true) && (lp_defensiveTeamRequiringTakeback == 2)) {
            gf_RedlineForceFaceoff(1, StringExternal("Param/Value/4C68A3DD"));
        }

    }
    return true;
}

void gf_RedlineRemovechargeshot (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        gv_windingUp[lp_player] = false;
        gv_ShotCount[lp_player] = false;
        gv_ShotCount2[lp_player] = false;
        gv_decreaseShotPower[lp_player] = false;
        DialogSetVisible(gv_PowerBarDialog[lp_player], PlayerGroupSingle(gv_Possession), false);
        DialogControlSetSize(gv_PowerBarImage[lp_player], PlayerGroupSingle(lp_player), 1, 22);
    }

}

trigger auto_gf_TitleBarLinesInit_Trigger = null;

void gf_TitleBarLinesInit () {
    if (auto_gf_TitleBarLinesInit_Trigger == null) {
        auto_gf_TitleBarLinesInit_Trigger = TriggerCreate("auto_gf_TitleBarLinesInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_TitleBarLinesInit_Trigger, false, false);
}

bool auto_gf_TitleBarLinesInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true)) {
        gf_TitleBarCreateLine();
        Wait(RandomFixed(1.0, 6.0), c_timeGame);
    }
    return true;
}

trigger auto_gf_TitleBarCreateLine_Trigger = null;

void gf_TitleBarCreateLine () {
    if (auto_gf_TitleBarCreateLine_Trigger == null) {
        auto_gf_TitleBarCreateLine_Trigger = TriggerCreate("auto_gf_TitleBarCreateLine_TriggerFunc");
    }

    TriggerExecute(auto_gf_TitleBarCreateLine_Trigger, false, false);
}

bool auto_gf_TitleBarCreateLine_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalDuration;
    fixed lv_fadeinDuration;
    fixed lv_fadeoutDuration;
    int lv_dialogItem;
    int lv_startX;
    int lv_speed;
    int lv_sidepreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Implementation
    if ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true)) {
        lv_sidepreset = RandomInt(1, 3);
        lv_totalDuration = RandomFixed(5.0, 15.0);
        lv_fadeinDuration = (lv_totalDuration * 0.25);
        lv_fadeoutDuration = (lv_totalDuration * 0.75);
        if ((lv_sidepreset == 1)) {
            lv_startX = RandomInt(0, 100);
        }
        else {
            lv_startX = RandomInt(200, 1300);
        }
        lv_speed = RandomInt(1, 6);
        libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuTopleft, 737, 1, c_anchorTopLeft, lv_startX, 180, StringToText(""), "Redline UI\\selectscreen-linefx.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_dialogItem = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(lv_dialogItem, true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(lv_dialogItem, Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupAll(), 0.0, 100.0);
        gf_TitleBarMoveLines(lv_dialogItem, lv_startX, lv_speed, lv_totalDuration);
    }

    if ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true) && (lv_dialogItem != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupAll(), lv_fadeinDuration, 0.0);
        Wait(lv_fadeinDuration, c_timeGame);
    }

    if ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true) && (lv_dialogItem != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupAll(), lv_fadeoutDuration, 100.0);
    }

    return true;
}

trigger auto_gf_TitleBarMoveLines_Trigger = null;
int auto_gf_TitleBarMoveLines_lp_dialogItem;
int auto_gf_TitleBarMoveLines_lp_startx;
int auto_gf_TitleBarMoveLines_lp_speed;
fixed auto_gf_TitleBarMoveLines_lp_duration;

void gf_TitleBarMoveLines (int lp_dialogItem, int lp_startx, int lp_speed, fixed lp_duration) {
    auto_gf_TitleBarMoveLines_lp_dialogItem = lp_dialogItem;
    auto_gf_TitleBarMoveLines_lp_startx = lp_startx;
    auto_gf_TitleBarMoveLines_lp_speed = lp_speed;
    auto_gf_TitleBarMoveLines_lp_duration = lp_duration;

    if (auto_gf_TitleBarMoveLines_Trigger == null) {
        auto_gf_TitleBarMoveLines_Trigger = TriggerCreate("auto_gf_TitleBarMoveLines_TriggerFunc");
    }

    TriggerExecute(auto_gf_TitleBarMoveLines_Trigger, false, false);
}

bool auto_gf_TitleBarMoveLines_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogItem = auto_gf_TitleBarMoveLines_lp_dialogItem;
    int lp_startx = auto_gf_TitleBarMoveLines_lp_startx;
    int lp_speed = auto_gf_TitleBarMoveLines_lp_speed;
    fixed lp_duration = auto_gf_TitleBarMoveLines_lp_duration;

    // Variable Declarations
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_duration = (lp_duration + 2.0);
    while ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true) && (lv_duration > 0.0)) {
        DialogControlSetPosition(lp_dialogItem, PlayerGroupAll(), c_anchorTopLeft, (DialogControlGetOffsetX(lp_dialogItem, 1) + lp_speed), DialogControlGetOffsetY(lp_dialogItem, 1));
        lv_duration -= 0.0625;
        Wait(0.0625, c_timeGame);
    }
    DialogControlDestroy(lp_dialogItem);
    return true;
}

trigger auto_gf_BottomFuzzInit_Trigger = null;

void gf_BottomFuzzInit () {
    if (auto_gf_BottomFuzzInit_Trigger == null) {
        auto_gf_BottomFuzzInit_Trigger = TriggerCreate("auto_gf_BottomFuzzInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BottomFuzzInit_Trigger, false, false);
}

bool auto_gf_BottomFuzzInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true)) {
        gf_BottomFuzzCreateFuzz();
        Wait(RandomFixed(0.05, 0.3), c_timeGame);
    }
    return true;
}

trigger auto_gf_BottomFuzzCreateFuzz_Trigger = null;

void gf_BottomFuzzCreateFuzz () {
    if (auto_gf_BottomFuzzCreateFuzz_Trigger == null) {
        auto_gf_BottomFuzzCreateFuzz_Trigger = TriggerCreate("auto_gf_BottomFuzzCreateFuzz_TriggerFunc");
    }

    TriggerExecute(auto_gf_BottomFuzzCreateFuzz_Trigger, false, false);
}

bool auto_gf_BottomFuzzCreateFuzz_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_randomDusty;
    string lv_imagefile;
    int lv_startX;
    int lv_size;
    fixed lv_totalDuration;
    int lv_speed;
    int lv_rotation;
    int lv_color;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Implementation
    if ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true)) {
        lv_totalDuration = RandomFixed(1.0, 8.0);
        lv_randomDusty = RandomInt(1, 3);
        lv_color = RandomInt(1, 3);
        lv_startX = RandomInt(-900, 900);
        lv_size = RandomInt(4, 14);
        lv_speed = RandomInt(1, 6);
        lv_rotation = RandomInt(-6, 6);
        if ((lv_randomDusty == 1)) {
            lv_imagefile = "Assets\\Textures\\dust3_blend.dds";
        }
        else {
            if ((lv_randomDusty == 2)) {
                lv_imagefile = "Assets\\Textures\\dust3.dds";
            }
            else {
                if ((lv_randomDusty == 3)) {
                    lv_imagefile = "Assets\\Textures\\dust4.dds";
                }

            }
        }
        libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuFuzzDialog, lv_size, lv_size, c_anchorBottom, lv_startX, -64, StringToText(""), lv_imagefile, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_dialogItem = DialogControlLastCreated();
        if ((lv_color == 1)) {
            libNtve_gf_SetDialogItemDesaturated(lv_dialogItem, true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(lv_dialogItem, Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        }
        else {
            if ((lv_color == 2)) {
                libNtve_gf_SetDialogItemDesaturated(lv_dialogItem, true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(lv_dialogItem, Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
            }
            else {
                if ((lv_color == 3)) {
                    libNtve_gf_SetDialogItemDesaturated(lv_dialogItem, true, PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(lv_dialogItem, Color(100.00, 0.00, 0.00), PlayerGroupAll());
                }

            }
        }
        gf_BottomFuzzMoveFuzz(lv_dialogItem, lv_startX, lv_speed, lv_rotation, lv_totalDuration);
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupAll(), 0.0, RandomFixed(0.0, 20.0));
        DialogControlFadeTransparency(lv_dialogItem, PlayerGroupAll(), lv_totalDuration, 100.0);
    }

    return true;
}

trigger auto_gf_BottomFuzzMoveFuzz_Trigger = null;
int auto_gf_BottomFuzzMoveFuzz_lp_dialogItem;
int auto_gf_BottomFuzzMoveFuzz_lp_startx;
int auto_gf_BottomFuzzMoveFuzz_lp_speed;
int auto_gf_BottomFuzzMoveFuzz_lp_rotation;
fixed auto_gf_BottomFuzzMoveFuzz_lp_duration;

void gf_BottomFuzzMoveFuzz (int lp_dialogItem, int lp_startx, int lp_speed, int lp_rotation, fixed lp_duration) {
    auto_gf_BottomFuzzMoveFuzz_lp_dialogItem = lp_dialogItem;
    auto_gf_BottomFuzzMoveFuzz_lp_startx = lp_startx;
    auto_gf_BottomFuzzMoveFuzz_lp_speed = lp_speed;
    auto_gf_BottomFuzzMoveFuzz_lp_rotation = lp_rotation;
    auto_gf_BottomFuzzMoveFuzz_lp_duration = lp_duration;

    if (auto_gf_BottomFuzzMoveFuzz_Trigger == null) {
        auto_gf_BottomFuzzMoveFuzz_Trigger = TriggerCreate("auto_gf_BottomFuzzMoveFuzz_TriggerFunc");
    }

    TriggerExecute(auto_gf_BottomFuzzMoveFuzz_Trigger, false, false);
}

bool auto_gf_BottomFuzzMoveFuzz_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogItem = auto_gf_BottomFuzzMoveFuzz_lp_dialogItem;
    int lp_startx = auto_gf_BottomFuzzMoveFuzz_lp_startx;
    int lp_speed = auto_gf_BottomFuzzMoveFuzz_lp_speed;
    int lp_rotation = auto_gf_BottomFuzzMoveFuzz_lp_rotation;
    fixed lp_duration = auto_gf_BottomFuzzMoveFuzz_lp_duration;

    // Variable Declarations
    int lv_xoffset;
    int lv_rotation;
    fixed lv_duration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_duration = (lp_duration + 2.0);
    lv_xoffset = RandomInt(-2, 2);
    while ((gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying == true) && (lv_duration > 0.0)) {
        DialogControlSetPosition(lp_dialogItem, PlayerGroupAll(), c_anchorBottom, (DialogControlGetOffsetX(lp_dialogItem, 1) + lv_xoffset), (DialogControlGetOffsetY(lp_dialogItem, 1) + lp_speed));
        libNtve_gf_SetDialogItemRotation(lp_dialogItem, lv_rotation, PlayerGroupAll());
        lv_rotation += lp_rotation;
        lv_duration -= 0.0625;
        Wait(0.0625, c_timeGame);
    }
    DialogControlDestroy(lp_dialogItem);
    return true;
}

void gf_Createslot (int lp_xOffset, int lp_yOffset) {
    // Automatic Variable Declarations
    // Implementation
    gv_redlineMode.lv_menuSlotCreationInt += 1;
    DialogCreate(477, 43, c_anchorCenter, 0, 0, true);
    gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt] = DialogLastCreated();
    DialogSetPositionRelative(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], c_anchorTopLeft, gv_redlineMode.lv_menuMainselection, c_anchorTopLeft, lp_xOffset, lp_yOffset);
    DialogSetImageVisible(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], false);
    DialogSetVisible(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], 477, 43, c_anchorTopLeft, 0, 0, StringToText(""), "Redline UI\\selectscreen-emptyslot.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSlotsBorder[gv_redlineMode.lv_menuSlotCreationInt] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], 450, 33, c_anchorTopLeft, 15, 11, StringExternal("Param/Value/563CA1AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_redlineMode.lv_menuMainselectionSlotsMoveText[gv_redlineMode.lv_menuSlotCreationInt] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], 477, 43, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    gv_redlineMode.lv_menuMainselectionSlotsHotspot[gv_redlineMode.lv_menuSlotCreationInt] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], 450, 33, c_anchorTopLeft, 15, 11, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_redlineMode.lv_menuMainselectionSlotsPlayername[gv_redlineMode.lv_menuSlotCreationInt] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselectionSlots[gv_redlineMode.lv_menuSlotCreationInt], 450, 33, c_anchorTopRight, 15, 8, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSlotsRecord[gv_redlineMode.lv_menuSlotCreationInt] = DialogControlLastCreated();
}

void gf_Hideallreadyicons () {
    // Automatic Variable Declarations
    const int autoDD4A3C28_ae = 5;
    int autoDD4A3C28_var;

    // Implementation
    autoDD4A3C28_var = 1;
    for ( ; autoDD4A3C28_var <= autoDD4A3C28_ae; autoDD4A3C28_var += 1 ) {
        DialogControlSetVisible(gv_redlineMode.lv_slotsReadyicons[autoDD4A3C28_var], PlayerGroupAll(), false);
    }
}

void gf_Setreadyicon (int lp_slot, bool lp_ready) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_redlineMode.lv_slotsReadyicons[lp_slot], PlayerGroupAll(), lp_ready);
}

void gf_RedlinePeriodSetallinactive () {
    // Automatic Variable Declarations
    const int auto12BA1A4B_ae = 6;
    int auto12BA1A4B_var;

    // Implementation
    auto12BA1A4B_var = 1;
    for ( ; auto12BA1A4B_var <= auto12BA1A4B_ae; auto12BA1A4B_var += 1 ) {
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[auto12BA1A4B_var], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemColor(gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[auto12BA1A4B_var], Color(26.27, 10.98, 10.98), PlayerGroupAll());
    }
}

void gf_PeriodSetActive (int lp_number) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[lp_number], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemColor(gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[lp_number], Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gv_redlineMode.lv_settingsPeriodLength = lp_number;
}

trigger auto_gf_RedlineHandleLeavers_Trigger = null;

void gf_RedlineHandleLeavers () {
    if (auto_gf_RedlineHandleLeavers_Trigger == null) {
        auto_gf_RedlineHandleLeavers_Trigger = TriggerCreate("auto_gf_RedlineHandleLeavers_TriggerFunc");
    }

    TriggerExecute(auto_gf_RedlineHandleLeavers_Trigger, false, false);
}

bool auto_gf_RedlineHandleLeavers_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto058E5510_ae = 8;
    int auto058E5510_var;

    // Implementation
    while ((gv_redlineMode.lv_redlineTeamSetupisRunning == true)) {
        auto058E5510_var = 1;
        for ( ; auto058E5510_var <= auto058E5510_ae; auto058E5510_var += 1 ) {
            if ((gv_redlineMode.lv_leaversPlayerishere[auto058E5510_var] == true) && (PlayerStatus(auto058E5510_var) != c_playerStatusActive)) {
                DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsHotspot[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto058E5510_var]], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsMoveText[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto058E5510_var]], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsPlayername[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto058E5510_var]], PlayerGroupAll(), false);
                DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsRecord[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto058E5510_var]], PlayerGroupAll(), false);
                gv_redlineMode.lv_slotsDesiredSlot[auto058E5510_var] = 0;
                gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto058E5510_var] = 0;
                gv_redlineMode.lv_leaversPlayerishere[auto058E5510_var] = false;
                gv_redlineMode.lv_slotsIsPlayerReady[auto058E5510_var] = false;
                gv_redlineMode.lv_isgamecountdownrunning = false;
                gf_UpdateSlotValues();
            }

        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

trigger auto_gf_CreateRedlineUI_Trigger = null;

void gf_CreateRedlineUI () {
    if (auto_gf_CreateRedlineUI_Trigger == null) {
        auto_gf_CreateRedlineUI_Trigger = TriggerCreate("auto_gf_CreateRedlineUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateRedlineUI_Trigger, false, false);
}

bool auto_gf_CreateRedlineUI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_yoffset;
    int lv_enumplayer;
    int lv_int;

    // Automatic Variable Declarations
    const int auto6487CB9B_ae = 8;
    int auto6487CB9B_var;
    const int auto33E69656_n = 8;
    int auto33E69656_i;
    playergroup autoF97452A1_g;

    // Variable Initialization

    // Implementation
    gv_canuserotation = true;
    gf_ResetAllStats();
    gf_RedlineResetallpowerupCD();
    PlayerGroupClear(gv_redlineMode.lv_slotsPlayerswaitingtoupdate);
    gf_RedlineSetGhosted(0);
    gv_redlinePowerups.lv_arepowerupsabletospawn = false;
    gv_redlinePowerups.lv_arepowerupsaloudtoexist = false;
    gv_redlineMode.lv_timerpauseduntiltakeback = false;
    gv_redlineMode.lv_lastteamtohavepossession = 0;
    gv_redlineMode.lv_searchingforInitialPossession = false;
    gv_redlineMode.lv_redlineTeamSetupisRunning = true;
    gv_redlineMode.lv_permagoalie = 0;
    gv_redlineMode.lv_settingsPeriodLength = 4;
    gv_redlineMode.lv_settingsInfiniteOT = true;
    gv_redlineMode.lv_settingsFreeplay = false;
    gv_redlineMode.lv_settingsPowerups = false;
    gv_redlineMode.lv_settingsCrease = true;
    gv_redlineMode.lv_settingsChecking = false;
    gv_redlineMode.lv_slotsIsthereaGoalie = false;
    gv_redlineMode.lv_slotsIsthereaatleast1player = false;
    gv_redlineMode.lv_slotsTotalPlayersinSlots = 0;
    gv_goldenGoal = false;
    gv_dunkmode = false;
    gv_ischeckingon = false;
    gv_Shootout = false;
    auto6487CB9B_var = 1;
    for ( ; auto6487CB9B_var <= auto6487CB9B_ae; auto6487CB9B_var += 1 ) {
        gv_redlineMode.lv_slotsIsPlayerReady[auto6487CB9B_var] = false;
        gv_redlineMode.lv_slotsDesiredSlot[auto6487CB9B_var] = 0;
        gv_redlineMode.lv_leaversPlayerishere[auto6487CB9B_var] = false;
        gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto6487CB9B_var] = 0;
    }
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    SoundPlayForPlayer(SoundLink("RedlineMusic", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    gv_redlineMode.lv_redlineMusic = SoundLastPlayed();
    gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying = true;
    DialogCreate(3000, 3000, c_anchorTop, 0, 0, true);
    gv_redlineMode.lv_menuRedBackground = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuRedBackground, 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Redline UI\\selectscreen-redbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuRedBackgroundImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuRedBackground, 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Redline UI\\selectscreen-redbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuRedBackgroundImage[2] = DialogControlLastCreated();
    DialogCreate(3000, 400, c_anchorBottomRight, 0, 0, true);
    gv_redlineMode.lv_menuBotright = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuBotright, 960, 400, c_anchorBottomRight, 0, 0, StringToText(""), "Redline UI\\selectscreen-botrightbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuBotrightGlow = DialogControlLastCreated();
    DialogCreate(3000, 3000, c_anchorBottom, 0, 0, true);
    gv_redlineMode.lv_menuFuzzDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(3000, 400, c_anchorTopLeft, 0, 0, true);
    gv_redlineMode.lv_menuTopleft = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuTopleft, 941, 407, c_anchorTopLeft, 0, 0, StringToText(""), "Redline UI\\selectscreen-topleftbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuTopleftSparkImage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuTopleft, 3000, 180, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    gv_redlineMode.lv_menuTopleftTitleBlackBar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuTopleft, 3000, 1, c_anchorTopLeft, 0, 180, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuTopleftTitleBlackBarLine = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuTopleft, 369, 63, c_anchorTopLeft, 120, 122, StringToText(""), "Redline UI\\selectscreen-title.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuTopleftRedlineTitle = DialogControlLastCreated();
    DialogCreate(1510, 700, c_anchorTop, 0, 290, true);
    gv_redlineMode.lv_menuMainselection = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 252, 26, c_anchorTopLeft, 0, 0, StringToText(""), "Redline UI\\selectscreen-selectateam.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSelectaTeamTitle = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 477, 43, c_anchorTopLeft, 0, 70, StringToText(""), "Redline UI\\selectscreen-section-observers.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionBlackBar[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 477, 43, c_anchorTopLeft, 530, 70, StringToText(""), "Redline UI\\selectscreen-section-goalie.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionBlackBar[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 477, 43, c_anchorTopLeft, 530, 176, StringToText(""), "Redline UI\\selectscreen-section-redteam.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionBlackBar[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 477, 43, c_anchorTopLeft, 530, 335, StringToText(""), "Redline UI\\selectscreen-section-blueteam.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionBlackBar[4] = DialogControlLastCreated();
    lv_yoffset = 123;
    for (auto33E69656_i = 1; auto33E69656_i <= auto33E69656_n; auto33E69656_i += 1) {
        gf_Createslot(0, lv_yoffset);
        lv_yoffset += 53;
    }
    lv_yoffset = 123;
    gf_Createslot(530, lv_yoffset);
    lv_yoffset += 106;
    gf_Createslot(530, lv_yoffset);
    lv_yoffset += 53;
    gf_Createslot(530, lv_yoffset);
    lv_yoffset += 106;
    gf_Createslot(530, lv_yoffset);
    lv_yoffset += 53;
    gf_Createslot(530, lv_yoffset);
    gv_redlineMode.lv_menuSlotCreationInt = 0;
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 24, 22, c_anchorTopLeft, 1017, 134, StringToText(""), "Redline UI\\selectscreen-readyicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_slotsReadyicons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 24, 22, c_anchorTopLeft, 1017, 240, StringToText(""), "Redline UI\\selectscreen-readyicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_slotsReadyicons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 24, 22, c_anchorTopLeft, 1017, 293, StringToText(""), "Redline UI\\selectscreen-readyicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_slotsReadyicons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 24, 22, c_anchorTopLeft, 1017, 399, StringToText(""), "Redline UI\\selectscreen-readyicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_slotsReadyicons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 24, 22, c_anchorTopLeft, 1017, 452, StringToText(""), "Redline UI\\selectscreen-readyicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_slotsReadyicons[5] = DialogControlLastCreated();
    gf_Hideallreadyicons();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 272, 26, c_anchorTopLeft, 1110, 0, StringToText(""), "Redline UI\\selectscreen-settings.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSelectaTeamTitle = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 200, 50, c_anchorTopLeft, 1280, 7, StringExternal("Param/Value/45C797EF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 301, 39, c_anchorTopLeft, 1110, 105, StringToText(""), "Redline UI\\selectscreen-periodtimebg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 200, 50, c_anchorTopLeft, 1110, 70, StringExternal("Param/Value/36C98094"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1110, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-activeendcap.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1160, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1210, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1260, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1310, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-active.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1360, 105, StringToText(""), "Redline UI\\selectscreen-periodtime-activeendcap.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthBG[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1114, 107, StringExternal("Param/Value/227BCD67"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1164, 107, StringExternal("Param/Value/356AB10A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1214, 107, StringExternal("Param/Value/541A9746"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1264, 107, StringExternal("Param/Value/ADC3C99D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1314, 107, StringExternal("Param/Value/ED46F10F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 47, 39, c_anchorTopLeft, 1364, 107, StringExternal("Param/Value/FA549536"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(26.27, 10.98, 10.98), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthNumber[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1110, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1160, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1210, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1260, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1310, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 51, 39, c_anchorTopLeft, 1360, 105, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[6] = DialogControlLastCreated();
    gf_RedlinePeriodSetallinactive();
    gf_PeriodSetActive(4);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 182, StringToText(""), "Redline UI\\selectscreen-checkbox-checked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 182, StringToText(""), "Redline UI\\selectscreen-checkbox-unchecked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 182, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTHotspot = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 150, 50, c_anchorTopLeft, 1147, 185, StringExternal("Param/Value/B1F5E6FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7CD53BEC"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 240, StringToText(""), "Redline UI\\selectscreen-checkbox-checked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 240, StringToText(""), "Redline UI\\selectscreen-checkbox-unchecked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 240, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsPowerupsHotspot = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 140, 50, c_anchorTopLeft, 1147, 243, StringExternal("Param/Value/E0A1FE09"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FE9EAEBE"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 298, StringToText(""), "Redline UI\\selectscreen-checkbox-checked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 298, StringToText(""), "Redline UI\\selectscreen-checkbox-unchecked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 298, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsCheckingHotspot = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 140, 50, c_anchorTopLeft, 1147, 301, StringExternal("Param/Value/E693F284"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/719870DF"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 358, StringToText(""), "Redline UI\\selectscreen-checkbox-checked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 358, StringToText(""), "Redline UI\\selectscreen-checkbox-unchecked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 358, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsFreeplayHotspot = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 140, 50, c_anchorTopLeft, 1147, 361, StringExternal("Param/Value/7474AAF9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/94E5F304"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 418, StringToText(""), "Redline UI\\selectscreen-checkbox-checked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 418, StringToText(""), "Redline UI\\selectscreen-checkbox-unchecked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuMainselection, 23, 23, c_anchorTopLeft, 1110, 418, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuMainselectionSettingsCreaseHotspot = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuMainselection, 160, 50, c_anchorTopLeft, 1147, 421, StringExternal("Param/Value/F814B800"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4A036666"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_redlineMode.lv_menuMainselectionSettingsCreaseLabel = DialogControlLastCreated();
    DialogCreate(3000, 400, c_anchorBottomRight, 0, 0, true);
    gv_redlineMode.lv_menuBotrightButtons = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuBotrightButtons, 324, 75, c_anchorBottomRight, 120, 70, StringToText(""), "Redline UI\\selectscreen-readybutton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuBotrightButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_redlineMode.lv_menuBotrightButtons, 324, 75, c_anchorBottomRight, 120, 70, StringToText(""), "Redline UI\\selectscreen-cancelbutton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_redlineMode.lv_menuBotrightButtonCANCEL = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_redlineMode.lv_menuBotrightButtons, 324, 75, c_anchorBottomRight, 120, 70, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_redlineMode.lv_menuBotrightButtonHotspot = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuBotrightButtons, 300, 50, c_anchorBottomRight, 490, 84, StringExternal("Param/Value/ABB73E68"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(27.06, 56.86, 0.00), PlayerGroupAll());
    gv_redlineMode.lv_menuBotrightReadyStatusText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_redlineMode.lv_menuBotrightButtons, 324, 50, c_anchorBottomRight, 120, 30, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(63.53, 63.53, 63.53), PlayerGroupAll());
    gv_redlineMode.lv_menuBotrightErrorMessage = DialogControlLastCreated();
    gf_TitleBarLinesInit();
    gf_BottomFuzzInit();
    autoF97452A1_g = PlayerGroupActive();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoF97452A1_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        lv_int += 1;
        gv_redlineMode.lv_slotsWhichplayerisinwhichslot[lv_enumplayer] = lv_int;
        gv_redlineMode.lv_leaversPlayerishere[lv_enumplayer] = true;
    }
    gv_redlineMode.lv_slotsCanplayersmoveslots = true;
    gf_UpdateSlotValues();
    gf_Checkforslotupdates();
    TriggerEnable(gt_RedlineSelectNewSlot, true);
    TriggerEnable(gt_RedlinePressStart, true);
    TriggerEnable(gt_RedlineSelectPeriod, true);
    TriggerEnable(gt_RedlineSelectInfiniteOT, true);
    TriggerEnable(gt_RedlineSelectFreeplay, true);
    TriggerEnable(gt_RedlineSelectPowerups, true);
    TriggerEnable(gt_RedlineSelectCrease, true);
    TriggerEnable(gt_RedlineSelectChecking, true);
    gf_RedlineHandleLeavers();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F6D9B90D"));
    return true;
}

trigger auto_gf_Checkforslotupdates_Trigger = null;

void gf_Checkforslotupdates () {
    if (auto_gf_Checkforslotupdates_Trigger == null) {
        auto_gf_Checkforslotupdates_Trigger = TriggerCreate("auto_gf_Checkforslotupdates_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkforslotupdates_Trigger, false, false);
}

bool auto_gf_Checkforslotupdates_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup autoD65BB38E_g;
    const int autoD2009D54_ae = 8;
    int autoD2009D54_var;

    // Variable Initialization

    // Implementation
    while ((gv_redlineMode.lv_slotsCanplayersmoveslots == true)) {
        if ((PlayerGroupCount(gv_redlineMode.lv_slotsPlayerswaitingtoupdate) > 0)) {
            autoD65BB38E_g = PlayerGroupActive();
            lv_enumplayer = -1;
            while (true) {
                lv_enumplayer = PlayerGroupNextPlayer(autoD65BB38E_g, lv_enumplayer);
                if (lv_enumplayer < 0) { break; }
                if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[1] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[2] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[3] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[4] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[5] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[6] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[7] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[8] != gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer]) && (gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer] != 0))) {
                    gv_redlineMode.lv_slotsWhichplayerisinwhichslot[lv_enumplayer] = gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer];
                    gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer] = 0;
                    PlayerGroupRemove(gv_redlineMode.lv_slotsPlayerswaitingtoupdate, lv_enumplayer);
                    autoD2009D54_var = 1;
                    for ( ; autoD2009D54_var <= autoD2009D54_ae; autoD2009D54_var += 1 ) {
                        gv_redlineMode.lv_slotsIsPlayerReady[autoD2009D54_var] = false;
                    }
                    gv_redlineMode.lv_isgamecountdownrunning = false;
                    gf_UpdateSlotValues();
                }
                else {
                    gv_redlineMode.lv_slotsDesiredSlot[lv_enumplayer] = 0;
                    PlayerGroupRemove(gv_redlineMode.lv_slotsPlayerswaitingtoupdate, lv_enumplayer);
                }
            }
        }

        Wait(0.1, c_timeGame);
    }
    return true;
}

void gf_UpdateSlotValues () {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoC5769AFA_ae = 13;
    int autoC5769AFA_var;
    playergroup autoCDA8F03D_g;
    int autoCDA8F03D_var;

    // Variable Initialization

    // Implementation
    autoC5769AFA_var = 1;
    for ( ; autoC5769AFA_var <= autoC5769AFA_ae; autoC5769AFA_var += 1 ) {
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsHotspot[autoC5769AFA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsMoveText[autoC5769AFA_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsPlayername[autoC5769AFA_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsRecord[autoC5769AFA_var], PlayerGroupAll(), false);
    }
    autoCDA8F03D_g = PlayerGroupActive();
    autoCDA8F03D_var = -1;
    while (true) {
        autoCDA8F03D_var = PlayerGroupNextPlayer(autoCDA8F03D_g, autoCDA8F03D_var);
        if (autoCDA8F03D_var < 0) { break; }
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsHotspot[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsMoveText[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsPlayername[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSlotsRecord[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/DC914AC6", "A", PlayerName(autoCDA8F03D_var));
        libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuMainselectionSlotsPlayername[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], TextExpressionAssemble("Param/Expression/DC914AC6"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/D84CDED1", "A", IntToText(gv_redlineMode.lv_statsWins[autoCDA8F03D_var]));
        TextExpressionSetToken("Param/Expression/D84CDED1", "B", IntToText(gv_redlineMode.lv_statsLosses[autoCDA8F03D_var]));
        libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuMainselectionSlotsRecord[gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoCDA8F03D_var]], TextExpressionAssemble("Param/Expression/D84CDED1"), PlayerGroupAll());
    }
    gf_ResetReadyStatus();
}

void gf_ResetReadyStatus () {
    // Variable Declarations
    playergroup lv_skaters;
    playergroup lv_requiredtobeready;
    playergroup lv_actuallyready;
    int lv_actualReadyInt;
    int lv_requiredReadyInt;
    playergroup lv_goalies;
    playergroup lv_observers;
    bool lv_pass;
    int lv_selectedPlayer;

    // Automatic Variable Declarations
    const int auto72ADC0DD_ae = 8;
    int auto72ADC0DD_var;
    const int autoED28F189_ae = 8;
    int autoED28F189_var;

    // Variable Initialization
    lv_skaters = PlayerGroupEmpty();
    lv_requiredtobeready = PlayerGroupEmpty();
    lv_actuallyready = PlayerGroupEmpty();
    lv_goalies = PlayerGroupEmpty();
    lv_observers = PlayerGroupEmpty();

    // Implementation
    auto72ADC0DD_var = 1;
    for ( ; auto72ADC0DD_var <= auto72ADC0DD_ae; auto72ADC0DD_var += 1 ) {
        if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 1) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 2) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 3) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 4) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 5) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 6) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 7) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 8))) {
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupSingle(auto72ADC0DD_var), false);
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), false);
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), true);
            DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 75.0);
            PlayerGroupAdd(lv_observers, auto72ADC0DD_var);
        }
        else {
            if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 9))) {
                PlayerGroupAdd(lv_goalies, auto72ADC0DD_var);
                if ((gv_redlineMode.lv_slotsIsPlayerReady[auto72ADC0DD_var] == true)) {
                    DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                    DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupSingle(auto72ADC0DD_var), true);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), true);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), false);
                    PlayerGroupAdd(lv_requiredtobeready, auto72ADC0DD_var);
                    PlayerGroupAdd(lv_actuallyready, auto72ADC0DD_var);
                }
                else {
                    DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                    DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupSingle(auto72ADC0DD_var), true);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), false);
                    DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), true);
                    PlayerGroupAdd(lv_requiredtobeready, auto72ADC0DD_var);
                }
            }
            else {
                if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 10) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 11) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 12) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[auto72ADC0DD_var] == 13))) {
                    PlayerGroupAdd(lv_skaters, auto72ADC0DD_var);
                    if ((gv_redlineMode.lv_slotsIsPlayerReady[auto72ADC0DD_var] == true)) {
                        DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                        DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupSingle(auto72ADC0DD_var), true);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), true);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), false);
                        PlayerGroupAdd(lv_requiredtobeready, auto72ADC0DD_var);
                        PlayerGroupAdd(lv_actuallyready, auto72ADC0DD_var);
                    }
                    else {
                        DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                        DialogControlFadeTransparency(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), 0.0, 0.0);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupSingle(auto72ADC0DD_var), true);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupSingle(auto72ADC0DD_var), false);
                        DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupSingle(auto72ADC0DD_var), true);
                        PlayerGroupAdd(lv_requiredtobeready, auto72ADC0DD_var);
                    }
                }

            }
        }
    }
    if ((PlayerGroupCount(lv_goalies) > 0) && (PlayerGroupCount(lv_skaters) == 0)) {
        libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightErrorMessage, StringExternal("Param/Value/99A3D56D"), PlayerGroupAll());
    }
    else {
        if ((PlayerGroupCount(lv_goalies) == 0) && (PlayerGroupCount(lv_skaters) == 0)) {
            libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightErrorMessage, StringExternal("Param/Value/10DBA2AC"), PlayerGroupAll());
        }
        else {
            if ((PlayerGroupCount(lv_goalies) == 0) && (PlayerGroupCount(lv_skaters) > 0)) {
                libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightErrorMessage, StringExternal("Param/Value/B7762C14"), PlayerGroupAll());
            }
            else {
                if ((PlayerGroupCount(lv_goalies) > 0) && (PlayerGroupCount(lv_skaters) > 0)) {
                    libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightErrorMessage, StringExternal("Param/Value/72BF1875"), PlayerGroupAll());
                }

            }
        }
    }
    lv_actualReadyInt = PlayerGroupCount(lv_actuallyready);
    lv_requiredReadyInt = PlayerGroupCount(lv_requiredtobeready);
    if ((lv_requiredReadyInt < 2)) {
        lv_requiredReadyInt = 2;
    }

    libNtve_gf_SetDialogItemColor(gv_redlineMode.lv_menuBotrightReadyStatusText, Color(27.06, 56.86, 0.00), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/D3D13DB5", "A", IntToText(lv_actualReadyInt));
    TextExpressionSetToken("Param/Expression/D3D13DB5", "B", IntToText(lv_requiredReadyInt));
    libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightReadyStatusText, TextExpressionAssemble("Param/Expression/D3D13DB5"), PlayerGroupAll());
    gf_Hideallreadyicons();
    autoED28F189_var = 1;
    for ( ; autoED28F189_var <= autoED28F189_ae; autoED28F189_var += 1 ) {
        if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoED28F189_var] == 9) && (gv_redlineMode.lv_slotsIsPlayerReady[autoED28F189_var] == true)) {
            gf_Setreadyicon(1, true);
        }
        else {
            if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoED28F189_var] == 10) && (gv_redlineMode.lv_slotsIsPlayerReady[autoED28F189_var] == true)) {
                gf_Setreadyicon(2, true);
            }
            else {
                if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoED28F189_var] == 11) && (gv_redlineMode.lv_slotsIsPlayerReady[autoED28F189_var] == true)) {
                    gf_Setreadyicon(3, true);
                }
                else {
                    if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoED28F189_var] == 12) && (gv_redlineMode.lv_slotsIsPlayerReady[autoED28F189_var] == true)) {
                        gf_Setreadyicon(4, true);
                    }
                    else {
                        if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoED28F189_var] == 13) && (gv_redlineMode.lv_slotsIsPlayerReady[autoED28F189_var] == true)) {
                            gf_Setreadyicon(5, true);
                        }

                    }
                }
            }
        }
    }
    if ((lv_requiredReadyInt == lv_actualReadyInt) && (gv_redlineMode.lv_isgamecountdownrunning == false)) {
        gf_Startcountdown();
    }

}

trigger auto_gf_Startcountdown_Trigger = null;

void gf_Startcountdown () {
    if (auto_gf_Startcountdown_Trigger == null) {
        auto_gf_Startcountdown_Trigger = TriggerCreate("auto_gf_Startcountdown_TriggerFunc");
    }

    TriggerExecute(auto_gf_Startcountdown_Trigger, false, false);
}

bool auto_gf_Startcountdown_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    const int auto022254CE_ae = 8;
    int auto022254CE_var;

    // Variable Initialization
    lv_time = 8;

    // Implementation
    gv_redlineMode.lv_isgamecountdownrunning = true;
    gv_redlineMode.lv_slotsCanplayersmoveslots = false;
    while ((gv_redlineMode.lv_isgamecountdownrunning == true)) {
        if ((lv_time == 1)) {
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonHotspot, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButtonCANCEL, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_redlineMode.lv_menuBotrightButton, PlayerGroupAll(), false);
            TriggerEnable(gt_RedlineSelectNewSlot, false);
            TriggerEnable(gt_RedlinePressStart, false);
            TriggerEnable(gt_RedlineSelectPeriod, false);
            TriggerEnable(gt_RedlineSelectInfiniteOT, false);
            TriggerEnable(gt_RedlineSelectFreeplay, false);
            TriggerEnable(gt_RedlineSelectPowerups, false);
            TriggerEnable(gt_RedlineSelectCrease, false);
            TriggerEnable(gt_RedlineSelectChecking, false);
        }

        if ((lv_time == 0)) {
            gv_redlineMode.lv_isgamecountdownrunning = false;
            gv_redlineMode.lv_redlineTeamSetupisRunning = false;
            break;
        }
        else {
            lv_time -= 1;
        }
        SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_SetDialogItemColor(gv_redlineMode.lv_menuBotrightReadyStatusText, Color(100.00, 50.20, 0.00), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/BFD72B0B", "A", IntToText(lv_time));
        libNtve_gf_SetDialogItemText(gv_redlineMode.lv_menuBotrightReadyStatusText, TextExpressionAssemble("Param/Expression/BFD72B0B"), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    if ((gv_redlineMode.lv_redlineTeamSetupisRunning == true)) {
        SoundPlayForPlayer(SoundLink("UI_BnetError", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
        gv_redlineMode.lv_slotsCanplayersmoveslots = true;
        auto022254CE_var = 1;
        for ( ; auto022254CE_var <= auto022254CE_ae; auto022254CE_var += 1 ) {
            gv_redlineMode.lv_slotsIsPlayerReady[auto022254CE_var] = false;
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/824655A4"));
        gf_Checkforslotupdates();
        gf_ResetReadyStatus();
    }
    else {
        gf_StartRedlineGame();
    }
    return true;
}

void gf_StartRedlineGame () {
    // Variable Declarations
    playergroup lv_team1allies;
    playergroup lv_team2allies;
    int lv_enumint;

    // Automatic Variable Declarations
    const int auto8E075658_ae = 13;
    int auto8E075658_var;
    const int autoF8EF7BD4_ae = 8;
    int autoF8EF7BD4_var;
    playergroup auto8D9DA29E_g;
    int auto8D9DA29E_var;
    playergroup autoF97835E2_g;
    int autoF97835E2_var;
    const int auto9282E65F_ae = 15;
    int auto9282E65F_var;

    // Variable Initialization
    lv_team1allies = PlayerGroupEmpty();
    lv_team2allies = PlayerGroupEmpty();

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundStop(gv_redlineMode.lv_redlineMusic, true);
    gv_redlineMode.lv_redlineUIAnimationsShouldbePlaying = false;
    DialogDestroy(gv_redlineMode.lv_menuTopleft);
    DialogDestroy(gv_redlineMode.lv_menuRedBackground);
    DialogDestroy(gv_redlineMode.lv_menuMainselection);
    DialogDestroy(gv_redlineMode.lv_menuFuzzDialog);
    DialogDestroy(gv_redlineMode.lv_menuBotrightButtons);
    DialogDestroy(gv_redlineMode.lv_menuBotright);
    auto8E075658_var = 1;
    for ( ; auto8E075658_var <= auto8E075658_ae; auto8E075658_var += 1 ) {
        DialogDestroy(gv_redlineMode.lv_menuMainselectionSlots[auto8E075658_var]);
    }
    gv_redlineMode.lv_redlineAllReady = true;
    autoF8EF7BD4_var = 1;
    for ( ; autoF8EF7BD4_var <= autoF8EF7BD4_ae; autoF8EF7BD4_var += 1 ) {
        if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoF8EF7BD4_var] == 10) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoF8EF7BD4_var] == 11))) {
            PlayerGroupAdd(gv_actualPlayerzonTeam[1], autoF8EF7BD4_var);
            PlayerGroupAdd(gv_teamPlayersGroup1, autoF8EF7BD4_var);
            PlayerGroupAdd(lv_team1allies, autoF8EF7BD4_var);
            PlayerSetColorIndex(autoF8EF7BD4_var, 1, true);
        }
        else {
            if (((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoF8EF7BD4_var] == 12) || (gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoF8EF7BD4_var] == 13))) {
                PlayerGroupAdd(gv_actualPlayerzonTeam[2], autoF8EF7BD4_var);
                PlayerGroupAdd(gv_teamPlayersGroup2, autoF8EF7BD4_var);
                PlayerGroupAdd(lv_team2allies, autoF8EF7BD4_var);
                PlayerSetColorIndex(autoF8EF7BD4_var, 2, true);
            }
            else {
                if ((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[autoF8EF7BD4_var] == 9)) {
                    PlayerGroupAdd(gv_actualPlayerzonTeam[1], autoF8EF7BD4_var);
                    PlayerGroupAdd(gv_teamPlayersGroup1, autoF8EF7BD4_var);
                    PlayerSetColorIndex(autoF8EF7BD4_var, 7, true);
                    gv_redlineMode.lv_permagoalie = autoF8EF7BD4_var;
                }

            }
        }
    }
    auto8D9DA29E_g = gv_actualPlayerzonTeam[1];
    auto8D9DA29E_var = -1;
    while (true) {
        auto8D9DA29E_var = PlayerGroupNextPlayer(auto8D9DA29E_g, auto8D9DA29E_var);
        if (auto8D9DA29E_var < 0) { break; }
        gv_boostcolor[auto8D9DA29E_var] = 2;
    }
    autoF97835E2_g = gv_actualPlayerzonTeam[2];
    autoF97835E2_var = -1;
    while (true) {
        autoF97835E2_var = PlayerGroupNextPlayer(autoF97835E2_g, autoF97835E2_var);
        if (autoF97835E2_var < 0) { break; }
        gv_boostcolor[autoF97835E2_var] = 1;
    }
    libNtve_gf_SetPlayerGroupAlliance(lv_team1allies, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetPlayerGroupAlliance(lv_team2allies, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    gf_RedlineRandomizeFaceoffPositions(0);
    gf_RedlineSetGhosted(0);
    if ((gv_redlineMode.lv_settingsFreeplay == false)) {
        TimerStart(gv_Timer, (IntToFixed(gv_redlineMode.lv_settingsPeriodLength) * 60.0), false, c_timeReal);
    }
    else {
        TimerStart(gv_Timer, 99999.0, false, c_timeReal);
    }
    TimerPause(gv_Timer, true);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    gf_FaceoffBotDrop(PointFromId(112), false);
    gv_faceoffHoldTrigger = true;
    TriggerExecute(gt_RandomizeUnits2, true, true);
    gv_faceoffHoldTrigger = false;
    TriggerExecute(gt_CreateUnits2, true, false);
    gv_FaceoffTimer = 10;
    TriggerExecute(gt_UpdateTime, true, false);
    TriggerExecute(gt_UpdateTimer, true, false);
    gv_NoCount = false;
    gv_stoppageOfPlay = false;
    gf_ShowScoreboard();
    auto9282E65F_var = 1;
    for ( ; auto9282E65F_var <= auto9282E65F_ae; auto9282E65F_var += 1 ) {
        if ((gv_TextTags[auto9282E65F_var] != c_textTagNone)) {
            TextTagShow(gv_TextTags[auto9282E65F_var], PlayerGroupAll(), true);
        }

    }
    if ((gv_redlineMode.lv_settingsCrease == false)) {
        gv_dunkmode = true;
        RegionSetCenter(RegionFromId(13), PointFromId(669));
        RegionSetCenter(RegionFromId(14), PointFromId(670));
    }
    else {
        gv_dunkmode = false;
        RegionSetCenter(RegionFromId(13), gv_redlineMode.lv_netarea1position);
        RegionSetCenter(RegionFromId(14), gv_redlineMode.lv_netarea2position);
    }
    if ((gv_redlineMode.lv_settingsChecking == true)) {
        gv_ischeckingon = true;
    }
    else {
        gv_ischeckingon = false;
    }
    if ((gv_redlineMode.lv_settingsPowerups == true)) {
        gf_RedlineInitPowerupSpawn();
    }

    gf_RedlineStartPeriod(gv_Period);
}

void gf_CreateTerrainObject (string lp_model, int lp_variation, point lp_point, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, fixed lp_height, fixed lp_rotationx, fixed lp_rotationy, int lp_isaLight) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint(lp_model, lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_ModelSwap(lp_model, lp_variation));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lp_scalex, lp_scaley, lp_scalez, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(lp_height));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(lp_rotationx, lp_rotationy, 0, 0, 0, 1.0));
    if ((lp_isaLight == 1)) {
        gf_Addtolightinggroup(libNtve_gf_ActorLastCreated());
    }

}

void gf_CreateGroundTerrain (string lp_model, int lp_terrainType, point lp_point, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, fixed lp_height, fixed lp_rotationx, fixed lp_rotationy) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateActorAtPoint(lp_model, lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lp_scalex, lp_scaley, lp_scalez, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(lp_height));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(lp_rotationx, lp_rotationy, 0, 0, 0, 1.0));
    if ((lp_terrainType == 1)) {
        ActorSend(libNtve_gf_ActorLastCreated(), "TextureSelectById DynamicTerrain_01");
    }

}

void gf_Addtolightinggroup (actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    gv_stadiums.lv_stadiumLights[gv_stadiums.lv_lightingint] = lp_actor;
    gv_stadiums.lv_lightingint += 1;
}

trigger auto_gf_CreateProbeStadium_Trigger = null;

void gf_CreateProbeStadium () {
    if (auto_gf_CreateProbeStadium_Trigger == null) {
        auto_gf_CreateProbeStadium_Trigger = TriggerCreate("auto_gf_CreateProbeStadium_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateProbeStadium_Trigger, false, false);
}

bool auto_gf_CreateProbeStadium_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_opacity1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_opacity1 = 0.6;

    // Implementation
    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0010")) {
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall32222", Point(57.27, 145.73));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.75, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall32222", Point(199.18, 147.37));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.75, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall32222", Point(197.76, 79.07));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.75, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall32222", Point(58.39, 78.99));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.75, 0));
        ActorSend(gv_leagueBanners[1], "ModelSwap BannerProbe");
        ActorSend(gv_leagueBanners[2], "ModelSwap BannerProbe");
        ActorSend(gv_leagueBanners[3], "ModelSwap BannerProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(203)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(204)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(66)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(64)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(263)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(224)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(187)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(389)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(257)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(217)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(189)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(392)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(255)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(207)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(190)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(393)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(205)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(206)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(196)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(397)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(387)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(388)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(390)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(391)), "ModelSwap ArenaSeat1Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(1480201717)), "ModelSwap ArenaSeat4Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(82)), "ModelSwap ArenaSeat4Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(431868394)), "ModelSwap ArenaSeat4Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(806508599)), "ModelSwap ArenaSeat4Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(446)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(454)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(447)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(225)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(404)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(421)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(424)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(445)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(440)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(439)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(31)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(23)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(17)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(29)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(33)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(9)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(27)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(35)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(56)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(55)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(53)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(49)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(50)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(21)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(24)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(77)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(75)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(19)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(25)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(182)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(36)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(93)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(34)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(95)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(32)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(97)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(198)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(99)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(256)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(101)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(57)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(103)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(105)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(51)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(262)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(107)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(264)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(109)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(111)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(47)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(174)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(45)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(176)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(43)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(22)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(26)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(14)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(16)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(20)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(18)), "ModelSwap SideWallModelProbe");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), "ModelSwap Goal02Probe");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), "ModelSwap Goal02Probe");
    }

    return true;
}

trigger auto_gf_CreateZHLStadium_Trigger = null;

void gf_CreateZHLStadium () {
    if (auto_gf_CreateZHLStadium_Trigger == null) {
        auto_gf_CreateZHLStadium_Trigger = TriggerCreate("auto_gf_CreateZHLStadium_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateZHLStadium_Trigger, false, false);
}

bool auto_gf_CreateZHLStadium_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_opacity1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_opacity1 = 0.6;

    // Implementation
    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0011")) {
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), "SetTintColor");
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), "SetTintColor");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall322222", Point(57.27, 145.73));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall322222", Point(199.18, 147.37));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall322222", Point(197.76, 79.07));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
        libNtve_gf_CreateModelAtPoint("ForceFieldWall322222", Point(58.39, 78.99));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(203)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(204)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(66)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(64)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(263)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(224)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(187)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(389)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(257)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(217)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(189)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(392)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(255)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(207)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(190)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(393)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(205)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(206)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(196)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(397)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(387)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(388)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(390)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(391)), "ModelSwap ArenaSeat1ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(1480201717)), "ModelSwap ArenaSeat4ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(82)), "ModelSwap ArenaSeat4ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(431868394)), "ModelSwap ArenaSeat4ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(806508599)), "ModelSwap ArenaSeat4ZHL");
        ActorSend(ActorFromDoodad(DoodadFromId(446)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(454)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(447)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(225)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(404)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(421)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(424)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(445)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(440)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(439)), "ModelSwap ArenaSeat2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(31)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(23)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(17)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(29)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(33)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(9)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(27)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(35)), "ModelSwap SideWallModel2Probe");
        ActorSend(ActorFromDoodad(DoodadFromId(56)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(55)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(53)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(49)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(50)), "ModelSwap SideWallModelBaseProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(21)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(24)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(77)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(75)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(19)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(25)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(182)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(36)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(93)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(34)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(95)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(32)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(97)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(198)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(99)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(256)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(101)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(57)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(103)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(105)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(51)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(262)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(107)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(264)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(109)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(111)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(47)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(174)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(45)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(176)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(43)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(22)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(26)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(14)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(16)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(20)), "ModelSwap SideWallModelProbe");
        ActorSend(ActorFromDoodad(DoodadFromId(18)), "ModelSwap SideWallModelProbe");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), "ModelSwap Goal02ZHL");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), "ModelSwap Goal02ZHL");
    }

    return true;
}

trigger auto_gf_CreateJungleStadium_Trigger = null;

void gf_CreateJungleStadium () {
    if (auto_gf_CreateJungleStadium_Trigger == null) {
        auto_gf_CreateJungleStadium_Trigger = TriggerCreate("auto_gf_CreateJungleStadium_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateJungleStadium_Trigger, false, false);
}

bool auto_gf_CreateJungleStadium_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_opacity1;
    int lv_enumplayer;
    int lv_enumint;

    // Automatic Variable Declarations
    const int auto06F0212F_ae = 10;
    int auto06F0212F_var;
    unitgroup auto7D9C843B_g;
    int auto7D9C843B_u;
    unit auto7D9C843B_var;
    playergroup auto30DEAD26_g;
    const int auto02427ABA_ae = 99;
    const int auto02427ABA_ai = 1;

    // Variable Initialization
    lv_opacity1 = 0.6;

    // Implementation
    if ((GameAttributeGameValue("2") != "0002")) {
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(89.94, 145.24), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(164.57, 145.56), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(182.17, 107.51), 0.97, 0.97, 0.97, 4.3, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(199.88, 99.75), 0.97, 0.97, 0.97, 8.0, -1.0, 0.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(82.8, 76.88), 0.97, 0.97, 0.97, 8.0, 0.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(56.27, 121.33), 0.97, 0.97, 0.97, 8.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 3, Point(73.78, 107.48), 0.97, 0.97, 0.97, 4.3, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(99.22, 145.27), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(134.5, 145.57), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(149.69, 150.27), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(177.81, 145.53), 0.97, 0.97, 0.97, 8.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 5, Point(56.23, 100.88), 0.97, 0.97, 0.97, 8.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(75.22, 115.01), 0.97, 0.97, 0.97, 4.5, 0.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusCliffVines", 4, Point(180.91, 115.04), 0.97, 0.97, 0.97, 4.5, 0.0, 1.0, 0);
        gf_CreateTerrainObject("XelNaga_Caverns_Cave_Light", 0, Point(165.0, 152.82), 1.5, 1.5, 1.5, 0.0, 0.0, -1.0, 1);
        gf_CreateTerrainObject("XelNaga_Caverns_Cave_Light", 0, Point(125.0, 152.05), 1.5, 1.5, 1.5, 0.0, 0.0, -1.0, 1);
        gf_CreateTerrainObject("XelNaga_Caverns_Cave_Light", 0, Point(80.0, 151.99), 1.5, 1.5, 1.5, 0.0, 0.0, -1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(108.6, 151.72), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(146.63, 153.46), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(55.29, 143.14), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(196.22, 146.16), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(58.32, 84.34), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(196.57, 78.91), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(158.42, 72.36), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(128.12, 71.39), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("LightOmniWhiteLarge", 255, Point(90.74, 72.62), 3.0, 3.0, 3.0, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(126.92, 148.03), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(126.49, 76.09), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(169.44, 76.45), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(85.71, 149.75), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(165.81, 148.51), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(200.87, 110.22), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(90.51, 75.3), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        gf_CreateTerrainObject("WindEnergyDust", 255, Point(54.81, 113.3), 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1);
        auto06F0212F_var = 1;
        for ( ; auto06F0212F_var <= auto06F0212F_ae; auto06F0212F_var += 1 ) {
            ActorSend(gv_walladvertisements[auto06F0212F_var], "Destroy Immediate");
        }
        gf_CreateTerrainObject("BirdDriftSeekerZerus", 255, Point(164.12, 136.22), 1.0, 1.0, 1.0, 8.0, 0.0, -1.0, 1);
        gf_CreateTerrainObject("BirdDriftSeekerZerus", 255, Point(93.34, 136.89), 1.0, 1.0, 1.0, 8.0, 0.0, -1.0, 1);
        gf_CreateGroundTerrain("DynamicTerrain", 1, Point(128.04, 57.99), 0.4, 1.5, 1.0, 0.05, 1.0, 0.0);
        gf_CreateGroundTerrain("DynamicTerrain", 1, Point(127.95, 164.2), 0.4, 1.5, 1.0, 0.05, 1.0, 0.0);
        gf_CreateGroundTerrain("DynamicTerrain", 1, Point(37.66, 109.66), 0.4, 1.2, 1.0, 0.05, 0.0, 1.0);
        gf_CreateGroundTerrain("DynamicTerrain", 1, Point(218.42, 109.66), 0.4, 1.2, 1.0, 0.05, 0.0, 1.0);
        gf_CreateGroundTerrain("DynamicTerrainCorner", 1, Point(64.95, 85.51), 0.145, 0.145, 1.0, 0.06, -1.0, 0.0);
        gf_CreateGroundTerrain("DynamicTerrainCorner", 1, Point(65.04, 136.92), 0.145, 0.145, 1.0, 0.06, 0.0, 1.0);
        gf_CreateGroundTerrain("DynamicTerrainCorner", 1, Point(191.13, 136.78), 0.145, 0.145, 1.0, 0.06, 1.0, 0.0);
        gf_CreateGroundTerrain("DynamicTerrainCorner", 1, Point(191.1, 85.51), 0.145, 0.145, 1.0, 0.06, 0.0, -1.0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(52.5, 63.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(77.5, 52.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(118.5, 49.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(143.5, 50.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(178.5, 51.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(203.5, 71.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(201.5, 140.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(175.5, 155.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(112.5, 155.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(89.5, 154.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(67.5, 153.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(52.5, 138.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(43.5, 107.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(44.5, 88.5), 3.5, 3.5, 3.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(40.5, 99.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(39.5, 118.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(46.5, 133.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(61.5, 145.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(79.5, 154.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(122.5, 150.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(140.5, 159.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(167.5, 158.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(192.5, 155.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(200.5, 149.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(213.5, 121.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(212.5, 91.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(204.5, 66.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(167.5, 57.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(104.5, 55.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(86.5, 53.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(115.5, 61.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(47.5, 75.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(92.5, 159.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(127.5, 159.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(158.5, 158.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(211.5, 134.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(214.5, 101.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(195.5, 62.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(133.5, 54.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(65.5, 60.5), 2.5, 2.5, 2.5, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(56.5, 137.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(70.5, 149.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(96.5, 154.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(152.5, 153.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(183.5, 150.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(202.5, 134.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(206.5, 111.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(203.5, 83.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(182.5, 65.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(151.5, 64.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(104.5, 65.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(78.5, 63.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(60.5, 70.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 0, Point(51.5, 110.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(52.5, 123.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(89.5, 149.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(134.5, 150.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(171.5, 149.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(202.5, 118.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(202.5, 92.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(192.5, 72.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(136.5, 63.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(125.5, 68.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(92.5, 64.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ZerusLargeTree", 1, Point(51.5, 92.5), 2.0, 2.0, 2.0, 0.0, 1.0, 1.0, 0);
        gf_CreateTerrainObject("ChiseledRockEx1Large", 3, Point(58.0, 142.0), 3.5, 3.5, 3.5, 0.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ChiseledRockEx1Large", 3, Point(60.0, 79.0), 3.5, 3.5, 3.5, 0.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ChiseledRockEx1Large", 3, Point(196.0, 144.0), 3.5, 3.5, 3.5, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("ChiseledRockEx1Large", 3, Point(197.0, 80.0), 3.5, 3.5, 3.5, 0.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ZerusLargeVines", 1, Point(109.37, 148.49), 1.95, 1.95, 1.95, 5.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("ZerusLargeVines", 1, Point(146.79, 148.7), 1.95, 1.95, 1.95, 5.0, 1.0, 0.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(34.0, 155.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(48.0, 161.0), 2.0, 2.0, 2.0, 0.0, 1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(67.0, 165.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(84.0, 166.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(104.0, 166.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(125.0, 169.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(145.0, 169.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(166.0, 168.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(187.0, 168.0), 2.0, 2.0, 2.0, 0.0, 0.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(209.0, 159.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(217.0, 149.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(222.0, 140.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(226.0, 122.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(229.0, 102.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(224.0, 80.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(216.0, 59.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(204.0, 41.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(191.0, 40.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(175.0, 39.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(157.0, 39.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(141.0, 38.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(122.0, 37.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(104.0, 38.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(87.0, 37.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(68.0, 38.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(52.0, 46.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(35.0, 54.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(30.0, 69.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(21.0, 92.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(20.0, 116.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        gf_CreateTerrainObject("RockTower", 2, Point(23.0, 140.0), 2.0, 2.0, 2.0, 0.0, -1.0, -1.0, 0);
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "LightOmniWhiteLarge");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ArenaSeat1");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ArenaSeat12");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "ArenaSeat122");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabFloodLights");
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "UmojanLabGlassWallPanel");
        auto7D9C843B_g = UnitGroup("DesertPlanetSearchlight", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7D9C843B_u = UnitGroupCount(auto7D9C843B_g, c_unitCountAll);
        for (;; auto7D9C843B_u -= 1) {
            auto7D9C843B_var = UnitGroupUnitFromEnd(auto7D9C843B_g, auto7D9C843B_u);
            if (auto7D9C843B_var == null) { break; }
            UnitRemove(auto7D9C843B_var);
        }
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), "SetTintColor 109,89,58");
        ActorSend(ActorFromDoodad(DoodadFromId(1444566333)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), "SetTintColor 109,89,58");
        ActorSend(ActorFromDoodad(DoodadFromId(783868145)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), "SetTintColor 109,89,58");
        ActorSend(ActorFromDoodad(DoodadFromId(728871873)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), "SetTintColor 109,89,58");
        ActorSend(ActorFromDoodad(DoodadFromId(1383742038)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(163)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(219)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(218)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), "SetTintColor 109,89,58");
        ActorSend(ActorFromDoodad(DoodadFromId(968462071)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(220)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(221)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(237)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(238)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(233)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(234)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(236)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(235)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(232)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(222)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(241)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(242)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(245)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(246)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(240)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(239)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(244)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(243)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(247)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), "SetTintColor 109,89,58");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(248)), libNtve_gf_SetOpacity(lv_opacity1, 0));
        ActorSend(ActorFromDoodad(DoodadFromId(31)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(23)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(17)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(29)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(33)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(9)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(27)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(35)), "ModelSwap SideWallModel2Jungle");
        ActorSend(ActorFromDoodad(DoodadFromId(56)), "ModelSwap SideWallModelBaseJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(55)), "ModelSwap SideWallModelBaseJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(53)), "ModelSwap SideWallModelBaseJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(49)), "ModelSwap SideWallModelBaseJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(50)), "ModelSwap SideWallModelBaseJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(21)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(24)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(77)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(75)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(19)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(25)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(182)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(36)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(93)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(34)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(95)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(32)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(97)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(198)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(99)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(256)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(101)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(57)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(103)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(105)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(51)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(262)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(107)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(264)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(109)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(111)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(47)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(174)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(45)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(176)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(43)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(22)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(26)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(14)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(16)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(20)), "ModelSwap SideWallModelJungle");
        ActorSend(ActorFromDoodad(DoodadFromId(18)), "ModelSwap SideWallModelJungle");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), "ModelSwap Goal02Jungle");
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), "ModelSwap Goal02Jungle");
        auto30DEAD26_g = PlayerGroupAll();
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(auto30DEAD26_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[7], lv_enumplayer) == true)) {
                lv_enumint = 1;
                for ( ; ( (auto02427ABA_ai >= 0 && lv_enumint <= auto02427ABA_ae) || (auto02427ABA_ai < 0 && lv_enumint >= auto02427ABA_ae) ) ; lv_enumint += auto02427ABA_ai ) {
                    if ((gv_stadiums.lv_stadiumLights[lv_enumint] != null)) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lv_enumplayer), gv_stadiums.lv_stadiumLights[lv_enumint], false);
                    }

                }
            }

        }
    }

    return true;
}

trigger auto_gf_Checkforleaguepausecapability_Trigger = null;

void gf_Checkforleaguepausecapability () {
    if (auto_gf_Checkforleaguepausecapability_Trigger == null) {
        auto_gf_Checkforleaguepausecapability_Trigger = TriggerCreate("auto_gf_Checkforleaguepausecapability_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkforleaguepausecapability_Trigger, false, false);
}

bool auto_gf_Checkforleaguepausecapability_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    bool lv_enemiesclose;

    // Automatic Variable Declarations
    playergroup auto2F670234_g;
    int auto2F670234_var;
    playergroup autoA6ED442A_g;
    int autoA6ED442A_var;

    // Variable Initialization

    // Implementation
    while (true) {
        lv_enemiesclose = false;
        if ((gv_Possession != -1)) {
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_Possession) == true)) {
                lv_team = 1;
            }
            else {
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_Possession) == true)) {
                    lv_team = 2;
                }
                else {
                    lv_team = 0;
                }
            }
            if ((gv_pausetimeremaining[1] > 0) && (lv_team == 1)) {
                autoA6ED442A_g = gv_actualPlayerzonTeam[2];
                autoA6ED442A_var = -1;
                while (true) {
                    autoA6ED442A_var = PlayerGroupNextPlayer(autoA6ED442A_g, autoA6ED442A_var);
                    if (autoA6ED442A_var < 0) { break; }
                    if ((libNtve_gf_UnitInRegion(gv_Skaters[autoA6ED442A_var], RegionCircle(UnitGetPosition(gv_Skaters[gv_Possession]), 4.0)) == true) && (gv_Possession != gv_Players[2])) {
                        lv_enemiesclose = true;
                    }

                }
                if ((lv_enemiesclose == false) && (((gv_Period == 1) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) < 128.0)) || ((gv_Period == 2) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) > 128.0)) || ((gv_Period == 3) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) < 128.0)) || ((gv_Period == 4) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) > 128.0)))) {
                    gv_canteampausegame[1] = true;
                    gv_canteampausegame[2] = false;
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], true);
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], false);
                }
                else {
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], false);
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], false);
                    gv_canteampausegame[1] = false;
                    gv_canteampausegame[2] = false;
                }
            }
            else {
                if ((gv_pausetimeremaining[2] > 0) && (lv_team == 2)) {
                    auto2F670234_g = gv_actualPlayerzonTeam[1];
                    auto2F670234_var = -1;
                    while (true) {
                        auto2F670234_var = PlayerGroupNextPlayer(auto2F670234_g, auto2F670234_var);
                        if (auto2F670234_var < 0) { break; }
                        if ((libNtve_gf_UnitInRegion(gv_Skaters[auto2F670234_var], RegionCircle(UnitGetPosition(gv_Skaters[gv_Possession]), 4.0)) == true) && (gv_Possession != gv_Players[6])) {
                            lv_enemiesclose = true;
                        }

                    }
                    if ((lv_enemiesclose == false) && (((gv_Period == 1) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) > 128.0)) || ((gv_Period == 2) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) < 128.0)) || ((gv_Period == 3) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) > 128.0)) || ((gv_Period == 4) && (PointGetX(UnitGetPosition(gv_Skaters[gv_Possession])) < 128.0)))) {
                        gv_canteampausegame[1] = false;
                        gv_canteampausegame[2] = true;
                        DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], true);
                        DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], false);
                    }
                    else {
                        DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], false);
                        DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], false);
                        gv_canteampausegame[1] = false;
                        gv_canteampausegame[2] = false;
                    }
                }
                else {
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], false);
                    DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], false);
                    gv_canteampausegame[1] = false;
                    gv_canteampausegame[2] = false;
                }
            }
        }
        else {
            DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[1], false);
            DialogSetVisible(gv_pPDialog, gv_actualPlayerzonTeam[2], false);
            gv_canteampausegame[1] = false;
            gv_canteampausegame[2] = false;
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_Startpausecounter_Trigger = null;
int auto_gf_Startpausecounter_lp_team;

void gf_Startpausecounter (int lp_team) {
    auto_gf_Startpausecounter_lp_team = lp_team;

    if (auto_gf_Startpausecounter_Trigger == null) {
        auto_gf_Startpausecounter_Trigger = TriggerCreate("auto_gf_Startpausecounter_TriggerFunc");
    }

    TriggerExecute(auto_gf_Startpausecounter_Trigger, false, false);
}

bool auto_gf_Startpausecounter_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_Startpausecounter_lp_team;

    // Automatic Variable Declarations
    // Implementation
    while ((gv_gameispaused == true) && (gv_pausetimeremaining[lp_team] > 0) && (gv_startresumecountdown == false)) {
        if ((lp_team == 1)) {
            TextExpressionSetToken("Param/Expression/FBF14EDF", "A", IntToText(gv_pausetimeremaining[1]));
            libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/FBF14EDF"), PlayerGroupAll());
        }
        else {
            if ((lp_team == 2)) {
                TextExpressionSetToken("Param/Expression/9D3D15F5", "A", IntToText(gv_pausetimeremaining[2]));
                libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/9D3D15F5"), PlayerGroupAll());
            }
            else {
                if ((lp_team == 3)) {
                    TextExpressionSetToken("Param/Expression/4AED1144", "A", IntToText(gv_pausetimeremaining[3]));
                    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/4AED1144"), PlayerGroupAll());
                }

            }
        }
        gv_pausetimeremaining[lp_team] -= 1;
        Wait(1.0, c_timeReal);
    }
    if ((gv_pausetimeremaining[lp_team] <= 0) && (gv_startresumecountdown == false) && (gv_gameispaused == true)) {
        gf_UnpaseGame();
    }

    return true;
}

trigger auto_gf_PauseGame_Trigger = null;
int auto_gf_PauseGame_lp_team;

void gf_PauseGame (int lp_team) {
    auto_gf_PauseGame_lp_team = lp_team;

    if (auto_gf_PauseGame_Trigger == null) {
        auto_gf_PauseGame_Trigger = TriggerCreate("auto_gf_PauseGame_TriggerFunc");
    }

    TriggerExecute(auto_gf_PauseGame_Trigger, false, false);
}

bool auto_gf_PauseGame_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_PauseGame_lp_team;

    // Automatic Variable Declarations
    playergroup auto13FE3860_g;
    int auto13FE3860_var;
    playergroup auto43026597_g;
    int auto43026597_var;

    // Implementation
    SoundPlayForPlayer(SoundLink("Alert_GamePaused_Prot", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_pausetimeremainingdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 200, c_anchorTop, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    gv_pausetimeremainingdialogitem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 0, StringToText(""), StringExternal("Param/Value/93A21A24"), "");
    gv_pauseresumebutton = DialogControlLastCreated();
    if ((lp_team == 1)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), gv_actualPlayerzonTeam[1], true);
    }
    else {
        if ((lp_team == 2)) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), gv_actualPlayerzonTeam[2], true);
        }
        else {
            if ((lp_team == 3)) {
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(3), true);
                if ((gv_testteam3ui == true)) {
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                }

            }

        }
    }
    gv_gameispaused = true;
    gf_Team3UITogglePauseButton();
    gv_pausedpossession = gv_Possession;
    UnitPauseAll(true);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimSetPausedAll");
    auto13FE3860_g = PlayerGroupAll();
    auto13FE3860_var = -1;
    while (true) {
        auto13FE3860_var = PlayerGroupNextPlayer(auto13FE3860_g, auto13FE3860_var);
        if (auto13FE3860_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[auto13FE3860_var]) == true)) {
            gv_baseMovementSpeeds[auto13FE3860_var] = UnitGetPropertyFixed(gv_Skaters[auto13FE3860_var], c_unitPropBaseMovementSpeed, c_unitPropCurrent);
            UnitSetPropertyFixed(gv_Skaters[auto13FE3860_var], c_unitPropBaseMovementSpeed, 0.0);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "CancelOneTimer", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "NewOneTimer", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "Check", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "ShootPuckDummyAbility", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "PingMarkerCreate", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "ShootPuck", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "NewForceField", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "move", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "stop", false);
            UnitAbilityEnable(gv_Skaters[auto13FE3860_var], "SlideStop", false);
            gv_customVar0store[auto13FE3860_var] = UnitGetCustomValue(gv_Skaters[auto13FE3860_var], 0);
            gv_customVar1store[auto13FE3860_var] = UnitGetCustomValue(gv_Skaters[auto13FE3860_var], 1);
            gv_customVar2store[auto13FE3860_var] = UnitGetCustomValue(gv_Skaters[auto13FE3860_var], 2);
            gv_customVar3store[auto13FE3860_var] = UnitGetCustomValue(gv_Skaters[auto13FE3860_var], 3);
            UnitSetCustomValue(gv_Skaters[auto13FE3860_var], 0, 0.0);
            UnitSetCustomValue(gv_Skaters[auto13FE3860_var], 1, 0.0);
            UnitSetCustomValue(gv_Skaters[auto13FE3860_var], 2, 0.0);
            UnitSetCustomValue(gv_Skaters[auto13FE3860_var], 3, 0.0);
        }

    }
    gv_customVarPuckstore[0] = UnitGetCustomValue(gv_pUCK, 0);
    gv_customVarPuckstore[1] = UnitGetCustomValue(gv_pUCK, 1);
    gv_customVarPuckstore[2] = UnitGetCustomValue(gv_pUCK, 2);
    gv_customVarPuckstore[3] = UnitGetCustomValue(gv_pUCK, 3);
    gv_customVarPuckstore[4] = UnitGetCustomValue(gv_pUCK, 4);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetCustomValue(gv_pUCK, 2, 0.0);
    UnitSetCustomValue(gv_pUCK, 3, 0.0);
    UnitSetCustomValue(gv_pUCK, 4, 0.0);
    if ((TimerIsPaused(gv_Timer) == false)) {
        TimerPause(gv_Timer, true);
        gv_maintimerwaspaused = true;
    }

    GamePauseAllCharges(true);
    GamePauseAllCooldowns(true);
    TriggerEnable(gt_ShotPower2, false);
    TriggerEnable(gt_ShootPuck, false);
    TriggerEnable(gt_ShootPuck3, false);
    TriggerEnable(gt_StealPuck, false);
    auto43026597_g = PlayerGroupAll();
    auto43026597_var = -1;
    while (true) {
        auto43026597_var = PlayerGroupNextPlayer(auto43026597_g, auto43026597_var);
        if (auto43026597_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[auto43026597_var]) == true) && (TimerIsPaused(gv_timeinnet.lv_nettimeTimers[auto43026597_var]) == false)) {
            gv_goalieTimersArePaused[auto43026597_var] = true;
            TimerPause(gv_timeinnet.lv_nettimeTimers[auto43026597_var], true);
        }

    }
    GameSetLighting("AdsiPistol", 0.0);
    if ((gv_pausedpossession != -1)) {
        gv_playerNoCheck[gv_pausedpossession] = true;
        gv_windingUp[gv_pausedpossession] = false;
        gv_ShotCount[gv_pausedpossession] = false;
        gv_ShotCount2[gv_pausedpossession] = false;
        gv_Shoot[gv_pausedpossession] = false;
        DialogSetVisible(gv_PowerBarDialog[gv_pausedpossession], PlayerGroupSingle(gv_pausedpossession), false);
        DialogControlSetSize(gv_PowerBarImage[gv_pausedpossession], PlayerGroupAll(), 1, 22);
    }

    gv_Possession = -1;
    gf_Startpausecounter(lp_team);
    gf_Team3uidisable();
    return true;
}

trigger auto_gf_Team3uidisable_Trigger = null;

void gf_Team3uidisable () {
    if (auto_gf_Team3uidisable_Trigger == null) {
        auto_gf_Team3uidisable_Trigger = TriggerCreate("auto_gf_Team3uidisable_TriggerFunc");
    }

    TriggerExecute(auto_gf_Team3uidisable_Trigger, false, false);
}

bool auto_gf_Team3uidisable_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_team3UI.lv_panels[1], GameAttributePlayersForTeam(3), false);
    DialogSetVisible(gv_team3UI.lv_panels[2], GameAttributePlayersForTeam(3), false);
    DialogSetVisible(gv_team3UI.lv_panels[3], GameAttributePlayersForTeam(3), false);
    DialogSetVisible(gv_team3UI.lv_panels[4], GameAttributePlayersForTeam(3), false);
    DialogSetVisible(gv_team3UI.lv_panels[5], GameAttributePlayersForTeam(3), false);
    DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[1], GameAttributePlayersForTeam(3), false);
    DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[2], GameAttributePlayersForTeam(3), false);
    return true;
}

trigger auto_gf_Team3uienable_Trigger = null;

void gf_Team3uienable () {
    if (auto_gf_Team3uienable_Trigger == null) {
        auto_gf_Team3uienable_Trigger = TriggerCreate("auto_gf_Team3uienable_TriggerFunc");
    }

    TriggerExecute(auto_gf_Team3uienable_Trigger, false, false);
}

bool auto_gf_Team3uienable_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[1], GameAttributePlayersForTeam(3), true);
    DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[2], GameAttributePlayersForTeam(3), true);
    return true;
}

trigger auto_gf_GameResumed_Trigger = null;

void gf_GameResumed () {
    if (auto_gf_GameResumed_Trigger == null) {
        auto_gf_GameResumed_Trigger = TriggerCreate("auto_gf_GameResumed_TriggerFunc");
    }

    TriggerExecute(auto_gf_GameResumed_Trigger, false, false);
}

bool auto_gf_GameResumed_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCB7C606C_g;
    int autoCB7C606C_var;
    playergroup autoA0659157_g;
    int autoA0659157_var;

    // Implementation
    gv_gameispaused = false;
    gf_Team3UITogglePauseButton();
    gv_Possession = gv_pausedpossession;
    UnitPauseAll(false);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimSetPausedAll 0");
    autoCB7C606C_g = PlayerGroupAll();
    autoCB7C606C_var = -1;
    while (true) {
        autoCB7C606C_var = PlayerGroupNextPlayer(autoCB7C606C_g, autoCB7C606C_var);
        if (autoCB7C606C_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[autoCB7C606C_var]) == true)) {
            UnitSetPropertyFixed(gv_Skaters[autoCB7C606C_var], c_unitPropBaseMovementSpeed, gv_baseMovementSpeeds[autoCB7C606C_var]);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "CancelOneTimer", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "NewOneTimer", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "Check", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "ShootPuckDummyAbility", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "PingMarkerCreate", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "ShootPuck", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "NewForceField", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "move", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "stop", true);
            UnitAbilityEnable(gv_Skaters[autoCB7C606C_var], "SlideStop", true);
            UnitSetCustomValue(gv_Skaters[autoCB7C606C_var], 0, gv_customVar0store[autoCB7C606C_var]);
            UnitSetCustomValue(gv_Skaters[autoCB7C606C_var], 1, gv_customVar1store[autoCB7C606C_var]);
            UnitSetCustomValue(gv_Skaters[autoCB7C606C_var], 2, gv_customVar2store[autoCB7C606C_var]);
            UnitSetCustomValue(gv_Skaters[autoCB7C606C_var], 3, gv_customVar3store[autoCB7C606C_var]);
        }

    }
    UnitSetCustomValue(gv_pUCK, 0, gv_customVarPuckstore[0]);
    UnitSetCustomValue(gv_pUCK, 1, gv_customVarPuckstore[1]);
    UnitSetCustomValue(gv_pUCK, 2, gv_customVarPuckstore[2]);
    UnitSetCustomValue(gv_pUCK, 3, gv_customVarPuckstore[3]);
    UnitSetCustomValue(gv_pUCK, 4, gv_customVarPuckstore[4]);
    if ((gv_maintimerwaspaused == true)) {
        TimerPause(gv_Timer, false);
    }

    GamePauseAllCharges(false);
    GamePauseAllCooldowns(false);
    TriggerEnable(gt_ShotPower2, true);
    TriggerEnable(gt_ShootPuck, true);
    TriggerEnable(gt_ShootPuck3, true);
    TriggerEnable(gt_StealPuck, true);
    autoA0659157_g = PlayerGroupAll();
    autoA0659157_var = -1;
    while (true) {
        autoA0659157_var = PlayerGroupNextPlayer(autoA0659157_g, autoA0659157_var);
        if (autoA0659157_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[autoA0659157_var]) == true) && (gv_goalieTimersArePaused[autoA0659157_var] == true)) {
            TimerPause(gv_timeinnet.lv_nettimeTimers[autoA0659157_var], false);
        }

    }
    return true;
}

trigger auto_gf_UnpaseGame_Trigger = null;

void gf_UnpaseGame () {
    if (auto_gf_UnpaseGame_Trigger == null) {
        auto_gf_UnpaseGame_Trigger = TriggerCreate("auto_gf_UnpaseGame_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnpaseGame_Trigger, false, false);
}

bool auto_gf_UnpaseGame_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_pauseresumebutton, PlayerGroupAll(), false);
    gv_startresumecountdown = true;
    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/9AD2173F"), PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/ADA024FE"), PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/E108DAE7"), PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/F26AD7E3"), PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_Resetlighting();
    Wait(1.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_pausetimeremainingdialogitem, TextExpressionAssemble("Param/Expression/0F770370"), PlayerGroupAll());
    SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Alert_GameResumed_Prot", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogSetVisible(gv_pausetimeremainingdialog, PlayerGroupAll(), false);
    gf_GameResumed();
    gv_startresumecountdown = false;
    gf_Team3uienable();
    return true;
}

trigger auto_gf_LeagueJerseys_Trigger = null;

void gf_LeagueJerseys () {
    if (auto_gf_LeagueJerseys_Trigger == null) {
        auto_gf_LeagueJerseys_Trigger = TriggerCreate("auto_gf_LeagueJerseys_TriggerFunc");
    }

    TriggerExecute(auto_gf_LeagueJerseys_Trigger, false, false);
}

bool auto_gf_LeagueJerseys_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto73C225F6_g;
    int auto73C225F6_var;
    playergroup auto464251A6_g;
    int auto464251A6_var;

    // Implementation
    if ((gv_jerseyVars.lv_jerseysareonforteam[1] == true)) {
        auto73C225F6_g = gv_actualPlayerzonTeam[1];
        auto73C225F6_var = -1;
        while (true) {
            auto73C225F6_var = PlayerGroupNextPlayer(auto73C225F6_g, auto73C225F6_var);
            if (auto73C225F6_var < 0) { break; }
            if ((auto73C225F6_var != gv_Players[2]) && (auto73C225F6_var != gv_Players[6])) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto73C225F6_var], "ModelSwap Zealot");
                UnitSetScale(gv_Skaters[auto73C225F6_var], 200.0, 200.0, 200.0);
                UnitSetHeight(gv_Skaters[auto73C225F6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto73C225F6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto73C225F6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team1TeamNumber == 1)) {
                    gf_Jersey1(auto73C225F6_var, false);
                }
                else {
                    if ((gv_jerseyVars.lv_team1TeamNumber == 2)) {
                        gf_Jersey2(auto73C225F6_var, false);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team1TeamNumber == 3)) {
                            gf_Jersey3(auto73C225F6_var, false);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team1TeamNumber == 4)) {
                                gf_Jersey4(auto73C225F6_var, false);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team1TeamNumber == 5)) {
                                    gf_Jersey5(auto73C225F6_var, false);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team1TeamNumber == 6)) {
                                        gf_Jersey6(auto73C225F6_var, false);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team1TeamNumber == 7)) {
                                            gf_Jersey7(auto73C225F6_var, false);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team1TeamNumber == 8)) {
                                                gf_Jersey8(auto73C225F6_var, false);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team1TeamNumber == 9)) {
                                                    gf_Jersey9(auto73C225F6_var, false);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team1TeamNumber == 10)) {
                                                        gf_Jersey10(auto73C225F6_var, false);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team1TeamNumber == 11)) {
                                                            gf_Jersey11(auto73C225F6_var, false);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team1TeamNumber == 12)) {
                                                                gf_Jersey12(auto73C225F6_var, false);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team1TeamNumber == 13)) {
                                                                    gf_Jersey13(auto73C225F6_var, false);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (((auto73C225F6_var == gv_Players[2]) || (auto73C225F6_var == gv_Players[6]))) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto73C225F6_var], "ModelSwap Immortal");
                UnitSetScale(gv_Skaters[auto73C225F6_var], 160.0, 160.0, 160.0);
                UnitSetHeight(gv_Skaters[auto73C225F6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto73C225F6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto73C225F6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team1TeamNumber == 1)) {
                    gf_Jersey1(auto73C225F6_var, true);
                }
                else {
                    if ((gv_jerseyVars.lv_team1TeamNumber == 2)) {
                        gf_Jersey2(auto73C225F6_var, true);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team1TeamNumber == 3)) {
                            gf_Jersey3(auto73C225F6_var, true);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team1TeamNumber == 4)) {
                                gf_Jersey4(auto73C225F6_var, true);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team1TeamNumber == 5)) {
                                    gf_Jersey5(auto73C225F6_var, true);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team1TeamNumber == 6)) {
                                        gf_Jersey6(auto73C225F6_var, true);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team1TeamNumber == 7)) {
                                            gf_Jersey7(auto73C225F6_var, true);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team1TeamNumber == 8)) {
                                                gf_Jersey8(auto73C225F6_var, true);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team1TeamNumber == 9)) {
                                                    gf_Jersey9(auto73C225F6_var, true);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team1TeamNumber == 10)) {
                                                        gf_Jersey10(auto73C225F6_var, true);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team1TeamNumber == 11)) {
                                                            gf_Jersey11(auto73C225F6_var, true);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team1TeamNumber == 12)) {
                                                                gf_Jersey12(auto73C225F6_var, true);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team1TeamNumber == 13)) {
                                                                    gf_Jersey13(auto73C225F6_var, true);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if ((((auto73C225F6_var == gv_Players[2]) && (gv_pullGoalie[1] == true)) || ((auto73C225F6_var == gv_Players[6]) && (gv_pullGoalie[2] == true)))) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto73C225F6_var], "ModelSwap Zealot");
                UnitSetScale(gv_Skaters[auto73C225F6_var], 200.0, 200.0, 200.0);
                UnitSetHeight(gv_Skaters[auto73C225F6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto73C225F6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto73C225F6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team1TeamNumber == 1)) {
                    gf_Jersey1(auto73C225F6_var, false);
                }
                else {
                    if ((gv_jerseyVars.lv_team1TeamNumber == 2)) {
                        gf_Jersey2(auto73C225F6_var, false);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team1TeamNumber == 3)) {
                            gf_Jersey3(auto73C225F6_var, false);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team1TeamNumber == 4)) {
                                gf_Jersey4(auto73C225F6_var, false);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team1TeamNumber == 5)) {
                                    gf_Jersey5(auto73C225F6_var, false);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team1TeamNumber == 6)) {
                                        gf_Jersey6(auto73C225F6_var, false);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team1TeamNumber == 7)) {
                                            gf_Jersey7(auto73C225F6_var, false);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team1TeamNumber == 8)) {
                                                gf_Jersey8(auto73C225F6_var, false);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team1TeamNumber == 9)) {
                                                    gf_Jersey9(auto73C225F6_var, false);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team1TeamNumber == 10)) {
                                                        gf_Jersey10(auto73C225F6_var, false);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team1TeamNumber == 11)) {
                                                            gf_Jersey11(auto73C225F6_var, false);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team1TeamNumber == 12)) {
                                                                gf_Jersey12(auto73C225F6_var, false);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team1TeamNumber == 13)) {
                                                                    gf_Jersey13(auto73C225F6_var, false);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
    }

    if ((gv_jerseyVars.lv_jerseysareonforteam[2] == true)) {
        auto464251A6_g = gv_actualPlayerzonTeam[2];
        auto464251A6_var = -1;
        while (true) {
            auto464251A6_var = PlayerGroupNextPlayer(auto464251A6_g, auto464251A6_var);
            if (auto464251A6_var < 0) { break; }
            if ((auto464251A6_var != gv_Players[2]) && (auto464251A6_var != gv_Players[6])) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto464251A6_var], "ModelSwap Zealot");
                UnitSetScale(gv_Skaters[auto464251A6_var], 200.0, 200.0, 200.0);
                UnitSetHeight(gv_Skaters[auto464251A6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto464251A6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto464251A6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team2TeamNumber == 1)) {
                    gf_Jersey1(auto464251A6_var, false);
                }
                else {
                    if ((gv_jerseyVars.lv_team2TeamNumber == 2)) {
                        gf_Jersey2(auto464251A6_var, false);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team2TeamNumber == 3)) {
                            gf_Jersey3(auto464251A6_var, false);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team2TeamNumber == 4)) {
                                gf_Jersey4(auto464251A6_var, false);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team2TeamNumber == 5)) {
                                    gf_Jersey5(auto464251A6_var, false);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team2TeamNumber == 6)) {
                                        gf_Jersey6(auto464251A6_var, false);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team2TeamNumber == 7)) {
                                            gf_Jersey7(auto464251A6_var, false);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team2TeamNumber == 8)) {
                                                gf_Jersey8(auto464251A6_var, false);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team2TeamNumber == 9)) {
                                                    gf_Jersey9(auto464251A6_var, false);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team2TeamNumber == 10)) {
                                                        gf_Jersey10(auto464251A6_var, false);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team2TeamNumber == 11)) {
                                                            gf_Jersey11(auto464251A6_var, false);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team2TeamNumber == 12)) {
                                                                gf_Jersey12(auto464251A6_var, false);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team2TeamNumber == 13)) {
                                                                    gf_Jersey13(auto464251A6_var, false);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (((auto464251A6_var == gv_Players[2]) || (auto464251A6_var == gv_Players[6]))) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto464251A6_var], "ModelSwap Immortal");
                UnitSetScale(gv_Skaters[auto464251A6_var], 160.0, 160.0, 160.0);
                UnitSetHeight(gv_Skaters[auto464251A6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto464251A6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto464251A6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team2TeamNumber == 1)) {
                    gf_Jersey1(auto464251A6_var, true);
                }
                else {
                    if ((gv_jerseyVars.lv_team2TeamNumber == 2)) {
                        gf_Jersey2(auto464251A6_var, true);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team2TeamNumber == 3)) {
                            gf_Jersey3(auto464251A6_var, true);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team2TeamNumber == 4)) {
                                gf_Jersey4(auto464251A6_var, true);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team2TeamNumber == 5)) {
                                    gf_Jersey5(auto464251A6_var, true);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team2TeamNumber == 6)) {
                                        gf_Jersey6(auto464251A6_var, true);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team2TeamNumber == 7)) {
                                            gf_Jersey7(auto464251A6_var, true);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team2TeamNumber == 8)) {
                                                gf_Jersey8(auto464251A6_var, true);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team2TeamNumber == 9)) {
                                                    gf_Jersey9(auto464251A6_var, true);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team2TeamNumber == 10)) {
                                                        gf_Jersey10(auto464251A6_var, true);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team2TeamNumber == 11)) {
                                                            gf_Jersey11(auto464251A6_var, true);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team2TeamNumber == 12)) {
                                                                gf_Jersey12(auto464251A6_var, true);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team2TeamNumber == 13)) {
                                                                    gf_Jersey13(auto464251A6_var, true);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if ((((auto464251A6_var == gv_Players[2]) && (gv_pullGoalie[1] == true)) || ((auto464251A6_var == gv_Players[6]) && (gv_pullGoalie[2] == true)))) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto464251A6_var], "ModelSwap Zealot");
                UnitSetScale(gv_Skaters[auto464251A6_var], 200.0, 200.0, 200.0);
                UnitSetHeight(gv_Skaters[auto464251A6_var], 0.0, 0.0);
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto464251A6_var]), "TextureResetToDefault");
                ActorScopeSend(ActorScopeFromUnit(gv_Sticks[auto464251A6_var]), "TextureResetToDefault");
                if ((gv_jerseyVars.lv_team2TeamNumber == 1)) {
                    gf_Jersey1(auto464251A6_var, false);
                }
                else {
                    if ((gv_jerseyVars.lv_team2TeamNumber == 2)) {
                        gf_Jersey2(auto464251A6_var, false);
                    }
                    else {
                        if ((gv_jerseyVars.lv_team2TeamNumber == 3)) {
                            gf_Jersey3(auto464251A6_var, false);
                        }
                        else {
                            if ((gv_jerseyVars.lv_team2TeamNumber == 4)) {
                                gf_Jersey4(auto464251A6_var, false);
                            }
                            else {
                                if ((gv_jerseyVars.lv_team2TeamNumber == 5)) {
                                    gf_Jersey5(auto464251A6_var, false);
                                }
                                else {
                                    if ((gv_jerseyVars.lv_team2TeamNumber == 6)) {
                                        gf_Jersey6(auto464251A6_var, false);
                                    }
                                    else {
                                        if ((gv_jerseyVars.lv_team2TeamNumber == 7)) {
                                            gf_Jersey7(auto464251A6_var, false);
                                        }
                                        else {
                                            if ((gv_jerseyVars.lv_team2TeamNumber == 8)) {
                                                gf_Jersey8(auto464251A6_var, false);
                                            }
                                            else {
                                                if ((gv_jerseyVars.lv_team2TeamNumber == 9)) {
                                                    gf_Jersey9(auto464251A6_var, false);
                                                }
                                                else {
                                                    if ((gv_jerseyVars.lv_team2TeamNumber == 10)) {
                                                        gf_Jersey10(auto464251A6_var, false);
                                                    }
                                                    else {
                                                        if ((gv_jerseyVars.lv_team2TeamNumber == 11)) {
                                                            gf_Jersey11(auto464251A6_var, false);
                                                        }
                                                        else {
                                                            if ((gv_jerseyVars.lv_team2TeamNumber == 12)) {
                                                                gf_Jersey12(auto464251A6_var, false);
                                                            }
                                                            else {
                                                                if ((gv_jerseyVars.lv_team2TeamNumber == 13)) {
                                                                    gf_Jersey13(auto464251A6_var, false);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }
    }

    return true;
}

void gf_Jersey1 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 50.20, 100.00), Color(0.00, 50.20, 100.00)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_TextureSelectByID("Jersey1Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey1Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_TextureSelectByID("Jersey1Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey1Stick"));
    }
}

void gf_Jersey2 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(10.98, 23.92, 75.69), Color(10.98, 23.92, 75.69)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_TextureSelectByID("Jersey2Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey2Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(10.98, 23.92, 75.69), Color(10.98, 23.92, 75.69)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_TextureSelectByID("Jersey2Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey2Stick"));
    }
}

void gf_Jersey3 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(38.43, 76.86, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey3Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey3Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(38.43, 76.86, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey3Goalie"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey3Stick"));
    }
}

void gf_Jersey4 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(50.20, 25.10, 0.00), Color(50.20, 25.10, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey4Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey4Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(50.20, 25.10, 0.00), Color(50.20, 25.10, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey4Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey4Stick"));
    }
}

void gf_Jersey5 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 50.20, 0.00), Color(100.00, 50.20, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey5Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey5Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 50.20, 0.00), Color(100.00, 50.20, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey5Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey5Stick"));
    }
}

void gf_Jersey6 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey6Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey6Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey6Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey6Stick"));
    }
}

void gf_Jersey7 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 50.20), Color(50.20, 0.00, 50.20)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey7Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey7Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 50.20), Color(50.20, 0.00, 50.20)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey7Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey7Stick"));
    }
}

void gf_Jersey8 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey8Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey8Stick"));
    }
}

void gf_Jersey9 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey9Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey9stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey9Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey9stick"));
    }
}

void gf_Jersey10 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 0.00), Color(100.00, 100.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey10Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey10Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 0.00), Color(100.00, 100.00, 0.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey10Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey10Stick"));
    }
}

void gf_Jersey11 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey11Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey11Stick"));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey11Immortal"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey11Stick"));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
    }
}

void gf_Jersey12 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey12Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey12Zealot"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey12Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey12Zealot"));
    }
}

void gf_Jersey13 (int lp_player, bool lp_isGoalie) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_isGoalie == false)) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 78.43, 43.14), Color(0.00, 78.43, 43.14)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey13Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey13Stick"));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(0.00, 78.43, 43.14), Color(0.00, 78.43, 43.14)));
        ActorScopeSend(ActorScopeFromUnit(gv_Skaters[lp_player]), libNtve_gf_TextureSelectByID("Jersey13Zealot"));
        libNtve_gf_SendActorMessageToUnit(gv_Sticks[lp_player], libNtve_gf_TextureSelectByID("Jersey13Stick"));
    }
}

trigger auto_gf_DetectJersiesonoroff_Trigger = null;

void gf_DetectJersiesonoroff () {
    if (auto_gf_DetectJersiesonoroff_Trigger == null) {
        auto_gf_DetectJersiesonoroff_Trigger = TriggerCreate("auto_gf_DetectJersiesonoroff_TriggerFunc");
    }

    TriggerExecute(auto_gf_DetectJersiesonoroff_Trigger, false, false);
}

bool auto_gf_DetectJersiesonoroff_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("3") == "0001")) {
        gv_jerseyVars.lv_team1TeamNumber = 1;
    }
    else {
        if ((GameAttributeGameValue("3") == "0002")) {
            gv_jerseyVars.lv_team1TeamNumber = 2;
        }
        else {
            if ((GameAttributeGameValue("3") == "0003")) {
                gv_jerseyVars.lv_team1TeamNumber = 3;
            }
            else {
                if ((GameAttributeGameValue("3") == "0004")) {
                    gv_jerseyVars.lv_team1TeamNumber = 4;
                }
                else {
                    if ((GameAttributeGameValue("3") == "0005")) {
                        gv_jerseyVars.lv_team1TeamNumber = 5;
                    }
                    else {
                        if ((GameAttributeGameValue("3") == "0006")) {
                            gv_jerseyVars.lv_team1TeamNumber = 6;
                        }
                        else {
                            if ((GameAttributeGameValue("3") == "0007")) {
                                gv_jerseyVars.lv_team1TeamNumber = 7;
                            }
                            else {
                                if ((GameAttributeGameValue("3") == "0008")) {
                                    gv_jerseyVars.lv_team1TeamNumber = 8;
                                }
                                else {
                                    if ((GameAttributeGameValue("3") == "0009")) {
                                        gv_jerseyVars.lv_team1TeamNumber = 9;
                                    }
                                    else {
                                        if ((GameAttributeGameValue("3") == "0010")) {
                                            gv_jerseyVars.lv_team1TeamNumber = 10;
                                        }
                                        else {
                                            if ((GameAttributeGameValue("3") == "0012")) {
                                                gv_jerseyVars.lv_team1TeamNumber = 11;
                                            }
                                            else {
                                                if ((GameAttributeGameValue("3") == "0014")) {
                                                    gv_jerseyVars.lv_team1TeamNumber = 12;
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("3") == "0013")) {
                                                        gv_jerseyVars.lv_team1TeamNumber = 13;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((GameAttributeGameValue("4") == "0001")) {
        gv_jerseyVars.lv_team2TeamNumber = 1;
    }
    else {
        if ((GameAttributeGameValue("4") == "0002")) {
            gv_jerseyVars.lv_team2TeamNumber = 2;
        }
        else {
            if ((GameAttributeGameValue("4") == "0003")) {
                gv_jerseyVars.lv_team2TeamNumber = 3;
            }
            else {
                if ((GameAttributeGameValue("4") == "0004")) {
                    gv_jerseyVars.lv_team2TeamNumber = 4;
                }
                else {
                    if ((GameAttributeGameValue("4") == "0005")) {
                        gv_jerseyVars.lv_team2TeamNumber = 5;
                    }
                    else {
                        if ((GameAttributeGameValue("4") == "0006")) {
                            gv_jerseyVars.lv_team2TeamNumber = 6;
                        }
                        else {
                            if ((GameAttributeGameValue("4") == "0007")) {
                                gv_jerseyVars.lv_team2TeamNumber = 7;
                            }
                            else {
                                if ((GameAttributeGameValue("4") == "0008")) {
                                    gv_jerseyVars.lv_team2TeamNumber = 8;
                                }
                                else {
                                    if ((GameAttributeGameValue("4") == "0009")) {
                                        gv_jerseyVars.lv_team2TeamNumber = 9;
                                    }
                                    else {
                                        if ((GameAttributeGameValue("4") == "0010")) {
                                            gv_jerseyVars.lv_team2TeamNumber = 10;
                                        }
                                        else {
                                            if ((GameAttributeGameValue("4") == "0012")) {
                                                gv_jerseyVars.lv_team2TeamNumber = 11;
                                            }
                                            else {
                                                if ((GameAttributeGameValue("4") == "0013")) {
                                                    gv_jerseyVars.lv_team2TeamNumber = 12;
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("4") == "0014")) {
                                                        gv_jerseyVars.lv_team2TeamNumber = 13;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((GameAttributeGameValue("5") == "0010")) {
        gv_jerseyVars.lv_jerseysareonforteam[1] = true;
    }

    if ((GameAttributeGameValue("6") == "0010")) {
        gv_jerseyVars.lv_jerseysareonforteam[2] = true;
    }

    return true;
}

string gf_Selectrandomad () {
    // Variable Declarations
    int lv_randomint;
    string[22] lv_possibilities;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomint = RandomInt(1, 21);
    lv_possibilities[1] = "WallAd1";
    lv_possibilities[2] = "WallAd12";
    lv_possibilities[3] = "WallAd122";
    lv_possibilities[4] = "WallAd1222";
    lv_possibilities[5] = "WallAd12222";
    lv_possibilities[6] = "WallAd122222";
    lv_possibilities[7] = "WallAd1222222";
    lv_possibilities[8] = "WallAd12222222";
    lv_possibilities[9] = "WallAd122222222";
    lv_possibilities[10] = "WallAd1222222222";
    lv_possibilities[11] = "WallAd12222222222";
    lv_possibilities[12] = "WallAd122222222222";
    lv_possibilities[13] = "WallAd1222222222222";
    lv_possibilities[14] = "WallAd12222222222222";
    lv_possibilities[15] = "WallAd122222222222222";
    lv_possibilities[16] = "WallAd1222222222222222";
    lv_possibilities[17] = "WallAd12222222222222222";
    lv_possibilities[18] = "WallAd122222222222222222";
    lv_possibilities[19] = "WallAd1222222222222222222";
    lv_possibilities[20] = "WallAd12222222222222222222";
    lv_possibilities[21] = "WallAd122222222222222222222";
    return lv_possibilities[lv_randomint];
}

trigger auto_gf_Createwallads_Trigger = null;

void gf_Createwallads () {
    if (auto_gf_Createwallads_Trigger == null) {
        auto_gf_Createwallads_Trigger = TriggerCreate("auto_gf_Createwallads_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createwallads_Trigger, false, false);
}

bool auto_gf_Createwallads_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto022DF857_ae = 4;
    int auto022DF857_var;
    const int autoC5BE30CE_ae = 7;
    int autoC5BE30CE_var;
    const int auto53560811_ae = 10;
    int auto53560811_var;

    // Implementation
    if (((GameAttributeGameValue("2") != "0002") || ((GameAttributeGameValue("2") == "0002") && (gv_team1LogoUnitType == null)))) {
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(67.26, 163.24));
        gv_walladvertisements[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(101.32, 163.26));
        gv_walladvertisements[2] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(136.41, 163.28));
        gv_walladvertisements[3] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(171.16, 163.14));
        gv_walladvertisements[4] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(215.08, 135.7));
        gv_walladvertisements[5] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(215.03, 111.41));
        gv_walladvertisements[6] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(214.42, 83.44));
        gv_walladvertisements[7] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(40.66, 133.87));
        gv_walladvertisements[8] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(40.61, 110.6));
        gv_walladvertisements[9] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint(gf_Selectrandomad(), Point(40.59, 82.53));
        gv_walladvertisements[10] = libNtve_gf_ActorLastCreated();
        Wait(1.0, c_timeGame);
        auto022DF857_var = 1;
        for ( ; auto022DF857_var <= auto022DF857_ae; auto022DF857_var += 1 ) {
            ActorSend(gv_walladvertisements[auto022DF857_var], libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
            ActorSend(gv_walladvertisements[auto022DF857_var], libNtve_gf_SetHeight(8.5));
            ActorSend(gv_walladvertisements[auto022DF857_var], libNtve_gf_SetOpacity(1.0, 0));
            ActorSend(gv_walladvertisements[auto022DF857_var], libNtve_gf_SetScale(1.2, 1.2, 1.2, 0.0));
        }
        autoC5BE30CE_var = 5;
        for ( ; autoC5BE30CE_var <= autoC5BE30CE_ae; autoC5BE30CE_var += 1 ) {
            ActorSend(gv_walladvertisements[autoC5BE30CE_var], libNtve_gf_SetRotation(0.0, 0.0, -1.0, -1.0, 0.0, 1.0));
            ActorSend(gv_walladvertisements[autoC5BE30CE_var], libNtve_gf_SetHeight(8.5));
            ActorSend(gv_walladvertisements[autoC5BE30CE_var], libNtve_gf_SetOpacity(1.0, 0));
            ActorSend(gv_walladvertisements[autoC5BE30CE_var], libNtve_gf_SetScale(1.2, 1.2, 1.2, 0.0));
        }
        auto53560811_var = 8;
        for ( ; auto53560811_var <= auto53560811_ae; auto53560811_var += 1 ) {
            ActorSend(gv_walladvertisements[auto53560811_var], libNtve_gf_SetRotation(0.0, 0.0, -1.0, 1.0, 0.0, -1.0));
            ActorSend(gv_walladvertisements[auto53560811_var], libNtve_gf_SetHeight(8.5));
            ActorSend(gv_walladvertisements[auto53560811_var], libNtve_gf_SetOpacity(1.0, 0));
            ActorSend(gv_walladvertisements[auto53560811_var], libNtve_gf_SetScale(1.2, 1.2, 1.2, 0.0));
        }
    }

    return true;
}

trigger auto_gf_Createteamwalllogos_Trigger = null;

void gf_Createteamwalllogos () {
    if (auto_gf_Createteamwalllogos_Trigger == null) {
        auto_gf_Createteamwalllogos_Trigger = TriggerCreate("auto_gf_Createteamwalllogos_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createteamwalllogos_Trigger, false, false);
}

bool auto_gf_Createteamwalllogos_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit[21] lv_wallLogos;

    // Automatic Variable Declarations
    const int auto07EF03E0_ae = 4;
    int auto07EF03E0_var;
    const int autoDEB6AD61_ae = 7;
    int autoDEB6AD61_var;
    const int autoB6CF738C_ae = 10;
    int autoB6CF738C_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(67.26, 163.24), PointFromId(112));
    lv_wallLogos[1] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(101.32, 163.26), PointFromId(112));
    lv_wallLogos[2] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(136.41, 163.28), PointFromId(112));
    lv_wallLogos[3] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(171.16, 163.14), PointFromId(112));
    lv_wallLogos[4] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(215.08, 135.7), PointFromId(112));
    lv_wallLogos[5] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(215.03, 111.41), PointFromId(112));
    lv_wallLogos[6] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(214.42, 83.44), PointFromId(112));
    lv_wallLogos[7] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(40.66, 133.87), PointFromId(112));
    lv_wallLogos[8] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(40.61, 110.6), PointFromId(112));
    lv_wallLogos[9] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, Point(40.59, 82.53), PointFromId(112));
    lv_wallLogos[10] = UnitLastCreated();
    Wait(1.0, c_timeGame);
    auto07EF03E0_var = 1;
    for ( ; auto07EF03E0_var <= auto07EF03E0_ae; auto07EF03E0_var += 1 ) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[auto07EF03E0_var]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[auto07EF03E0_var]), libNtve_gf_SetHeight(8.5));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[auto07EF03E0_var]), libNtve_gf_SetOpacity(1.0, 0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[auto07EF03E0_var]), libNtve_gf_SetScale(0.7, 0.7, 0.7, 0.0));
    }
    autoDEB6AD61_var = 5;
    for ( ; autoDEB6AD61_var <= autoDEB6AD61_ae; autoDEB6AD61_var += 1 ) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoDEB6AD61_var]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, -1.0, 0.0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoDEB6AD61_var]), libNtve_gf_SetHeight(8.5));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoDEB6AD61_var]), libNtve_gf_SetOpacity(1.0, 0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoDEB6AD61_var]), libNtve_gf_SetScale(0.7, 0.7, 0.7, 0.0));
    }
    autoB6CF738C_var = 8;
    for ( ; autoB6CF738C_var <= autoB6CF738C_ae; autoB6CF738C_var += 1 ) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoB6CF738C_var]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 1.0, 0.0, -1.0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoB6CF738C_var]), libNtve_gf_SetHeight(8.5));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoB6CF738C_var]), libNtve_gf_SetOpacity(1.0, 0));
        ActorSend(libNtve_gf_MainActorofUnit(lv_wallLogos[autoB6CF738C_var]), libNtve_gf_SetScale(0.7, 0.7, 0.7, 0.0));
    }
    return true;
}

trigger auto_gf_Setcentericelogo_Trigger = null;

void gf_Setcentericelogo () {
    if (auto_gf_Setcentericelogo_Trigger == null) {
        auto_gf_Setcentericelogo_Trigger = TriggerCreate("auto_gf_Setcentericelogo_TriggerFunc");
    }

    TriggerExecute(auto_gf_Setcentericelogo_Trigger, false, false);
}

bool auto_gf_Setcentericelogo_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0011")) {
        gv_leagueBannerImage = "ZHLLOGO";
        if ((GameAttributeGameValue("3") == "0001")) {
            UnitRemove(UnitFromId(208));
            UnitCreate(1, "ZHL02", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
            gv_centerIcoLogoUnit = UnitLastCreated();
            gv_team1LogoUnitType = "ZHL02";
        }
        else {
            if ((GameAttributeGameValue("3") == "0002")) {
                UnitRemove(UnitFromId(208));
                UnitCreate(1, "ZHL03", c_unitCreateIgnorePlacement, 0, PointWithOffset(PointFromId(112), -0.5, 0.5), 270.0);
                gv_centerIcoLogoUnit = UnitLastCreated();
                gv_team1LogoUnitType = "ZHL03";
            }
            else {
                if ((GameAttributeGameValue("3") == "0003")) {
                    UnitRemove(UnitFromId(208));
                    UnitCreate(1, "ZHL04", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                    gv_centerIcoLogoUnit = UnitLastCreated();
                    gv_team1LogoUnitType = "ZHL04";
                }
                else {
                    if ((GameAttributeGameValue("3") == "0004")) {
                        UnitRemove(UnitFromId(208));
                        UnitCreate(1, "ZHL0822", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                        gv_centerIcoLogoUnit = UnitLastCreated();
                        gv_team1LogoUnitType = "ZHL0822";
                    }
                    else {
                        if ((GameAttributeGameValue("3") == "0005")) {
                            UnitRemove(UnitFromId(208));
                            UnitCreate(1, "ZHL05", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                            gv_centerIcoLogoUnit = UnitLastCreated();
                            gv_team1LogoUnitType = "ZHL05";
                        }
                        else {
                            if ((GameAttributeGameValue("3") == "0006")) {
                                UnitRemove(UnitFromId(208));
                                UnitCreate(1, "ZHL082", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                gv_centerIcoLogoUnit = UnitLastCreated();
                                gv_team1LogoUnitType = "ZHL082";
                            }
                            else {
                                if ((GameAttributeGameValue("3") == "0007")) {
                                    UnitRemove(UnitFromId(208));
                                    UnitCreate(1, "ZHL08", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                    gv_centerIcoLogoUnit = UnitLastCreated();
                                    gv_team1LogoUnitType = "ZHL08";
                                }
                                else {
                                    if ((GameAttributeGameValue("3") == "0008")) {
                                        UnitRemove(UnitFromId(208));
                                        UnitCreate(1, "ZHL06", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                        gv_centerIcoLogoUnit = UnitLastCreated();
                                        gv_team1LogoUnitType = "ZHL06";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("3") == "0009")) {
                                            UnitRemove(UnitFromId(208));
                                            UnitCreate(1, "ZHL01", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                            gv_centerIcoLogoUnit = UnitLastCreated();
                                            gv_team1LogoUnitType = "ZHL01";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("3") == "0010")) {
                                                UnitRemove(UnitFromId(208));
                                                UnitCreate(1, "ZHL07", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                gv_centerIcoLogoUnit = UnitLastCreated();
                                                gv_team1LogoUnitType = "ZHL07";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("3") == "0012")) {
                                                    UnitRemove(UnitFromId(208));
                                                    UnitCreate(1, "ZHL08222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                    gv_centerIcoLogoUnit = UnitLastCreated();
                                                    gv_team1LogoUnitType = "ZHL08222";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("3") == "0014")) {
                                                        UnitRemove(UnitFromId(208));
                                                        UnitCreate(1, "ZHL082222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                        gv_centerIcoLogoUnit = UnitLastCreated();
                                                        gv_team1LogoUnitType = "ZHL082222";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("3") == "0013")) {
                                                            UnitRemove(UnitFromId(208));
                                                            UnitCreate(1, "ZHL0822222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                            gv_centerIcoLogoUnit = UnitLastCreated();
                                                            gv_team1LogoUnitType = "ZHL0822222";
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0010")) {
        gv_leagueBannerImage = "ZHPLLOGO";
        if ((GameAttributeGameValue("3") == "0001")) {
            UnitRemove(UnitFromId(208));
            UnitCreate(1, "ZHPL01", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
            gv_centerIcoLogoUnit = UnitLastCreated();
            gv_team1LogoUnitType = "ZHPL01";
        }
        else {
            if ((GameAttributeGameValue("3") == "0002")) {
                UnitRemove(UnitFromId(208));
                UnitCreate(1, "ZHPL012", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                gv_centerIcoLogoUnit = UnitLastCreated();
                gv_team1LogoUnitType = "ZHPL012";
            }
            else {
                if ((GameAttributeGameValue("3") == "0003")) {
                    UnitRemove(UnitFromId(208));
                    UnitCreate(1, "ZHPL0122", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                    gv_centerIcoLogoUnit = UnitLastCreated();
                    gv_team1LogoUnitType = "ZHPL0122";
                }
                else {
                    if ((GameAttributeGameValue("3") == "0004")) {
                        UnitRemove(UnitFromId(208));
                        UnitCreate(1, "ZHPL01222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                        gv_centerIcoLogoUnit = UnitLastCreated();
                        gv_team1LogoUnitType = "ZHPL01222";
                    }
                    else {
                        if ((GameAttributeGameValue("3") == "0005")) {
                            UnitRemove(UnitFromId(208));
                            UnitCreate(1, "ZHPL012222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                            gv_centerIcoLogoUnit = UnitLastCreated();
                            gv_team1LogoUnitType = "ZHPL012222";
                        }
                        else {
                            if ((GameAttributeGameValue("3") == "0006")) {
                                UnitRemove(UnitFromId(208));
                                UnitCreate(1, "ZHPL0122222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                gv_centerIcoLogoUnit = UnitLastCreated();
                                gv_team1LogoUnitType = "ZHPL0122222";
                            }
                            else {
                                if ((GameAttributeGameValue("3") == "0007")) {
                                    UnitRemove(UnitFromId(208));
                                    UnitCreate(1, "ZHPL01222222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                    gv_centerIcoLogoUnit = UnitLastCreated();
                                    gv_team1LogoUnitType = "ZHPL01222222";
                                }
                                else {
                                    if ((GameAttributeGameValue("3") == "0008")) {
                                        UnitRemove(UnitFromId(208));
                                        UnitCreate(1, "ZHPL012222222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                        gv_centerIcoLogoUnit = UnitLastCreated();
                                        gv_team1LogoUnitType = "ZHPL012222222";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("3") == "0009")) {
                                            UnitRemove(UnitFromId(208));
                                            UnitCreate(1, "ZHPL0122222222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                            gv_centerIcoLogoUnit = UnitLastCreated();
                                            gv_team1LogoUnitType = "ZHPL0122222222";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("3") == "0010")) {
                                                UnitRemove(UnitFromId(208));
                                                UnitCreate(1, "ZHPL01222222222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                gv_centerIcoLogoUnit = UnitLastCreated();
                                                gv_team1LogoUnitType = "ZHPL01222222222";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("3") == "0012")) {
                                                    UnitRemove(UnitFromId(208));
                                                    UnitCreate(1, "ZHPL012222222225", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                    gv_centerIcoLogoUnit = UnitLastCreated();
                                                    gv_team1LogoUnitType = "ZHPL012222222225";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("3") == "0014")) {
                                                        UnitRemove(UnitFromId(208));
                                                        UnitCreate(1, "ZHPL0122222222252", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                        gv_centerIcoLogoUnit = UnitLastCreated();
                                                        gv_team1LogoUnitType = "ZHPL0122222222252";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("3") == "0013")) {
                                                            UnitRemove(UnitFromId(208));
                                                            UnitCreate(1, "ZHPL01222222222522", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
                                                            gv_centerIcoLogoUnit = UnitLastCreated();
                                                            gv_team1LogoUnitType = "ZHPL01222222222522";
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0011")) {
        if ((GameAttributeGameValue("4") == "0001")) {
            gv_team2LogoUnitType = "ZHL02";
        }
        else {
            if ((GameAttributeGameValue("4") == "0002")) {
                gv_team2LogoUnitType = "ZHL03";
            }
            else {
                if ((GameAttributeGameValue("4") == "0003")) {
                    gv_team2LogoUnitType = "ZHL04";
                }
                else {
                    if ((GameAttributeGameValue("4") == "0004")) {
                        gv_team2LogoUnitType = "ZHL0822";
                    }
                    else {
                        if ((GameAttributeGameValue("4") == "0005")) {
                            gv_team2LogoUnitType = "ZHL05";
                        }
                        else {
                            if ((GameAttributeGameValue("4") == "0006")) {
                                gv_team2LogoUnitType = "ZHL082";
                            }
                            else {
                                if ((GameAttributeGameValue("4") == "0007")) {
                                    gv_team2LogoUnitType = "ZHL08";
                                }
                                else {
                                    if ((GameAttributeGameValue("4") == "0008")) {
                                        gv_team2LogoUnitType = "ZHL06";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("4") == "0009")) {
                                            gv_team2LogoUnitType = "ZHL01";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("4") == "0010")) {
                                                gv_team2LogoUnitType = "ZHL07";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("4") == "0012")) {
                                                    gv_team2LogoUnitType = "ZHL08222";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("4") == "0013")) {
                                                        gv_team2LogoUnitType = "ZHL082222";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("4") == "0014")) {
                                                            gv_team2LogoUnitType = "ZHL0822222";
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0010")) {
        if ((GameAttributeGameValue("4") == "0001")) {
            gv_team2LogoUnitType = "ZHPL01";
        }
        else {
            if ((GameAttributeGameValue("4") == "0002")) {
                gv_team2LogoUnitType = "ZHPL012";
            }
            else {
                if ((GameAttributeGameValue("4") == "0003")) {
                    gv_team2LogoUnitType = "ZHPL0122";
                }
                else {
                    if ((GameAttributeGameValue("4") == "0004")) {
                        gv_team2LogoUnitType = "ZHPL01222";
                    }
                    else {
                        if ((GameAttributeGameValue("4") == "0005")) {
                            gv_team2LogoUnitType = "ZHPL012222";
                        }
                        else {
                            if ((GameAttributeGameValue("4") == "0006")) {
                                gv_team2LogoUnitType = "ZHPL0122222";
                            }
                            else {
                                if ((GameAttributeGameValue("4") == "0007")) {
                                    gv_team2LogoUnitType = "ZHPL01222222";
                                }
                                else {
                                    if ((GameAttributeGameValue("4") == "0008")) {
                                        gv_team2LogoUnitType = "ZHPL012222222";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("4") == "0009")) {
                                            gv_team2LogoUnitType = "ZHPL0122222222";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("4") == "0010")) {
                                                gv_team2LogoUnitType = "ZHPL01222222222";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("4") == "0012")) {
                                                    gv_team2LogoUnitType = "ZHPL012222222225";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("4") == "0013")) {
                                                        gv_team2LogoUnitType = "ZHPL0122222222252";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("4") == "0014")) {
                                                            gv_team2LogoUnitType = "ZHPL01222222222522";
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    gf_CreateIntroLogos();
    gf_CreateWallBanners();
    gf_CreateProbeStadium();
    gf_CreateZHLStadium();
    return true;
}

trigger auto_gf_CreateIntroLogos_Trigger = null;

void gf_CreateIntroLogos () {
    if (auto_gf_CreateIntroLogos_Trigger == null) {
        auto_gf_CreateIntroLogos_Trigger = TriggerCreate("auto_gf_CreateIntroLogos_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateIntroLogos_Trigger, false, false);
}

bool auto_gf_CreateIntroLogos_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("2") == "0002") && (gv_team1LogoUnitType != null) && (gv_team2LogoUnitType != null)) {
        libNtve_gf_UnitCreateFacingPoint(1, gv_team1LogoUnitType, c_unitCreateIgnorePlacement, 0, PointFromId(60), PointFromId(112));
        gv_leagueTeamLogoIntroUnits[1] = UnitLastCreated();
        libNtve_gf_UnitCreateFacingPoint(1, gv_team2LogoUnitType, c_unitCreateIgnorePlacement, 0, PointFromId(61), PointFromId(112));
        gv_leagueTeamLogoIntroUnits[2] = UnitLastCreated();
        libNtve_gf_UnitCreateFacingPoint(1, "INTROAT", c_unitCreateIgnorePlacement, 0, PointFromId(192), PointFromId(112));
        gv_leagueTeamLogoIntroUnits[3] = UnitLastCreated();
        Wait(1.0, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[1]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, -1.0, 0.0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[1]), libNtve_gf_SetHeight(5.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[1]), libNtve_gf_SetOpacity(1.0, 0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[2]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, -1.0, 0.0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[2]), libNtve_gf_SetHeight(5.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[2]), libNtve_gf_SetOpacity(1.0, 0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[3]), libNtve_gf_SetRotation(0.0, 0.0, -1.0, -1.0, 0.0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[3]), libNtve_gf_SetHeight(5.0));
        ActorSend(libNtve_gf_MainActorofUnit(gv_leagueTeamLogoIntroUnits[3]), "SetScale 0.500000");
    }

    if ((GameAttributeGameValue("2") == "0002") && (gv_team1LogoUnitType != null)) {
        gf_Createteamwalllogos();
    }

    return true;
}

trigger auto_gf_CreateWallBanners_Trigger = null;

void gf_CreateWallBanners () {
    if (auto_gf_CreateWallBanners_Trigger == null) {
        auto_gf_CreateWallBanners_Trigger = TriggerCreate("auto_gf_CreateWallBanners_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWallBanners_Trigger, false, false);
}

bool auto_gf_CreateWallBanners_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("2") == "0002")) {
        libNtve_gf_CreateActorAtPoint("Banner", Point(78.95, 148.73));
        gv_leagueBanners[1] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 8.800000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(81.3, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.400000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.100000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(76.62, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.400000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.100000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint("Banner", Point(176.4, 148.73));
        gv_leagueBanners[2] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 8.800000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(174.02, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.400000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.100000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(178.71, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.400000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.100000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint("Banner", Point(128.08, 151.71));
        gv_leagueBanners[3] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 10.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.600000");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(126.16, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.900000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint("PipesLong", Point(129.96, 155.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap PipesLong 0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 12.900000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000,1.000000,1.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 4.000000}");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
        libNtve_gf_CreateActorAtPoint(gv_leagueBannerImage, Point(176.4, 148.7));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        Wait(0.2, c_timeGame);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(10.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.700000");
        libNtve_gf_CreateActorAtPoint(gv_leagueBannerImage, Point(78.95, 148.7));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        Wait(0.2, c_timeGame);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(10.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.700000");
        libNtve_gf_CreateActorAtPoint(gv_leagueBannerImage, Point(128.08, 151.68));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
        Wait(0.2, c_timeGame);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(11.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 0.0, -1.0, 0.0, -1.0, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000");
    }

    return true;
}

trigger auto_gf_Cleanupintrologos_Trigger = null;

void gf_Cleanupintrologos () {
    if (auto_gf_Cleanupintrologos_Trigger == null) {
        auto_gf_Cleanupintrologos_Trigger = TriggerCreate("auto_gf_Cleanupintrologos_TriggerFunc");
    }

    TriggerExecute(auto_gf_Cleanupintrologos_Trigger, false, false);
}

bool auto_gf_Cleanupintrologos_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_leagueTeamLogoIntroUnits[1]) == true)) {
        UnitRemove(gv_leagueTeamLogoIntroUnits[1]);
    }

    if ((UnitIsAlive(gv_leagueTeamLogoIntroUnits[2]) == true)) {
        UnitRemove(gv_leagueTeamLogoIntroUnits[2]);
    }

    if ((UnitIsAlive(gv_leagueTeamLogoIntroUnits[3]) == true)) {
        UnitRemove(gv_leagueTeamLogoIntroUnits[3]);
    }

    return true;
}

void gf_Team3UIDetectSavedGames () {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup autoEA05242D_g;
    playergroup auto90BF23B8_g;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("2") != "0002")) {
        autoEA05242D_g = PlayerGroupAll();
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(autoEA05242D_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            BankValueSetFromFlag(gv_Banks[lv_enumplayer], "SavedGame", "HasGameSaved", false);
            BankSave(gv_Banks[lv_enumplayer]);
        }
    }
    else {
        auto90BF23B8_g = PlayerGroupAll();
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(auto90BF23B8_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            gv_team3UI.lv_savegameHasGameSaved[lv_enumplayer] = BankValueGetAsFlag(gv_Banks[lv_enumplayer], "SavedGame", "HasGameSaved");
            if ((gv_team3UI.lv_savegameHasGameSaved[lv_enumplayer] == true)) {
                gv_team3UI.lv_savegamePeriod[lv_enumplayer] = BankValueGetAsInt(gv_Banks[lv_enumplayer], "SavedGame", "Period");
                gv_team3UI.lv_savegameScores[lv_enumplayer][1] = BankValueGetAsInt(gv_Banks[lv_enumplayer], "SavedGame", "ScoreOne");
                gv_team3UI.lv_savegameScores[lv_enumplayer][2] = BankValueGetAsInt(gv_Banks[lv_enumplayer], "SavedGame", "ScoreTwo");
                gv_team3UI.lv_savegameTime[lv_enumplayer] = BankValueGetAsFixed(gv_Banks[lv_enumplayer], "SavedGame", "Time");
                BankValueSetFromFlag(gv_Banks[lv_enumplayer], "SavedGame", "HasGameSaved", false);
                BankSave(gv_Banks[lv_enumplayer]);
                libNtve_gf_SetDialogItemColor(gv_team3UI.lv_savegameLoadbuttontext, Color(50.20, 100.00, 0.00), PlayerGroupSingle(lv_enumplayer));
                TriggerEnable(gt_Team3UIPregameSavedGamesDialogButtonClick, true);
            }
            else {
                DialogControlFadeTransparency(gv_team3UI.lv_savegameLoadbuttontext, PlayerGroupSingle(lv_enumplayer), 0.0, 75.0);
                DialogControlSetEnabled(gv_team3UI.lv_remakeDialogButtons[2], PlayerGroupSingle(lv_enumplayer), false);
                DialogControlSetVisible(gv_team3UI.lv_remakeDialogButtons[2], PlayerGroupSingle(lv_enumplayer), true);
            }
        }
    }
}

void gf_Team3UILoadinPregameSavedGamesUI () {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup auto3D53F952_g;

    // Variable Initialization

    // Implementation
    auto3D53F952_g = PlayerGroupAll();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto3D53F952_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((gv_team3UI.lv_savegameHasGameSaved[lv_enumplayer] == true)) {
            DialogCreate(610, 100, c_anchorBottomLeft, 0, 200, true);
            DialogSetImageVisible(DialogLastCreated(), false);
            gv_team3UI.lv_savegamePregamePromptDialog[lv_enumplayer] = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_enumplayer), true);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 615, 100, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 27.45, 54.90), PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/0F0FA027"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 145, 80, c_anchorTopLeft, 300, 10, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 145, 80, c_anchorTopLeft, 300, 10, StringExternal("Param/Value/37091956"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 145, 80, c_anchorTopLeft, 455, 10, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 145, 80, c_anchorTopLeft, 455, 10, StringExternal("Param/Value/8536E1F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
            DialogSetRenderPriority(DialogLastCreated(), 1000000000);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 145, 80, c_anchorTopLeft, 300, 10, StringToText(""), StringToText(""), "");
            gv_team3UI.lv_savegamePregamePromptButtons[lv_enumplayer][1] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 145, 80, c_anchorTopLeft, 455, 10, StringToText(""), StringToText(""), "");
            gv_team3UI.lv_savegamePregamePromptButtons[lv_enumplayer][2] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        }

    }
}

trigger auto_gf_Team3UILoadSavedGame_Trigger = null;
int auto_gf_Team3UILoadSavedGame_lp_player;

void gf_Team3UILoadSavedGame (int lp_player) {
    auto_gf_Team3UILoadSavedGame_lp_player = lp_player;

    if (auto_gf_Team3UILoadSavedGame_Trigger == null) {
        auto_gf_Team3UILoadSavedGame_Trigger = TriggerCreate("auto_gf_Team3UILoadSavedGame_TriggerFunc");
    }

    TriggerExecute(auto_gf_Team3UILoadSavedGame_Trigger, false, false);
}

bool auto_gf_Team3UILoadSavedGame_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Team3UILoadSavedGame_lp_player;

    // Variable Declarations
    int lv_period;
    int[3] lv_score;
    fixed lv_timeleft;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/196220B2"));
    SoundPlayForPlayer(SoundLink("UI_BNet_Promote", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    lv_period = gv_team3UI.lv_savegamePeriod[lp_player];
    lv_score[1] = gv_team3UI.lv_savegameScores[lp_player][1];
    lv_score[2] = gv_team3UI.lv_savegameScores[lp_player][2];
    lv_timeleft = gv_team3UI.lv_savegameTime[lp_player];
    gv_TeamScores[1] = lv_score[1];
    gv_TeamScores[2] = lv_score[2];
    TextExpressionSetToken("Param/Expression/9B8BA066", "A", IntToText(gv_TeamScores[1]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/9B8BA066"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[1], (StringExternal("Param/Value/9A91901F") + IntToText(gv_TeamScores[1])), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/65C6ECA4", "A", IntToText(gv_TeamScores[2]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/65C6ECA4"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[2], (StringExternal("Param/Value/F0750290") + IntToText(gv_TeamScores[2])), PlayerGroupAll());
    gv_Period = lv_period;
    if ((gv_canuserotation == true)) {
        TriggerExecute(gt_PeriodUIExecute, false, false);
        Wait(5.5, c_timeGame);
    }
    else {
        gf_Team3UIExecutePregameLoad();
    }
    TriggerStop(gt_UpdateTime);
    TimerStart(gv_Timer, lv_timeleft, false, c_timeReal);
    if ((gv_FaceoffTimer > 0)) {
        TimerPause(gv_Timer, true);
    }

    TriggerExecute(gt_UpdateTime, true, false);
    return true;
}

void gf_Team3UIExecutePregameLoad () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_Period == 1)) {
        libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/309B273D"), PlayerGroupAll());
        gv_uIPeriodStats.lv_timesshownAKAperiod = 1;
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
    }
    else {
        if ((gv_Period == 2)) {
            libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/A08B064A"), PlayerGroupAll());
            gv_uIPeriodStats.lv_timesshownAKAperiod = 2;
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        }
        else {
            if ((gv_Period == 3)) {
                libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/E949168E"), PlayerGroupAll());
                gv_uIPeriodStats.lv_timesshownAKAperiod = 3;
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            }
            else {
                if ((gv_Period == 4)) {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/C941307D"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                    gv_uIPeriodStats.lv_timesshownAKAperiod = 4;
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/AC444923"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                    gv_uIPeriodStats.lv_timesshownAKAperiod = 4;
                }
            }
        }
    }
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, -103, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, 110, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, 110, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, -103, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupAll());
    }
}

trigger auto_gf_Createteam3interface_Trigger = null;

void gf_Createteam3interface () {
    if (auto_gf_Createteam3interface_Trigger == null) {
        auto_gf_Createteam3interface_Trigger = TriggerCreate("auto_gf_Createteam3interface_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createteam3interface_Trigger, false, false);
}

bool auto_gf_Createteam3interface_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(1100, 50, c_anchorBottom, 0, 0, true);
    gv_team3UI.lv_team3Dialog = DialogLastCreated();
    DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_team3Dialog, 1100, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemCheckBox(gv_team3UI.lv_team3Dialog, 50, 50, c_anchorTopLeft, 7, 0, StringToText(""), false);
    gv_team3UI.lv_puckcambox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 200, 50, c_anchorTopLeft, 60, 16, StringExternal("Param/Value/DAC114F1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 201, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 351, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 501, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 651, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 801, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 148, 50, c_anchorTopLeft, 951, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 200, 0, StringExternal("Param/Value/E95983DD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 350, 0, StringExternal("Param/Value/B87C1B26"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 500, 0, StringExternal("Param/Value/72CF1E5F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 650, 0, StringExternal("Param/Value/7312B852"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 800, 0, StringExternal("Param/Value/F4196E10"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[5] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 950, 0, StringExternal("Param/Value/464BAF17"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_buttonText[6] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 200, 0, StringToText(""), StringExternal("Param/Value/7FDA42FC"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 350, 0, StringToText(""), StringExternal("Param/Value/A81ED4D0"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 500, 0, StringToText(""), StringExternal("Param/Value/16B07BBF"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 650, 0, StringToText(""), StringExternal("Param/Value/18C25033"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 800, 0, StringToText(""), StringExternal("Param/Value/9AAB1ECD"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_team3Dialog, 150, 50, c_anchorTopLeft, 950, 0, StringToText(""), StringExternal("Param/Value/FFF52091"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_mainbarbottons[6] = DialogControlLastCreated();
    DialogCreate(203, 50, c_anchorBottom, -122, 51, true);
    gv_team3UI.lv_panels[1] = DialogLastCreated();
    DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupAll(), false);
    DialogSetImageVisible(gv_team3UI.lv_panels[1], false);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 51, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 102, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 153, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/7D4737AD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 51, 0, StringExternal("Param/Value/41605826"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 102, 0, StringExternal("Param/Value/BB38C763"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 153, 0, StringExternal("Param/Value/4E28FFF3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_periodselectbuttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 51, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_periodselectbuttons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 102, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_periodselectbuttons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[1], 50, 50, c_anchorTopLeft, 153, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_periodselectbuttons[4] = DialogControlLastCreated();
    DialogCreate(400, 50, c_anchorBottom, 50, 51, true);
    gv_team3UI.lv_panels[2] = DialogLastCreated();
    DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupAll(), false);
    DialogSetImageVisible(gv_team3UI.lv_panels[2], false);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[2], 270, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[2], 130, 50, c_anchorTopLeft, 270, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(gv_team3UI.lv_panels[2], c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 5, 0);
    gv_team3UI.lv_timeSecondsTextarea = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[2], 300, 50, c_anchorTopLeft, 105, 15, StringExternal("Param/Value/8F03AA01"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/D465101B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[2], 130, 50, c_anchorTopRight, 0, 0, StringToText(""), StringToText(""), "");
    gv_team3UI.lv_timeSet = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogCreate(480, 50, c_anchorBottom, 120, 51, true);
    gv_team3UI.lv_panels[3] = DialogLastCreated();
    DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupAll(), false);
    DialogSetImageVisible(gv_team3UI.lv_panels[3], false);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[3], 480, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[3], 200, 50, c_anchorTopLeft, 10, 15, (StringExternal("Param/Value/91E5224B") + StringExternal("Param/Value/C7697618")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_teamScoreLabels[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[3], 200, 50, c_anchorTopLeft, 250, 15, (StringExternal("Param/Value/74F9A904") + StringExternal("Param/Value/D0DC2C88")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_teamScoreLabels[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 34, c_anchorTopLeft, 115, 6, StringToText(""), StringExternal("Param/Value/6E1F0EE1"), "");
    gv_team3UI.lv_teamScoreArrows[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 34, c_anchorTopLeft, 158, 6, StringToText(""), StringExternal("Param/Value/04BAAEEA"), "");
    gv_team3UI.lv_teamScoreArrows[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 34, c_anchorTopLeft, 365, 6, StringToText(""), StringExternal("Param/Value/30BAC70D"), "");
    gv_team3UI.lv_teamScoreArrows[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 34, c_anchorTopLeft, 408, 6, StringToText(""), StringExternal("Param/Value/A17D8624"), "");
    gv_team3UI.lv_teamScoreArrows[4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12Bold", PlayerGroupAll());
    DialogCreate(302, 50, c_anchorBottom, 480, 51, true);
    gv_team3UI.lv_panels[5] = DialogLastCreated();
    DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupAll(), false);
    DialogSetImageVisible(gv_team3UI.lv_panels[5], false);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 152, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/C7198E9A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 152, 0, StringExternal("Param/Value/74C3D0E1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_team3UI.lv_savegameLoadbuttontext = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_remakeDialogButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_team3UI.lv_panels[5], 150, 50, c_anchorTopLeft, 152, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_team3UI.lv_remakeDialogButtons[2] = DialogControlLastCreated();
    return true;
}

trigger auto_gf_Createteam3scoreboardlogos_Trigger = null;

void gf_Createteam3scoreboardlogos () {
    if (auto_gf_Createteam3scoreboardlogos_Trigger == null) {
        auto_gf_Createteam3scoreboardlogos_Trigger = TriggerCreate("auto_gf_Createteam3scoreboardlogos_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createteam3scoreboardlogos_Trigger, false, false);
}

bool auto_gf_Createteam3scoreboardlogos_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerstoshowitto;
    string lv_homeImage;
    string lv_awayImage;
    string lv_leagueImage;

    // Automatic Variable Declarations
    playergroup auto95490520_g;
    int auto95490520_var;
    playergroup auto2B3DD934_g;
    int auto2B3DD934_var;

    // Variable Initialization
    lv_playerstoshowitto = PlayerGroupEmpty();

    // Implementation
    if ((gv_testteam3ui == true)) {
        auto95490520_g = PlayerGroupAll();
        auto95490520_var = -1;
        while (true) {
            auto95490520_var = PlayerGroupNextPlayer(auto95490520_g, auto95490520_var);
            if (auto95490520_var < 0) { break; }
            PlayerGroupAdd(lv_playerstoshowitto, auto95490520_var);
        }
    }

    if ((PlayerGroupCount(GameAttributePlayersForTeam(3)) > 0)) {
        auto2B3DD934_g = GameAttributePlayersForTeam(3);
        auto2B3DD934_var = -1;
        while (true) {
            auto2B3DD934_var = PlayerGroupNextPlayer(auto2B3DD934_g, auto2B3DD934_var);
            if (auto2B3DD934_var < 0) { break; }
            PlayerGroupAdd(lv_playerstoshowitto, auto2B3DD934_var);
        }
    }

    if ((PlayerGroupCount(lv_playerstoshowitto) > 0) && (GameAttributeGameValue("2") == "0002")) {
        if ((GameAttributeGameValue("2") == "0002")) {
            if ((GameAttributeGameValue("3") == "0012") && (GameAttributeGameValue("7") == "0011")) {
                lv_homeImage = "Assets\\Textures\\zhl11.dds";
            }
            else {
                if ((GameAttributeGameValue("3") == "0014") && (GameAttributeGameValue("7") == "0011")) {
                    lv_homeImage = "Assets\\Textures\\zhl12.dds";
                }
                else {
                    if ((GameAttributeGameValue("3") == "0013") && (GameAttributeGameValue("7") == "0011")) {
                        lv_homeImage = "Assets\\Textures\\zhl13.dds";
                    }
                    else {
                        if ((GameAttributeGameValue("3") == "0001") && (GameAttributeGameValue("7") == "0011")) {
                            lv_homeImage = "Assets\\Textures\\zhl02.dds";
                        }
                        else {
                            if ((GameAttributeGameValue("3") == "0002") && (GameAttributeGameValue("7") == "0011")) {
                                lv_homeImage = "Assets\\Textures\\zhl03.dds";
                            }
                            else {
                                if ((GameAttributeGameValue("3") == "0003") && (GameAttributeGameValue("7") == "0011")) {
                                    lv_homeImage = "Assets\\Textures\\zhl04.dds";
                                }
                                else {
                                    if ((GameAttributeGameValue("3") == "0004") && (GameAttributeGameValue("7") == "0011")) {
                                        lv_homeImage = "Assets\\Textures\\zhl10.dds";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("3") == "0005") && (GameAttributeGameValue("7") == "0011")) {
                                            lv_homeImage = "Assets\\Textures\\zhl05.dds";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("3") == "0006") && (GameAttributeGameValue("7") == "0011")) {
                                                lv_homeImage = "Assets\\Textures\\zhl09.dds";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("3") == "0007") && (GameAttributeGameValue("7") == "0011")) {
                                                    lv_homeImage = "Assets\\Textures\\zhl08.dds";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("3") == "0008") && (GameAttributeGameValue("7") == "0011")) {
                                                        lv_homeImage = "Assets\\Textures\\zhl06.dds";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("3") == "0009") && (GameAttributeGameValue("7") == "0011")) {
                                                            lv_homeImage = "Assets\\Textures\\zhl01.dds";
                                                        }
                                                        else {
                                                            if ((GameAttributeGameValue("3") == "0010") && (GameAttributeGameValue("7") == "0011")) {
                                                                lv_homeImage = "Assets\\Textures\\zhl07.dds";
                                                            }
                                                            else {
                                                                if ((GameAttributeGameValue("3") == "0012") && (GameAttributeGameValue("7") == "0010")) {
                                                                    lv_homeImage = "Assets\\Textures\\phl11.dds";
                                                                }
                                                                else {
                                                                    if ((GameAttributeGameValue("3") == "0014") && (GameAttributeGameValue("7") == "0010")) {
                                                                        lv_homeImage = "Assets\\Textures\\phl12.dds";
                                                                    }
                                                                    else {
                                                                        if ((GameAttributeGameValue("3") == "0013") && (GameAttributeGameValue("7") == "0010")) {
                                                                            lv_homeImage = "Assets\\Textures\\phl13.dds";
                                                                        }
                                                                        else {
                                                                            if ((GameAttributeGameValue("3") == "0001") && (GameAttributeGameValue("7") == "0010")) {
                                                                                lv_homeImage = "Assets\\Textures\\phl01.dds";
                                                                            }
                                                                            else {
                                                                                if ((GameAttributeGameValue("3") == "0002") && (GameAttributeGameValue("7") == "0010")) {
                                                                                    lv_homeImage = "Assets\\Textures\\phl02.dds";
                                                                                }
                                                                                else {
                                                                                    if ((GameAttributeGameValue("3") == "0003") && (GameAttributeGameValue("7") == "0010")) {
                                                                                        lv_homeImage = "Assets\\Textures\\phl03.dds";
                                                                                    }
                                                                                    else {
                                                                                        if ((GameAttributeGameValue("3") == "0004") && (GameAttributeGameValue("7") == "0010")) {
                                                                                            lv_homeImage = "Assets\\Textures\\phl04.dds";
                                                                                        }
                                                                                        else {
                                                                                            if ((GameAttributeGameValue("3") == "0005") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                lv_homeImage = "Assets\\Textures\\phl05.dds";
                                                                                            }
                                                                                            else {
                                                                                                if ((GameAttributeGameValue("3") == "0006") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                    lv_homeImage = "Assets\\Textures\\phl06.dds";
                                                                                                }
                                                                                                else {
                                                                                                    if ((GameAttributeGameValue("3") == "0007") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                        lv_homeImage = "Assets\\Textures\\phl07.dds";
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((GameAttributeGameValue("3") == "0008") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                            lv_homeImage = "Assets\\Textures\\phl08.dds";
                                                                                                        }
                                                                                                        else {
                                                                                                            if ((GameAttributeGameValue("3") == "0009") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                                lv_homeImage = "Assets\\Textures\\phl09.dds";
                                                                                                            }
                                                                                                            else {
                                                                                                                if ((GameAttributeGameValue("3") == "0010") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                                    lv_homeImage = "Assets\\Textures\\phl10.dds";
                                                                                                                }

                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if ((GameAttributeGameValue("2") == "0002")) {
            if ((GameAttributeGameValue("4") == "0012") && (GameAttributeGameValue("7") == "0011")) {
                lv_awayImage = "Assets\\Textures\\zhl11.dds";
            }
            else {
                if ((GameAttributeGameValue("4") == "0013") && (GameAttributeGameValue("7") == "0011")) {
                    lv_awayImage = "Assets\\Textures\\zhl12.dds";
                }
                else {
                    if ((GameAttributeGameValue("4") == "0014") && (GameAttributeGameValue("7") == "0011")) {
                        lv_awayImage = "Assets\\Textures\\zhl13.dds";
                    }
                    else {
                        if ((GameAttributeGameValue("4") == "0001") && (GameAttributeGameValue("7") == "0011")) {
                            lv_awayImage = "Assets\\Textures\\zhl02.dds";
                        }
                        else {
                            if ((GameAttributeGameValue("4") == "0002") && (GameAttributeGameValue("7") == "0011")) {
                                lv_awayImage = "Assets\\Textures\\zhl03.dds";
                            }
                            else {
                                if ((GameAttributeGameValue("4") == "0003") && (GameAttributeGameValue("7") == "0011")) {
                                    lv_awayImage = "Assets\\Textures\\zhl04.dds";
                                }
                                else {
                                    if ((GameAttributeGameValue("4") == "0004") && (GameAttributeGameValue("7") == "0011")) {
                                        lv_awayImage = "Assets\\Textures\\zhl10.dds";
                                    }
                                    else {
                                        if ((GameAttributeGameValue("4") == "0005") && (GameAttributeGameValue("7") == "0011")) {
                                            lv_awayImage = "Assets\\Textures\\zhl05.dds";
                                        }
                                        else {
                                            if ((GameAttributeGameValue("4") == "0006") && (GameAttributeGameValue("7") == "0011")) {
                                                lv_awayImage = "Assets\\Textures\\zhl09.dds";
                                            }
                                            else {
                                                if ((GameAttributeGameValue("4") == "0007") && (GameAttributeGameValue("7") == "0011")) {
                                                    lv_awayImage = "Assets\\Textures\\zhl08.dds";
                                                }
                                                else {
                                                    if ((GameAttributeGameValue("4") == "0008") && (GameAttributeGameValue("7") == "0011")) {
                                                        lv_awayImage = "Assets\\Textures\\zhl06.dds";
                                                    }
                                                    else {
                                                        if ((GameAttributeGameValue("4") == "0009") && (GameAttributeGameValue("7") == "0011")) {
                                                            lv_awayImage = "Assets\\Textures\\zhl01.dds";
                                                        }
                                                        else {
                                                            if ((GameAttributeGameValue("4") == "0010") && (GameAttributeGameValue("7") == "0011")) {
                                                                lv_awayImage = "Assets\\Textures\\zhl07.dds";
                                                            }
                                                            else {
                                                                if ((GameAttributeGameValue("4") == "0012") && (GameAttributeGameValue("7") == "0010")) {
                                                                    lv_awayImage = "Assets\\Textures\\phl11.dds";
                                                                }
                                                                else {
                                                                    if ((GameAttributeGameValue("4") == "0013") && (GameAttributeGameValue("7") == "0010")) {
                                                                        lv_awayImage = "Assets\\Textures\\phl12.dds";
                                                                    }
                                                                    else {
                                                                        if ((GameAttributeGameValue("4") == "0014") && (GameAttributeGameValue("7") == "0010")) {
                                                                            lv_awayImage = "Assets\\Textures\\phl13.dds";
                                                                        }
                                                                        else {
                                                                            if ((GameAttributeGameValue("4") == "0001") && (GameAttributeGameValue("7") == "0010")) {
                                                                                lv_awayImage = "Assets\\Textures\\phl01.dds";
                                                                            }
                                                                            else {
                                                                                if ((GameAttributeGameValue("4") == "0002") && (GameAttributeGameValue("7") == "0010")) {
                                                                                    lv_awayImage = "Assets\\Textures\\phl02.dds";
                                                                                }
                                                                                else {
                                                                                    if ((GameAttributeGameValue("4") == "0003") && (GameAttributeGameValue("7") == "0010")) {
                                                                                        lv_awayImage = "Assets\\Textures\\phl03.dds";
                                                                                    }
                                                                                    else {
                                                                                        if ((GameAttributeGameValue("4") == "0004") && (GameAttributeGameValue("7") == "0010")) {
                                                                                            lv_awayImage = "Assets\\Textures\\phl04.dds";
                                                                                        }
                                                                                        else {
                                                                                            if ((GameAttributeGameValue("4") == "0005") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                lv_awayImage = "Assets\\Textures\\phl05.dds";
                                                                                            }
                                                                                            else {
                                                                                                if ((GameAttributeGameValue("4") == "0006") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                    lv_awayImage = "Assets\\Textures\\phl06.dds";
                                                                                                }
                                                                                                else {
                                                                                                    if ((GameAttributeGameValue("4") == "0007") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                        lv_awayImage = "Assets\\Textures\\phl07.dds";
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((GameAttributeGameValue("4") == "0008") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                            lv_awayImage = "Assets\\Textures\\phl08.dds";
                                                                                                        }
                                                                                                        else {
                                                                                                            if ((GameAttributeGameValue("4") == "0009") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                                lv_awayImage = "Assets\\Textures\\phl09.dds";
                                                                                                            }
                                                                                                            else {
                                                                                                                if ((GameAttributeGameValue("4") == "0010") && (GameAttributeGameValue("7") == "0010")) {
                                                                                                                    lv_awayImage = "Assets\\Textures\\phl10.dds";
                                                                                                                }

                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if ((GameAttributeGameValue("7") == "0011")) {
            lv_leagueImage = "ZHL_site-logo.dds";
        }
        else {
            if ((GameAttributeGameValue("7") == "0010")) {
                lv_leagueImage = "ZHPL_site-logo.dds";
            }

        }
        if ((lv_homeImage != null) && (lv_awayImage != null)) {
            libNtve_gf_CreateDialogItemImage(gv_uIScoreboardItems.lv_scoreboardDialog, 100, 100, c_anchorTopLeft, 60, 5, StringToText(""), lv_homeImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_team3UI.lv_scoreboardLogosHome = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_uIScoreboardItems.lv_scoreboardDialog, 100, 100, c_anchorTopRight, 60, 5, StringToText(""), lv_awayImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_team3UI.lv_scoreboardLogosAway = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_uIScoreboardItems.lv_scoreboardDialog, 100, 50, c_anchorTopLeft, 60, 100, StringExternal("Param/Value/E041AEE0"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
            gv_team3UI.lv_scoreboardLogosHomeTeamText = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_uIScoreboardItems.lv_scoreboardDialog, 100, 50, c_anchorTopRight, 60, 100, StringExternal("Param/Value/D4D18AE5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
            gv_team3UI.lv_scoreboardLogosAwayTeamText = DialogControlLastCreated();
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosHome, lv_playerstoshowitto, true);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosAway, lv_playerstoshowitto, true);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosHomeTeamText, lv_playerstoshowitto, true);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosAwayTeamText, lv_playerstoshowitto, true);
            DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), 0.0, 100.0);
        }

        if ((lv_leagueImage != null)) {
            libNtve_gf_CreateDialogItemImage(gv_uIScoreboardItems.lv_scoreboardDialog, 75, 75, c_anchorTop, 0, 95, StringToText(""), lv_leagueImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_team3UI.lv_scoreboardLogosLeague = DialogControlLastCreated();
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosLeague, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_team3UI.lv_scoreboardLogosLeague, lv_playerstoshowitto, true);
            DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosLeague, PlayerGroupAll(), 0.0, 100.0);
        }

    }

    return true;
}

trigger auto_gf_ShowTeam3UI_Trigger = null;

void gf_ShowTeam3UI () {
    if (auto_gf_ShowTeam3UI_Trigger == null) {
        auto_gf_ShowTeam3UI_Trigger = TriggerCreate("auto_gf_ShowTeam3UI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowTeam3UI_Trigger, false, false);
}

bool auto_gf_ShowTeam3UI_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A0BBE95_g;
    int auto3A0BBE95_var;
    playergroup autoB2211859_g;
    int autoB2211859_var;

    // Implementation
    if ((gv_testteam3ui == true)) {
        if ((PlayerGroupCount(GameAttributePlayersForTeam(1)) > 0)) {
            TriggerEnable(gt_Puckfollowhotkey, true);
            TriggerEnable(gt_Showhidehotkey, true);
            TriggerEnable(gt_APMShowHotkey, true);
            TriggerEnable(gt_APMHideHotkey, true);
            auto3A0BBE95_g = gv_actualPlayerzonTeam[1];
            auto3A0BBE95_var = -1;
            while (true) {
                auto3A0BBE95_var = PlayerGroupNextPlayer(auto3A0BBE95_g, auto3A0BBE95_var);
                if (auto3A0BBE95_var < 0) { break; }
                DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(auto3A0BBE95_var), true);
            }
        }

    }
    else {
        if ((PlayerGroupCount(GameAttributePlayersForTeam(3)) > 0)) {
            TriggerEnable(gt_Puckfollowhotkey, true);
            TriggerEnable(gt_Showhidehotkey, true);
            TriggerEnable(gt_APMShowHotkey, true);
            TriggerEnable(gt_APMHideHotkey, true);
            autoB2211859_g = GameAttributePlayersForTeam(3);
            autoB2211859_var = -1;
            while (true) {
                autoB2211859_var = PlayerGroupNextPlayer(autoB2211859_g, autoB2211859_var);
                if (autoB2211859_var < 0) { break; }
                DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(autoB2211859_var), true);
            }
        }

    }
    gf_Team3UIUpdateLimitedAccess();
    return true;
}

void gf_Team3UITogglePauseButton () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameispaused == true)) {
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[1], PlayerGroupAll(), 0.5, 65.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[2], PlayerGroupAll(), 0.5, 65.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[3], PlayerGroupAll(), 0.5, 65.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[4], PlayerGroupAll(), 0.5, 65.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[5], PlayerGroupAll(), 0.5, 65.0);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[1], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[2], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[3], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[4], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[5], PlayerGroupAll(), false);
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupAll(), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupAll(), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupAll(), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupAll(), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupAll(), false);
    }
    else {
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[1], PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[2], PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[3], PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[4], PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_buttonText[5], PlayerGroupAll(), 0.5, 0.0);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[2], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[3], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[4], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_team3UI.lv_mainbarbottons[5], PlayerGroupAll(), true);
    }
}

void gf_Team3UIGrantLimitedAccess (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), lp_player) == false)) {
        DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[1], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[3], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[4], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[5], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_mainbarbottons[6], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[1], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[3], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[4], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[5], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_team3UI.lv_buttonText[6], PlayerGroupSingle(lp_player), false);
        TriggerEnable(gt_Puckfollowhotkey, true);
        TriggerEnable(gt_Showhidehotkey, true);
        TriggerEnable(gt_APMShowHotkey, true);
        TriggerEnable(gt_APMHideHotkey, true);
        gv_team3UI.lv_limitedAccess[lp_player] = true;
    }

}

void gf_Team3UIDenyLimitedAccess (int lp_player) {
    // Variable Declarations
    bool lv_access;

    // Automatic Variable Declarations
    const int autoD5A21075_ae = 15;
    int autoD5A21075_var;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), lp_player) == false) && (gv_testteam3ui == false)) {
        gf_StopPuckCam(lp_player, false);
        gv_team3UI.lv_limitedAccess[lp_player] = false;
        if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, lp_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_team3UI.lv_puckcambox, false, PlayerGroupSingle(lp_player));
        }

        gf_HideAPMDialog(lp_player);
        autoD5A21075_var = 1;
        for ( ; autoD5A21075_var <= autoD5A21075_ae; autoD5A21075_var += 1 ) {
            if ((gv_team3UI.lv_limitedAccess[autoD5A21075_var] == true)) {
                lv_access = true;
            }

        }
        if ((lv_access == false) && (PlayerGroupCount(GameAttributePlayersForTeam(3)) == 0)) {
            TriggerEnable(gt_Puckfollowhotkey, false);
            TriggerEnable(gt_Showhidehotkey, false);
            TriggerEnable(gt_APMShowHotkey, false);
            TriggerEnable(gt_APMHideHotkey, false);
        }

        DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(lp_player), false);
    }

}

void gf_Team3UIUpdateLimitedAccess () {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    playergroup auto246EDB83_g;
    int auto246EDB83_var;
    playergroup auto5597203E_g;
    int auto5597203E_var;

    // Variable Initialization

    // Implementation
    if ((gv_rEDLINE_MODE == true)) {
        auto5597203E_g = PlayerGroupActive();
        auto5597203E_var = -1;
        while (true) {
            auto5597203E_var = PlayerGroupNextPlayer(auto5597203E_g, auto5597203E_var);
            if (auto5597203E_var < 0) { break; }
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), auto5597203E_var) == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto5597203E_var) == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto5597203E_var) == false)) {
                gf_Team3UIGrantLimitedAccess(auto5597203E_var);
            }
            else {
                gf_Team3UIDenyLimitedAccess(auto5597203E_var);
            }
        }
    }
    else {
        auto246EDB83_g = PlayerGroupActive();
        auto246EDB83_var = -1;
        while (true) {
            auto246EDB83_var = PlayerGroupNextPlayer(auto246EDB83_g, auto246EDB83_var);
            if (auto246EDB83_var < 0) { break; }
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), auto246EDB83_var) == false) && ((auto246EDB83_var == gv_benchPlayers[1]) || (auto246EDB83_var == gv_benchPlayers[2]) || (auto246EDB83_var == gv_benchPlayers[3]) || (auto246EDB83_var == gv_benchPlayers[4]) || (auto246EDB83_var == gv_benchPlayers[5]))) {
                gf_Team3UIGrantLimitedAccess(auto246EDB83_var);
            }
            else {
                gf_Team3UIDenyLimitedAccess(auto246EDB83_var);
            }
        }
    }
}

trigger auto_gf_StartGoalFollow_Trigger = null;
int auto_gf_StartGoalFollow_lp_player;
unit auto_gf_StartGoalFollow_lp_scoringunit;

void gf_StartGoalFollow (int lp_player, unit lp_scoringunit) {
    auto_gf_StartGoalFollow_lp_player = lp_player;
    auto_gf_StartGoalFollow_lp_scoringunit = lp_scoringunit;

    if (auto_gf_StartGoalFollow_Trigger == null) {
        auto_gf_StartGoalFollow_Trigger = TriggerCreate("auto_gf_StartGoalFollow_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartGoalFollow_Trigger, false, false);
}

bool auto_gf_StartGoalFollow_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_StartGoalFollow_lp_player;
    unit lp_scoringunit = auto_gf_StartGoalFollow_lp_scoringunit;

    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, lp_player) == true) && ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), lp_player) == true) || (gv_testteam3ui == true))) {
        gv_team3UI.lv_storedCamDistance[lp_player] = CameraGetDistance(lp_player);
        Wait(1.0, c_timeGame);
        CameraSetBounds(PlayerGroupSingle(lp_player), RegionPlayableMap(), false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(4)), false, false);
        CameraPan(lp_player, UnitGetPosition(lp_scoringunit), 4.0, -1, 10.0, false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(lp_scoringunit), true, false);
        CameraSetValue(lp_player, c_cameraValueDistance, 60.0, 3.0, -1, 10.0);
    }

    return true;
}

trigger auto_gf_EndGoalFollow_Trigger = null;
int auto_gf_EndGoalFollow_lp_player;
unit auto_gf_EndGoalFollow_lp_scoringunit;

void gf_EndGoalFollow (int lp_player, unit lp_scoringunit) {
    auto_gf_EndGoalFollow_lp_player = lp_player;
    auto_gf_EndGoalFollow_lp_scoringunit = lp_scoringunit;

    if (auto_gf_EndGoalFollow_Trigger == null) {
        auto_gf_EndGoalFollow_Trigger = TriggerCreate("auto_gf_EndGoalFollow_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndGoalFollow_Trigger, false, false);
}

bool auto_gf_EndGoalFollow_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_EndGoalFollow_lp_player;
    unit lp_scoringunit = auto_gf_EndGoalFollow_lp_scoringunit;

    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, lp_player) == true) && ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), lp_player) == true) || (gv_testteam3ui == true))) {
        CameraSetBounds(PlayerGroupSingle(lp_player), RegionFromId(56), false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(lp_scoringunit), false, false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(4)), true, false);
        CameraSetValue(lp_player, c_cameraValueDistance, gv_team3UI.lv_storedCamDistance[lp_player], 1.0, -1, 10.0);
    }

    return true;
}

void gf_StopPuckCam (int lp_player, bool lp_endofperiod) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, lp_player) == true)) {
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(4)), false, false);
    }

}

void gf_StartPuckCam (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, lp_player) == true)) {
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(4)), true, false);
    }

}

trigger auto_gf_Createcasterboothactors_Trigger = null;

void gf_Createcasterboothactors () {
    if (auto_gf_Createcasterboothactors_Trigger == null) {
        auto_gf_Createcasterboothactors_Trigger = TriggerCreate("auto_gf_Createcasterboothactors_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createcasterboothactors_Trigger, false, false);
}

bool auto_gf_Createcasterboothactors_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(GameAttributePlayersForTeam(3)) > 0)) {
        libNtve_gf_CreateModelAtPoint("CastanarDissectionTable", Point(127.98, 147.54));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap CastanarDissectionTable 2");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000,1.500000,3.000000");
        libNtve_gf_CreateModelAtPoint("LandingLights", Point(126.43, 146.27));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap LandingLights 3");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 2.100000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,0,0 10.000000}");
        libNtve_gf_CreateModelAtPoint("LandingLights", Point(129.35, 146.22));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap LandingLights 3");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 2.100000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,0,0 10.000000}");
        libNtve_gf_CreateModelAtPoint("StoreFrontCityProps", Point(126.52, 149.46));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap StoreFrontCityProps 2");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,2.000000,2.500000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
        libNtve_gf_CreateModelAtPoint("StoreFrontCityProps", Point(129.68, 149.4));
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap StoreFrontCityProps 2");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,2.000000,2.500000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
        if ((PlayerStatus(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 1)) == c_playerStatusActive)) {
            UnitCreate(1, "Zealot3", c_unitCreateIgnorePlacement, 0, Point(126.52, 148.68), 270.0);
            UnitSetCustomValue(UnitLastCreated(), 9, IntToFixed(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 1)));
            UnitSetHeight(UnitLastCreated(), 0.2, 0.0);
            gv_casterUnits[1] = UnitLastCreated();
            UnitSetTeamColorIndex(UnitLastCreated(), 15);
            TextTagCreate(PlayerName(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 1)), 20, PointFromId(7), 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 4.5);
            if (((PlayerHandle(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 1)) == gv_hANDLE_KURT) || (PlayerHandle(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 1)) == gv_hANDLE_KURTEU))) {
                UnitBehaviorAdd(UnitLastCreated(), "helmet152", UnitLastCreated(), 1);
            }

        }

        if ((PlayerStatus(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 2)) == c_playerStatusActive)) {
            UnitCreate(1, "Zealot3", c_unitCreateIgnorePlacement, 0, Point(129.58, 148.68), 270.0);
            UnitSetCustomValue(UnitLastCreated(), 9, IntToFixed(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 2)));
            UnitSetHeight(UnitLastCreated(), 0.2, 0.0);
            gv_casterUnits[2] = UnitLastCreated();
            UnitSetTeamColorIndex(UnitLastCreated(), 15);
            TextTagCreate(PlayerName(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 2)), 20, PointFromId(7), 5.0, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
            if (((PlayerHandle(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 2)) == gv_hANDLE_KURT) || (PlayerHandle(PlayerGroupPlayer(GameAttributePlayersForTeam(3), 2)) == gv_hANDLE_KURTEU))) {
                UnitBehaviorAdd(UnitLastCreated(), "helmet152", UnitLastCreated(), 1);
            }

        }

    }

    return true;
}

trigger auto_gf_InitAPMDialog_Trigger = null;
int auto_gf_InitAPMDialog_lp_player;

void gf_InitAPMDialog (int lp_player) {
    auto_gf_InitAPMDialog_lp_player = lp_player;

    if (auto_gf_InitAPMDialog_Trigger == null) {
        auto_gf_InitAPMDialog_Trigger = TriggerCreate("auto_gf_InitAPMDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitAPMDialog_Trigger, false, false);
}

bool auto_gf_InitAPMDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_InitAPMDialog_lp_player;

    int init_i;

    // Variable Declarations
    int lv_totalplayers;
    int lv_yoffset;
    int[16] lv_aPMValues;
    int[16] lv_aPMValues2;

    // Automatic Variable Declarations
    playergroup autoB7D53DAA_g;
    int autoB7D53DAA_var;
    playergroup auto13FD0106_g;
    int auto13FD0106_var;
    playergroup autoDFA29BCA_g;
    int autoDFA29BCA_var;
    playergroup autoC5AD562D_g;
    int autoC5AD562D_var;
    playergroup auto3EF46A4E_g;
    int auto3EF46A4E_var;
    playergroup auto9DDBCEC4_g;
    int auto9DDBCEC4_var;

    // Variable Initialization
    lv_yoffset = 49;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_aPMValues[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_aPMValues2[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    autoB7D53DAA_g = gv_actualPlayerzonTeam[1];
    autoB7D53DAA_var = -1;
    while (true) {
        autoB7D53DAA_var = PlayerGroupNextPlayer(autoB7D53DAA_g, autoB7D53DAA_var);
        if (autoB7D53DAA_var < 0) { break; }
        lv_totalplayers += 1;
    }
    auto13FD0106_g = gv_actualPlayerzonTeam[2];
    auto13FD0106_var = -1;
    while (true) {
        auto13FD0106_var = PlayerGroupNextPlayer(auto13FD0106_g, auto13FD0106_var);
        if (auto13FD0106_var < 0) { break; }
        lv_totalplayers += 1;
    }
    DialogCreate(650, ((lv_totalplayers * 40) + 40), c_anchorCenter, 0, 0, true);
    gv_team3UI.lv_aPMDialogs[lp_player] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 40, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_player), 0.0, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 1500, c_anchorTopLeft, 0, 40, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_player), 0.0, 25.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 40, c_anchorTopLeft, 15, 9, StringExternal("Param/Value/A0C0EF8B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 40, c_anchorTopLeft, 300, 9, StringExternal("Param/Value/A3F48412"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 40, c_anchorTopLeft, 450, 9, StringExternal("Param/Value/2A2CF842"), ColorWithAlpha(0,0,0,0), false, 2.0);
    autoDFA29BCA_g = gv_actualPlayerzonTeam[1];
    autoDFA29BCA_var = -1;
    while (true) {
        autoDFA29BCA_var = PlayerGroupNextPlayer(autoDFA29BCA_g, autoDFA29BCA_var);
        if (autoDFA29BCA_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/B2BF08F8", "A", PlayerName(autoDFA29BCA_var));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 40, c_anchorTopLeft, 15, lv_yoffset, TextExpressionAssemble("Param/Expression/B2BF08F8"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 40, c_anchorTopLeft, 300, lv_yoffset, IntToText(PlayerScoreValueGetAsInt(autoDFA29BCA_var, "APMAverage")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_aPMValues[autoDFA29BCA_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 40, c_anchorTopLeft, 450, lv_yoffset, IntToText(PlayerScoreValueGetAsInt(autoDFA29BCA_var, "APM")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_aPMValues2[autoDFA29BCA_var] = DialogControlLastCreated();
        lv_yoffset += 40;
    }
    autoC5AD562D_g = gv_actualPlayerzonTeam[2];
    autoC5AD562D_var = -1;
    while (true) {
        autoC5AD562D_var = PlayerGroupNextPlayer(autoC5AD562D_g, autoC5AD562D_var);
        if (autoC5AD562D_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/5E45F8B1", "A", PlayerName(autoC5AD562D_var));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 40, c_anchorTopLeft, 15, lv_yoffset, TextExpressionAssemble("Param/Expression/5E45F8B1"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 40, c_anchorTopLeft, 300, lv_yoffset, IntToText(PlayerScoreValueGetAsInt(autoC5AD562D_var, "APMAverage")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_aPMValues[autoC5AD562D_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 40, c_anchorTopLeft, 450, lv_yoffset, IntToText(PlayerScoreValueGetAsInt(autoC5AD562D_var, "APM")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_aPMValues2[autoC5AD562D_var] = DialogControlLastCreated();
        lv_yoffset += 40;
    }
    while ((DialogIsVisible(gv_team3UI.lv_aPMDialogs[lp_player], lp_player) == true)) {
        auto3EF46A4E_g = gv_actualPlayerzonTeam[1];
        auto3EF46A4E_var = -1;
        while (true) {
            auto3EF46A4E_var = PlayerGroupNextPlayer(auto3EF46A4E_g, auto3EF46A4E_var);
            if (auto3EF46A4E_var < 0) { break; }
            libNtve_gf_SetDialogItemText(lv_aPMValues[auto3EF46A4E_var], IntToText(PlayerScoreValueGetAsInt(auto3EF46A4E_var, "APMAverage")), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(lv_aPMValues2[auto3EF46A4E_var], IntToText(PlayerScoreValueGetAsInt(auto3EF46A4E_var, "APM")), PlayerGroupSingle(lp_player));
        }
        auto9DDBCEC4_g = gv_actualPlayerzonTeam[2];
        auto9DDBCEC4_var = -1;
        while (true) {
            auto9DDBCEC4_var = PlayerGroupNextPlayer(auto9DDBCEC4_g, auto9DDBCEC4_var);
            if (auto9DDBCEC4_var < 0) { break; }
            libNtve_gf_SetDialogItemText(lv_aPMValues[auto9DDBCEC4_var], IntToText(PlayerScoreValueGetAsInt(auto9DDBCEC4_var, "APMAverage")), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(lv_aPMValues2[auto9DDBCEC4_var], IntToText(PlayerScoreValueGetAsInt(auto9DDBCEC4_var, "APM")), PlayerGroupSingle(lp_player));
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_HideAPMDialog_Trigger = null;
int auto_gf_HideAPMDialog_lp_player;

void gf_HideAPMDialog (int lp_player) {
    auto_gf_HideAPMDialog_lp_player = lp_player;

    if (auto_gf_HideAPMDialog_Trigger == null) {
        auto_gf_HideAPMDialog_Trigger = TriggerCreate("auto_gf_HideAPMDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_HideAPMDialog_Trigger, false, false);
}

bool auto_gf_HideAPMDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_HideAPMDialog_lp_player;

    // Variable Declarations
    int lv_totalplayers;
    int lv_yoffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_yoffset = 60;

    // Implementation
    DialogDestroy(gv_team3UI.lv_aPMDialogs[lp_player]);
    return true;
}

trigger auto_gf_CheckPassiveTeamCelebrations_Trigger = null;
int auto_gf_CheckPassiveTeamCelebrations_lp_shootingPlayer;

void gf_CheckPassiveTeamCelebrations (int lp_shootingPlayer) {
    auto_gf_CheckPassiveTeamCelebrations_lp_shootingPlayer = lp_shootingPlayer;

    if (auto_gf_CheckPassiveTeamCelebrations_Trigger == null) {
        auto_gf_CheckPassiveTeamCelebrations_Trigger = TriggerCreate("auto_gf_CheckPassiveTeamCelebrations_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckPassiveTeamCelebrations_Trigger, false, false);
}

bool auto_gf_CheckPassiveTeamCelebrations_TriggerFunc (bool testConds, bool runActions) {
    int lp_shootingPlayer = auto_gf_CheckPassiveTeamCelebrations_lp_shootingPlayer;

    // Automatic Variable Declarations
    // Implementation
    if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0002")) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0002")))) {
        gf_StartWarpigCelebration();
    }

    return true;
}

int gf_Checkteamgoalmusic (int lp_shootingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("2") == "0002")) {
        if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0012") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0012") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
            return 1;
        }
        else {
            if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0014") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0013") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                return 2;
            }
            else {
                if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0013") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0014") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                    return 3;
                }
                else {
                    if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0001") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0001") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                        return 4;
                    }
                    else {
                        if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0002") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0002") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                            return 5;
                        }
                        else {
                            if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0003") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0003") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                return 6;
                            }
                            else {
                                if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0004") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0004") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                    return 7;
                                }
                                else {
                                    if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0005") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0005") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                        return 8;
                                    }
                                    else {
                                        if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0006") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0006") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                            return 9;
                                        }
                                        else {
                                            if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0007") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0007") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                                return 10;
                                            }
                                            else {
                                                if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_shootingPlayer) == true) && (GameAttributeGameValue("3") == "0008") && (gv_jerseyVars.lv_jerseysareonforteam[1] == true)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lp_shootingPlayer) == true) && (GameAttributeGameValue("4") == "0008") && (gv_jerseyVars.lv_jerseysareonforteam[2] == true)))) {
                                                    return 11;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    return 0;
}

void gf_PlayTeamGoalMusic (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_team == 1)) {
        SoundPlayForPlayer(SoundLink("TeamHorn1", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
        Wait(5.0, c_timeGame);
    }
    else {
        if ((lp_team == 2)) {
            SoundPlayForPlayer(SoundLink("TeamHorn12", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
            Wait(6.0, c_timeGame);
        }
        else {
            if ((lp_team == 3)) {
                SoundPlayForPlayer(SoundLink("TeamHorn122", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                Wait(5.0, c_timeGame);
            }
            else {
                if ((lp_team == 4)) {
                    SoundPlayForPlayer(SoundLink("TeamHorn1222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                    Wait(6.0, c_timeGame);
                }
                else {
                    if ((lp_team == 5)) {
                        SoundPlayForPlayer(SoundLink("TeamHorn12222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                        Wait(5.0, c_timeGame);
                    }
                    else {
                        if ((lp_team == 6)) {
                            SoundPlayForPlayer(SoundLink("TeamHorn122222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                            Wait(5.0, c_timeGame);
                        }
                        else {
                            if ((lp_team == 7)) {
                                SoundPlayForPlayer(SoundLink("TeamHorn1222222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                                Wait(6.0, c_timeGame);
                            }
                            else {
                                if ((lp_team == 8)) {
                                    SoundPlayForPlayer(SoundLink("TeamHorn12222222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                                    Wait(5.0, c_timeGame);
                                }
                                else {
                                    if ((lp_team == 9)) {
                                        SoundPlayForPlayer(SoundLink("TeamHorn122222222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                                        Wait(5.0, c_timeGame);
                                    }
                                    else {
                                        if ((lp_team == 10)) {
                                            SoundPlayForPlayer(SoundLink("TeamHorn1222222222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                                            Wait(5.0, c_timeGame);
                                        }
                                        else {
                                            if ((lp_team == 11)) {
                                                SoundPlayForPlayer(SoundLink("TeamHorn12222222222", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
                                                Wait(6.0, c_timeGame);
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

trigger auto_gf_StartTigerCelebration_Trigger = null;

void gf_StartTigerCelebration () {
    if (auto_gf_StartTigerCelebration_Trigger == null) {
        auto_gf_StartTigerCelebration_Trigger = TriggerCreate("auto_gf_StartTigerCelebration_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartTigerCelebration_Trigger, false, false);
}

bool auto_gf_StartTigerCelebration_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    point lv_temppoint;
    fixed lv_tempfacing;
    fixed[7] lv_customvalues;
    actor lv_tempzealotactor;
    sound lv_bgsound;

    // Automatic Variable Declarations
    playergroup auto10DE7EEE_g;
    int auto10DE7EEE_var;
    playergroup auto8F633D93_g;
    int auto8F633D93_var;

    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("TeamHorn12222222222", -1), c_maxPlayers, PlayerGroupAll(), 30.0, 0.0);
    gv_tigerCelebration.lv_isrunning = true;
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true)) {
        lv_team = 1;
        gv_tigerCelebration.lv_tigerTeam = 1;
    }
    else {
        lv_team = 2;
        gv_tigerCelebration.lv_tigerTeam = 2;
    }
    if ((lv_team == 1)) {
        auto10DE7EEE_g = gv_actualPlayerzonTeam[1];
        auto10DE7EEE_var = -1;
        while (true) {
            auto10DE7EEE_var = PlayerGroupNextPlayer(auto10DE7EEE_g, auto10DE7EEE_var);
            if (auto10DE7EEE_var < 0) { break; }
            if ((gv_Players[2] != auto10DE7EEE_var)) {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto10DE7EEE_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto10DE7EEE_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 6);
                UnitRemove(gv_Skaters[auto10DE7EEE_var]);
                UnitCreate(1, "TarsonisTiger", c_unitCreateIgnorePlacement, auto10DE7EEE_var, lv_temppoint, lv_tempfacing);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto10DE7EEE_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto10DE7EEE_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto10DE7EEE_var], "Zealot", "Ref_Hardpoint");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {TarsonisTigerFacing TarsonisTigerOffset}");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto10DE7EEE_var], gv_Skaters[auto10DE7EEE_var], 5.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[1] == true) && (gv_jerseyVars.lv_team1TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
            else {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto10DE7EEE_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto10DE7EEE_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto10DE7EEE_var], 6);
                UnitRemove(gv_Skaters[auto10DE7EEE_var]);
                UnitCreate(1, "TarsonisMonster", c_unitCreateIgnorePlacement, auto10DE7EEE_var, lv_temppoint, lv_tempfacing);
                gf_Preservegoaliesize(UnitLastCreated());
                UnitAbilityEnable(gv_Skaters[auto10DE7EEE_var], "NewForceField", false);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto10DE7EEE_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto10DE7EEE_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto10DE7EEE_var], "Immortal", "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host TarsonisMonsterOffset");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto10DE7EEE_var], gv_Skaters[auto10DE7EEE_var], 10.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[1] == true) && (gv_jerseyVars.lv_team1TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
        }
    }

    if ((lv_team == 2)) {
        auto8F633D93_g = gv_actualPlayerzonTeam[2];
        auto8F633D93_var = -1;
        while (true) {
            auto8F633D93_var = PlayerGroupNextPlayer(auto8F633D93_g, auto8F633D93_var);
            if (auto8F633D93_var < 0) { break; }
            if ((gv_Players[6] != auto8F633D93_var)) {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto8F633D93_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto8F633D93_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 6);
                UnitRemove(gv_Skaters[auto8F633D93_var]);
                UnitCreate(1, "TarsonisTiger", c_unitCreateIgnorePlacement, auto8F633D93_var, lv_temppoint, lv_tempfacing);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto8F633D93_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto8F633D93_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto8F633D93_var], "Zealot", "Ref_Hardpoint");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {TarsonisTigerFacing TarsonisTigerOffset}");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto8F633D93_var], gv_Skaters[auto8F633D93_var], 5.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[2] == true) && (gv_jerseyVars.lv_team2TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
            else {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto8F633D93_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto8F633D93_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto8F633D93_var], 6);
                UnitRemove(gv_Skaters[auto8F633D93_var]);
                UnitCreate(1, "TarsonisMonster", c_unitCreateIgnorePlacement, auto8F633D93_var, lv_temppoint, lv_tempfacing);
                gf_Preservegoaliesize(UnitLastCreated());
                UnitAbilityEnable(gv_Skaters[auto8F633D93_var], "NewForceField", false);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto8F633D93_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto8F633D93_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto8F633D93_var], "Immortal", "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host TarsonisMonsterOffset");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto8F633D93_var], gv_Skaters[auto8F633D93_var], 10.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[2] == true) && (gv_jerseyVars.lv_team2TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
        }
    }

    TriggerEnable(gt_TigerAttack, true);
    SoundPlayForPlayer(SoundLink("TigerBackground", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_bgsound = SoundLastPlayed();
    Wait(15.0, c_timeGame);
    SoundStop(lv_bgsound, true);
    gv_tigerCelebration.lv_isrunning = false;
    TriggerEnable(gt_TigerAttack, false);
    return true;
}

trigger auto_gf_Preservegoaliesize_Trigger = null;
unit auto_gf_Preservegoaliesize_lp_unit;

void gf_Preservegoaliesize (unit lp_unit) {
    auto_gf_Preservegoaliesize_lp_unit = lp_unit;

    if (auto_gf_Preservegoaliesize_Trigger == null) {
        auto_gf_Preservegoaliesize_Trigger = TriggerCreate("auto_gf_Preservegoaliesize_TriggerFunc");
    }

    TriggerExecute(auto_gf_Preservegoaliesize_Trigger, false, false);
}

bool auto_gf_Preservegoaliesize_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Preservegoaliesize_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    while ((gv_tigerCelebration.lv_isrunning == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetScale 4.000000");
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_TigerAttackCooldown_Trigger = null;
int auto_gf_TigerAttackCooldown_lp_player;

void gf_TigerAttackCooldown (int lp_player) {
    auto_gf_TigerAttackCooldown_lp_player = lp_player;

    if (auto_gf_TigerAttackCooldown_Trigger == null) {
        auto_gf_TigerAttackCooldown_Trigger = TriggerCreate("auto_gf_TigerAttackCooldown_TriggerFunc");
    }

    TriggerExecute(auto_gf_TigerAttackCooldown_Trigger, false, false);
}

bool auto_gf_TigerAttackCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_TigerAttackCooldown_lp_player;

    // Automatic Variable Declarations
    // Implementation
    gv_tigerCelebration.lv_attackCooldown[lp_player] = 1;
    Wait(0.7, c_timeGame);
    gv_tigerCelebration.lv_attackCooldown[lp_player] = 0;
    return true;
}

trigger auto_gf_TigerCreatebloodimpact_Trigger = null;
int auto_gf_TigerCreatebloodimpact_lp_type;
point auto_gf_TigerCreatebloodimpact_lp_location;

void gf_TigerCreatebloodimpact (int lp_type, point lp_location) {
    auto_gf_TigerCreatebloodimpact_lp_type = lp_type;
    auto_gf_TigerCreatebloodimpact_lp_location = lp_location;

    if (auto_gf_TigerCreatebloodimpact_Trigger == null) {
        auto_gf_TigerCreatebloodimpact_Trigger = TriggerCreate("auto_gf_TigerCreatebloodimpact_TriggerFunc");
    }

    TriggerExecute(auto_gf_TigerCreatebloodimpact_Trigger, false, false);
}

bool auto_gf_TigerCreatebloodimpact_TriggerFunc (bool testConds, bool runActions) {
    int lp_type = auto_gf_TigerCreatebloodimpact_lp_type;
    point lp_location = auto_gf_TigerCreatebloodimpact_lp_location;

    // Variable Declarations
    actor lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_type == 1)) {
        libNtve_gf_CreateModelAtPoint("TitanMechShootBigBloodImpact", lp_location);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 2.000000");
        lv_actor = libNtve_gf_ActorLastCreated();
        Wait(3.0, c_timeGame);
        ActorSend(lv_actor, "Destroy Immediate");
    }

    if ((lp_type == 2)) {
        libNtve_gf_CreateModelAtPoint("LurkerMPAttackDeathBloodGeyser", lp_location);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
        lv_actor = libNtve_gf_ActorLastCreated();
        Wait(3.0, c_timeGame);
        ActorSend(lv_actor, "Destroy Immediate");
    }
    else {
        if ((lp_type == 3)) {
            libNtve_gf_CreateModelAtPoint("ZealotDeath", lp_location);
            libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
            lv_actor = libNtve_gf_ActorLastCreated();
            Wait(3.0, c_timeGame);
            ActorSend(lv_actor, "Destroy Immediate");
        }
        else {
            if ((lp_type == 4)) {
                libNtve_gf_CreateModelAtPoint("BloodSplats", lp_location);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                lv_actor = libNtve_gf_ActorLastCreated();
                Wait(3.0, c_timeGame);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.000000 2.000000");
                Wait(3.0, c_timeGame);
                ActorSend(lv_actor, "Destroy Immediate");
            }

        }
    }
    return true;
}

trigger auto_gf_TigerAttackGo_Trigger = null;
unit auto_gf_TigerAttackGo_lp_unit;
fixed auto_gf_TigerAttackGo_lp_angle;
bool auto_gf_TigerAttackGo_lp_goalieAttack;

void gf_TigerAttackGo (unit lp_unit, fixed lp_angle, bool lp_goalieAttack) {
    auto_gf_TigerAttackGo_lp_unit = lp_unit;
    auto_gf_TigerAttackGo_lp_angle = lp_angle;
    auto_gf_TigerAttackGo_lp_goalieAttack = lp_goalieAttack;

    if (auto_gf_TigerAttackGo_Trigger == null) {
        auto_gf_TigerAttackGo_Trigger = TriggerCreate("auto_gf_TigerAttackGo_TriggerFunc");
    }

    TriggerExecute(auto_gf_TigerAttackGo_Trigger, false, false);
}

bool auto_gf_TigerAttackGo_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TigerAttackGo_lp_unit;
    fixed lp_angle = auto_gf_TigerAttackGo_lp_angle;
    bool lp_goalieAttack = auto_gf_TigerAttackGo_lp_goalieAttack;

    // Variable Declarations
    fixed lv_timecheck;
    fixed lv_futurepointx;
    fixed lv_futurepointy;
    actor lv_blood1Initialimpact;

    // Automatic Variable Declarations
    playergroup autoF11371D9_g;
    int autoF11371D9_var;

    // Variable Initialization
    lv_timecheck = 32.0;

    // Implementation
    SoundPlayAtPointForPlayer(SoundLink("TigerAttackImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    gf_TigerCreatebloodimpact(1, UnitGetPosition(lp_unit));
    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "Check", false);
    UnitAbilityEnable(lp_unit, "SlideStop", false);
    if ((gv_tigerCelebration.lv_isrunning == true) && (lp_goalieAttack == true)) {
        gf_ApplyForcePolar(lp_unit, 7.0, lp_angle);
    }
    else {
        if ((gv_tigerCelebration.lv_isrunning == true) && (lp_goalieAttack == false)) {
            gf_ApplyForcePolar(lp_unit, 5.0, lp_angle);
        }

    }
    while ((gv_tigerCelebration.lv_isrunning == true) && (lv_timecheck > 0.0) && (UnitGetCustomValue(lp_unit, 17) == 0.0)) {
        lv_futurepointx = (PointGetX(UnitGetPosition(lp_unit)) + UnitGetCustomValue(lp_unit, 0));
        lv_futurepointy = (PointGetY(UnitGetPosition(lp_unit)) + UnitGetCustomValue(lp_unit, 1));
        if (((RegionContainsPoint(RegionFromId(26), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(27), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(25), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(28), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(69), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(70), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(68), Point(lv_futurepointx, lv_futurepointy)) == true) || (RegionContainsPoint(RegionFromId(71), Point(lv_futurepointx, lv_futurepointy)) == true))) {
            UnitSetCustomValue(lp_unit, 17, 1.0);
            SoundPlayAtPointForPlayer(SoundLink("TigerAttackBoardImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
            SoundPlayAtPointForPlayer(SoundLink("NydusDeathSound12222", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
            UnitSetCustomValue(lp_unit, 0, 0.0);
            UnitSetCustomValue(lp_unit, 1, 0.0);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_unit), false);
            gf_TigerCreatebloodimpact(1, UnitGetPosition(lp_unit));
            gf_TigerCreatebloodimpact(2, UnitGetPosition(lp_unit));
            gf_TigerCreatebloodimpact(3, UnitGetPosition(lp_unit));
            gf_TigerCreatebloodimpact(4, UnitGetPosition(lp_unit));
            autoF11371D9_g = PlayerGroupAll();
            autoF11371D9_var = -1;
            while (true) {
                autoF11371D9_var = PlayerGroupNextPlayer(autoF11371D9_g, autoF11371D9_var);
                if (autoF11371D9_var < 0) { break; }
                CameraShakeStart(autoF11371D9_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 0.3);
            }
        }

        lv_timecheck -= 1.0;
        Wait(0.0625, c_timeGame);
    }
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "Check", true);
    return true;
}

trigger auto_gf_StartWarpigCelebration_Trigger = null;

void gf_StartWarpigCelebration () {
    if (auto_gf_StartWarpigCelebration_Trigger == null) {
        auto_gf_StartWarpigCelebration_Trigger = TriggerCreate("auto_gf_StartWarpigCelebration_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartWarpigCelebration_Trigger, false, false);
}

bool auto_gf_StartWarpigCelebration_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_warpigcelebration.lv_isrunning = true;
    gf_Checkforallplayers();
    return true;
}

trigger auto_gf_Checkforallplayers_Trigger = null;

void gf_Checkforallplayers () {
    if (auto_gf_Checkforallplayers_Trigger == null) {
        auto_gf_Checkforallplayers_Trigger = TriggerCreate("auto_gf_Checkforallplayers_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkforallplayers_Trigger, false, false);
}

bool auto_gf_Checkforallplayers_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    unit lv_enumunit;
    int lv_totalincircle;

    // Automatic Variable Declarations
    unitgroup auto18A11D9C_g;
    int auto18A11D9C_u;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    while ((gv_warpigcelebration.lv_isrunning == true)) {
        lv_totalincircle = 0;
        auto18A11D9C_g = UnitGroup(null, c_playerAny, RegionCircle(PointFromId(112), 7.6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto18A11D9C_u = UnitGroupCount(auto18A11D9C_g, c_unitCountAll);
        for (;; auto18A11D9C_u -= 1) {
            lv_enumunit = UnitGroupUnitFromEnd(auto18A11D9C_g, auto18A11D9C_u);
            if (lv_enumunit == null) { break; }
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[lv_team], UnitGetOwner(lv_enumunit)) == true) && ((gv_Skaters[1] == lv_enumunit) || (gv_Skaters[2] == lv_enumunit) || (gv_Skaters[3] == lv_enumunit) || (gv_Skaters[4] == lv_enumunit) || (gv_Skaters[5] == lv_enumunit) || (gv_Skaters[6] == lv_enumunit) || (gv_Skaters[7] == lv_enumunit) || (gv_Skaters[8] == lv_enumunit) || (gv_Skaters[9] == lv_enumunit) || (gv_Skaters[10] == lv_enumunit) || (gv_Skaters[11] == lv_enumunit) || (gv_Skaters[12] == lv_enumunit) || (gv_Skaters[13] == lv_enumunit) || (gv_Skaters[14] == lv_enumunit) || (gv_Skaters[15] == lv_enumunit))) {
                lv_totalincircle += 1;
            }

        }
        if ((lv_totalincircle == 4)) {
            gf_StartSpiral();
            break;
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_StartSpiral_Trigger = null;

void gf_StartSpiral () {
    if (auto_gf_StartSpiral_Trigger == null) {
        auto_gf_StartSpiral_Trigger = TriggerCreate("auto_gf_StartSpiral_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartSpiral_Trigger, false, false);
}

bool auto_gf_StartSpiral_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    actor lv_actor2;
    actor lv_actor3;
    sound lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("Purifier_PrePlanetCrackerEnergySwirl", -1), PlayerGroupAll(), 200.0, 0.0);
    lv_sound = SoundLastPlayed();
    libNtve_gf_CreateModelAtPoint("WarpigEnergy", PointFromId(112));
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.300000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 10.000000}");
    libNtve_gf_CreateModelAtPoint("VortexModel", PointFromId(112));
    lv_actor2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.600000,2.600000,0.100000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {47,151,255 3.000000}");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.100000");
    libNtve_gf_CreateModelAtPoint("VortexModel", PointFromId(112));
    lv_actor3 = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.600000,2.600000,0.100000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {47,151,255 3.000000}");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.100000");
    while ((gv_warpigcelebration.lv_isrunning == true)) {
        Wait(0.0625, c_timeGame);
    }
    SoundStop(lv_sound, true);
    ActorSend(lv_actor, "Destroy Immediate");
    ActorSend(lv_actor2, "Destroy Immediate");
    ActorSend(lv_actor3, "Destroy Immediate");
    return true;
}

void gf_ClearBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetDefaultBankValues(lp_player);
}

trigger auto_gf_NextSaveSection_Trigger = null;

void gf_NextSaveSection () {
    if (auto_gf_NextSaveSection_Trigger == null) {
        auto_gf_NextSaveSection_Trigger = TriggerCreate("auto_gf_NextSaveSection_TriggerFunc");
    }

    TriggerExecute(auto_gf_NextSaveSection_Trigger, false, false);
}

bool auto_gf_NextSaveSection_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_save_Key = (gv_save_Key + " ");
    return true;
}

trigger auto_gf_ResumeVelocity_Trigger = null;

void gf_ResumeVelocity () {
    if (auto_gf_ResumeVelocity_Trigger == null) {
        auto_gf_ResumeVelocity_Trigger = TriggerCreate("auto_gf_ResumeVelocity_TriggerFunc");
    }

    TriggerExecute(auto_gf_ResumeVelocity_Trigger, false, false);
}

bool auto_gf_ResumeVelocity_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto77C27BB1_ae = 8;
    int auto77C27BB1_var;

    // Implementation
    Wait(1.0, c_timeGame);
    gv_loading = false;
    auto77C27BB1_var = 1;
    for ( ; auto77C27BB1_var <= auto77C27BB1_ae; auto77C27BB1_var += 1 ) {
        UnitSetCustomValue(gv_Skaters[gv_Players[auto77C27BB1_var]], 0, gv_xVel[gv_Players[auto77C27BB1_var]]);
        UnitSetCustomValue(gv_Skaters[gv_Players[auto77C27BB1_var]], 1, gv_yVel[gv_Players[auto77C27BB1_var]]);
    }
    UnitSetCustomValue(gv_pUCK, 0, gv_xVel[9]);
    UnitSetCustomValue(gv_pUCK, 1, gv_yVel[9]);
    return true;
}

trigger auto_gf_InitializeKeyDialog_Trigger = null;

void gf_InitializeKeyDialog () {
    if (auto_gf_InitializeKeyDialog_Trigger == null) {
        auto_gf_InitializeKeyDialog_Trigger = TriggerCreate("auto_gf_InitializeKeyDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitializeKeyDialog_Trigger, false, false);
}

bool auto_gf_InitializeKeyDialog_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(1400, 100, c_anchorBottom, 0, 0, true);
    gv_key_Dialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    gv_key_Dialog_Items[3] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1400, 50);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    gv_key_Dialog_Items[4] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1400, 50);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/47923F1C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_key_Dialog_Items[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/0FC34800"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_key_Dialog_Items[6] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 20, c_anchorTopRight, 0, 35, StringToText(""), StringExternal("Param/Value/EF8787B5"), "");
    gv_key_Dialog_Items[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 25, c_anchorTopLeft, 0, 35, StringToText(""), StringExternal("Param/Value/2B83AEDB"), "");
    gv_key_Dialog_Items[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 25, c_anchorTopLeft, 65, 35, StringToText(""), StringExternal("Param/Value/644B67BF"), "");
    gv_key_Dialog_Items[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 35, c_anchorTopRight, 65, 25, StringToText(""), StringExternal("Param/Value/6B30DC62"), "");
    gv_key_Dialog_Items[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 35, c_anchorTopRight, 65, 25, StringToText(""), StringExternal("Param/Value/085BDBAB"), "");
    gv_key_Dialog_Items[8] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    return true;
}

string gf_AddZeroesBeforeNumber (int lp_number, int lp_totalDigits) {
    // Variable Declarations
    string lv_result;
    int lv_numberOfZeroes;
    int lv_i;

    // Automatic Variable Declarations
    int auto04145F7D_ae;
    const int auto04145F7D_ai = 1;

    // Variable Initialization
    lv_result = "";

    // Implementation
    if ((lp_number < 10)) {
        lv_numberOfZeroes = (lp_totalDigits - 1);
    }
    else {
        if ((lp_number < 100)) {
            lv_numberOfZeroes = (lp_totalDigits - 2);
        }
        else {
            if ((lp_number < 1000)) {
                lv_numberOfZeroes = (lp_totalDigits - 3);
            }
            else {
                if ((lp_number < 10000)) {
                    lv_numberOfZeroes = (lp_totalDigits - 4);
                }

            }
        }
    }
    auto04145F7D_ae = lv_numberOfZeroes;
    lv_i = 1;
    for ( ; ( (auto04145F7D_ai >= 0 && lv_i <= auto04145F7D_ae) || (auto04145F7D_ai < 0 && lv_i >= auto04145F7D_ae) ) ; lv_i += auto04145F7D_ai ) {
        lv_result = (lv_result + "0");
    }
    return (lv_result + IntToString(lp_number));
}

void gf_SaveBank (int lp_player) {
    // Variable Declarations
    string lv_plaintext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plaintext = "";

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && (gv_ranked == true) && (GameAttributeGameValue("2") != "0003")) {
    }
    else {
        return ;
    }
    lv_plaintext = (lv_plaintext + IntToString(BoolToInt(gv_options_Visible[lp_player])));
    lv_plaintext = (lv_plaintext + IntToString(BoolToInt(gv_options_OptInGoalie[lp_player])));
    lv_plaintext = (lv_plaintext + IntToString(BoolToInt(gv_options_OptOutGoalie[lp_player])));
    BankValueSetFromString(gv_Banks[lp_player], "k", "o", gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext, gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    lv_plaintext = "";
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_GamesPlayed[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_GamesWon[lp_player], 6));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Points[lp_player], 8));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Goals[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Assists[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Passes[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Pickups[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Faceoffs[lp_player], 6));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_FaceoffWins[lp_player], 6));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_SkaterPossessionTime[lp_player], 8));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_SkaterTime[lp_player], 9));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_GoalieTime[lp_player], 9));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_OverallGoalieBlocks[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_OverallGoalieLets[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Version[lp_player], 4));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Shots[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Steals[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_Turnovers[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_SSgoals[lp_player], 5));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_SSattempts[lp_player], 5));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_WinningGoals[lp_player], 5));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_OvertimeGoals[lp_player], 5));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_DefensivePoints[lp_player], 7));
    lv_plaintext = (lv_plaintext + gf_IntToXDString(gv_stats_OverallDefensiveLets[lp_player], 7));
    BankValueSetFromString(gv_Banks[lp_player], "k", "s", gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext, gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    BankSave(gv_Banks[lp_player]);
}

void gf_SMH (int lp_player) {
    // Variable Declarations
    int lv_abcdefghijklmnopqrstuvwxyz;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abcdefghijklmnopqrstuvwxyz = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny));

    // Implementation
    gv_checkStats[lp_player][1] = (gv_stats_SkaterTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][2] = (gv_stats_SkaterPossessionTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][3] = (gv_stats_GoalieTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_OverallGoalieBlocks[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][5] = (gv_stats_OverallGoalieLets[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][6] = (gv_stats_Passes[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][7] = (gv_stats_Pickups[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][8] = (gv_stats_Points[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][9] = (gv_stats_Shots[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][10] = (gv_stats_Steals[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Turnovers[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Goals[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Assists[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_GamesPlayed[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_GamesWon[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
}

void gf_MHC (int lp_player) {
    // Variable Declarations
    int lv_abcdefghijklmnopqrstuvwxyz;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abcdefghijklmnopqrstuvwxyz = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, "lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny));

    // Implementation
    if (((AbsI((gv_stats_SkaterTime[lp_player] - gv_checkStats[lp_player][1])) <= 1) || (AbsI((gv_stats_SkaterPossessionTime[lp_player] - gv_checkStats[lp_player][2])) <= 1) || (AbsI((gv_stats_GoalieTime[lp_player] - gv_checkStats[lp_player][3])) <= 1))) {
    }

    gv_checkStats[lp_player][1] = (gv_stats_SkaterTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][2] = (gv_stats_SkaterPossessionTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][2] = (gv_stats_SkaterPossessionTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][3] = (gv_stats_GoalieTime[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_OverallGoalieBlocks[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][5] = (gv_stats_OverallGoalieLets[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][6] = (gv_stats_Passes[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][7] = (gv_stats_Pickups[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][8] = (gv_stats_Points[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][9] = (gv_stats_Shots[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][10] = (gv_stats_Steals[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Turnovers[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Goals[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_Assists[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_GamesPlayed[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
    gv_checkStats[lp_player][4] = (gv_stats_GamesWon[lp_player] * lv_abcdefghijklmnopqrstuvwxyz);
}

void gf_InitializePlayerData () {
    // Variable Declarations
    string lv_playerdata;

    // Automatic Variable Declarations
    const int auto6DD01C00_ae = 14;
    int auto6DD01C00_var;

    // Variable Initialization
    lv_playerdata = "";

    // Implementation
    auto6DD01C00_var = 1;
    for ( ; auto6DD01C00_var <= auto6DD01C00_ae; auto6DD01C00_var += 1 ) {
        if ((BankKeyExists(gv_Banks[auto6DD01C00_var], "k", "s") == true)) {
            lv_playerdata = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(BankValueGetAsString(gv_Banks[auto6DD01C00_var], "k", "o"), auto6DD01C00_var, gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
            if ((StringSub(lv_playerdata, 1, 1) == "1")) {
                gv_options_Visible[auto6DD01C00_var] = true;
            }
            else {
                gv_options_Visible[auto6DD01C00_var] = false;
            }
            if ((StringSub(lv_playerdata, 2, 2) == "1")) {
                gv_options_OptInGoalie[auto6DD01C00_var] = true;
            }
            else {
                gv_options_OptInGoalie[auto6DD01C00_var] = false;
            }
            if ((StringSub(lv_playerdata, 3, 3) == "1")) {
                gv_options_OptOutGoalie[auto6DD01C00_var] = true;
            }
            else {
                gv_options_OptOutGoalie[auto6DD01C00_var] = false;
            }
            lv_playerdata = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(BankValueGetAsString(gv_Banks[auto6DD01C00_var], "k", "s"), auto6DD01C00_var, gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
            if ((lv_playerdata != "")) {
                gv_stats_GamesPlayed[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 1, 7));
                gv_stats_GamesWon[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 8, 13));
                gv_stats_Points[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 14, 21));
                gv_stats_Goals[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 22, 28));
                gv_stats_Assists[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 29, 35));
                gv_stats_Passes[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 36, 42));
                gv_stats_Pickups[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 43, 49));
                gv_stats_Faceoffs[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 50, 55));
                gv_stats_FaceoffWins[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 56, 61));
                gv_stats_SkaterPossessionTime[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 62, 69));
                gv_stats_SkaterTime[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 70, 78));
                gv_stats_GoalieTime[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 79, 87));
                gv_stats_OverallGoalieBlocks[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 88, 94));
                gv_stats_OverallGoalieLets[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 95, 101));
                gv_stats_Version[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 102, 105));
                gv_stats_Shots[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 106, 112));
                gv_stats_Steals[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 113, 119));
                gv_stats_Turnovers[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 120, 126));
                gv_stats_SSgoals[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 127, 131));
                gv_stats_SSattempts[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 132, 136));
                gv_stats_WinningGoals[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 137, 141));
                gv_stats_OvertimeGoals[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 142, 146));
                gv_stats_DefensivePoints[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 147, 153));
                gv_stats_OverallDefensiveLets[auto6DD01C00_var] = StringToInt(StringSub(lv_playerdata, 154, 160));
            }

        }
        else {
            if ((PlayerHandle(auto6DD01C00_var) == gv_hANDLE_PETERDLAI) && (BankSectionExists(gv_Banks[auto6DD01C00_var], "Stats") == true)) {
                BankSectionRemove(gv_Banks[auto6DD01C00_var], "Stats");
                BankSectionRemove(gv_Banks[auto6DD01C00_var], "Options");
                BankSectionRemove(gv_Banks[auto6DD01C00_var], "Shop");
                UIDisplayMessage(PlayerGroupSingle(auto6DD01C00_var), c_messageAreaDebug, StringExternal("Param/Value/4076F62B"));
            }

            if ((BankSectionExists(gv_Banks[auto6DD01C00_var], "Stats") == true) && (gv_ranked == true)) {
                gv_options_Visible[auto6DD01C00_var] = true;
                gv_options_OptInGoalie[auto6DD01C00_var] = false;
                gv_options_OptOutGoalie[auto6DD01C00_var] = true;
                if ((BankSectionExists(gv_Banks[auto6DD01C00_var], "Stats") == true)) {
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "GamesPlayed") <= 5000)) {
                        gv_stats_GamesPlayed[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "GamesPlayed");
                    }
                    else {
                        gv_stats_GamesPlayed[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "GamesWon") <= 5000)) {
                        gv_stats_GamesWon[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "GamesWon");
                    }
                    else {
                        gv_stats_GamesWon[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Points") <= 150000)) {
                        gv_stats_Points[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Points");
                    }
                    else {
                        gv_stats_Points[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Goals") <= 10000)) {
                        gv_stats_Goals[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Goals");
                    }
                    else {
                        gv_stats_Goals[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Assists") <= 10000)) {
                        gv_stats_Assists[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Assists");
                    }
                    else {
                        gv_stats_Assists[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Passes") <= 100000)) {
                        gv_stats_Passes[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Passes");
                    }
                    else {
                        gv_stats_Passes[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Pickups") <= 100000)) {
                        gv_stats_Pickups[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Pickups");
                    }
                    else {
                        gv_stats_Pickups[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Faceoffs") <= 10000)) {
                        gv_stats_Faceoffs[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Faceoffs");
                    }
                    else {
                        gv_stats_Faceoffs[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "FaceoffWins") <= 10000)) {
                        gv_stats_FaceoffWins[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "FaceoffWins");
                    }
                    else {
                        gv_stats_FaceoffWins[auto6DD01C00_var] = 0;
                    }
                    gv_stats_SkaterPossessionTime[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SkaterPossessionTime");
                    gv_stats_SkaterTime[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SkaterTime");
                    gv_stats_GoalieTime[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "GoalieTime");
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallGoalieBlocks") <= 100000)) {
                        gv_stats_OverallGoalieBlocks[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallGoalieBlocks");
                    }
                    else {
                        gv_stats_OverallGoalieBlocks[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallGoalieLets") <= 100000)) {
                        gv_stats_OverallGoalieLets[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallGoalieLets");
                    }
                    else {
                        gv_stats_OverallGoalieLets[auto6DD01C00_var] = 0;
                    }
                    gv_stats_Version[auto6DD01C00_var] = 5;
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Shots") <= 100000)) {
                        gv_stats_Shots[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Shots");
                    }
                    else {
                        gv_stats_Shots[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Steals") <= 100000)) {
                        gv_stats_Steals[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Steals");
                    }
                    else {
                        gv_stats_Steals[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Turnovers") <= 100000)) {
                        gv_stats_Turnovers[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "Turnovers");
                    }
                    else {
                        gv_stats_Turnovers[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SSgoals") <= 1000)) {
                        gv_stats_SSgoals[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SSgoals");
                    }
                    else {
                        gv_stats_SSgoals[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SSattempts") <= 1000)) {
                        gv_stats_SSattempts[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "SSattempts");
                    }
                    else {
                        gv_stats_SSattempts[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "WinningGoals") <= 1000)) {
                        gv_stats_WinningGoals[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "WinningGoals");
                    }
                    else {
                        gv_stats_WinningGoals[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OvertimeGoals") <= 1000)) {
                        gv_stats_OvertimeGoals[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OvertimeGoals");
                    }
                    else {
                        gv_stats_OvertimeGoals[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "DefensivePoints") <= 50000)) {
                        gv_stats_DefensivePoints[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "DefensivePoints");
                    }
                    else {
                        gv_stats_DefensivePoints[auto6DD01C00_var] = 0;
                    }
                    if ((BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallDefensiveLets") <= 50000)) {
                        gv_stats_OverallDefensiveLets[auto6DD01C00_var] = BankValueGetAsInt(gv_Banks[auto6DD01C00_var], "Stats", "OverallDefensiveLets");
                    }
                    else {
                        gv_stats_OverallDefensiveLets[auto6DD01C00_var] = 0;
                    }
                    gv_stats_GoalieELO[auto6DD01C00_var] = BankValueGetAsFixed(gv_Banks[auto6DD01C00_var], "Stats", "GoalieELO");
                    BankSectionRemove(gv_Banks[auto6DD01C00_var], "Stats");
                    BankSectionRemove(gv_Banks[auto6DD01C00_var], "Options");
                    BankSectionRemove(gv_Banks[auto6DD01C00_var], "Shop");
                    BankValueSetFromFixed(gv_Banks[auto6DD01C00_var], "Stats", "GoalieELO", gv_stats_GoalieELO[auto6DD01C00_var]);
                    gf_SaveBank(auto6DD01C00_var);
                }
                else {
                    gf_SetDefaultBankValues(auto6DD01C00_var);
                }
            }
            else {
                if ((BankSectionExists(gv_Banks[auto6DD01C00_var], "Stats") == false)) {
                    gf_SetDefaultBankValues(auto6DD01C00_var);
                }

            }
        }
    }
}

void gf_SetDefaultBankValues (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_options_Visible[lp_player] = false;
    gv_options_OptInGoalie[lp_player] = false;
    gv_options_OptOutGoalie[lp_player] = true;
    gv_stats_GamesPlayed[lp_player] = 0;
    gv_stats_GamesWon[lp_player] = 0;
    gv_stats_Points[lp_player] = 0;
    gv_stats_Goals[lp_player] = 0;
    gv_stats_Assists[lp_player] = 0;
    gv_stats_Passes[lp_player] = 0;
    gv_stats_Pickups[lp_player] = 0;
    gv_stats_Faceoffs[lp_player] = 0;
    gv_stats_FaceoffWins[lp_player] = 0;
    gv_stats_SkaterPossessionTime[lp_player] = 0;
    gv_stats_SkaterTime[lp_player] = 0;
    gv_stats_GoalieTime[lp_player] = 0;
    gv_stats_OverallGoalieBlocks[lp_player] = 0;
    gv_stats_OverallGoalieLets[lp_player] = 0;
    gv_stats_Version[lp_player] = 5;
    gv_stats_Shots[lp_player] = 0;
    gv_stats_Steals[lp_player] = 0;
    gv_stats_Turnovers[lp_player] = 0;
    gv_stats_SSgoals[lp_player] = 0;
    gv_stats_SSattempts[lp_player] = 0;
    gv_stats_WinningGoals[lp_player] = 0;
    gv_stats_OvertimeGoals[lp_player] = 0;
    gv_stats_DefensivePoints[lp_player] = 0;
    gv_stats_OverallDefensiveLets[lp_player] = 0;
    gf_SaveBank(lp_player);
}

bool gf_CoinFlip (fixed lp_weight_false, fixed lp_weight_true) {
    // Automatic Variable Declarations
    // Implementation
    if ((RandomFixed(0.0, (lp_weight_false + lp_weight_true)) <= lp_weight_false)) {
        return false;
    }
    else {
        return true;
    }
}

int gf_IntFlip (int lp_val1, int lp_val2, fixed lp_weight1, fixed lp_weight2) {
    // Automatic Variable Declarations
    // Implementation
    if ((RandomFixed(0.0, (lp_weight1 + lp_weight2)) <= lp_weight1)) {
        return lp_val1;
    }
    else {
        return lp_val2;
    }
}

fixed gf_PolarUnitStar (fixed lp_theta) {
    // Variable Declarations
    fixed lv_half_point_angle;
    fixed lv_lv_theta;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_half_point_angle = 15.0;
    lv_lv_theta = lp_theta;

    // Implementation
    lv_lv_theta = ModF(lv_lv_theta, 360.0);
    while ((lv_lv_theta < 54.0)) {
        lv_lv_theta += 72.0;
    }
    while ((lv_lv_theta > 126.0)) {
        lv_lv_theta -= 72.0;
    }
    if (((lv_lv_theta >= 54) && (lv_lv_theta <= 90))) {
        return (1.0 / (Sin(lv_lv_theta) + (gf_Cotangent(lv_half_point_angle) * Cos(lv_lv_theta))));
    }
    else if (((lv_lv_theta >= 90) && (lv_lv_theta <= 126))) {
        return (1.0 / (Sin(lv_lv_theta) - (gf_Cotangent(lv_half_point_angle) * Cos(lv_lv_theta))));
    }
    return 0.0;
}

int gf_RoundToMultiple (int lp_val, int lp_multiple) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToInt(Round((IntToFixed(lp_val) / IntToFixed(lp_multiple)))) * lp_multiple);
}

fixed gf_Cotangent (fixed lp_theta) {
    // Automatic Variable Declarations
    // Implementation
    return (1.0 / Tan(lp_theta));
}

color gf_SelectColor (color lp_color1, color lp_color2, bool lp_flag) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_flag == false)) {
        return lp_color1;
    }
    else {
        return lp_color2;
    }
}

unit gf_RandomUnitInRegion (string lp_type, region lp_region, int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupRandomUnit(UnitGroup(lp_type, lp_owner, lp_region, UnitFilter(0, 0, 0, 0), 0), c_unitCountAll);
}

int gf_RandomPlayerFromPlayerGroup (playergroup lp_player_group) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupPlayer(lp_player_group, RandomInt(1, PlayerGroupCount(lp_player_group)));
}

int gf_RandomLivingPlayerFromPlayerGroup (playergroup lp_player_group) {
    // Variable Declarations
    int lv_i;
    bool lv_accum;
    playergroup lv_living_player_group;

    // Automatic Variable Declarations
    playergroup autoC34672E8_g;

    // Variable Initialization
    lv_living_player_group = PlayerGroupEmpty();

    // Implementation
    autoC34672E8_g = lp_player_group;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoC34672E8_g, lv_i);
        if (lv_i < 0) { break; }
        if (true) {
            lv_accum = true;
            PlayerGroupAdd(lv_living_player_group, lv_i);
        }

    }
    if ((lv_accum == false)) {
        return 0;
    }
    else {
        return gf_RandomPlayerFromPlayerGroup(lv_living_player_group);
    }
}

text gf_NameWithColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
}

text gf_FormatNumber (int lp_val) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_val > 9999999)) {
        return (IntToText((lp_val / 1000000)) + StringExternal("Param/Value/9861C861"));
    }
    else if ((lp_val > 9999)) {
        return (IntToText((lp_val / 1000)) + StringExternal("Param/Value/0CAE5904"));
    }
    else if (true) {
        return IntToText(lp_val);
    }
    return IntToText(lp_val);
}

text gf_FormatTime (int lp_seconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_seconds <= 0)) {
        return StringExternal("Param/Value/A61E25BD");
    }
    else if ((lp_seconds < 10)) {
        return (StringExternal("Param/Value/D4B51C28") + FormatDuration(lp_seconds));
    }
    else if ((lp_seconds < 60)) {
        return (StringExternal("Param/Value/8A22D23D") + FormatDuration(lp_seconds));
    }
    return FormatDuration(lp_seconds);
}

fixed gf_LERP (fixed lp_min, fixed lp_max, fixed lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_min + ((lp_max - lp_min) * lp_t));
}

int gf_MaxIndex3 (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_max_i;
    int lv_max;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_max = -1;

    // Implementation
    if ((lp_var1 > lv_max)) {
        lv_max_i = 1;
        lv_max = lp_var1;
    }

    if ((lp_var2 > lv_max)) {
        lv_max_i = 2;
        lv_max = lp_var2;
    }

    if ((lp_var3 > lv_max)) {
        lv_max_i = 3;
        lv_max = lp_var3;
    }

    return lv_max_i;
}

int gf_Max3 (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_max;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_max = -1;

    // Implementation
    if ((lp_var1 > lv_max)) {
        lv_max = lp_var1;
    }

    if ((lp_var2 > lv_max)) {
        lv_max = lp_var2;
    }

    if ((lp_var3 > lv_max)) {
        lv_max = lp_var3;
    }

    return lv_max;
}

int gf_MinIndex3 (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_min_i;
    int lv_min;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_min = 1000000000;

    // Implementation
    if ((lp_var1 < lv_min)) {
        lv_min_i = 1;
        lv_min = lp_var1;
    }

    if ((lp_var2 < lv_min)) {
        lv_min_i = 2;
        lv_min = lp_var2;
    }

    if ((lp_var3 < lv_min)) {
        lv_min_i = 3;
        lv_min = lp_var3;
    }

    return lv_min_i;
}

int gf_MinIndex3Positives (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_min_i;
    int lv_min;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_min = 1000000000;

    // Implementation
    if ((lp_var1 <= 0) && (lp_var2 <= 0) && (lp_var3 <= 0)) {
        return gf_MinIndex3(lp_var1, lp_var2, lp_var3);
    }

    if ((lp_var1 < lv_min) && (lp_var1 > 0)) {
        lv_min_i = 1;
        lv_min = lp_var1;
    }

    if ((lp_var2 < lv_min) && (lp_var2 > 0)) {
        lv_min_i = 2;
        lv_min = lp_var2;
    }

    if ((lp_var3 < lv_min) && (lp_var3 > 0)) {
        lv_min_i = 3;
        lv_min = lp_var3;
    }

    return lv_min_i;
}

int gf_Min3 (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_min;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_min = 1000000000;

    // Implementation
    if ((lp_var1 < lv_min)) {
        lv_min = lp_var1;
    }

    if ((lp_var2 < lv_min)) {
        lv_min = lp_var2;
    }

    if ((lp_var3 < lv_min)) {
        lv_min = lp_var3;
    }

    return lv_min;
}

int gf_Min3Positives (int lp_var1, int lp_var2, int lp_var3) {
    // Variable Declarations
    int lv_min;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_min = 1000000000;

    // Implementation
    if ((lp_var1 <= 0) && (lp_var2 <= 0) && (lp_var3 <= 0)) {
        return gf_Min3(lp_var1, lp_var2, lp_var3);
    }

    if ((lp_var1 < lv_min) && (lp_var1 > 0)) {
        lv_min = lp_var1;
    }

    if ((lp_var2 < lv_min) && (lp_var2 > 0)) {
        lv_min = lp_var2;
    }

    if ((lp_var3 < lv_min) && (lp_var3 > 0)) {
        lv_min = lp_var3;
    }

    return lv_min;
}

bool gf_Equal (int lp_a, int lp_b) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_a == lp_b)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_BoolToChecked (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_BoolToFollowingOption (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_BoolToCameraUseTargetOption (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        return true;
    }
    else {
        return false;
    }
}

text gf_MapToText (int lp_map) {
    // Automatic Variable Declarations
    int auto0580DCE2_val;

    // Implementation
    auto0580DCE2_val = lp_map;
    if (auto0580DCE2_val == 1) {
        return StringExternal("Param/Value/4EEB8B47");
    }
    else if (auto0580DCE2_val == 2) {
        return StringExternal("Param/Value/847B392E");
    }
    else if (auto0580DCE2_val == 3) {
        return StringExternal("Param/Value/9F29B7A4");
    }
    else {
        return StringToText("");
    }
}

text gf_DifficultyToText (int lp_difficulty) {
    // Automatic Variable Declarations
    int auto0D2B7A6D_val;

    // Implementation
    auto0D2B7A6D_val = lp_difficulty;
    if (auto0D2B7A6D_val == 1) {
        return StringExternal("Param/Value/D9F0DAFD");
    }
    else if (auto0D2B7A6D_val == 2) {
        return StringExternal("Param/Value/256D34A0");
    }
    else if (auto0D2B7A6D_val == 3) {
        return StringExternal("Param/Value/C9ECB041");
    }
    else {
        return StringToText("");
    }
}

int gf_MapNameLength (int lp_map) {
    // Automatic Variable Declarations
    int autoECC46298_val;

    // Implementation
    autoECC46298_val = lp_map;
    if (autoECC46298_val == 1) {
        return 6;
    }
    else if (autoECC46298_val == 2) {
        return 9;
    }
    else if (autoECC46298_val == 3) {
        return 6;
    }
    else {
        return 0;
    }
}

int gf_DifficultyNameLength (int lp_difficulty) {
    // Automatic Variable Declarations
    int auto97FD8E13_val;

    // Implementation
    auto97FD8E13_val = lp_difficulty;
    if (auto97FD8E13_val == 1) {
        return 6;
    }
    else if (auto97FD8E13_val == 2) {
        return 6;
    }
    else if (auto97FD8E13_val == 3) {
        return 12;
    }
    else {
        return 0;
    }
}

int gf_LeaderboardTitleXOffset (int lp_nchars) {
    // Variable Declarations
    int lv_char_pro_length;
    int lv_char_pro_offset;
    int lv_scyl_nov_length;
    int lv_scyl_nov_offset;
    fixed lv_t;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_char_pro_length = 26;
    lv_char_pro_offset = 80;
    lv_scyl_nov_length = 17;
    lv_scyl_nov_offset = 200;
    lv_t = (IntToFixed((lp_nchars - lv_scyl_nov_length)) / IntToFixed((lv_char_pro_length - lv_scyl_nov_length)));

    // Implementation
    return RoundI(gf_LERP(lv_scyl_nov_offset, lv_char_pro_offset, lv_t));
}

bool gf_WithinRangeReal (fixed lp_val, fixed lp_lower, fixed lp_upper) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lower <= lp_val) && (lp_val <= lp_upper)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_WithinRangeInteger (int lp_val, int lp_lower, int lp_upper) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lower <= lp_val) && (lp_val <= lp_upper)) {
        return true;
    }
    else {
        return false;
    }
}

string gf_AddStringsDigitwise (string lp_string1, string lp_string2) {
    // Variable Declarations
    string lv_s1;
    string lv_s2;
    int lv_i;
    int lv_l;
    string lv_result;

    // Automatic Variable Declarations
    int auto0614AFC5_ae;
    const int auto0614AFC5_ai = 1;

    // Variable Initialization
    lv_s1 = lp_string1;
    lv_s2 = lp_string2;
    lv_result = "";

    // Implementation
    while ((StringLength(lv_s1) < StringLength(lv_s2))) {
        lv_s1 = ("0" + lv_s1);
    }
    while ((StringLength(lv_s2) < StringLength(lv_s1))) {
        lv_s2 = ("0" + lv_s2);
    }
    lv_l = StringLength(lv_s1);
    auto0614AFC5_ae = lv_l;
    lv_i = 1;
    for ( ; ( (auto0614AFC5_ai >= 0 && lv_i <= auto0614AFC5_ae) || (auto0614AFC5_ai < 0 && lv_i >= auto0614AFC5_ae) ) ; lv_i += auto0614AFC5_ai ) {
        lv_result = (lv_result + gf_IntToXDString((gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_s1, lv_i) + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_s2, lv_i)), 1));
    }
    return lv_result;
}

bool gf_Ash_CompareStrings (string lp_string1, string lp_string2) {
    // Automatic Variable Declarations
    // Implementation
    return StringEqual(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_string1), gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_string2), c_stringCase);
}

color gf_ColorWithAlpha (color lp_color, fixed lp_alpha_percent) {
    // Automatic Variable Declarations
    // Implementation
    return ColorWithAlpha(ColorGetComponent(lp_color, c_colorComponentRed), ColorGetComponent(lp_color, c_colorComponentGreen), ColorGetComponent(lp_color, c_colorComponentBlue), lp_alpha_percent);
}

string gf_EncodePlayerHandle (int lp_player) {
    // Variable Declarations
    string lv_handle;
    string lv_sID;
    string lv_pID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_handle = PlayerHandle(lp_player);
    lv_sID = StringSub(lv_handle, 1, 1);
    lv_pID = gf_IntToXDString(StringToInt(StringSub(lv_handle, 8, StringLength(lv_handle))), 7);

    // Implementation
    return (lv_sID + lv_pID);
}

string gf_Ash_AddHandleValidation (string lp_input_string) {
    // Variable Declarations
    string lv_validation_string;
    int lv_i;
    int lv_accum;

    // Automatic Variable Declarations
    int auto70F41A43_ae;
    const int auto70F41A43_ai = 1;

    // Variable Initialization
    lv_validation_string = "";

    // Implementation
    auto70F41A43_ae = StringLength(lp_input_string);
    lv_i = 1;
    for ( ; ( (auto70F41A43_ai >= 0 && lv_i <= auto70F41A43_ae) || (auto70F41A43_ai < 0 && lv_i >= auto70F41A43_ae) ) ; lv_i += auto70F41A43_ai ) {
        lv_accum += gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_input_string, lv_i);
    }
    return (lp_input_string + gf_IntToXDString(lv_accum, 1));
}

string gf_Ash_HandleE (int lp_player) {
    // Variable Declarations
    string lv_ciphertext;
    int lv_skip_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ciphertext = gf_EncodePlayerHandle(lp_player);
    lv_skip_N = 4;

    // Implementation
    lv_ciphertext = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext, lv_skip_N);
    lv_ciphertext = gf_Ash_AddHandleValidation(lv_ciphertext);
    return lv_ciphertext;
}

string gf_TemplarAssassin (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_exp;
    int lv_score;
    int lv_stats;
    int lv_skills;
    int lv_levels;
    string lv_string1;
    string lv_string2;
    string lv_string3;
    string lv_refraction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string1 = "";
    lv_string2 = "";
    lv_string3 = "";
    lv_refraction = "";

    // Implementation
    lv_exp = ModI(lv_exp, 10000000);
    lv_score = ModI(lv_score, 10000000);
    lv_stats = ModI(lv_stats, 1000);
    lv_skills = ModI(lv_skills, 100);
    lv_levels = ModI(lv_levels, 1000);
    lv_string1 = (gf_IntToXDString(lv_exp, 7) + gf_IntToXDString(lv_stats, 3));
    lv_string2 = (gf_IntToXDString(lv_score, 7) + gf_IntToXDString(lv_levels, 3));
    lv_string3 = (gf_IntToXDString(lv_skills, 2) + gf_Ash_HandleE(lp_player));
    lv_refraction = gf_AddStringsDigitwise(lv_string1, lv_string2);
    lv_refraction = gf_AddStringsDigitwise(lv_refraction, lv_string3);
    lv_refraction = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_refraction, 3);
    return lv_refraction;
}

void gf_LoadOptions (string lp_s, int lp_player) {
    // Variable Declarations
    string lv_string;
    const int lv_cORRECT_LENGTH = 9;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";
    lv_sKIP_N = 4;

    // Implementation
    lv_string = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_s, lp_player, lv_sKIP_N);
    if ((StringLength(lv_string) != lv_cORRECT_LENGTH)) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if ((((StringToInt(StringSub(lv_string, 5, 5)) >= 0) && (StringToInt(StringSub(lv_string, 5, 5)) <= 1)) == false)) {
        return ;
    }

    if ((((StringToInt(StringSub(lv_string, 6, 6)) >= 0) && (StringToInt(StringSub(lv_string, 6, 6)) <= 1)) == false)) {
        return ;
    }

    if ((((StringToInt(StringSub(lv_string, 7, 7)) >= 0) && (StringToInt(StringSub(lv_string, 7, 7)) <= 1)) == false)) {
        return ;
    }

    if ((((StringToInt(StringSub(lv_string, 8, 8)) >= 0) && (StringToInt(StringSub(lv_string, 8, 8)) <= 1)) == false)) {
        return ;
    }

    if ((((StringToInt(StringSub(lv_string, 9, 9)) >= 0) && (StringToInt(StringSub(lv_string, 9, 9)) <= 1)) == false)) {
        return ;
    }

}

string gf_EncodeOptions (int lp_player) {
    // Variable Declarations
    int lv_class;
    string lv_s;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_s = "";
    lv_sKIP_N = 4;

    // Implementation
    lv_s = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_s, lv_sKIP_N);
    return lv_s;
}

void gf_LoadStats (string lp_s, int lp_player) {
    // Variable Declarations
    int lv_loop_class;
    int lv_loop_diff;
    int lv_loop_i;
    int lv_start;
    string lv_string;
    const int lv_cORRECT_LENGTH = 179;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_start = 1;
    lv_string = "";
    lv_sKIP_N = 23;

    // Implementation
    lv_string = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_s, lp_player, lv_sKIP_N);
    if ((StringLength(lv_string) != lv_cORRECT_LENGTH)) {
        return ;
    }

    lv_start += 4;
    lv_start += 7;
}

string gf_EncodeStats (int lp_player) {
    // Variable Declarations
    int lv_loop_class;
    int lv_loop_diff;
    int lv_loop_i;
    string lv_s;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_s = "";
    lv_sKIP_N = 23;

    // Implementation
    lv_s = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_s, lv_sKIP_N);
    return lv_s;
}

void gf_LoadRunlingData (string lp_s, int lp_player, int lp_class) {
    // Variable Declarations
    string lv_string;
    const int lv_cORRECT_LENGTH = 23;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";
    lv_sKIP_N = 17;

    // Implementation
    lv_string = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_s, lp_player, lv_sKIP_N);
    if ((StringLength(lv_string) != lv_cORRECT_LENGTH)) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

    if (true) {
        return ;
    }

}

string gf_EncodeCurrentRunlingData (int lp_player) {
    // Variable Declarations
    int lv_class;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return gf_EncodeRunlingDataForClass(lp_player, lv_class);
}

string gf_EncodeRunlingDataForClass (int lp_player, int lp_class) {
    // Variable Declarations
    int lv_class;
    string lv_s;
    int lv_sKIP_N;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_class = lp_class;
    lv_s = "";
    lv_sKIP_N = 17;

    // Implementation
    lv_s = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_s, lv_sKIP_N);
    return lv_s;
}

int gf_Pow10 (int lp_pow) {
    // Variable Declarations
    int lv_r;
    int lv_i;

    // Automatic Variable Declarations
    int auto7E2796F5_ae;
    const int auto7E2796F5_ai = 1;

    // Variable Initialization
    lv_r = 1;

    // Implementation
    auto7E2796F5_ae = lp_pow;
    lv_i = 1;
    for ( ; ( (auto7E2796F5_ai >= 0 && lv_i <= auto7E2796F5_ae) || (auto7E2796F5_ai < 0 && lv_i >= auto7E2796F5_ae) ) ; lv_i += auto7E2796F5_ai ) {
        lv_r *= 10;
    }
    return lv_r;
}

string gf_IntToDDString (int lp_value) {
    // Variable Declarations
    int lv_val;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_val = ModI(lp_value, 100);

    // Implementation
    if ((lv_val < 10)) {
        return ("0" + IntToString(lv_val));
    }
    else {
        return IntToString(lv_val);
    }
}

string gf_IntToXDString (int lp_value, int lp_length) {
    // Variable Declarations
    int lv_pow;
    int lv_val;
    string lv_s;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pow = gf_Pow10((lp_length - 1));
    lv_val = ModI(lp_value, (lv_pow * 10));
    lv_s = "";

    // Implementation
    if ((lv_val == 0)) {
        lv_s = "";
    }
    else {
        lv_s = IntToString(lv_val);
    }
    while ((lv_pow > lv_val)) {
        lv_s = ("0" + lv_s);
        lv_pow /= 10;
    }
    return lv_s;
}

string gf_BoolToString (bool lp_flag) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_flag == false)) {
        return "0";
    }
    else {
        return "1";
    }
}

bool gf_StringToBool (string lp_s) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringToInt(lp_s) == 0)) {
        return false;
    }
    else {
        return true;
    }
}

string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_s, int lp_pos) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_s, lp_pos, lp_pos);
}

int gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_s, int lp_pos) {
    // Automatic Variable Declarations
    // Implementation
    return StringToInt(StringSub(lp_s, lp_pos, lp_pos));
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int auto00636D49_ae;
    int auto00636D49_ai;

    // Variable Initialization
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 2;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;

    // Implementation
    auto00636D49_ae = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    auto00636D49_ai = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (auto00636D49_ai >= 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= auto00636D49_ae) || (auto00636D49_ai < 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= auto00636D49_ae) ) ; lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += auto00636D49_ai ) {
        if ((ModI(lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) == lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)) {
            lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringToInt(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(((lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) / lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
        }
        else {
            lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringToInt(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll / lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
        }
        lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + IntToString(gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) + lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
    }
    return lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int auto2769AADC_ae;
    int auto2769AADC_ai;

    // Variable Initialization
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 2;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";

    // Implementation
    auto2769AADC_ae = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    auto2769AADC_ai = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (auto2769AADC_ai >= 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= auto2769AADC_ae) || (auto2769AADC_ai < 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= auto2769AADC_ae) ) ; lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += auto2769AADC_ai ) {
        if ((ModI(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) == lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)) {
            lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringToInt(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) / lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
        }
        else {
            lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringToInt(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll / lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
        }
        lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + IntToString(gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) - lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), 10)));
    }
    return lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int autoDA97AA2D_ae;
    int autoDA97AA2D_ai;

    // Variable Initialization
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;

    // Implementation
    autoDA97AA2D_ae = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    autoDA97AA2D_ai = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (autoDA97AA2D_ai >= 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= autoDA97AA2D_ae) || (autoDA97AA2D_ai < 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= autoDA97AA2D_ae) ) ; lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += autoDA97AA2D_ai ) {
        lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
    }
    return lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_ciphertext) {
    // Variable Declarations
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int autoF441ED2F_ae;
    int autoF441ED2F_ai;

    // Variable Initialization
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;

    // Implementation
    autoF441ED2F_ae = StringLength(lp_ciphertext);
    autoF441ED2F_ai = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (autoF441ED2F_ai >= 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= autoF441ED2F_ae) || (autoF441ED2F_ai < 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= autoF441ED2F_ae) ) ; lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += autoF441ED2F_ai ) {
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_ciphertext, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
    }
    return lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int autoCB9E977E_ae;
    int autoCB9E977E_ai;

    // Variable Initialization
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 5;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 6;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 7;

    // Implementation
    autoCB9E977E_ae = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    autoCB9E977E_ai = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (autoCB9E977E_ai >= 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= autoCB9E977E_ae) || (autoCB9E977E_ai < 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= autoCB9E977E_ae) ) ; lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += autoCB9E977E_ai ) {
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
        if ((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll == lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)) {
            lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = RandomInt(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
            if ((lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll == lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)) {
                lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, (gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) + 52)));
            }
            else if ((lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll == lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)) {
                lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, (gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) + 51)));
            }
            else if (true) {
                lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, (gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, 10) + (10 * lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll))));
            }
        }
        else {
            lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = RandomInt(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
            lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, (gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) + (lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll * lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll))));
        }
    }
    return lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int auto44FACBEA_ae;
    int auto44FACBEA_ai;

    // Variable Initialization
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 10;

    // Implementation
    auto44FACBEA_ae = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    auto44FACBEA_ai = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (auto44FACBEA_ai >= 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= auto44FACBEA_ae) || (auto44FACBEA_ai < 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= auto44FACBEA_ae) ) ; lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += auto44FACBEA_ai ) {
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringFind(gv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, c_stringCase);
        if ((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll > 60)) {
            lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
        }
        else {
            lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
        }
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + IntToString(lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    }
    return lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    string lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int auto048BBFB1_ae;
    int auto048BBFB1_ai;

    // Variable Initialization
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringLength(lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);

    // Implementation
    auto048BBFB1_ae = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    auto048BBFB1_ai = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (auto048BBFB1_ai >= 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= auto048BBFB1_ae) || (auto048BBFB1_ai < 0 && lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= auto048BBFB1_ae) ) ; lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += auto048BBFB1_ai ) {
        lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll * lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + IntToString(lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    }
    return lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    string lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    int lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    int autoE75F7D3F_ae;
    int autoE75F7D3F_ai;

    // Variable Initialization
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = "";
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = 1;
    lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = StringLength(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);

    // Implementation
    autoE75F7D3F_ae = lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    autoE75F7D3F_ai = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    for ( ; ( (autoE75F7D3F_ai >= 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll <= autoE75F7D3F_ae) || (autoE75F7D3F_ai < 0 && lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll >= autoE75F7D3F_ae) ) ; lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += autoE75F7D3F_ai ) {
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll * lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
        lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = (lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + IntToString(lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    }
    return lv_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string) {
    // Variable Declarations
    string lv_validation_string;
    int lv_i;
    int lv_accum;

    // Automatic Variable Declarations
    int autoDE7FA9C7_ae;
    const int autoDE7FA9C7_ai = 1;

    // Variable Initialization
    lv_validation_string = "";

    // Implementation
    autoDE7FA9C7_ae = StringLength(lp_input_string);
    lv_i = 1;
    for ( ; ( (autoDE7FA9C7_ai >= 0 && lv_i <= autoDE7FA9C7_ae) || (autoDE7FA9C7_ai < 0 && lv_i >= autoDE7FA9C7_ae) ) ; lv_i += autoDE7FA9C7_ai ) {
        lv_accum += gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_input_string, lv_i);
    }
    return (lp_input_string + gf_IntToXDString(lv_accum, gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
}

bool gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string) {
    // Variable Declarations
    string lv_validation_string;
    int lv_i;
    int lv_accum;
    int lv_validation_val;

    // Automatic Variable Declarations
    int autoFE67D036_ae;
    const int autoFE67D036_ai = 1;

    // Variable Initialization
    lv_validation_string = "";

    // Implementation
    if ((StringLength(lp_input_string) < (gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll + 1))) {
        return false;
    }

    autoFE67D036_ae = libNtve_gf_ArithmeticIntClamp((StringLength(lp_input_string) - gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), 1, (StringLength(lp_input_string) - gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    lv_i = 1;
    for ( ; ( (autoFE67D036_ai >= 0 && lv_i <= autoFE67D036_ae) || (autoFE67D036_ai < 0 && lv_i >= autoFE67D036_ae) ) ; lv_i += autoFE67D036_ai ) {
        lv_accum += gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lp_input_string, lv_i);
    }
    lv_accum = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_accum, gf_Pow10(gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll));
    lv_validation_val = StringToInt(StringSub(lp_input_string, libNtve_gf_ArithmeticIntClamp((StringLength(lp_input_string) - (gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll - 1)), 1, (StringLength(lp_input_string) - (gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll - 1))), StringLength(lp_input_string)));
    return (lv_accum == lv_validation_val);
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_input_string) {
    // Variable Declarations
    string lv_validation_string;
    int lv_i;
    int lv_accum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_validation_string = "";

    // Implementation
    return StringSub(lp_input_string, 1, libNtve_gf_ArithmeticIntClamp((StringLength(lp_input_string) - gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll), 1, (StringLength(lp_input_string) - gv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll)));
}

int gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    int lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll = ModI(lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
    if ((lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll < 0)) {
        lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll += lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    }

    return lv_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
}

int gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll((lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll - 1), lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) + 1);
}

int gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (int lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll, int lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_x;
    int lv_y;
    int lv_u;
    int lv_v;
    int lv_q;
    int lv_r;
    int lv_m;
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = lp_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_b = lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll;
    lv_y = 1;
    lv_u = 1;

    // Implementation
    while (lv_a != 0) {
        lv_q = lv_b/lv_a;
        lv_r = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_b, lv_a);
        lv_m = lv_x - lv_u*lv_q;
        lv_n = lv_y - lv_v*lv_q;
        lv_b = lv_a;
        lv_a = lv_r;
        lv_x = lv_u;
        lv_y = lv_v;
        lv_u = lv_m;
        lv_v = lv_n;
    }
    return gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_x, lp_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll);
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_plaintext, int lp_skip_N) {
    // Variable Declarations
    string lv_ciphertext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ciphertext = lp_plaintext;

    // Implementation
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext, lp_skip_N);
    lv_ciphertext = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext, lp_skip_N);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext, lp_skip_N);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    lv_ciphertext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_ciphertext);
    return lv_ciphertext;
}

string gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll (string lp_ciphertext, int lp_player, int lp_skip_N) {
    // Variable Declarations
    string lv_plaintext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plaintext = lp_ciphertext;

    // Implementation
    lv_plaintext = gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    if ((gf_lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext) == false)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/CE894A0D"));
        gf_ClearBank(lp_player);
        return "";
    }

    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext, lp_skip_N);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext, lp_skip_N);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext);
    lv_plaintext = gf_llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll(lv_plaintext, lp_skip_N);
    return lv_plaintext;
}

trigger auto_gf_OwnGoalAnimation_Trigger = null;
int auto_gf_OwnGoalAnimation_lp_player;

void gf_OwnGoalAnimation (int lp_player) {
    auto_gf_OwnGoalAnimation_lp_player = lp_player;

    if (auto_gf_OwnGoalAnimation_Trigger == null) {
        auto_gf_OwnGoalAnimation_Trigger = TriggerCreate("auto_gf_OwnGoalAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_OwnGoalAnimation_Trigger, false, false);
}

bool auto_gf_OwnGoalAnimation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_OwnGoalAnimation_lp_player;

    // Variable Declarations
    int lv_randomint;
    int lv_waittime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_wasgoalowngoal = false;
    lv_randomint = RandomInt(1, 1);
    if ((lv_randomint == 1)) {
        gf_AnimalAttack(lp_player);
    }

    return true;
}

trigger auto_gf_AnimalAttack_Trigger = null;
int auto_gf_AnimalAttack_lp_player;

void gf_AnimalAttack (int lp_player) {
    auto_gf_AnimalAttack_lp_player = lp_player;

    if (auto_gf_AnimalAttack_Trigger == null) {
        auto_gf_AnimalAttack_Trigger = TriggerCreate("auto_gf_AnimalAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnimalAttack_Trigger, false, false);
}

bool auto_gf_AnimalAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AnimalAttack_lp_player;

    // Variable Declarations
    unit[5] lv_animals;
    actor[5] lv_blood;
    actor[3] lv_blood2;
    actor lv_deatg;

    // Automatic Variable Declarations
    const int auto90E4DF4C_ae = 4;
    int auto90E4DF4C_var;
    const int auto85A4061C_ae = 2;
    int auto85A4061C_var;
    const int autoA857A365_ae = 4;
    int autoA857A365_var;
    const int autoF58B0410_ae = 3;
    int autoF58B0410_var;
    const int autoA1FA0F34_ae = 4;
    int autoA1FA0F34_var;
    const int auto8CB7399A_ae = 4;
    int auto8CB7399A_var;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_Skaters[lp_player], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[lp_player], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(gv_Skaters[lp_player], "move", false);
    UnitAbilityEnable(gv_Skaters[lp_player], "Check", false);
    Wait(1.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Blimp2", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 30.0, 45.0), UnitGetPosition(gv_Skaters[lp_player]));
    UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Dog");
    lv_animals[1] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, "Blimp2", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 30.0, 135.0), UnitGetPosition(gv_Skaters[lp_player]));
    UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Dog");
    lv_animals[2] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, "Blimp2", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 30.0, 225.0), UnitGetPosition(gv_Skaters[lp_player]));
    UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Dog");
    lv_animals[3] = UnitLastCreated();
    libNtve_gf_UnitCreateFacingPoint(1, "Blimp2", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 30.0, 315.0), UnitGetPosition(gv_Skaters[lp_player]));
    UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Dog");
    lv_animals[4] = UnitLastCreated();
    UnitIssueOrder(lv_animals[1], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 1.0, 45.0)), c_orderQueueReplace);
    UnitIssueOrder(lv_animals[2], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 1.0, 135.0)), c_orderQueueReplace);
    UnitIssueOrder(lv_animals[3], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 1.0, 225.0)), c_orderQueueReplace);
    UnitIssueOrder(lv_animals[4], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), 1.0, 315.0)), c_orderQueueReplace);
    auto90E4DF4C_var = 1;
    for ( ; auto90E4DF4C_var <= auto90E4DF4C_ae; auto90E4DF4C_var += 1 ) {
        UnitSetHeight(lv_animals[auto90E4DF4C_var], 0.0, 0.0);
    }
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    UnitSetFacing(gv_Skaters[lp_player], 100.0, 0.25);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("NydusDeathSound12222", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    auto85A4061C_var = 1;
    for ( ; auto85A4061C_var <= auto85A4061C_ae; auto85A4061C_var += 1 ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_animals[auto85A4061C_var]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    libNtve_gf_CreateModelAtPoint("BloodTargetImpact", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.500000");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    lv_blood[1] = libNtve_gf_ActorLastCreated();
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    UnitSetHeight(gv_Skaters[lp_player], 1.0, 1.0);
    UnitSetFacing(gv_Skaters[lp_player], 45.0, 0.25);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    libNtve_gf_CreateModelAtPoint("BloodTargetImpact", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.500000");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    lv_blood[2] = libNtve_gf_ActorLastCreated();
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoA857A365_var = 3;
    for ( ; autoA857A365_var <= autoA857A365_ae; autoA857A365_var += 1 ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_animals[autoA857A365_var]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    }
    libNtve_gf_CreateModelAtPoint("BloodTargetImpact", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.500000");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    lv_blood[4] = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    UnitSetHeight(gv_Skaters[lp_player], 0.0, 1.0);
    UnitSetFacing(gv_Skaters[lp_player], 215.0, 0.25);
    libNtve_gf_CreateModelAtPoint("TerranBloodDeathLow", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    lv_blood2[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    libNtve_gf_CreateModelAtPoint("BloodTargetImpact", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.500000");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Birth", 0, c_animTimeDefault);
    lv_blood[3] = libNtve_gf_ActorLastCreated();
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_animals[2]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    autoF58B0410_var = 1;
    for ( ; autoF58B0410_var <= autoF58B0410_ae; autoF58B0410_var += 1 ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_animals[autoF58B0410_var]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    }
    libNtve_gf_CreateModelAtPoint("LurkerAttackDeathBloodGeyser", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    lv_blood2[2] = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Dog_Bark", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Dog_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoA1FA0F34_var = 3;
    for ( ; autoA1FA0F34_var <= autoA1FA0F34_ae; autoA1FA0F34_var += 1 ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_animals[autoA1FA0F34_var]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    }
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), false);
    libNtve_gf_CreateModelAtPoint("ZealotDeath", UnitGetPosition(gv_Skaters[lp_player]));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("NydusDeathSound12222", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    lv_deatg = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    ActorSend(lv_blood2[1], "Destroy Immediate");
    ActorSend(lv_blood2[2], "Destroy Immediate");
    ActorSend(lv_deatg, "Destroy Immediate");
    auto8CB7399A_var = 1;
    for ( ; auto8CB7399A_var <= auto8CB7399A_ae; auto8CB7399A_var += 1 ) {
        UnitRemove(lv_animals[auto8CB7399A_var]);
        ActorSend(lv_blood[auto8CB7399A_var], "Destroy Immediate");
    }
    return true;
}

trigger auto_gf_CheckforHatTrick_Trigger = null;
int auto_gf_CheckforHatTrick_lp_player;

void gf_CheckforHatTrick (int lp_player) {
    auto_gf_CheckforHatTrick_lp_player = lp_player;

    if (auto_gf_CheckforHatTrick_Trigger == null) {
        auto_gf_CheckforHatTrick_Trigger = TriggerCreate("auto_gf_CheckforHatTrick_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckforHatTrick_Trigger, false, false);
}

bool auto_gf_CheckforHatTrick_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CheckforHatTrick_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_Shootout == false) && (gv_rEDLINE_MODE == false) && ((gv_inGameStatsGoals[lp_player] == 3) || (gv_inGameStatsGoals[lp_player] == 6) || (gv_inGameStatsGoals[lp_player] == 9) || (gv_inGameStatsGoals[lp_player] == 12) || (gv_inGameStatsGoals[lp_player] == 15) || (gv_inGameStatsGoals[lp_player] == 18))) {
        gv_hatTrick.lv_ishattrickhappening = true;
        DialogCreate(539, 77, c_anchorTop, 0, 330, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        gv_hatTrick.lv_hatTrickdialog = DialogLastCreated();
        gv_hatTrick.lv_hatTrickPlayer = lp_player;
        if ((gv_inGameStatsGoals[lp_player] == 6)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 77, c_anchorTop, 0, 0, StringToText(""), "hatrick-x2.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
            if ((gv_inGameStatsGoals[lp_player] == 9)) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 539, 77, c_anchorTop, 0, 0, StringToText(""), "hatrick-x3.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 77, c_anchorTop, 0, 0, StringToText(""), "hatrick.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            }
        }
        gv_hatTrick.lv_hatTrickdialogimage = DialogControlLastCreated();
        SoundPlayForPlayer(SoundLink("Emitter_CrowdCheering", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        gv_hatTrick.lv_hatTrickSound = SoundLastPlayed();
        gf_InitHats(gv_hatTrick.lv_hatTrickPlayer);
        Wait(5.0, c_timeGame);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    }

    return true;
}

trigger auto_gf_EndHatTrickAnimation_Trigger = null;

void gf_EndHatTrickAnimation () {
    if (auto_gf_EndHatTrickAnimation_Trigger == null) {
        auto_gf_EndHatTrickAnimation_Trigger = TriggerCreate("auto_gf_EndHatTrickAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndHatTrickAnimation_Trigger, false, false);
}

bool auto_gf_EndHatTrickAnimation_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBBB90486_g;
    int autoBBB90486_u;
    unit autoBBB90486_var;

    // Implementation
    if ((gv_hatTrick.lv_ishattrickhappening == true)) {
        gv_hatTrick.lv_ishattrickhappening = false;
        Wait(1.0, c_timeGame);
        SoundStop(gv_hatTrick.lv_hatTrickSound, true);
        autoBBB90486_g = gv_hatTrick.lv_hatUnits;
        autoBBB90486_u = UnitGroupCount(autoBBB90486_g, c_unitCountAll);
        for (;; autoBBB90486_u -= 1) {
            autoBBB90486_var = UnitGroupUnitFromEnd(autoBBB90486_g, autoBBB90486_u);
            if (autoBBB90486_var == null) { break; }
            UnitRemove(autoBBB90486_var);
        }
        UnitGroupClear(gv_hatTrick.lv_hatUnits);
        if ((gv_hatTrick.lv_hatTrickdialog != c_invalidDialogId)) {
            DialogDestroy(gv_hatTrick.lv_hatTrickdialog);
        }

    }

    return true;
}

trigger auto_gf_InitHats_Trigger = null;
int auto_gf_InitHats_lp_player;

void gf_InitHats (int lp_player) {
    auto_gf_InitHats_lp_player = lp_player;

    if (auto_gf_InitHats_Trigger == null) {
        auto_gf_InitHats_Trigger = TriggerCreate("auto_gf_InitHats_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitHats_Trigger, false, false);
}

bool auto_gf_InitHats_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_InitHats_lp_player;

    // Variable Declarations
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_hatTrick.lv_ishattrickhappening == true)) {
        gf_Createahat(PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), RandomFixed(50.0, 100.0), RandomFixed(0.0, 360.0)), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_player]), RandomFixed(1.0, 15.0), RandomFixed(0.0, 360.0)));
        Wait(RandomFixed(0.0625, 0.45), c_timeGame);
    }
    return true;
}

trigger auto_gf_Createahat_Trigger = null;
point auto_gf_Createahat_lp_starLocation;
point auto_gf_Createahat_lp_endLocation;

void gf_Createahat (point lp_starLocation, point lp_endLocation) {
    auto_gf_Createahat_lp_starLocation = lp_starLocation;
    auto_gf_Createahat_lp_endLocation = lp_endLocation;

    if (auto_gf_Createahat_Trigger == null) {
        auto_gf_Createahat_Trigger = TriggerCreate("auto_gf_Createahat_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createahat_Trigger, false, false);
}

bool auto_gf_Createahat_TriggerFunc (bool testConds, bool runActions) {
    point lp_starLocation = auto_gf_Createahat_lp_starLocation;
    point lp_endLocation = auto_gf_Createahat_lp_endLocation;

    // Variable Declarations
    int lv_randomint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp2", c_unitCreateIgnorePlacement, 0, lp_starLocation);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetFacing(UnitLastCreated(), RandomFixed(0.0, 360.0), 0.0);
    lv_randomint = RandomInt(1, 4);
    if ((lv_randomint == 1)) {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap AnniversaryHatProtoss");
    }
    else {
        if ((lv_randomint == 2)) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap AnniversaryHatTerran");
        }
        else {
            if ((lv_randomint == 3)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap AnniversaryHatZerg");
            }
            else {
                if ((lv_randomint == 4)) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap GandalfHat");
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 0.300000");
                }

            }
        }
    }
    UnitGroupAdd(gv_hatTrick.lv_hatUnits, UnitLastCreated());
    gf_MoveHat(lp_starLocation, lp_endLocation, UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), 20.0, 0.0);
    if ((lv_randomint == 4)) {
        UnitSetHeight(UnitLastCreated(), 0.7, 2.0);
    }
    else {
        UnitSetHeight(UnitLastCreated(), 0.0, 2.0);
    }
    Wait(2.0, c_timeGame);
    if ((lv_randomint == 4)) {
        UnitSetHeight(UnitLastCreated(), 1.3, 0.15);
    }
    else {
        UnitSetHeight(UnitLastCreated(), 1.0, 0.15);
    }
    Wait(0.15, c_timeGame);
    if ((lv_randomint == 4)) {
        UnitSetHeight(UnitLastCreated(), 0.7, 0.15);
    }
    else {
        UnitSetHeight(UnitLastCreated(), 0.0, 0.15);
    }
    return true;
}

trigger auto_gf_MoveHat_Trigger = null;
point auto_gf_MoveHat_lp_starLocation;
point auto_gf_MoveHat_lp_endLocation;
unit auto_gf_MoveHat_lp_hatunit;

void gf_MoveHat (point lp_starLocation, point lp_endLocation, unit lp_hatunit) {
    auto_gf_MoveHat_lp_starLocation = lp_starLocation;
    auto_gf_MoveHat_lp_endLocation = lp_endLocation;
    auto_gf_MoveHat_lp_hatunit = lp_hatunit;

    if (auto_gf_MoveHat_Trigger == null) {
        auto_gf_MoveHat_Trigger = TriggerCreate("auto_gf_MoveHat_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveHat_Trigger, false, false);
}

bool auto_gf_MoveHat_TriggerFunc (bool testConds, bool runActions) {
    point lp_starLocation = auto_gf_MoveHat_lp_starLocation;
    point lp_endLocation = auto_gf_MoveHat_lp_endLocation;
    unit lp_hatunit = auto_gf_MoveHat_lp_hatunit;

    // Variable Declarations
    fixed lv_speed;
    fixed lv_slowdown;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_speed = (DistanceBetweenPoints(lp_starLocation, lp_endLocation) / 40.0);
    lv_slowdown = RandomFixed(0.1, 0.01);
    while ((UnitIsAlive(lp_hatunit) == true) && (lv_speed > 0.0)) {
        UnitSetPosition(lp_hatunit, PointWithOffsetPolar(UnitGetPosition(lp_hatunit), lv_speed, AngleBetweenPoints(lp_starLocation, lp_endLocation)), true);
        lv_speed -= lv_slowdown;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_SetPrize () {
    // Variable Declarations
    int lv_i;
    int[15] lv_index;

    // Automatic Variable Declarations
    const int auto388F262B_ae = 14;
    const int auto388F262B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto388F262B_ai >= 0 && lv_i <= auto388F262B_ae) || (auto388F262B_ai < 0 && lv_i >= auto388F262B_ae) ) ; lv_i += auto388F262B_ai ) {
        if (((PlayerHandle(lv_i) == gv_hANDLE_KYLE))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "fullheart";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_CREATOR1) || (PlayerHandle(lv_i) == gv_hANDLE_CREATOR2) || (PlayerHandle(lv_i) == gv_hANDLE_CREATOR2EU) || (PlayerHandle(lv_i) == gv_hANDLE_themusic) || (PlayerHandle(lv_i) == gv_hANDLE_CRUSH))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Developer";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_PROFESSORX))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "YT";
        }

        if (((PlayerHandle(lv_i) == "a"))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "test2";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_ALERTEYES))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Newspaper";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_WILDFIRE) || (PlayerHandle(lv_i) == gv_hANDLE_KYLE) || (PlayerHandle(lv_i) == gv_hANDLE_DANCINGMOOSE) || (PlayerHandle(lv_i) == gv_hANDLE_DARKANGEL) || (PlayerHandle(lv_i) == gv_hANDLE_TEROH))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Commissioner";
        }

        if (((PlayerHandle(lv_i) == "a"))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "test4";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_KURT) || (PlayerHandle(lv_i) == gv_hANDLE_KURTEU) || (PlayerHandle(lv_i) == gv_hANDLE_REIMER))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Show Host";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_KURT) || (PlayerHandle(lv_i) == gv_hANDLE_KURTEU) || (PlayerHandle(lv_i) == gv_hANDLE_KYLE) || (PlayerHandle(lv_i) == gv_hANDLE_TEROH) || (PlayerHandle(lv_i) == gv_hANDLE_DANCINGMOOSE) || (PlayerHandle(lv_i) == gv_hANDLE_HTCP) || (PlayerHandle(lv_i) == gv_hANDLE_ALERTEYES))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Zealot Hockey Caster";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_MAHARISHI) || (PlayerHandle(lv_i) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(lv_i) == gv_hANDLE_KAIOKEN) || (PlayerHandle(lv_i) == gv_hANDLE_RUCKLE) || (PlayerHandle(lv_i) == gv_hANDLE_LEVI) || (PlayerHandle(lv_i) == gv_hANDLE_XAPOS))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Winter Classic";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_MAHARISHI) || (PlayerHandle(lv_i) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_PETERDLAI) || (PlayerHandle(lv_i) == gv_hANDLE_THENEWGIRL) || (PlayerHandle(lv_i) == gv_hANDLE_TOWNKRIER) || (PlayerHandle(lv_i) == gv_hANDLE_TKEU) || (PlayerHandle(lv_i) == gv_hANDLE_TINGBM) || (PlayerHandle(lv_i) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTH) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTHEU) || (PlayerHandle(lv_i) == gv_hANDLE_TEROH) || (PlayerHandle(lv_i) == gv_hANDLE_APPLESOUP) || (PlayerHandle(lv_i) == gv_hANDLE_ECUNAMI) || (PlayerHandle(lv_i) == gv_hANDLE_SEAN) || (PlayerHandle(lv_i) == gv_hANDLE_SEANEU))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S1 Winner";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(lv_i) == gv_hANDLE_CERVANTEZEU) || (PlayerHandle(lv_i) == gv_hANDLE_GUERRILA) || (PlayerHandle(lv_i) == gv_hANDLE_NAVYSEALS) || (PlayerHandle(lv_i) == gv_hANDLE_RASPUTIN))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S1 Top 4 Paid";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_MAHARISHI) || (PlayerHandle(lv_i) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_PERPLEX) || (PlayerHandle(lv_i) == gv_hANDLE_APPLESOUP) || (PlayerHandle(lv_i) == gv_hANDLE_KIMJONGSKILL) || (PlayerHandle(lv_i) == gv_hANDLE_PLUTOONFIRE))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Bo3";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_MAHARISHI) || (PlayerHandle(lv_i) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(lv_i) == gv_hANDLE_DROPLETS) || (PlayerHandle(lv_i) == gv_hANDLE_BULBASAAUR) || (PlayerHandle(lv_i) == gv_hANDLE_GUERRILA) || (PlayerHandle(lv_i) == gv_hANDLE_RUCKLE) || (PlayerHandle(lv_i) == gv_hANDLE_LEVI) || (PlayerHandle(lv_i) == gv_hANDLE_BOBBYO))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "Clan War";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_GENERALEU) || (PlayerHandle(lv_i) == gv_hANDLE_SNAKEEU) || (PlayerHandle(lv_i) == gv_hANDLE_ONLYSPEU) || (PlayerHandle(lv_i) == gv_hANDLE_CHLAMYDIAEU))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "EU IHL";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_GUERRILA) || (PlayerHandle(lv_i) == gv_hANDLE_STRAWBERRY) || (PlayerHandle(lv_i) == gv_hANDLE_BULBASAAUR) || (PlayerHandle(lv_i) == gv_hANDLE_BULBASAAUREU) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTH) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTHEU) || (PlayerHandle(lv_i) == gv_hANDLE_PERSAMIN) || (PlayerHandle(lv_i) == gv_hANDLE_RIOT) || (PlayerHandle(lv_i) == gv_hANDLE_MAXWELL) || (PlayerHandle(lv_i) == gv_hANDLE_TWODEUCE) || (PlayerHandle(lv_i) == gv_hANDLE_RAVEN) || (PlayerHandle(lv_i) == gv_hANDLE_REIMER) || (PlayerHandle(lv_i) == gv_hANDLE_HOTPIE) || (PlayerHandle(lv_i) == gv_hANDLE_HOTPIEEU))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S2 Winner";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_ZACHSMACK) || (PlayerHandle(lv_i) == gv_hANDLE_ZACHSMACKEU) || (PlayerHandle(lv_i) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(lv_i) == gv_hANDLE_TOWNKRIER) || (PlayerHandle(lv_i) == gv_hANDLE_ANGLEFIRE) || (PlayerHandle(lv_i) == gv_hANDLE_DANCINGMOOSE) || (PlayerHandle(lv_i) == gv_hANDLE_THEAMERICANR) || (PlayerHandle(lv_i) == gv_hANDLE_CARLITO) || (PlayerHandle(lv_i) == gv_hANDLE_MOFOWH) || (PlayerHandle(lv_i) == gv_hANDLE_ADOG))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S3 Winner";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_ART) || (PlayerHandle(lv_i) == gv_hANDLE_BACKFISCH) || (PlayerHandle(lv_i) == gv_hANDLE_BACKFISCHEU) || (PlayerHandle(lv_i) == gv_hANDLE_BLITZERG) || (PlayerHandle(lv_i) == gv_hANDLE_HWCUBSFTW) || (PlayerHandle(lv_i) == gv_hANDLE_HWCUBSFTW_EU) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTH) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTHEU) || (PlayerHandle(lv_i) == gv_hANDLE_STRAWBERRY) || (PlayerHandle(lv_i) == gv_hANDLE_WACK) || (PlayerHandle(lv_i) == gv_hANDLE_WACKEU) || (PlayerHandle(lv_i) == gv_hANDLE_WATERMELON) || (PlayerHandle(lv_i) == gv_hANDLE_DROPLETS) || (PlayerHandle(lv_i) == gv_hANDLE_BULBASAAUR) || (PlayerHandle(lv_i) == gv_hANDLE_BULBASAAUREU))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S4 Winner";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_THREE) || (PlayerHandle(lv_i) == gv_hANDLE_DANCINGMOOSE) || (PlayerHandle(lv_i) == gv_hANDLE_KIMJONGSKILL) || (PlayerHandle(lv_i) == gv_hANDLE_KIMJONGSKILLEU) || (PlayerHandle(lv_i) == gv_hANDLE_PERPLEX) || (PlayerHandle(lv_i) == gv_hANDLE_PORNHACK) || (PlayerHandle(lv_i) == gv_hANDLE_ART) || (PlayerHandle(lv_i) == gv_hANDLE_WACK) || (PlayerHandle(lv_i) == gv_hANDLE_WACKEU) || (PlayerHandle(lv_i) == gv_hANDLE_PROFESSORX) || (PlayerHandle(lv_i) == gv_hANDLE_DARKANGEL) || (PlayerHandle(lv_i) == gv_hANDLE_ZOTZ))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S5 Winner";
        }

        if (((PlayerHandle(lv_i) == gv_hANDLE_STEALTH) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTHEU) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYER) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYEREU) || (PlayerHandle(lv_i) == gv_hANDLE_PROSTER) || (PlayerHandle(lv_i) == gv_hANDLE_PROSTEREU) || (PlayerHandle(lv_i) == gv_hANDLE_RUSH))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S6 Winner";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_WATERMELON) || (PlayerHandle(lv_i) == gv_hANDLE_LiNGKing) || (PlayerHandle(lv_i) == gv_hANDLE_LiNGKingEU) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYER) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYEREU) || (PlayerHandle(lv_i) == gv_hANDLE_BLITZERG))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "3ktourny";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_GUERRILA))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "leaguemusic";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_THREE) || (PlayerHandle(lv_i) == gv_hANDLE_KHOLIN) || (PlayerHandle(lv_i) == gv_hANDLE_TWODEUCE) || (PlayerHandle(lv_i) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(lv_i) == gv_hANDLE_MEEPOMART) || (PlayerHandle(lv_i) == gv_hANDLE_MYTHIC))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S7 Winner";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_TENKZ) || (PlayerHandle(lv_i) == gv_hANDLE_PERPLEX) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYER) || (PlayerHandle(lv_i) == gv_hANDLE_RESSLAYEREU) || (PlayerHandle(lv_i) == gv_hANDLE_THREE) || (PlayerHandle(lv_i) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(lv_i) == gv_hANDLE_ISPYGECKO))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "CHL Champion";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_RUSH) || (PlayerHandle(lv_i) == gv_hANDLE_SWIFT) || (PlayerHandle(lv_i) == gv_hANDLE_ALERTEYES) || (PlayerHandle(lv_i) == gv_hANDLE_DUSTDEVIL) || (PlayerHandle(lv_i) == gv_hANDLE_HWCUBSFTW) || (PlayerHandle(lv_i) == gv_hANDLE_HWCUBSFTW_EU))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S8 Winner";
        }

        if (((PlayerHandle(lv_i) == "") || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUR) || (PlayerHandle(lv_i) == gv_hANDLE_VAPOUREU) || (PlayerHandle(lv_i) == gv_hANDLE_ELDERSAGE) || (PlayerHandle(lv_i) == gv_hANDLE_ELDERSAGEEU) || (PlayerHandle(lv_i) == gv_hANDLE_STEALTH) || (PlayerHandle(lv_i) == gv_hANDLE_ART))) {
            lv_index[lv_i] += 1;
            gv_prizes[lv_i][lv_index[lv_i]] = "ZHL S8 Winner";
        }

    }
}

void gf_DuckHunt (int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    point lv_point;
    fixed lv_facing;

    // Automatic Variable Declarations
    playergroup auto5C363A88_g;
    int auto5C363A88_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    gv_duckHuntScore[lp_player] = 0;
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_actualPlayerzonTeam[1], lv_playerGroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_actualPlayerzonTeam[2], lv_playerGroup);
    PlayerGroupRemove(lv_playerGroup, lp_player);
    lv_point = UnitGetPosition(gv_Skaters[lp_player]);
    lv_facing = UnitGetFacing(gv_Skaters[lp_player]);
    UnitRemove(gv_Skaters[lp_player]);
    UnitCreate(1, "DuckHunter2", 0, lp_player, lv_point, lv_facing);
    UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
    UnitGroupAdd(gv_stufftomove, UnitLastCreated());
    UnitSelect(UnitLastCreated(), lp_player, true);
    UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
    libNtve_gf_CreateModelAtPoint("HeliosExplosions", lv_point);
    gv_Skaters[lp_player] = UnitLastCreated();
    TextTagAttachToUnit(gv_TextTags[lp_player], gv_Skaters[lp_player], 3.0);
    UnitRemove(gv_Sticks[lp_player]);
    auto5C363A88_g = lv_playerGroup;
    auto5C363A88_var = -1;
    while (true) {
        auto5C363A88_var = PlayerGroupNextPlayer(auto5C363A88_g, auto5C363A88_var);
        if (auto5C363A88_var < 0) { break; }
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto5C363A88_var], libNtve_gf_ModelSwap("CarrionBird", 1));
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto5C363A88_var], libNtve_gf_SetScale(4.0, 4.0, 4.0, 0.0));
        UnitRemove(gv_Sticks[auto5C363A88_var]);
    }
    Wait(9.0, c_timeGame);
    gv_duckHuntPlayer = lp_player;
    gv_duckHuntScoreON = true;
}

trigger auto_gf_InitBoardThrowing_Trigger = null;

void gf_InitBoardThrowing () {
    if (auto_gf_InitBoardThrowing_Trigger == null) {
        auto_gf_InitBoardThrowing_Trigger = TriggerCreate("auto_gf_InitBoardThrowing_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitBoardThrowing_Trigger, false, false);
}

bool auto_gf_InitBoardThrowing_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAA0B7838_ae = 8;
    int autoAA0B7838_var;
    unitgroup auto4DD5D49E_g;
    int auto4DD5D49E_u;
    unit auto4DD5D49E_var;

    // Implementation
    gv_throwBoards.lv_actualBoards[1] = ActorFromDoodad(DoodadFromId(36));
    gv_throwBoards.lv_actualBoards[2] = ActorFromDoodad(DoodadFromId(34));
    gv_throwBoards.lv_actualBoards[3] = ActorFromDoodad(DoodadFromId(182));
    gv_throwBoards.lv_actualBoards[4] = ActorFromDoodad(DoodadFromId(93));
    gv_throwBoards.lv_actualBoards[5] = ActorFromDoodad(DoodadFromId(45));
    gv_throwBoards.lv_actualBoards[6] = ActorFromDoodad(DoodadFromId(43));
    gv_throwBoards.lv_actualBoards[7] = ActorFromDoodad(DoodadFromId(174));
    gv_throwBoards.lv_actualBoards[8] = ActorFromDoodad(DoodadFromId(176));
    TriggerEnable(gt_ThowBoard, true);
    TriggerEnable(gt_PickupBoard, true);
    gv_throwBoards.lv_canthrowboards = true;
    while (!((gv_FaceoffTimer > 0))) {
        Wait(0.0625, c_timeGame);
    }
    TriggerEnable(gt_ThowBoard, false);
    TriggerEnable(gt_PickupBoard, false);
    gv_throwBoards.lv_canthrowboards = false;
    gv_throwBoards.lv_isholdingaboard = false;
    autoAA0B7838_var = 1;
    for ( ; autoAA0B7838_var <= autoAA0B7838_ae; autoAA0B7838_var += 1 ) {
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_throwBoards.lv_actualBoards[autoAA0B7838_var], true);
        gv_throwBoards.lv_areboardsthrown[autoAA0B7838_var] = false;
    }
    auto4DD5D49E_g = UnitGroup("ThrowingWall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DD5D49E_u = UnitGroupCount(auto4DD5D49E_g, c_unitCountAll);
    for (;; auto4DD5D49E_u -= 1) {
        auto4DD5D49E_var = UnitGroupUnitFromEnd(auto4DD5D49E_g, auto4DD5D49E_u);
        if (auto4DD5D49E_var == null) { break; }
        UnitRemove(auto4DD5D49E_var);
    }
    return true;
}

trigger auto_gf_PickupBoard_Trigger = null;
int auto_gf_PickupBoard_lp_board;

void gf_PickupBoard (int lp_board) {
    auto_gf_PickupBoard_lp_board = lp_board;

    if (auto_gf_PickupBoard_Trigger == null) {
        auto_gf_PickupBoard_Trigger = TriggerCreate("auto_gf_PickupBoard_TriggerFunc");
    }

    TriggerExecute(auto_gf_PickupBoard_Trigger, false, false);
}

bool auto_gf_PickupBoard_TriggerFunc (bool testConds, bool runActions) {
    int lp_board = auto_gf_PickupBoard_lp_board;

    // Variable Declarations
    unit lv_theboard;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_throwBoards.lv_isholdingaboard = true;
    gv_throwBoards.lv_areboardsthrown[lp_board] = true;
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_throwBoards.lv_actualBoards[lp_board], false);
    UnitCreate(1, "ThrowingWall", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(75)), 270.0);
    lv_theboard = UnitLastCreated();
    gv_throwBoards.lv_theboardthatsbeingheld = UnitLastCreated();
    UnitSetHeight(lv_theboard, 2.0, 0.0625);
    while ((gv_throwBoards.lv_canthrowboards == true) && (gv_throwBoards.lv_isholdingaboard == true) && (UnitIsAlive(lv_theboard) == true)) {
        UnitSetPosition(lv_theboard, UnitGetPosition(gv_throwBoards.lv_throwingskater), true);
        UnitSetFacing(lv_theboard, UnitGetFacing(gv_throwBoards.lv_throwingskater), 0.0625);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Throwboardmovement_Trigger = null;
unit auto_gf_Throwboardmovement_lp_theBoard;
point auto_gf_Throwboardmovement_lp_clickpos;

void gf_Throwboardmovement (unit lp_theBoard, point lp_clickpos) {
    auto_gf_Throwboardmovement_lp_theBoard = lp_theBoard;
    auto_gf_Throwboardmovement_lp_clickpos = lp_clickpos;

    if (auto_gf_Throwboardmovement_Trigger == null) {
        auto_gf_Throwboardmovement_Trigger = TriggerCreate("auto_gf_Throwboardmovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_Throwboardmovement_Trigger, false, false);
}

bool auto_gf_Throwboardmovement_TriggerFunc (bool testConds, bool runActions) {
    unit lp_theBoard = auto_gf_Throwboardmovement_lp_theBoard;
    point lp_clickpos = auto_gf_Throwboardmovement_lp_clickpos;

    // Variable Declarations
    fixed lv_speed;
    fixed lv_speedreduction;
    fixed lv_angle;

    // Automatic Variable Declarations
    unitgroup auto3699892C_g;
    int auto3699892C_u;
    unit auto3699892C_var;

    // Variable Initialization
    lv_speed = 2.3;
    lv_speedreduction = 0.05;

    // Implementation
    lv_angle = AngleBetweenPoints(UnitGetPosition(lp_theBoard), lp_clickpos);
    UnitSetHeight(lp_theBoard, 0.1, 1.5);
    UnitSetFacing(lp_theBoard, lv_angle, 0.0625);
    SoundPlayForPlayer(SoundLink("ThrowBoardsLaunch", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while ((gv_throwBoards.lv_canthrowboards == true) && (UnitIsAlive(lp_theBoard) == true) && (lv_speed > 0.0)) {
        UnitSetPosition(lp_theBoard, PointWithOffsetPolar(UnitGetPosition(lp_theBoard), lv_speed, lv_angle), true);
        lv_speed -= lv_speedreduction;
        if ((lv_speed > 0.7)) {
            auto3699892C_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_theBoard), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3699892C_u = UnitGroupCount(auto3699892C_g, c_unitCountAll);
            for (;; auto3699892C_u -= 1) {
                auto3699892C_var = UnitGroupUnitFromEnd(auto3699892C_g, auto3699892C_u);
                if (auto3699892C_var == null) { break; }
                if ((auto3699892C_var != gv_throwBoards.lv_throwingskater) && ((auto3699892C_var == gv_Skaters[1]) || (auto3699892C_var == gv_Skaters[2]) || (auto3699892C_var == gv_Skaters[3]) || (auto3699892C_var == gv_Skaters[4]) || (auto3699892C_var == gv_Skaters[5]) || (auto3699892C_var == gv_Skaters[6]) || (auto3699892C_var == gv_Skaters[7]) || (auto3699892C_var == gv_Skaters[8]) || (auto3699892C_var == gv_Skaters[9]) || (auto3699892C_var == gv_Skaters[10]) || (auto3699892C_var == gv_Skaters[11]) || (auto3699892C_var == gv_Skaters[12]) || (auto3699892C_var == gv_Skaters[13]) || (auto3699892C_var == gv_Skaters[14]) || (auto3699892C_var == gv_Skaters[15]))) {
                    gf_ApplyForcePolar(auto3699892C_var, (lv_speed * 2.0), AngleBetweenPoints(UnitGetPosition(lp_theBoard), UnitGetPosition(auto3699892C_var)));
                    SoundPlayForPlayer(SoundLink("ThrowBoardsImpact", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }

            }
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_EntropyCrickets (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_entropyStickUnit = gv_Sticks[lp_player];
    gv_entropyGoalieUnit = gv_Skaters[lp_player];
    libNtve_gf_UnitCreateFacingPoint(1, "InvisibleTargetDummy", 0, lp_player, UnitGetPosition(gv_Skaters[lp_player]), PointFromId(112));
    gv_tumbleweedsUnit = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(112)), c_orderQueueReplace);
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "Tumbleweeds", "Ref_Center");
    UnitSetScale(UnitLastCreated(), 250.0, 250.0, 250.0);
    TriggerExecute(gt_Crickets, true, false);
}

trigger auto_gf_InitKimskill_Trigger = null;
unit auto_gf_InitKimskill_lp_unit;

void gf_InitKimskill (unit lp_unit) {
    auto_gf_InitKimskill_lp_unit = lp_unit;

    if (auto_gf_InitKimskill_Trigger == null) {
        auto_gf_InitKimskill_Trigger = TriggerCreate("auto_gf_InitKimskill_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitKimskill_Trigger, false, false);
}

bool auto_gf_InitKimskill_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_InitKimskill_lp_unit;

    // Variable Declarations
    actor lv_flag;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_kimskill.lv_iskimskillrunning = true;
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap SiegeTank");
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "SetTeamColor 255,0,0 255,0,0");
    gv_kimskill.lv_kimskillUnit = lp_unit;
    libNtve_gf_AttachModelToUnit(lp_unit, "KimJungFlag", "Ref_Head");
    lv_flag = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_KimskillFireMissile, true);
    Wait(16.0, c_timeGame);
    gv_kimskill.lv_iskimskillrunning = false;
    gv_kimskill.lv_kimskillUnit = null;
    TriggerEnable(gt_KimskillFireMissile, false);
    return true;
}

trigger auto_gf_KimskillShootCD_Trigger = null;

void gf_KimskillShootCD () {
    if (auto_gf_KimskillShootCD_Trigger == null) {
        auto_gf_KimskillShootCD_Trigger = TriggerCreate("auto_gf_KimskillShootCD_TriggerFunc");
    }

    TriggerExecute(auto_gf_KimskillShootCD_Trigger, false, false);
}

bool auto_gf_KimskillShootCD_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_kimskill.lv_shootCD == false)) {
        gv_kimskill.lv_shootCD = true;
        Wait(1.0, c_timeGame);
        gv_kimskill.lv_shootCD = false;
    }

    return true;
}

trigger auto_gf_KimskillMissile_Trigger = null;
point auto_gf_KimskillMissile_lp_point;

void gf_KimskillMissile (point lp_point) {
    auto_gf_KimskillMissile_lp_point = lp_point;

    if (auto_gf_KimskillMissile_Trigger == null) {
        auto_gf_KimskillMissile_Trigger = TriggerCreate("auto_gf_KimskillMissile_TriggerFunc");
    }

    TriggerExecute(auto_gf_KimskillMissile_Trigger, false, false);
}

bool auto_gf_KimskillMissile_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_KimskillMissile_lp_point;

    // Variable Declarations
    actor lv_axplosionactor;

    // Automatic Variable Declarations
    playergroup autoDA4F4BCE_g;
    int autoDA4F4BCE_var;
    unitgroup auto3477DF67_g;
    int auto3477DF67_u;
    unit auto3477DF67_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_MakeUnitFacePoint(gv_kimskill.lv_kimskillUnit, lp_point, 0.0625);
    gf_KimskillProjectile(UnitGetPosition(gv_kimskill.lv_kimskillUnit), lp_point);
    Wait(0.5, c_timeGame);
    autoDA4F4BCE_g = PlayerGroupAll();
    autoDA4F4BCE_var = -1;
    while (true) {
        autoDA4F4BCE_var = PlayerGroupNextPlayer(autoDA4F4BCE_g, autoDA4F4BCE_var);
        if (autoDA4F4BCE_var < 0) { break; }
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 0.4);
    }
    libNtve_gf_CreateModelAtPoint("EvoNukeExplode", lp_point);
    lv_axplosionactor = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_axplosionactor, c_animNameDefault, "Death", 0, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("LingcannonFire", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto3477DF67_g = UnitGroup(null, c_playerAny, RegionCircle(lp_point, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3477DF67_u = UnitGroupCount(auto3477DF67_g, c_unitCountAll);
    for (;; auto3477DF67_u -= 1) {
        auto3477DF67_var = UnitGroupUnitFromEnd(auto3477DF67_g, auto3477DF67_u);
        if (auto3477DF67_var == null) { break; }
        if ((gv_kimskill.lv_kimskillUnit != auto3477DF67_var) && ((gv_Skaters[1] == auto3477DF67_var) || (gv_Skaters[2] == auto3477DF67_var) || (gv_Skaters[3] == auto3477DF67_var) || (gv_Skaters[4] == auto3477DF67_var) || (gv_Skaters[5] == auto3477DF67_var) || (gv_Skaters[6] == auto3477DF67_var) || (gv_Skaters[7] == auto3477DF67_var) || (gv_Skaters[8] == auto3477DF67_var) || (gv_Skaters[9] == auto3477DF67_var) || (gv_Skaters[10] == auto3477DF67_var) || (gv_Skaters[11] == auto3477DF67_var) || (gv_Skaters[12] == auto3477DF67_var) || (gv_Skaters[13] == auto3477DF67_var) || (gv_Skaters[14] == auto3477DF67_var) || (gv_Skaters[15] == auto3477DF67_var))) {
            gf_ApplyForcePolar(auto3477DF67_var, 5.0, AngleBetweenPoints(lp_point, UnitGetPosition(auto3477DF67_var)));
        }

    }
    Wait(5.0, c_timeGame);
    ActorSend(lv_axplosionactor, "Destroy Immediate");
    return true;
}

trigger auto_gf_KimskillProjectile_Trigger = null;
point auto_gf_KimskillProjectile_lp_start;
point auto_gf_KimskillProjectile_lp_end;

void gf_KimskillProjectile (point lp_start, point lp_end) {
    auto_gf_KimskillProjectile_lp_start = lp_start;
    auto_gf_KimskillProjectile_lp_end = lp_end;

    if (auto_gf_KimskillProjectile_Trigger == null) {
        auto_gf_KimskillProjectile_Trigger = TriggerCreate("auto_gf_KimskillProjectile_TriggerFunc");
    }

    TriggerExecute(auto_gf_KimskillProjectile_Trigger, false, false);
}

bool auto_gf_KimskillProjectile_TriggerFunc (bool testConds, bool runActions) {
    point lp_start = auto_gf_KimskillProjectile_lp_start;
    point lp_end = auto_gf_KimskillProjectile_lp_end;

    // Variable Declarations
    unit lv_missile;
    fixed lv_stepdistance;

    // Automatic Variable Declarations
    const int auto78D604AD_n = 8;
    int auto78D604AD_i;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "YodaBulletTieFighter2", c_unitCreateIgnorePlacement, 0, lp_start, AngleBetweenPoints(lp_start, lp_end));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    UnitSetFacing(UnitLastCreated(), AngleBetweenPoints(lp_start, lp_end), 0.0);
    lv_missile = UnitLastCreated();
    lv_stepdistance = (DistanceBetweenPoints(lp_start, lp_end) / 8.0);
    for (auto78D604AD_i = 1; auto78D604AD_i <= auto78D604AD_n; auto78D604AD_i += 1) {
        UnitSetPosition(lv_missile, PointWithOffsetPolar(UnitGetPosition(lv_missile), lv_stepdistance, AngleBetweenPoints(lp_start, lp_end)), true);
        Wait(0.0625, c_timeGame);
    }
    UnitRemove(lv_missile);
    return true;
}

trigger auto_gf_InitAdele_Trigger = null;
unit auto_gf_InitAdele_lp_adeleUnit;

void gf_InitAdele (unit lp_adeleUnit) {
    auto_gf_InitAdele_lp_adeleUnit = lp_adeleUnit;

    if (auto_gf_InitAdele_Trigger == null) {
        auto_gf_InitAdele_Trigger = TriggerCreate("auto_gf_InitAdele_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitAdele_Trigger, false, false);
}

bool auto_gf_InitAdele_TriggerFunc (bool testConds, bool runActions) {
    unit lp_adeleUnit = auto_gf_InitAdele_lp_adeleUnit;

    // Variable Declarations
    int lv_adelOwner;
    actor lv_adelhair;
    int lv_fadeDialog;
    int lv_fadeDialogImage;
    int lv_glare;
    point[16] lv_audiencePoints;

    // Automatic Variable Declarations
    playergroup auto25960770_g;
    int auto25960770_var;
    playergroup autoF182447C_g;
    int autoF182447C_var;
    playergroup auto86DA80EE_g;
    int auto86DA80EE_var;
    playergroup autoA8ACEFF6_g;
    int autoA8ACEFF6_var;
    playergroup auto6456DCB0_g;
    int auto6456DCB0_var;
    int autoD42EFFAB_ae;
    int autoD42EFFAB_var;
    playergroup auto98ECEE5D_g;
    int auto98ECEE5D_var;

    // Variable Initialization
    lv_fadeDialog = c_invalidDialogId;
    lv_fadeDialogImage = c_invalidDialogControlId;
    lv_glare = c_invalidDialogControlId;

    // Implementation
    ActorSend(gv_spotlight, "Destroy Immediate");
    lv_audiencePoints[1] = Point(155.74, 105.97);
    lv_audiencePoints[2] = Point(156.78, 109.34);
    lv_audiencePoints[3] = Point(157.09, 111.97);
    lv_audiencePoints[4] = Point(157.04, 114.92);
    lv_audiencePoints[5] = Point(155.99, 117.53);
    lv_audiencePoints[6] = Point(155.25, 120.4);
    lv_audiencePoints[7] = Point(158.65, 107.44);
    lv_audiencePoints[8] = Point(158.0, 119.53);
    lv_audiencePoints[9] = Point(158.87, 110.83);
    lv_audiencePoints[10] = Point(158.83, 117.02);
    lv_audiencePoints[11] = Point(159.18, 114.32);
    lv_audiencePoints[12] = Point(161.01, 108.69);
    lv_audiencePoints[13] = Point(161.39, 112.29);
    lv_audiencePoints[14] = Point(161.24, 115.3);
    lv_audiencePoints[15] = Point(160.45, 119.23);
    lv_adelOwner = UnitGetOwner(lp_adeleUnit);
    UnitIssueOrder(gv_Skaters[lv_adelOwner], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[lv_adelOwner], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[lv_adelOwner], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(gv_Skaters[lv_adelOwner], "move", false);
    UnitAbilityEnable(gv_Skaters[lv_adelOwner], "Check", false);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_fadeDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(lv_fadeDialog, 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_fadeDialogImage = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_CreateStageItem(Point(132.5, 99.5), 0.0, 5.0, 5.0, 5.0, "SignPropaganda", 0, 1, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(132.5, 123.5), 0.0, 5.0, 5.0, 5.0, "SignPropaganda", 0, 1, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(139.26, 114.6), 0.0, 5.0, 5.0, 5.0, "BraxisAlphaTallSign", 11, 4, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(138.89, 103.02), 0.0, 5.0, 5.0, 5.0, "BraxisAlphaFloodLights", 1, 5, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(138.94, 124.16), 0.0, 5.0, 5.0, 5.0, "BraxisAlphaFloodLights", 1, 5, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(142.5, 112.5), 0.0, 5.0, 5.0, 5.0, "CastanarDissectionTable", 2, 2, false, Color(100.00, 0.00, 0.00), 0.0);
    gf_CreateStageItem(Point(147.94, 112.2), 4.2, 1.8, 1.8, 1.8, "LandingLights", 3, 4, true, Color(0.00, 0.00, 0.00), 1.0);
    gf_CreateStageItem(Point(147.94, 112.2), 4.2, 1.8, 1.8, 1.8, "LandingLights", 3, 4, true, Color(0.00, 0.00, 0.00), 1.0);
    gf_CreateStageItem(Point(147.9, 112.22), 1.6, 0.2, 0.2, 1.0, "BullhornLights", 0, 3, true, Color(0.00, 0.00, 0.00), 5.0);
    gf_CreateStageItem(Point(147.2, 112.2), 3.3, 1.0, 1.0, 1.0, "XelNaga_Caverns_Cave_Light", 2, 3, false, Color(0.00, 0.00, 0.00), 5.0);
    gf_CreateStageItem(Point(146.53, 110.88), 4.0, 1.0, 1.0, 1.0, "THorner05SFlashingLights", 255, 3, false, Color(0.00, 0.00, 0.00), 5.0);
    gf_CreateStageItem(Point(154.13, 92.4), 0.0, 3.0, 3.0, 3.0, "DustLeaves", 255, 2, true, Color(59.22, 18.04, 0.00), 3.0);
    gf_CreateStageItem(Point(153.99, 90.96), 0.0, 3.0, 3.0, 3.0, "DustLeaves", 255, 2, true, Color(50.20, 25.10, 0.00), 3.0);
    gf_CreateStageItem(Point(153.6, 78.61), 0.0, 3.0, 3.0, 3.0, "DustLeaves", 255, 2, true, Color(100.00, 50.20, 0.00), 3.0);
    gf_Forcecorrectstage();
    GameSetGlobalTimeScale(0.3);
    UnitSetPosition(gv_Skaters[lv_adelOwner], Point(146.7, 112.23), true);
    UnitSetHeight(gv_Skaters[lv_adelOwner], 3.3, 0.0);
    TextTagSetPosition(gv_TextTags[lv_adelOwner], UnitGetPosition(gv_Skaters[lv_adelOwner]), 6.5);
    auto25960770_g = gv_actualPlayerzonTeam[1];
    auto25960770_var = -1;
    while (true) {
        auto25960770_var = PlayerGroupNextPlayer(auto25960770_g, auto25960770_var);
        if (auto25960770_var < 0) { break; }
        if ((PlayerStatus(auto25960770_var) == c_playerStatusActive) && (gv_Skaters[auto25960770_var] != gv_Skaters[lv_adelOwner]) && (UnitIsAlive(gv_Skaters[auto25960770_var]) == true)) {
            UnitIssueOrder(gv_Skaters[auto25960770_var], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[auto25960770_var], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[auto25960770_var], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitAbilityEnable(gv_Skaters[auto25960770_var], "move", false);
            UnitAbilityEnable(gv_Skaters[auto25960770_var], "Check", false);
            UnitSetPosition(gv_Skaters[auto25960770_var], lv_audiencePoints[auto25960770_var], false);
            UnitSetFacing(gv_Skaters[auto25960770_var], AngleBetweenPoints(UnitGetPosition(gv_Skaters[auto25960770_var]), UnitGetPosition(gv_Skaters[lv_adelOwner])), 0.0);
        }

    }
    autoF182447C_g = gv_actualPlayerzonTeam[2];
    autoF182447C_var = -1;
    while (true) {
        autoF182447C_var = PlayerGroupNextPlayer(autoF182447C_g, autoF182447C_var);
        if (autoF182447C_var < 0) { break; }
        if ((PlayerStatus(autoF182447C_var) == c_playerStatusActive) && (gv_Skaters[autoF182447C_var] != gv_Skaters[lv_adelOwner]) && (UnitIsAlive(gv_Skaters[autoF182447C_var]) == true)) {
            UnitIssueOrder(gv_Skaters[autoF182447C_var], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[autoF182447C_var], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[autoF182447C_var], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitAbilityEnable(gv_Skaters[autoF182447C_var], "move", false);
            UnitAbilityEnable(gv_Skaters[autoF182447C_var], "Check", false);
            UnitSetPosition(gv_Skaters[autoF182447C_var], lv_audiencePoints[autoF182447C_var], false);
            UnitSetFacing(gv_Skaters[autoF182447C_var], AngleBetweenPoints(UnitGetPosition(gv_Skaters[autoF182447C_var]), UnitGetPosition(gv_Skaters[lv_adelOwner])), 0.0);
        }

    }
    libNtve_gf_AttachActorToUnit(gv_Skaters[lv_adelOwner], "AdelHair", "Ref_Head");
    lv_adelhair = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.160000,0.190000,0.200000");
    ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host MoveHat123");
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lv_adelOwner]), c_animNameDefault, "Stand Dance 01", 0, 0.0);
    UnitSetFacing(gv_Skaters[lv_adelOwner], 0.0, 0.0);
    auto86DA80EE_g = PlayerGroupAll();
    auto86DA80EE_var = -1;
    while (true) {
        auto86DA80EE_var = PlayerGroupNextPlayer(auto86DA80EE_g, auto86DA80EE_var);
        if (auto86DA80EE_var < 0) { break; }
        CameraSave(auto86DA80EE_var);
        CameraLockInput(auto86DA80EE_var, true);
        CameraApplyInfo(auto86DA80EE_var, CameraInfoFromId(394), 0.0, -1, 10.0, true);
        CameraLookAt(auto86DA80EE_var, UnitGetPosition(gv_Skaters[lv_adelOwner]), 0.0, -1, 10.0);
        CameraSetValue(auto86DA80EE_var, c_cameraValueYaw, 200.0, 8.0, -1, 10.0);
    }
    Wait(0.2, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
    Wait(6.0, c_timeGame);
    DialogControlFadeTransparency(lv_fadeDialogImage, PlayerGroupAll(), 2.0, 0.0);
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(lv_fadeDialogImage, PlayerGroupAll(), 2.0, 100.0);
    libNtve_gf_CreateDialogItemImage(lv_fadeDialog, 3000, 2000, c_anchorCenter, 700, 0, StringToText(""), "Assets\\Textures\\planetviewkaldrsunflare_diff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    lv_glare = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(lv_glare, 330, PlayerGroupAll());
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 6.0, 0.0);
    autoA8ACEFF6_g = PlayerGroupAll();
    autoA8ACEFF6_var = -1;
    while (true) {
        autoA8ACEFF6_var = PlayerGroupNextPlayer(autoA8ACEFF6_g, autoA8ACEFF6_var);
        if (autoA8ACEFF6_var < 0) { break; }
        CameraApplyInfo(autoA8ACEFF6_var, CameraInfoFromId(395), 0.0, -1, 10.0, true);
        CameraLookAt(autoA8ACEFF6_var, UnitGetPosition(gv_Skaters[lv_adelOwner]), 0.0, -1, 10.0);
        CameraSetValue(autoA8ACEFF6_var, c_cameraValueHeightOffset, 6.0, 7.0, -1, 10.0);
    }
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lv_adelOwner]), c_animNameDefault, "Fidget 00", 0, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 2.0, 100.0);
    DialogControlFadeTransparency(lv_fadeDialogImage, PlayerGroupAll(), 2.0, 0.0);
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(lv_fadeDialogImage, PlayerGroupAll(), 2.0, 100.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lv_adelOwner]), c_animNameDefault, "Stand Victory 02", 0, 0.0);
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 6.0, 0.0);
    auto6456DCB0_g = PlayerGroupAll();
    auto6456DCB0_var = -1;
    while (true) {
        auto6456DCB0_var = PlayerGroupNextPlayer(auto6456DCB0_g, auto6456DCB0_var);
        if (auto6456DCB0_var < 0) { break; }
        CameraApplyInfo(auto6456DCB0_var, CameraInfoFromId(396), 0.0, -1, 10.0, true);
        CameraLookAt(auto6456DCB0_var, UnitGetPosition(gv_Skaters[lv_adelOwner]), 0.0, -1, 10.0);
        CameraSetValue(auto6456DCB0_var, c_cameraValueHeightOffset, 6.0, 7.0, -1, 10.0);
        CameraSetValue(auto6456DCB0_var, c_cameraValueYaw, 45.0, 7.0, -1, 10.0);
    }
    Wait(5.0, c_timeGame);
    DialogControlFadeTransparency(lv_fadeDialogImage, PlayerGroupAll(), 2.0, 0.0);
    DialogControlFadeTransparency(lv_glare, PlayerGroupAll(), 1.0, 100.0);
    Wait(3.0, c_timeGame);
    GameSetGlobalTimeScale(1.0);
    autoD42EFFAB_ae = gv_adeleStageModelCount;
    autoD42EFFAB_var = 1;
    for ( ; autoD42EFFAB_var <= autoD42EFFAB_ae; autoD42EFFAB_var += 1 ) {
        ActorSend(gv_adeleStageModels[autoD42EFFAB_var], "Destroy Immediate");
    }
    auto98ECEE5D_g = PlayerGroupAll();
    auto98ECEE5D_var = -1;
    while (true) {
        auto98ECEE5D_var = PlayerGroupNextPlayer(auto98ECEE5D_g, auto98ECEE5D_var);
        if (auto98ECEE5D_var < 0) { break; }
        CameraRestore(auto98ECEE5D_var, 0.0, -1, 10.0);
        CameraLockInput(auto98ECEE5D_var, false);
    }
    Wait(0.5, c_timeGame);
    DialogDestroy(lv_fadeDialog);
    gv_adeleStageModelCount = 0;
    return true;
}

void gf_CreateStageItem (point lp_point, fixed lp_height, fixed lp_scalex, fixed lp_scaley, fixed lp_scalez, string lp_model, int lp_variation, int lp_direction1U2R3D4L5BR, bool lp_useTint, color lp_tint, fixed lp_hDR) {
    // Automatic Variable Declarations
    // Implementation
    gv_adeleStageModelCount += 1;
    libNtve_gf_CreateModelAtPoint(lp_model, lp_point);
    gv_adeleStageModels[gv_adeleStageModelCount] = libNtve_gf_ActorLastCreated();
    ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetHeight(lp_height));
    ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetScale(lp_scalex, lp_scaley, lp_scalez, 0.0));
    ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_ModelSwap(lp_model, lp_variation));
    if ((lp_direction1U2R3D4L5BR == 1)) {
        ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    }
    else {
        if ((lp_direction1U2R3D4L5BR == 2)) {
            ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
        }
        else {
            if ((lp_direction1U2R3D4L5BR == 3)) {
                ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
            }
            else {
                if ((lp_direction1U2R3D4L5BR == 4)) {
                    ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
                }
                else {
                    if ((lp_direction1U2R3D4L5BR == 5)) {
                        ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetRotation(1.0, -1.0, 0, 0, 0, 1.0));
                    }

                }
            }
        }
    }
    if ((lp_useTint == true)) {
        ActorSend(gv_adeleStageModels[gv_adeleStageModelCount], libNtve_gf_SetTintColor(lp_tint, lp_hDR, 0.0));
    }

}

trigger auto_gf_Forcecorrectstage_Trigger = null;

void gf_Forcecorrectstage () {
    if (auto_gf_Forcecorrectstage_Trigger == null) {
        auto_gf_Forcecorrectstage_Trigger = TriggerCreate("auto_gf_Forcecorrectstage_TriggerFunc");
    }

    TriggerExecute(auto_gf_Forcecorrectstage_Trigger, false, false);
}

bool auto_gf_Forcecorrectstage_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(0.2, c_timeGame);
    ActorSend(gv_adeleStageModels[6], libNtve_gf_ModelSwap("CastanarDissectionTable", 2));
    Wait(0.5, c_timeGame);
    ActorSend(gv_adeleStageModels[6], libNtve_gf_ModelSwap("CastanarDissectionTable", 2));
    return true;
}

void gf_CheckGoalieActions () {
    // Variable Declarations
    unit lv_goalieUnitwhowasscoredon;
    unit lv_goaliesstickwhowasscoredon;
    int lv_playerwhowasgoaliewhenscoredon;
    int lv_scoringTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true) && (gv_wasgoalowngoal == false)) {
        lv_scoringTeam = 1;
        lv_playerwhowasgoaliewhenscoredon = gv_Players[6];
        lv_goalieUnitwhowasscoredon = gv_Skaters[lv_playerwhowasgoaliewhenscoredon];
        lv_goaliesstickwhowasscoredon = gv_Sticks[lv_playerwhowasgoaliewhenscoredon];
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_ShootingPlayer) == true) && (gv_wasgoalowngoal == false)) {
        lv_scoringTeam = 2;
        lv_playerwhowasgoaliewhenscoredon = gv_Players[2];
        lv_goalieUnitwhowasscoredon = gv_Skaters[lv_playerwhowasgoaliewhenscoredon];
        lv_goaliesstickwhowasscoredon = gv_Sticks[lv_playerwhowasgoaliewhenscoredon];
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true) && (gv_wasgoalowngoal == true)) {
        lv_scoringTeam = 1;
        lv_playerwhowasgoaliewhenscoredon = gv_Players[2];
        lv_goalieUnitwhowasscoredon = gv_Skaters[lv_playerwhowasgoaliewhenscoredon];
        lv_goaliesstickwhowasscoredon = gv_Sticks[lv_playerwhowasgoaliewhenscoredon];
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_ShootingPlayer) == true) && (gv_wasgoalowngoal == true)) {
        lv_scoringTeam = 2;
        lv_playerwhowasgoaliewhenscoredon = gv_Players[6];
        lv_goalieUnitwhowasscoredon = gv_Skaters[lv_playerwhowasgoaliewhenscoredon];
        lv_goaliesstickwhowasscoredon = gv_Sticks[lv_playerwhowasgoaliewhenscoredon];
    }

    if (((PlayerHandle(lv_playerwhowasgoaliewhenscoredon) == gv_hANDLE_RESSLAYER) || (PlayerHandle(lv_playerwhowasgoaliewhenscoredon) == gv_hANDLE_RESSLAYEREU))) {
        gf_Turngoalieintochicken(lv_goalieUnitwhowasscoredon);
    }

    gv_wasgoalowngoal = false;
}

trigger auto_gf_Turngoalieintochicken_Trigger = null;
unit auto_gf_Turngoalieintochicken_lp_unit;

void gf_Turngoalieintochicken (unit lp_unit) {
    auto_gf_Turngoalieintochicken_lp_unit = lp_unit;

    if (auto_gf_Turngoalieintochicken_Trigger == null) {
        auto_gf_Turngoalieintochicken_Trigger = TriggerCreate("auto_gf_Turngoalieintochicken_TriggerFunc");
    }

    TriggerExecute(auto_gf_Turngoalieintochicken_Trigger, false, false);
}

bool auto_gf_Turngoalieintochicken_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Turngoalieintochicken_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "ModelSwap Chicken");
    SoundPlayAtPointForPlayer(SoundLink("ChickenSond", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
    return true;
}

trigger auto_gf_Jetpack_Trigger = null;
unit auto_gf_Jetpack_lp_jetpackUnit;

void gf_Jetpack (unit lp_jetpackUnit) {
    auto_gf_Jetpack_lp_jetpackUnit = lp_jetpackUnit;

    if (auto_gf_Jetpack_Trigger == null) {
        auto_gf_Jetpack_Trigger = TriggerCreate("auto_gf_Jetpack_TriggerFunc");
    }

    TriggerExecute(auto_gf_Jetpack_Trigger, false, false);
}

bool auto_gf_Jetpack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_jetpackUnit = auto_gf_Jetpack_lp_jetpackUnit;

    // Variable Declarations
    unit lv_jetpackUnit;
    unit lv_jetpack;
    unit lv_stick;
    fixed lv_height;
    actor lv_rockets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_jetpackUnit = lp_jetpackUnit;
    lv_stick = gv_Sticks[UnitGetOwner(lp_jetpackUnit)];

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JetpackUnit", 0, 0, UnitGetPosition(lv_jetpackUnit));
    lv_jetpack = UnitLastCreated();
    libNtve_gf_AttachActorToUnit(lv_jetpack, "Jetpack", "Ref_Origin");
    lv_rockets = libNtve_gf_ActorLastCreated();
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), lv_rockets, false);
    while ((gv_jetpackActivation == 1)) {
        UnitSetPosition(lv_jetpack, PointWithOffsetPolar(UnitGetPosition(lv_jetpackUnit), 0.4, (UnitGetFacing(lv_jetpackUnit) - 180.0)), true);
        libNtve_gf_MakeUnitFacePoint(lv_jetpack, UnitGetPosition(lv_jetpackUnit), 0.0625);
        if ((gv_jetpackTriggered == 1)) {
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), lv_rockets, true);
            if ((lv_height < 20.0)) {
                lv_height += 0.4;
                UnitSetHeight(lv_jetpackUnit, lv_height, 0.0625);
                UnitSetHeight(lv_stick, lv_height, 0.0625);
                UnitSetHeight(lv_jetpack, (lv_height + 1.5), 0.0625);
            }

        }
        else {
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), lv_rockets, false);
            if ((lv_height > 0.0)) {
                lv_height -= 1.0;
                UnitSetHeight(lv_jetpackUnit, lv_height, 0.0625);
                UnitSetHeight(lv_stick, lv_height, 0.0625);
                UnitSetHeight(lv_jetpack, (lv_height + 1.5), 0.0625);
            }
            else {
                UnitSetHeight(lv_jetpackUnit, 0.0, 0.0625);
                UnitSetHeight(lv_stick, 0.0, 0.0625);
                UnitSetHeight(lv_jetpack, 1.5, 0.0625);
                lv_height = 0.0;
            }
        }
        Wait(0.0625, c_timeGame);
    }
    UnitRemove(lv_jetpack);
    UnitSetHeight(lv_jetpackUnit, 0.0, 0.25);
    UnitSetHeight(lv_stick, 0.0, 0.25);
    ActorSend(lv_rockets, "Destroy Immediate");
    gv_jetpackTriggered = 0;
    SoundSetVolume(gv_jetpacksound, 0.0);
    return true;
}

trigger auto_gf_Jetpack2_Trigger = null;
unit auto_gf_Jetpack2_lp_jetpackUnit;

void gf_Jetpack2 (unit lp_jetpackUnit) {
    auto_gf_Jetpack2_lp_jetpackUnit = lp_jetpackUnit;

    if (auto_gf_Jetpack2_Trigger == null) {
        auto_gf_Jetpack2_Trigger = TriggerCreate("auto_gf_Jetpack2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Jetpack2_Trigger, false, false);
}

bool auto_gf_Jetpack2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_jetpackUnit = auto_gf_Jetpack2_lp_jetpackUnit;

    // Variable Declarations
    unit lv_jetpackUnit;
    unit lv_jetpack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_jetpackUnit = lp_jetpackUnit;

    // Implementation
    gv_jetpackActivation = 1;
    gf_Jetpack(lv_jetpackUnit);
    TriggerEnable(gt_JetpackIgnition, true);
    TriggerEnable(gt_JetpackRelease, true);
    SoundPlay(SoundLink("Destructible_ScrapHugeFlames", -1), PlayerGroupAll(), 0.0, 0.0);
    gv_jetpacksound = SoundLastPlayed();
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_JetpackIgnition, false);
    TriggerEnable(gt_JetpackRelease, false);
    gv_jetpackActivation = 0;
    SoundStop(gv_jetpacksound, false);
    return true;
}

trigger auto_gf_StartYoda_Trigger = null;
unit auto_gf_StartYoda_lp_yodaUnit;

void gf_StartYoda (unit lp_yodaUnit) {
    auto_gf_StartYoda_lp_yodaUnit = lp_yodaUnit;

    if (auto_gf_StartYoda_Trigger == null) {
        auto_gf_StartYoda_Trigger = TriggerCreate("auto_gf_StartYoda_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartYoda_Trigger, false, false);
}

bool auto_gf_StartYoda_TriggerFunc (bool testConds, bool runActions) {
    unit lp_yodaUnit = auto_gf_StartYoda_lp_yodaUnit;

    // Variable Declarations
    actor lv_electriceffect;

    // Automatic Variable Declarations
    playergroup auto64CCEE9A_g;
    int auto64CCEE9A_var;
    playergroup auto556274F7_g;
    int auto556274F7_var;

    // Variable Initialization

    // Implementation
    if ((gv_Shootout == false)) {
        GameSetLighting("MeinhoffCampaignNight", 1.0);
        gf_TieFigtherFlyby1();
        ActorSend(gv_spotlight, "Destroy Immediate");
        TriggerEnable(gt_YodaAttack, true);
        TriggerEnable(gt_YodaFighterselect, true);
        TriggerEnable(gt_YodaFighterToss, true);
        SoundPlay(SoundLink("YodaBackgroundMusic", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_yodaVars.lv_yoda = lp_yodaUnit;
        gv_yodaVars.lv_yodaOwner = UnitGetOwner(lp_yodaUnit);
        auto64CCEE9A_g = PlayerGroupActive();
        auto64CCEE9A_var = -1;
        while (true) {
            auto64CCEE9A_var = PlayerGroupNextPlayer(auto64CCEE9A_g, auto64CCEE9A_var);
            if (auto64CCEE9A_var < 0) { break; }
            if ((PlayerStatus(auto64CCEE9A_var) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[auto64CCEE9A_var]) == true) && (gv_Players[2] != auto64CCEE9A_var) && (gv_Players[6] != auto64CCEE9A_var) && (gv_yodaVars.lv_yodaOwner != auto64CCEE9A_var)) {
                libNtve_gf_AttachActorToUnit(gv_Skaters[auto64CCEE9A_var], "StormTrooperHelmet", "Ref_Head");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.550000");
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto64CCEE9A_var], libNtve_gf_TextureSelectByID("StormtrooperZealot"));
                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto64CCEE9A_var], libNtve_gf_TextureSelectByID("NovaStick"));
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto64CCEE9A_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
            }

        }
        auto556274F7_g = PlayerGroupActive();
        auto556274F7_var = -1;
        while (true) {
            auto556274F7_var = PlayerGroupNextPlayer(auto556274F7_g, auto556274F7_var);
            if (auto556274F7_var < 0) { break; }
            if ((PlayerStatus(auto556274F7_var) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[auto556274F7_var]) == true) && ((gv_Players[2] == auto556274F7_var) || (gv_Players[6] == auto556274F7_var)) && (gv_yodaVars.lv_yodaOwner != auto556274F7_var)) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto556274F7_var], libNtve_gf_TextureSelectByID("StormtrooperZealot"));
                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto556274F7_var], libNtve_gf_TextureSelectByID("NovaStick"));
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto556274F7_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
            }

        }
        libNtve_gf_AttachActorToUnit(lp_yodaUnit, "ChainLinkFencePost", "Ref_Weapon Right");
        gv_yodaVars.lv_lightSabre = libNtve_gf_ActorLastCreated();
        ActorSend(gv_yodaVars.lv_lightSabre, "SetScale 1.800000,1.800000,0.200000");
        ActorSend(gv_yodaVars.lv_lightSabre, libNtve_gf_SetScale(1.8, 1.8, 1.8, 1.0));
        ActorSend(gv_yodaVars.lv_lightSabre, "SetTintColor {0,255,0 40.000000} 1.000000");
        ActorSend(gv_yodaVars.lv_lightSabre, "HostSiteOpsSet ::Host SOpPointSouthWorld");
        libNtve_gf_AttachActorToUnit(lp_yodaUnit, "ChainLinkFencePost", "Ref_Weapon Right");
        gv_yodaVars.lv_lightSabreHandle = libNtve_gf_ActorLastCreated();
        ActorSend(gv_yodaVars.lv_lightSabreHandle, "SetScale 3.000000,3.000000,0.300000");
        libNtve_gf_AttachActorToActor(gv_yodaVars.lv_lightSabreHandle, "LightOmniGreenLarge", "Ref_Origin");
        gv_yodaVars.lv_lighting = libNtve_gf_ActorLastCreated();
        libNtve_gf_AttachModelToActor(gv_yodaVars.lv_lightSabreHandle, "VikingFighterAttackImpact", "Ref_Origin");
        lv_electriceffect = libNtve_gf_ActorLastCreated();
        ActorSend(lv_electriceffect, "SetTintColor {0,255,0 6.000000}");
        ActorSend(lv_electriceffect, libNtve_gf_SetScale(1.8, 1.8, 1.8, 0.0));
        libNtve_gf_PlayAnimation(lv_electriceffect, c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(1.0, c_timeGame);
        gf_TieFigtherFlyby2();
        gf_TieFigtherFlyby3();
        gf_TieFigtherFlyby4();
        Wait(1.0, c_timeGame);
        ActorSend(lv_electriceffect, "Destroy");
        Wait(13.0, c_timeGame);
        gf_Endyoda();
    }

    return true;
}

trigger auto_gf_Endyoda_Trigger = null;

void gf_Endyoda () {
    if (auto_gf_Endyoda_Trigger == null) {
        auto_gf_Endyoda_Trigger = TriggerCreate("auto_gf_Endyoda_TriggerFunc");
    }

    TriggerExecute(auto_gf_Endyoda_Trigger, false, false);
}

bool auto_gf_Endyoda_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_YodaAttack, false);
    TriggerEnable(gt_YodaFighterselect, false);
    TriggerEnable(gt_YodaFighterToss, false);
    ActorSend(gv_yodaVars.lv_lighting, "Destroy Immediate");
    ActorSend(gv_yodaVars.lv_lightSabreHandle, "Destroy Immediate");
    ActorSend(gv_yodaVars.lv_lightSabre, "Destroy Immediate");
    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[1]) == true)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[1]);
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[2]) == true)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[2]);
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[3]) == true)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[3]);
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[4]) == true)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[4]);
    }

    gv_yodaVars.lv_yodaisholdingafighter = false;
    gf_Resetlighting();
    return true;
}

trigger auto_gf_AttackImpact_Trigger = null;
unit auto_gf_AttackImpact_lp_impactunit;
fixed auto_gf_AttackImpact_lp_angle;

void gf_AttackImpact (unit lp_impactunit, fixed lp_angle) {
    auto_gf_AttackImpact_lp_impactunit = lp_impactunit;
    auto_gf_AttackImpact_lp_angle = lp_angle;

    if (auto_gf_AttackImpact_Trigger == null) {
        auto_gf_AttackImpact_Trigger = TriggerCreate("auto_gf_AttackImpact_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttackImpact_Trigger, false, false);
}

bool auto_gf_AttackImpact_TriggerFunc (bool testConds, bool runActions) {
    unit lp_impactunit = auto_gf_AttackImpact_lp_impactunit;
    fixed lp_angle = auto_gf_AttackImpact_lp_angle;

    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("YodaAttackImpact", -1), PlayerGroupAll(), 80.0, 0.0);
    gf_ApplyForcePolar(lp_impactunit, 5.0, lp_angle);
    libNtve_gf_CreateModelAtPoint("BattlecruiserYamatoAttackImpact", PointWithOffsetPolar(UnitGetPosition(lp_impactunit), 0.5, (lp_angle - 180.0)));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,255,0 6.000000}");
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), "Destroy Immediate");
    return true;
}

trigger auto_gf_Attackcooldown_Trigger = null;

void gf_Attackcooldown () {
    if (auto_gf_Attackcooldown_Trigger == null) {
        auto_gf_Attackcooldown_Trigger = TriggerCreate("auto_gf_Attackcooldown_TriggerFunc");
    }

    TriggerExecute(auto_gf_Attackcooldown_Trigger, false, false);
}

bool auto_gf_Attackcooldown_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_yodaVars.lv_canyodaattack = false;
    Wait(0.4, c_timeGame);
    gv_yodaVars.lv_canyodaattack = true;
    return true;
}

trigger auto_gf_TieFigtherFlyby1_Trigger = null;

void gf_TieFigtherFlyby1 () {
    if (auto_gf_TieFigtherFlyby1_Trigger == null) {
        auto_gf_TieFigtherFlyby1_Trigger = TriggerCreate("auto_gf_TieFigtherFlyby1_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFigtherFlyby1_Trigger, false, false);
}

bool auto_gf_TieFigtherFlyby1_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto07894CBA_g;
    int auto07894CBA_var;

    // Implementation
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherFlyby", -1), PlayerGroupAll(), 60.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TieFighter", c_unitCreateIgnorePlacement, gv_yodaVars.lv_yodaOwner, Point(40.19, 90.89));
    gv_yodaVars.lv_tiefigthers[1] = UnitLastCreated();
    UnitIssueOrder(gv_yodaVars.lv_tiefigthers[1], OrderTargetingPoint(AbilityCommand("move", 0), Point(400.0, 90.89)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    auto07894CBA_g = PlayerGroupAll();
    auto07894CBA_var = -1;
    while (true) {
        auto07894CBA_var = PlayerGroupNextPlayer(auto07894CBA_g, auto07894CBA_var);
        if (auto07894CBA_var < 0) { break; }
        CameraShakeStart(auto07894CBA_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.5);
    }
    Wait(1.5, c_timeGame);
    if ((UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[1], 1) == 0.0)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[1]);
    }

    return true;
}

trigger auto_gf_TieFigtherFlyby2_Trigger = null;

void gf_TieFigtherFlyby2 () {
    if (auto_gf_TieFigtherFlyby2_Trigger == null) {
        auto_gf_TieFigtherFlyby2_Trigger = TriggerCreate("auto_gf_TieFigtherFlyby2_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFigtherFlyby2_Trigger, false, false);
}

bool auto_gf_TieFigtherFlyby2_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB871886C_g;
    int autoB871886C_var;

    // Implementation
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherFlyby", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TieFighter", c_unitCreateIgnorePlacement, gv_yodaVars.lv_yodaOwner, Point(40.19, 90.89));
    gv_yodaVars.lv_tiefigthers[2] = UnitLastCreated();
    UnitIssueOrder(gv_yodaVars.lv_tiefigthers[2], OrderTargetingPoint(AbilityCommand("move", 0), Point(400.0, 90.89)), c_orderQueueReplace);
    gf_TieFighterAttack1();
    Wait(1.5, c_timeGame);
    autoB871886C_g = PlayerGroupAll();
    autoB871886C_var = -1;
    while (true) {
        autoB871886C_var = PlayerGroupNextPlayer(autoB871886C_g, autoB871886C_var);
        if (autoB871886C_var < 0) { break; }
        CameraShakeStart(autoB871886C_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.5);
    }
    Wait(1.5, c_timeGame);
    if ((UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[2], 1) == 0.0)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[2]);
    }

    return true;
}

trigger auto_gf_TieFigtherFlyby3_Trigger = null;

void gf_TieFigtherFlyby3 () {
    if (auto_gf_TieFigtherFlyby3_Trigger == null) {
        auto_gf_TieFigtherFlyby3_Trigger = TriggerCreate("auto_gf_TieFigtherFlyby3_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFigtherFlyby3_Trigger, false, false);
}

bool auto_gf_TieFigtherFlyby3_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto12B1D07B_g;
    int auto12B1D07B_var;

    // Implementation
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherFlyby", -1), PlayerGroupAll(), 60.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TieFighter", c_unitCreateIgnorePlacement, gv_yodaVars.lv_yodaOwner, Point(214.73, 126.66));
    gv_yodaVars.lv_tiefigthers[3] = UnitLastCreated();
    UnitIssueOrder(gv_yodaVars.lv_tiefigthers[3], OrderTargetingPoint(AbilityCommand("move", 0), Point(0.0, 126.66)), c_orderQueueReplace);
    Wait(1.5, c_timeGame);
    auto12B1D07B_g = PlayerGroupAll();
    auto12B1D07B_var = -1;
    while (true) {
        auto12B1D07B_var = PlayerGroupNextPlayer(auto12B1D07B_g, auto12B1D07B_var);
        if (auto12B1D07B_var < 0) { break; }
        CameraShakeStart(auto12B1D07B_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.5);
    }
    Wait(1.5, c_timeGame);
    if ((UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[3], 1) == 0.0)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[3]);
    }

    return true;
}

trigger auto_gf_TieFigtherFlyby4_Trigger = null;

void gf_TieFigtherFlyby4 () {
    if (auto_gf_TieFigtherFlyby4_Trigger == null) {
        auto_gf_TieFigtherFlyby4_Trigger = TriggerCreate("auto_gf_TieFigtherFlyby4_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFigtherFlyby4_Trigger, false, false);
}

bool auto_gf_TieFigtherFlyby4_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBDC061C5_g;
    int autoBDC061C5_var;

    // Implementation
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherFlyby", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TieFighter", c_unitCreateIgnorePlacement, gv_yodaVars.lv_yodaOwner, Point(214.73, 126.66));
    gv_yodaVars.lv_tiefigthers[4] = UnitLastCreated();
    UnitIssueOrder(gv_yodaVars.lv_tiefigthers[4], OrderTargetingPoint(AbilityCommand("move", 0), Point(0.0, 126.66)), c_orderQueueReplace);
    gf_TieFighterAttack2();
    Wait(1.5, c_timeGame);
    autoBDC061C5_g = PlayerGroupAll();
    autoBDC061C5_var = -1;
    while (true) {
        autoBDC061C5_var = PlayerGroupNextPlayer(autoBDC061C5_g, autoBDC061C5_var);
        if (autoBDC061C5_var < 0) { break; }
        CameraShakeStart(autoBDC061C5_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.5);
    }
    Wait(1.5, c_timeGame);
    if ((UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[4], 1) == 0.0)) {
        UnitRemove(gv_yodaVars.lv_tiefigthers[4]);
    }

    return true;
}

trigger auto_gf_TieFighterAttack1_Trigger = null;

void gf_TieFighterAttack1 () {
    if (auto_gf_TieFighterAttack1_Trigger == null) {
        auto_gf_TieFighterAttack1_Trigger = TriggerCreate("auto_gf_TieFighterAttack1_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFighterAttack1_Trigger, false, false);
}

bool auto_gf_TieFighterAttack1_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bullet;
    unit lv_bullet2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("YodaTieFigtherAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "YodaBulletTieFighter", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_yodaVars.lv_tiefigthers[2]), 90.0);
    lv_bullet = UnitLastCreated();
    UnitIssueOrder(lv_bullet, OrderTargetingPoint(AbilityCommand("move", 0), Point(400.0, 90.89)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "YodaBulletTieFighter", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_yodaVars.lv_tiefigthers[2]), 90.0);
    lv_bullet2 = UnitLastCreated();
    UnitIssueOrder(lv_bullet2, OrderTargetingPoint(AbilityCommand("move", 0), Point(400.0, 90.89)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitRemove(lv_bullet);
    UnitRemove(lv_bullet2);
    return true;
}

trigger auto_gf_TieFighterAttack2_Trigger = null;

void gf_TieFighterAttack2 () {
    if (auto_gf_TieFighterAttack2_Trigger == null) {
        auto_gf_TieFighterAttack2_Trigger = TriggerCreate("auto_gf_TieFighterAttack2_TriggerFunc");
    }

    TriggerExecute(auto_gf_TieFighterAttack2_Trigger, false, false);
}

bool auto_gf_TieFighterAttack2_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bullet;
    unit lv_bullet2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("YodaTieFigtherAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "YodaBulletTieFighter", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_yodaVars.lv_tiefigthers[4]), 90.0);
    lv_bullet = UnitLastCreated();
    UnitIssueOrder(lv_bullet, OrderTargetingPoint(AbilityCommand("move", 0), Point(0.0, 126.66)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("YodaTieFigtherAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "YodaBulletTieFighter", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_yodaVars.lv_tiefigthers[4]), 90.0);
    lv_bullet2 = UnitLastCreated();
    UnitIssueOrder(lv_bullet2, OrderTargetingPoint(AbilityCommand("move", 0), Point(0.0, 126.66)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitRemove(lv_bullet);
    UnitRemove(lv_bullet2);
    return true;
}

trigger auto_gf_Tossfigther_Trigger = null;
unit auto_gf_Tossfigther_lp_unit;
point auto_gf_Tossfigther_lp_location;

void gf_Tossfigther (unit lp_unit, point lp_location) {
    auto_gf_Tossfigther_lp_unit = lp_unit;
    auto_gf_Tossfigther_lp_location = lp_location;

    if (auto_gf_Tossfigther_Trigger == null) {
        auto_gf_Tossfigther_Trigger = TriggerCreate("auto_gf_Tossfigther_TriggerFunc");
    }

    TriggerExecute(auto_gf_Tossfigther_Trigger, false, false);
}

bool auto_gf_Tossfigther_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Tossfigther_lp_unit;
    point lp_location = auto_gf_Tossfigther_lp_location;

    // Variable Declarations
    point lv_startpoint;
    point lv_endpoint;
    fixed lv_totaldistance;
    fixed lv_distanceeachstep;
    fixed lv_angle;
    bool lv_impacted;
    int lv_int;

    // Automatic Variable Declarations
    unitgroup auto09E6E62D_g;
    int auto09E6E62D_u;
    unit auto09E6E62D_var;
    playergroup autoBAB17243_g;
    int autoBAB17243_var;

    // Variable Initialization

    // Implementation
    lv_startpoint = UnitGetPosition(lp_unit);
    lv_endpoint = lp_location;
    lv_totaldistance = DistanceBetweenPoints(lv_startpoint, lv_endpoint);
    lv_distanceeachstep = (lv_totaldistance / 16.0);
    lv_angle = AngleBetweenPoints(lv_startpoint, lv_endpoint);
    UnitSetHeight(lp_unit, 0.0, 1.0);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "HostSiteOpsSet ::Host fallingdeath");
    while ((UnitIsAlive(lp_unit) == true) && (lv_impacted == false)) {
        UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_distanceeachstep, lv_angle), true);
        lv_int += 1;
        if ((lv_int >= 16)) {
            lv_impacted = true;
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_unit) == true)) {
        UnitRemove(lp_unit);
        libNtve_gf_CreateModelAtPoint("SiegeTankSiegedAttackImpact", lv_endpoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 6.000000");
        auto09E6E62D_g = UnitGroup(null, c_playerAny, RegionCircle(lv_endpoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto09E6E62D_u = UnitGroupCount(auto09E6E62D_g, c_unitCountAll);
        for (;; auto09E6E62D_u -= 1) {
            auto09E6E62D_var = UnitGroupUnitFromEnd(auto09E6E62D_g, auto09E6E62D_u);
            if (auto09E6E62D_var == null) { break; }
            if ((auto09E6E62D_var != gv_yodaVars.lv_yoda) && ((auto09E6E62D_var == gv_Skaters[1]) || (auto09E6E62D_var == gv_Skaters[2]) || (auto09E6E62D_var == gv_Skaters[3]) || (auto09E6E62D_var == gv_Skaters[4]) || (auto09E6E62D_var == gv_Skaters[5]) || (auto09E6E62D_var == gv_Skaters[6]) || (auto09E6E62D_var == gv_Skaters[7]) || (auto09E6E62D_var == gv_Skaters[8]) || (auto09E6E62D_var == gv_Skaters[9]) || (auto09E6E62D_var == gv_Skaters[10]) || (auto09E6E62D_var == gv_Skaters[11]) || (auto09E6E62D_var == gv_Skaters[12]) || (auto09E6E62D_var == gv_Skaters[13]) || (auto09E6E62D_var == gv_Skaters[14]) || (auto09E6E62D_var == gv_Skaters[15]))) {
                gf_ApplyForcePolar(auto09E6E62D_var, 5.0, AngleBetweenPoints(lv_endpoint, UnitGetPosition(auto09E6E62D_var)));
            }

        }
        autoBAB17243_g = PlayerGroupAll();
        autoBAB17243_var = -1;
        while (true) {
            autoBAB17243_var = PlayerGroupNextPlayer(autoBAB17243_g, autoBAB17243_var);
            if (autoBAB17243_var < 0) { break; }
            CameraShakeStart(autoBAB17243_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.5);
            SoundPlay(SoundLink("Battlecruiser_YamatoAttackImpact", -1), PlayerGroupAll(), 200.0, 0.0);
        }
        Wait(3.0, c_timeGame);
        ActorSend(libNtve_gf_ActorLastCreated(), "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_Chad_Trigger = null;

void gf_Chad () {
    if (auto_gf_Chad_Trigger == null) {
        auto_gf_Chad_Trigger = TriggerCreate("auto_gf_Chad_TriggerFunc");
    }

    TriggerExecute(auto_gf_Chad_Trigger, false, false);
}

bool auto_gf_Chad_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_nydus;
    actor lv_lava;
    actor lv_explosion;
    actor lv_actor2;
    point lv_point;
    actor lv_actor4;
    actor lv_fireactor;
    actor lv_nydusactor;
    actor[9] lv_cliffs;

    // Automatic Variable Declarations
    unitgroup auto770F399A_g;
    int auto770F399A_u;
    unit auto770F399A_var;
    playergroup autoD07EBC8B_g;
    int autoD07EBC8B_var;

    // Variable Initialization

    // Implementation
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "move", false);
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "Check", false);
    Wait(0.5, c_timeGame);
    lv_point = UnitGetPosition(gv_Skaters[gv_ShootingPlayer]);
    libNtve_gf_CreateModelAtPoint("NydusRumble", lv_point);
    lv_nydusactor = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("NydusDeathSound1", -1), PlayerGroupAll(), 150.0, 0.0);
    Wait(3.0, c_timeGame);
    ActorSend(lv_nydusactor, "Destroy Immediate");
    SoundPlay(SoundLink("NydusDeathSound12", -1), PlayerGroupAll(), 150.0, 0.0);
    SoundPlay(SoundLink("NydusDeathSound122", -1), PlayerGroupAll(), 150.0, 0.0);
    libNtve_gf_CreateModelAtPoint("NydusCanal", lv_point);
    lv_nydus = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("Lavaplane", lv_point);
    lv_lava = libNtve_gf_ActorLastCreated();
    ActorSend(lv_lava, "SetScale 6.000000");
    ActorSend(lv_lava, "SetHeight -4.000000");
    ActorSend(lv_nydus, "SetScale 3.000000");
    ActorSend(lv_nydus, "AnimPlay BSD Birth,01");
    auto770F399A_g = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto770F399A_u = UnitGroupCount(auto770F399A_g, c_unitCountAll);
    for (;; auto770F399A_u -= 1) {
        auto770F399A_var = UnitGroupUnitFromEnd(auto770F399A_g, auto770F399A_u);
        if (auto770F399A_var == null) { break; }
        if (((auto770F399A_var == gv_Skaters[1]) || (auto770F399A_var == gv_Skaters[2]) || (auto770F399A_var == gv_Skaters[3]) || (auto770F399A_var == gv_Skaters[4]) || (auto770F399A_var == gv_Skaters[5]) || (auto770F399A_var == gv_Skaters[6]) || (auto770F399A_var == gv_Skaters[7]) || (auto770F399A_var == gv_Skaters[8]) || (auto770F399A_var == gv_Skaters[9]) || (auto770F399A_var == gv_Skaters[10]) || (auto770F399A_var == gv_Skaters[11]) || (auto770F399A_var == gv_Skaters[12]) || (auto770F399A_var == gv_Skaters[13]) || (auto770F399A_var == gv_Skaters[14]) || (auto770F399A_var == gv_Skaters[15]))) {
            gf_Setheight2(auto770F399A_var, UnitGetPosition(auto770F399A_var));
        }

    }
    Wait(4.0, c_timeGame);
    ActorSend(lv_nydus, "AnimPlay BSD Unburrow");
    gf_Setheight(lv_nydus);
    Wait(0.9, c_timeGame);
    SoundPlay(SoundLink("NydusDeathSound1222", -1), PlayerGroupAll(), 100.0, 0.0);
    autoD07EBC8B_g = PlayerGroupAll();
    autoD07EBC8B_var = -1;
    while (true) {
        autoD07EBC8B_var = PlayerGroupNextPlayer(autoD07EBC8B_g, autoD07EBC8B_var);
        if (autoD07EBC8B_var < 0) { break; }
        CameraShakeStart(autoD07EBC8B_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 0.5);
    }
    libNtve_gf_CreateModelAtPoint("SiegeTankSiegedAttackImpact", lv_point);
    lv_actor4 = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actor4, "SetScale 4.000000");
    libNtve_gf_CreateModelAtPoint("LavaSplashBig", PointWithOffsetPolar(lv_point, 4.0, 30.0));
    lv_explosion = libNtve_gf_ActorLastCreated();
    ActorSend(lv_explosion, "SetScale 6.000000");
    ActorSend(lv_explosion, "AnimPlay BSD Stand,04 NonLooping");
    TerrainShowRegion(RegionCircle(lv_point, 2.5), false);
    ActorSend(lv_nydus, "Destroy Immediate");
    gv_isnydusholerunning = true;
    gf_Checkfornydushole(RegionCircle(lv_point, 3.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[1] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 90.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[2] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 180.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[3] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 270.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[4] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 45.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[5] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 1.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 135.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[6] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 1.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 225.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[7] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, -1.0, 0, 0, 0, 1.0));
    libNtve_gf_CreateModelAtPoint("ArthasIceCliff", PointWithOffsetPolar(lv_point, 3.0, 315.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ArthasIceCliff 1");
    lv_cliffs[8] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000,1.200000,0.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, -1.0, 0, 0, 0, 1.0));
    Wait(9.0, c_timeGame);
    gv_isnydusholerunning = false;
    TerrainShowRegion(RegionCircle(lv_point, 4.0), true);
    ActorSend(lv_actor4, "Destroy Immediate");
    ActorSend(lv_explosion, "Destroy Immediate");
    ActorSend(lv_lava, "Destroy Immediate");
    ActorSend(lv_cliffs[1], "Destroy Immediate");
    ActorSend(lv_cliffs[2], "Destroy Immediate");
    ActorSend(lv_cliffs[3], "Destroy Immediate");
    ActorSend(lv_cliffs[4], "Destroy Immediate");
    ActorSend(lv_cliffs[5], "Destroy Immediate");
    ActorSend(lv_cliffs[6], "Destroy Immediate");
    ActorSend(lv_cliffs[7], "Destroy Immediate");
    ActorSend(lv_cliffs[8], "Destroy Immediate");
    return true;
}

trigger auto_gf_Setheight_Trigger = null;
actor auto_gf_Setheight_lp_nydus;

void gf_Setheight (actor lp_nydus) {
    auto_gf_Setheight_lp_nydus = lp_nydus;

    if (auto_gf_Setheight_Trigger == null) {
        auto_gf_Setheight_Trigger = TriggerCreate("auto_gf_Setheight_TriggerFunc");
    }

    TriggerExecute(auto_gf_Setheight_Trigger, false, false);
}

bool auto_gf_Setheight_TriggerFunc (bool testConds, bool runActions) {
    actor lp_nydus = auto_gf_Setheight_lp_nydus;

    // Variable Declarations
    fixed lv_height;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_height > -3.0) && (lp_nydus != null)) {
        ActorSend(lp_nydus, libNtve_gf_SetHeight(lv_height));
        lv_height -= 0.1;
        Wait(0.0313, c_timeGame);
    }
    return true;
}

trigger auto_gf_Setheight2_Trigger = null;
unit auto_gf_Setheight2_lp_zealot;
point auto_gf_Setheight2_lp_point;

void gf_Setheight2 (unit lp_zealot, point lp_point) {
    auto_gf_Setheight2_lp_zealot = lp_zealot;
    auto_gf_Setheight2_lp_point = lp_point;

    if (auto_gf_Setheight2_Trigger == null) {
        auto_gf_Setheight2_Trigger = TriggerCreate("auto_gf_Setheight2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Setheight2_Trigger, false, false);
}

bool auto_gf_Setheight2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zealot = auto_gf_Setheight2_lp_zealot;
    point lp_point = auto_gf_Setheight2_lp_point;

    // Variable Declarations
    actor lv_fireactor;
    fixed lv_height;
    fixed lv_heightmodifier;
    bool lv_bloodisplayed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heightmodifier = 2.0;

    // Implementation
    UnitSetCustomValue(lp_zealot, 24, 1.0);
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(lp_zealot, "move", false);
    UnitAbilityEnable(lp_zealot, "Check", false);
    lv_heightmodifier = RandomFixed(1.8, 2.3);
    ActorSend(libNtve_gf_MainActorofUnit(lp_zealot), "HostSiteOpsSet ::Host fallingdeath");
    libNtve_gf_AttachActorToUnit(lp_zealot, "FireMedium", "Ref_Head");
    lv_fireactor = libNtve_gf_ActorLastCreated();
    while ((lv_height > -3.0) && (lp_zealot != null)) {
        lv_height += lv_heightmodifier;
        UnitSetHeight(lp_zealot, lv_height, 0.0625);
        lv_heightmodifier -= 0.08;
        if ((lv_bloodisplayed == false) && (lv_height < 9.0) && (lv_heightmodifier < 0.0)) {
            lv_bloodisplayed = true;
            libNtve_gf_CreateModelAtPoint("LurkerAttackDeathBloodGeyser", lp_point);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 8.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,0,0");
            SoundPlay(SoundLink("Marine_DeathFXBloodSpray", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("NydusDeathSound12222", -1), PlayerGroupAll(), 200.0, 0.0);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_zealot), false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[UnitGetOwner(lp_zealot)]), false);
            TextTagShow(gv_TextTags[UnitGetOwner(lp_zealot)], PlayerGroupAll(), false);
            ActorSend(lv_fireactor, "Destroy Immediate");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Checkfornydushole_Trigger = null;
region auto_gf_Checkfornydushole_lp_holeregion;

void gf_Checkfornydushole (region lp_holeregion) {
    auto_gf_Checkfornydushole_lp_holeregion = lp_holeregion;

    if (auto_gf_Checkfornydushole_Trigger == null) {
        auto_gf_Checkfornydushole_Trigger = TriggerCreate("auto_gf_Checkfornydushole_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkfornydushole_Trigger, false, false);
}

bool auto_gf_Checkfornydushole_TriggerFunc (bool testConds, bool runActions) {
    region lp_holeregion = auto_gf_Checkfornydushole_lp_holeregion;

    // Automatic Variable Declarations
    unitgroup autoB73109CF_g;
    int autoB73109CF_u;
    unit autoB73109CF_var;

    // Implementation
    while ((gv_isnydusholerunning == true)) {
        autoB73109CF_g = UnitGroup(null, c_playerAny, lp_holeregion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB73109CF_u = UnitGroupCount(autoB73109CF_g, c_unitCountAll);
        for (;; autoB73109CF_u -= 1) {
            autoB73109CF_var = UnitGroupUnitFromEnd(autoB73109CF_g, autoB73109CF_u);
            if (autoB73109CF_var == null) { break; }
            if ((UnitGetCustomValue(autoB73109CF_var, 24) == 0.0) && ((autoB73109CF_var == gv_Skaters[1]) || (autoB73109CF_var == gv_Skaters[2]) || (autoB73109CF_var == gv_Skaters[3]) || (autoB73109CF_var == gv_Skaters[4]) || (autoB73109CF_var == gv_Skaters[5]) || (autoB73109CF_var == gv_Skaters[6]) || (autoB73109CF_var == gv_Skaters[7]) || (autoB73109CF_var == gv_Skaters[8]) || (autoB73109CF_var == gv_Skaters[9]) || (autoB73109CF_var == gv_Skaters[10]) || (autoB73109CF_var == gv_Skaters[11]) || (autoB73109CF_var == gv_Skaters[12]) || (autoB73109CF_var == gv_Skaters[13]) || (autoB73109CF_var == gv_Skaters[14]) || (autoB73109CF_var == gv_Skaters[15]))) {
                UnitSetCustomValue(autoB73109CF_var, 24, 1.0);
                gf_Nydusdeathfall(autoB73109CF_var, RegionGetCenter(lp_holeregion));
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Nydusdeathfall_Trigger = null;
unit auto_gf_Nydusdeathfall_lp_unit;
point auto_gf_Nydusdeathfall_lp_point;

void gf_Nydusdeathfall (unit lp_unit, point lp_point) {
    auto_gf_Nydusdeathfall_lp_unit = lp_unit;
    auto_gf_Nydusdeathfall_lp_point = lp_point;

    if (auto_gf_Nydusdeathfall_Trigger == null) {
        auto_gf_Nydusdeathfall_Trigger = TriggerCreate("auto_gf_Nydusdeathfall_TriggerFunc");
    }

    TriggerExecute(auto_gf_Nydusdeathfall_Trigger, false, false);
}

bool auto_gf_Nydusdeathfall_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Nydusdeathfall_lp_unit;
    point lp_point = auto_gf_Nydusdeathfall_lp_point;

    // Variable Declarations
    fixed lv_height;
    fixed lv_increment;
    actor lv_flameactor;

    // Automatic Variable Declarations
    playergroup autoA7E3264D_g;
    int autoA7E3264D_var;

    // Variable Initialization
    lv_height = 8.0;
    lv_increment = 0.05;

    // Implementation
    UnitSetState(lp_unit, c_unitStateIgnoreTerrainZ, true);
    UnitSetState(gv_Sticks[UnitGetOwner(lp_unit)], c_unitStateIgnoreTerrainZ, true);
    UnitSetHeight(lp_unit, lv_height, 0.0);
    UnitSetHeight(gv_Sticks[UnitGetOwner(lp_unit)], lv_height, 0.0);
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "Check", false);
    while ((gv_isnydusholerunning == true) && (lv_height > -5.0)) {
        lv_height -= lv_increment;
        lv_increment += 0.1;
        UnitSetHeight(lp_unit, lv_height, 0.0625);
        UnitSetHeight(gv_Sticks[UnitGetOwner(lp_unit)], lv_height, 0.0625);
        Wait(0.0625, c_timeGame);
    }
    if ((gv_isnydusholerunning == true)) {
        autoA7E3264D_g = PlayerGroupAll();
        autoA7E3264D_var = -1;
        while (true) {
            autoA7E3264D_var = PlayerGroupNextPlayer(autoA7E3264D_g, autoA7E3264D_var);
            if (autoA7E3264D_var < 0) { break; }
            CameraShakeStart(autoA7E3264D_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 0.5);
        }
        SoundPlay(SoundLink("NydusDeathSound12222", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundPlay(SoundLink("BattleshipSplash2", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateModelAtPoint("HellionAttackBeam", lp_point);
        ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host SOpPointUpWorld");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000,3.000000,10.000000");
        lv_flameactor = libNtve_gf_ActorLastCreated();
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_unit), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[UnitGetOwner(lp_unit)]), false);
        TextTagShow(gv_TextTags[UnitGetOwner(lp_unit)], PlayerGroupAll(), false);
        Wait(1.0, c_timeGame);
        ActorSend(lv_flameactor, "Destroy");
    }

    return true;
}

trigger auto_gf_StartBunker_Trigger = null;
unit auto_gf_StartBunker_lp_unit;

void gf_StartBunker (unit lp_unit) {
    auto_gf_StartBunker_lp_unit = lp_unit;

    if (auto_gf_StartBunker_Trigger == null) {
        auto_gf_StartBunker_Trigger = TriggerCreate("auto_gf_StartBunker_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartBunker_Trigger, false, false);
}

bool auto_gf_StartBunker_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_StartBunker_lp_unit;

    // Automatic Variable Declarations
    unitgroup auto1E451695_g;
    int auto1E451695_u;
    unit auto1E451695_var;
    unitgroup autoC6AFC3DD_g;
    int autoC6AFC3DD_u;
    unit autoC6AFC3DD_var;

    // Implementation
    Wait(1.0, c_timeGame);
    gv_bunkerSwarmVars.lv_bunkerOwnerPlayer = UnitGetOwner(lp_unit);
    TriggerEnable(gt_ActivateBunker, true);
    if ((PointGetX(UnitGetPosition(lp_unit)) < 130.0)) {
        gv_bunkerSwarmVars.lv_swarmStartLeft = false;
        TriggerEnable(gt_RemoveSwarmUnitsLeft, true);
    }
    else {
        gv_bunkerSwarmVars.lv_swarmStartLeft = true;
        TriggerEnable(gt_RemoveSwarmUnitsRight, true);
    }
    gf_StartSwarm();
    Wait(12.0, c_timeGame);
    TriggerEnable(gt_ActivateBunker, false);
    auto1E451695_g = UnitGroup("BunkerSwarm", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E451695_u = UnitGroupCount(auto1E451695_g, c_unitCountAll);
    for (;; auto1E451695_u -= 1) {
        auto1E451695_var = UnitGroupUnitFromEnd(auto1E451695_g, auto1E451695_u);
        if (auto1E451695_var == null) { break; }
        UnitRemove(auto1E451695_var);
    }
    autoC6AFC3DD_g = gv_bunkerSwarmVars.lv_bunkerOccupantUnitGroup;
    autoC6AFC3DD_u = UnitGroupCount(autoC6AFC3DD_g, c_unitCountAll);
    for (;; autoC6AFC3DD_u -= 1) {
        autoC6AFC3DD_var = UnitGroupUnitFromEnd(autoC6AFC3DD_g, autoC6AFC3DD_u);
        if (autoC6AFC3DD_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoC6AFC3DD_var, true);
        libNtve_gf_ShowHideUnit(gv_Sticks[UnitGetOwner(autoC6AFC3DD_var)], true);
        UnitAbilityEnable(autoC6AFC3DD_var, "move", true);
        UnitAbilityEnable(autoC6AFC3DD_var, "Check", true);
    }
    gv_bunkerSwarmVars.lv_canbunkerloadmore = false;
    gv_bunkerSwarmVars.lv_checkforcolissions = false;
    UnitGroupClear(gv_bunkerSwarmVars.lv_bunkerOccupantUnitGroup);
    if ((gv_bunkerSwarmVars.lv_bunkerText != c_textTagNone)) {
        TextTagShow(gv_bunkerSwarmVars.lv_bunkerText, PlayerGroupAll(), false);
        TextTagDestroy(gv_bunkerSwarmVars.lv_bunkerText);
    }

    Wait(2.0, c_timeGame);
    gv_bunkerSwarmVars.lv_bunkerLoadRegion = null;
    gv_bunkerSwarmVars.lv_hasbunkerbeenbuilt = false;
    gv_bunkerSwarmVars.lv_bunkeroccupants = 0;
    TriggerEnable(gt_RemoveSwarmUnitsLeft, false);
    TriggerEnable(gt_RemoveSwarmUnitsRight, false);
    return true;
}

trigger auto_gf_BuildBunker_Trigger = null;
point auto_gf_BuildBunker_lp_point;

void gf_BuildBunker (point lp_point) {
    auto_gf_BuildBunker_lp_point = lp_point;

    if (auto_gf_BuildBunker_Trigger == null) {
        auto_gf_BuildBunker_Trigger = TriggerCreate("auto_gf_BuildBunker_TriggerFunc");
    }

    TriggerExecute(auto_gf_BuildBunker_Trigger, false, false);
}

bool auto_gf_BuildBunker_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_BuildBunker_lp_point;

    // Variable Declarations
    unitgroup lv_loadableunits;
    unit lv_selectedUnit;

    // Automatic Variable Declarations
    unitgroup auto51B21968_g;
    int auto51B21968_u;
    unit auto51B21968_var;

    // Variable Initialization
    lv_loadableunits = UnitGroupEmpty();

    // Implementation
    SoundPlay(SoundLink("SwarmBunkerCreate", -1), PlayerGroupAll(), 200.0, 0.0);
    gv_bunkerSwarmVars.lv_bunkerLoadRegion = RegionCircle(lp_point, 2.5);
    gv_bunkerSwarmVars.lv_canbunkerloadmore = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BunkerSwarm", c_unitCreateIgnorePlacement, 0, lp_point);
    gv_bunkerSwarmVars.lv_bunkerUnit = UnitLastCreated();
    TextTagCreate(StringExternal("Param/Value/42FD2424"), 20, UnitGetPosition(UnitLastCreated()), 4.0, true, false, PlayerGroupAll());
    gv_bunkerSwarmVars.lv_bunkerText = TextTagLastCreated();
    while ((gv_bunkerSwarmVars.lv_canbunkerloadmore == true)) {
        UnitGroupClear(lv_loadableunits);
        auto51B21968_g = UnitGroup(null, c_playerAny, gv_bunkerSwarmVars.lv_bunkerLoadRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto51B21968_u = UnitGroupCount(auto51B21968_g, c_unitCountAll);
        for (;; auto51B21968_u -= 1) {
            auto51B21968_var = UnitGroupUnitFromEnd(auto51B21968_g, auto51B21968_u);
            if (auto51B21968_var == null) { break; }
            if ((UnitGetCustomValue(auto51B21968_var, 17) == 0.0) && ((auto51B21968_var == gv_Skaters[1]) || (auto51B21968_var == gv_Skaters[2]) || (auto51B21968_var == gv_Skaters[3]) || (auto51B21968_var == gv_Skaters[4]) || (auto51B21968_var == gv_Skaters[5]) || (auto51B21968_var == gv_Skaters[6]) || (auto51B21968_var == gv_Skaters[7]) || (auto51B21968_var == gv_Skaters[8]) || (auto51B21968_var == gv_Skaters[9]) || (auto51B21968_var == gv_Skaters[10]) || (auto51B21968_var == gv_Skaters[11]) || (auto51B21968_var == gv_Skaters[12]) || (auto51B21968_var == gv_Skaters[13]) || (auto51B21968_var == gv_Skaters[14]) || (auto51B21968_var == gv_Skaters[15]))) {
                UnitGroupAdd(lv_loadableunits, auto51B21968_var);
            }

        }
        if ((UnitGroupCount(lv_loadableunits, c_unitCountAlive) > 0)) {
            lv_selectedUnit = UnitGroupClosestToPoint(lv_loadableunits, RegionGetCenter(gv_bunkerSwarmVars.lv_bunkerLoadRegion));
            UnitSetCustomValue(lv_selectedUnit, 17, 1.0);
            libNtve_gf_ShowHideUnit(lv_selectedUnit, false);
            libNtve_gf_ShowHideUnit(gv_Sticks[UnitGetOwner(lv_selectedUnit)], false);
            UnitIssueOrder(lv_selectedUnit, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_selectedUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_selectedUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitAbilityEnable(lv_selectedUnit, "move", false);
            UnitAbilityEnable(lv_selectedUnit, "Check", false);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_bunkerOccupantUnitGroup, lv_selectedUnit);
            gv_bunkerSwarmVars.lv_bunkeroccupants += 1;
            TextExpressionSetToken("Param/Expression/6246D26B", "A", IntToText(gv_bunkerSwarmVars.lv_bunkeroccupants));
            TextTagSetText(TextTagLastCreated(), TextExpressionAssemble("Param/Expression/6246D26B"));
            SoundPlay(SoundLink("SwarmBunkerLoad", -1), PlayerGroupAll(), 200.0, 0.0);
        }

        if ((gv_bunkerSwarmVars.lv_bunkeroccupants >= 4)) {
            gv_bunkerSwarmVars.lv_canbunkerloadmore = false;
            libNtve_gf_SendActorMessageToUnit(gv_bunkerSwarmVars.lv_bunkerUnit, "SetTintColor {39,39,39 2.000000}");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_StartSwarm_Trigger = null;

void gf_StartSwarm () {
    if (auto_gf_StartSwarm_Trigger == null) {
        auto_gf_StartSwarm_Trigger = TriggerCreate("auto_gf_StartSwarm_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartSwarm_Trigger, false, false);
}

bool auto_gf_StartSwarm_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point[3][16] lv_pointsSetLeft1Right2;
    int lv_actualStart;
    int lv_actualEnd;
    int lv_enumint;
    int lv_randomint;

    // Automatic Variable Declarations
    playergroup autoE0B984A5_g;
    int autoE0B984A5_var;
    const int auto3EF6D770_ae = 15;
    const int auto3EF6D770_ai = 1;
    const int autoC0447202_ae = 15;
    const int autoC0447202_ai = 1;
    const int autoB6A0543B_ae = 15;
    const int autoB6A0543B_ai = 1;
    const int autoC0818166_ae = 15;
    const int autoC0818166_ai = 1;
    const int autoE2C8504C_ae = 15;
    const int autoE2C8504C_ai = 1;
    const int auto44D4EB99_ae = 15;
    const int auto44D4EB99_ai = 1;

    // Variable Initialization

    // Implementation
    autoE0B984A5_g = PlayerGroupAll();
    autoE0B984A5_var = -1;
    while (true) {
        autoE0B984A5_var = PlayerGroupNextPlayer(autoE0B984A5_g, autoE0B984A5_var);
        if (autoE0B984A5_var < 0) { break; }
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 10.0);
    }
    SoundPlay(SoundLink("Roar12", -1), PlayerGroupAll(), 40.0, 0.0);
    SoundPlay(SoundLink("Stampede", -1), PlayerGroupAll(), 40.0, 0.0);
    lv_pointsSetLeft1Right2[1][1] = Point(60.5, 84.0);
    lv_pointsSetLeft1Right2[1][2] = Point(60.5, 88.0);
    lv_pointsSetLeft1Right2[1][3] = Point(60.5, 92.0);
    lv_pointsSetLeft1Right2[1][4] = Point(60.5, 96.0);
    lv_pointsSetLeft1Right2[1][5] = Point(60.5, 100.0);
    lv_pointsSetLeft1Right2[1][6] = Point(60.5, 104.0);
    lv_pointsSetLeft1Right2[1][7] = Point(60.5, 108.0);
    lv_pointsSetLeft1Right2[1][8] = Point(60.5, 112.0);
    lv_pointsSetLeft1Right2[1][9] = Point(60.5, 116.0);
    lv_pointsSetLeft1Right2[1][10] = Point(60.5, 120.0);
    lv_pointsSetLeft1Right2[1][11] = Point(60.5, 124.0);
    lv_pointsSetLeft1Right2[1][12] = Point(60.5, 128.0);
    lv_pointsSetLeft1Right2[1][13] = Point(60.5, 132.0);
    lv_pointsSetLeft1Right2[1][14] = Point(60.5, 136.0);
    lv_pointsSetLeft1Right2[1][15] = Point(60.5, 140.0);
    lv_pointsSetLeft1Right2[2][1] = Point(196.0, 84.0);
    lv_pointsSetLeft1Right2[2][2] = Point(196.0, 88.0);
    lv_pointsSetLeft1Right2[2][3] = Point(196.0, 92.0);
    lv_pointsSetLeft1Right2[2][4] = Point(196.0, 96.0);
    lv_pointsSetLeft1Right2[2][5] = Point(196.0, 100.0);
    lv_pointsSetLeft1Right2[2][6] = Point(196.0, 104.0);
    lv_pointsSetLeft1Right2[2][7] = Point(196.0, 108.0);
    lv_pointsSetLeft1Right2[2][8] = Point(196.0, 112.0);
    lv_pointsSetLeft1Right2[2][9] = Point(196.0, 116.0);
    lv_pointsSetLeft1Right2[2][10] = Point(196.0, 120.0);
    lv_pointsSetLeft1Right2[2][11] = Point(196.0, 124.0);
    lv_pointsSetLeft1Right2[2][12] = Point(196.0, 128.0);
    lv_pointsSetLeft1Right2[2][13] = Point(196.0, 132.0);
    lv_pointsSetLeft1Right2[2][14] = Point(196.0, 136.0);
    lv_pointsSetLeft1Right2[2][15] = Point(196.0, 140.0);
    if ((gv_bunkerSwarmVars.lv_swarmStartLeft == true)) {
        lv_actualStart = 1;
        lv_actualEnd = 2;
    }
    else {
        lv_actualStart = 2;
        lv_actualEnd = 1;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][1]);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][1]), c_orderQueueReplace);
    UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
    gv_bunkerSwarmVars.lv_swarmcollisionunit = UnitLastCreated();
    gf_SwarmCollisionChecker();
    lv_enumint = 1;
    for ( ; ( (auto3EF6D770_ai >= 0 && lv_enumint <= auto3EF6D770_ae) || (auto3EF6D770_ai < 0 && lv_enumint >= auto3EF6D770_ae) ) ; lv_enumint += auto3EF6D770_ai ) {
        lv_randomint = RandomInt(1, 3);
        if ((lv_randomint == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
        }
        else {
            if ((lv_randomint == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
        UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
    }
    Wait(0.7, c_timeGame);
    lv_enumint = 1;
    for ( ; ( (autoC0447202_ai >= 0 && lv_enumint <= autoC0447202_ae) || (autoC0447202_ai < 0 && lv_enumint >= autoC0447202_ae) ) ; lv_enumint += autoC0447202_ai ) {
        lv_randomint = RandomInt(1, 2);
        if ((lv_randomint == 1)) {
            lv_randomint = RandomInt(1, 3);
            if ((lv_randomint == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                if ((lv_randomint == 2)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
        }

    }
    Wait(0.7, c_timeGame);
    lv_enumint = 1;
    for ( ; ( (autoB6A0543B_ai >= 0 && lv_enumint <= autoB6A0543B_ae) || (autoB6A0543B_ai < 0 && lv_enumint >= autoB6A0543B_ae) ) ; lv_enumint += autoB6A0543B_ai ) {
        lv_randomint = RandomInt(1, 2);
        if ((lv_randomint == 1)) {
            lv_randomint = RandomInt(1, 3);
            if ((lv_randomint == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                if ((lv_randomint == 2)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
        }

    }
    Wait(0.7, c_timeGame);
    SoundPlay(SoundLink("Roar1", -1), PlayerGroupAll(), 40.0, 0.0);
    lv_enumint = 1;
    for ( ; ( (autoC0818166_ai >= 0 && lv_enumint <= autoC0818166_ae) || (autoC0818166_ai < 0 && lv_enumint >= autoC0818166_ae) ) ; lv_enumint += autoC0818166_ai ) {
        lv_randomint = RandomInt(1, 2);
        if ((lv_randomint == 1)) {
            lv_randomint = RandomInt(1, 3);
            if ((lv_randomint == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                if ((lv_randomint == 2)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
        }

    }
    Wait(0.7, c_timeGame);
    lv_enumint = 1;
    for ( ; ( (autoE2C8504C_ai >= 0 && lv_enumint <= autoE2C8504C_ae) || (autoE2C8504C_ai < 0 && lv_enumint >= autoE2C8504C_ae) ) ; lv_enumint += autoE2C8504C_ai ) {
        lv_randomint = RandomInt(1, 2);
        if ((lv_randomint == 1)) {
            lv_randomint = RandomInt(1, 3);
            if ((lv_randomint == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                if ((lv_randomint == 2)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
        }

    }
    Wait(0.7, c_timeGame);
    lv_enumint = 1;
    for ( ; ( (auto44D4EB99_ai >= 0 && lv_enumint <= auto44D4EB99_ae) || (auto44D4EB99_ai < 0 && lv_enumint >= auto44D4EB99_ae) ) ; lv_enumint += auto44D4EB99_ai ) {
        lv_randomint = RandomInt(1, 2);
        if ((lv_randomint == 1)) {
            lv_randomint = RandomInt(1, 3);
            if ((lv_randomint == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmUltralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
            }
            else {
                if ((lv_randomint == 2)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHydralisk", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmRoach", c_unitCreateIgnorePlacement, 0, lv_pointsSetLeft1Right2[lv_actualStart][lv_enumint]);
                }
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_pointsSetLeft1Right2[lv_actualEnd][lv_enumint]), c_orderQueueReplace);
            UnitGroupAdd(gv_bunkerSwarmVars.lv_swarmUnits, UnitLastCreated());
        }

    }
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Roar1", -1), PlayerGroupAll(), 40.0, 0.0);
    return true;
}

trigger auto_gf_SwarmCollisionChecker_Trigger = null;

void gf_SwarmCollisionChecker () {
    if (auto_gf_SwarmCollisionChecker_Trigger == null) {
        auto_gf_SwarmCollisionChecker_Trigger = TriggerCreate("auto_gf_SwarmCollisionChecker_TriggerFunc");
    }

    TriggerExecute(auto_gf_SwarmCollisionChecker_Trigger, false, false);
}

bool auto_gf_SwarmCollisionChecker_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitstocheck;
    unitgroup lv_unitstokill;

    // Automatic Variable Declarations
    unitgroup autoE8E97210_g;
    int autoE8E97210_u;
    unit autoE8E97210_var;
    unitgroup autoFBC854DC_g;
    int autoFBC854DC_u;
    unit autoFBC854DC_var;
    unitgroup auto9B254AC9_g;
    int auto9B254AC9_u;
    unit auto9B254AC9_var;

    // Variable Initialization
    lv_unitstocheck = UnitGroupEmpty();
    lv_unitstokill = UnitGroupEmpty();

    // Implementation
    gv_bunkerSwarmVars.lv_checkforcolissions = true;
    autoE8E97210_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8E97210_u = UnitGroupCount(autoE8E97210_g, c_unitCountAll);
    for (;; autoE8E97210_u -= 1) {
        autoE8E97210_var = UnitGroupUnitFromEnd(autoE8E97210_g, autoE8E97210_u);
        if (autoE8E97210_var == null) { break; }
        if (((autoE8E97210_var == gv_Skaters[1]) || (autoE8E97210_var == gv_Skaters[2]) || (autoE8E97210_var == gv_Skaters[3]) || (autoE8E97210_var == gv_Skaters[4]) || (autoE8E97210_var == gv_Skaters[5]) || (autoE8E97210_var == gv_Skaters[6]) || (autoE8E97210_var == gv_Skaters[7]) || (autoE8E97210_var == gv_Skaters[8]) || (autoE8E97210_var == gv_Skaters[9]) || (autoE8E97210_var == gv_Skaters[10]) || (autoE8E97210_var == gv_Skaters[11]) || (autoE8E97210_var == gv_Skaters[12]) || (autoE8E97210_var == gv_Skaters[13]) || (autoE8E97210_var == gv_Skaters[14]) || (autoE8E97210_var == gv_Skaters[15]))) {
            UnitGroupAdd(lv_unitstocheck, autoE8E97210_var);
        }

    }
    while ((gv_bunkerSwarmVars.lv_checkforcolissions == true)) {
        UnitGroupClear(lv_unitstokill);
        autoFBC854DC_g = lv_unitstocheck;
        autoFBC854DC_u = UnitGroupCount(autoFBC854DC_g, c_unitCountAll);
        for (;; autoFBC854DC_u -= 1) {
            autoFBC854DC_var = UnitGroupUnitFromEnd(autoFBC854DC_g, autoFBC854DC_u);
            if (autoFBC854DC_var == null) { break; }
            if ((gv_bunkerSwarmVars.lv_swarmStartLeft == true) && (PointGetX(UnitGetPosition(autoFBC854DC_var)) < PointGetX(UnitGetPosition(gv_bunkerSwarmVars.lv_swarmcollisionunit))) && (UnitGetCustomValue(autoFBC854DC_var, 18) == 0.0) && (UnitGetCustomValue(autoFBC854DC_var, 17) == 0.0)) {
                UnitSetCustomValue(autoFBC854DC_var, 18, 1.0);
                UnitGroupAdd(lv_unitstokill, autoFBC854DC_var);
                UnitGroupRemove(lv_unitstocheck, autoFBC854DC_var);
            }
            else {
                if ((gv_bunkerSwarmVars.lv_swarmStartLeft == false) && (PointGetX(UnitGetPosition(autoFBC854DC_var)) > PointGetX(UnitGetPosition(gv_bunkerSwarmVars.lv_swarmcollisionunit))) && (UnitGetCustomValue(autoFBC854DC_var, 18) == 0.0) && (UnitGetCustomValue(autoFBC854DC_var, 17) == 0.0)) {
                    UnitSetCustomValue(autoFBC854DC_var, 18, 1.0);
                    UnitGroupAdd(lv_unitstokill, autoFBC854DC_var);
                    UnitGroupRemove(lv_unitstocheck, autoFBC854DC_var);
                }

            }
        }
        auto9B254AC9_g = lv_unitstokill;
        auto9B254AC9_u = UnitGroupCount(auto9B254AC9_g, c_unitCountAll);
        for (;; auto9B254AC9_u -= 1) {
            auto9B254AC9_var = UnitGroupUnitFromEnd(auto9B254AC9_g, auto9B254AC9_u);
            if (auto9B254AC9_var == null) { break; }
            gf_SwarmKillUnit(auto9B254AC9_var, UnitGetPosition(auto9B254AC9_var));
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_SwarmKillUnit_Trigger = null;
unit auto_gf_SwarmKillUnit_lp_zealot;
point auto_gf_SwarmKillUnit_lp_point;

void gf_SwarmKillUnit (unit lp_zealot, point lp_point) {
    auto_gf_SwarmKillUnit_lp_zealot = lp_zealot;
    auto_gf_SwarmKillUnit_lp_point = lp_point;

    if (auto_gf_SwarmKillUnit_Trigger == null) {
        auto_gf_SwarmKillUnit_Trigger = TriggerCreate("auto_gf_SwarmKillUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_SwarmKillUnit_Trigger, false, false);
}

bool auto_gf_SwarmKillUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zealot = auto_gf_SwarmKillUnit_lp_zealot;
    point lp_point = auto_gf_SwarmKillUnit_lp_point;

    // Variable Declarations
    actor lv_fireactor;
    fixed lv_height;
    fixed lv_heightmodifier;
    bool lv_bloodisplayed;
    unit lv_stick;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heightmodifier = 2.0;

    // Implementation
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_zealot, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(lp_zealot, "move", false);
    UnitAbilityEnable(lp_zealot, "Check", false);
    lv_stick = gv_Sticks[UnitGetOwner(lp_zealot)];
    ActorSend(libNtve_gf_MainActorofUnit(lp_zealot), "HostSiteOpsSet ::Host fallingdeath");
    libNtve_gf_AttachActorToUnit(lp_zealot, "FireMedium", "Ref_Head");
    lv_fireactor = libNtve_gf_ActorLastCreated();
    while ((lv_height > -10.0) && (lp_zealot != null)) {
        lv_height += lv_heightmodifier;
        UnitSetHeight(lp_zealot, lv_height, 0.0625);
        UnitSetHeight(lv_stick, lv_height, 0.0625);
        lv_heightmodifier -= 0.2;
        if ((lv_bloodisplayed == false) && (lv_height < 0.0) && (lv_heightmodifier < 0.0)) {
            lv_bloodisplayed = true;
            libNtve_gf_CreateModelAtPoint("LurkerAttackDeathBloodGeyser", lp_point);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000,5.000000,3.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,0,0 2.000000}");
            SoundPlay(SoundLink("Marine_DeathFXBloodSpray", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("NydusDeathSound12222", -1), PlayerGroupAll(), 200.0, 0.0);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_zealot), false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lv_stick), false);
            ActorSend(lv_fireactor, "Destroy Immediate");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Createbootystats_Trigger = null;
int auto_gf_Createbootystats_lp_statdialog;

void gf_Createbootystats (int lp_statdialog) {
    auto_gf_Createbootystats_lp_statdialog = lp_statdialog;

    if (auto_gf_Createbootystats_Trigger == null) {
        auto_gf_Createbootystats_Trigger = TriggerCreate("auto_gf_Createbootystats_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createbootystats_Trigger, false, false);
}

bool auto_gf_Createbootystats_TriggerFunc (bool testConds, bool runActions) {
    int lp_statdialog = auto_gf_Createbootystats_lp_statdialog;

    // Variable Declarations
    int lv_yoffset;
    int lv_stattextverticaloffset;
    int lv_rowcount;

    // Automatic Variable Declarations
    playergroup auto00D07B79_g;
    int auto00D07B79_var;
    playergroup auto57ADE501_g;
    int auto57ADE501_var;

    // Variable Initialization
    lv_yoffset = 75;
    lv_stattextverticaloffset = 31;
    lv_rowcount = 1;

    // Implementation
    if ((gv_waterVars.lv_bootytimes > 0)) {
        libNtve_gf_CreateDialogItemLabel(lp_statdialog, 200, 50, c_anchorTop, 815, 20, StringExternal("Param/Value/03503DAD"), ColorWithAlpha(0,0,0,0), false, 2.0);
        auto00D07B79_g = gv_actualPlayerzonTeam[1];
        auto00D07B79_var = -1;
        while (true) {
            auto00D07B79_var = PlayerGroupNextPlayer(auto00D07B79_g, auto00D07B79_var);
            if (auto00D07B79_var < 0) { break; }
            libNtve_gf_CreateDialogItemLabel(lp_statdialog, 200, 50, c_anchorTop, 815, lv_yoffset, IntToText(gv_waterVars.lv_totalBooty[auto00D07B79_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
            lv_yoffset += 45;
        }
        auto57ADE501_g = gv_actualPlayerzonTeam[2];
        auto57ADE501_var = -1;
        while (true) {
            auto57ADE501_var = PlayerGroupNextPlayer(auto57ADE501_g, auto57ADE501_var);
            if (auto57ADE501_var < 0) { break; }
            libNtve_gf_CreateDialogItemLabel(lp_statdialog, 200, 50, c_anchorTop, 815, lv_yoffset, IntToText(gv_waterVars.lv_totalBooty[auto57ADE501_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
            lv_yoffset += 45;
        }
    }

    return true;
}

trigger auto_gf_InitBattleships_Trigger = null;
int auto_gf_InitBattleships_lp_battleshipPlayer;

void gf_InitBattleships (int lp_battleshipPlayer) {
    auto_gf_InitBattleships_lp_battleshipPlayer = lp_battleshipPlayer;

    if (auto_gf_InitBattleships_Trigger == null) {
        auto_gf_InitBattleships_Trigger = TriggerCreate("auto_gf_InitBattleships_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitBattleships_Trigger, false, false);
}

bool auto_gf_InitBattleships_TriggerFunc (bool testConds, bool runActions) {
    int lp_battleshipPlayer = auto_gf_InitBattleships_lp_battleshipPlayer;

    // Automatic Variable Declarations
    const int autoB1DBA300_ae = 15;
    int autoB1DBA300_var;
    unitgroup autoC3B80206_g;
    int autoC3B80206_u;
    unit autoC3B80206_var;

    // Implementation
    gv_waterVars.lv_bootytimes += 1;
    gf_CreateWaterStuff();
    gf_CreateBootyDialog();
    TriggerEnable(gt_ShootMissileMainShip, true);
    TriggerEnable(gt_ShootMissileSmallShip, true);
    autoB1DBA300_var = 1;
    for ( ; autoB1DBA300_var <= autoB1DBA300_ae; autoB1DBA300_var += 1 ) {
        gv_waterVars.lv_alive[autoB1DBA300_var] = false;
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[autoB1DBA300_var]), false);
    }
    gv_waterVars.lv_whoismainpirate = lp_battleshipPlayer;
    gv_waterVars.lv_shouldshipsberunning = true;
    autoC3B80206_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3B80206_u = UnitGroupCount(autoC3B80206_g, c_unitCountAll);
    for (;; autoC3B80206_u -= 1) {
        autoC3B80206_var = UnitGroupUnitFromEnd(autoC3B80206_g, autoC3B80206_u);
        if (autoC3B80206_var == null) { break; }
        if (((autoC3B80206_var == gv_Skaters[1]) || (autoC3B80206_var == gv_Skaters[2]) || (autoC3B80206_var == gv_Skaters[3]) || (autoC3B80206_var == gv_Skaters[4]) || (autoC3B80206_var == gv_Skaters[5]) || (autoC3B80206_var == gv_Skaters[6]) || (autoC3B80206_var == gv_Skaters[7]) || (autoC3B80206_var == gv_Skaters[8]) || (autoC3B80206_var == gv_Skaters[9]) || (autoC3B80206_var == gv_Skaters[10]) || (autoC3B80206_var == gv_Skaters[11]) || (autoC3B80206_var == gv_Skaters[12]) || (autoC3B80206_var == gv_Skaters[13]) || (autoC3B80206_var == gv_Skaters[14]) || (autoC3B80206_var == gv_Skaters[15]))) {
            gf_Makeunitsintoships(autoC3B80206_var);
        }

    }
    gf_CreateRandomBooty();
    gf_Checkforbootycollision();
    Wait(22.0, c_timeGame);
    TriggerEnable(gt_ShootMissileMainShip, false);
    TriggerEnable(gt_ShootMissileSmallShip, false);
    gv_waterVars.lv_shouldshipsberunning = false;
    gf_Cleanupwateractors();
    return true;
}

trigger auto_gf_CreateBootyDialog_Trigger = null;

void gf_CreateBootyDialog () {
    if (auto_gf_CreateBootyDialog_Trigger == null) {
        auto_gf_CreateBootyDialog_Trigger = TriggerCreate("auto_gf_CreateBootyDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateBootyDialog_Trigger, false, false);
}

bool auto_gf_CreateBootyDialog_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A9846E3_g;
    int auto3A9846E3_var;
    playergroup auto9CD8F653_g;
    int auto9CD8F653_var;

    // Implementation
    DialogCreate(500, 400, c_anchorTop, 0, 220, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_waterVars.lv_bootyQtyDialog = DialogLastCreated();
    auto3A9846E3_g = gv_actualPlayerzonTeam[1];
    auto3A9846E3_var = -1;
    while (true) {
        auto3A9846E3_var = PlayerGroupNextPlayer(auto3A9846E3_g, auto3A9846E3_var);
        if (auto3A9846E3_var < 0) { break; }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto3A9846E3_var), true);
    }
    auto9CD8F653_g = gv_actualPlayerzonTeam[2];
    auto9CD8F653_var = -1;
    while (true) {
        auto9CD8F653_var = PlayerGroupNextPlayer(auto9CD8F653_g, auto9CD8F653_var);
        if (auto9CD8F653_var < 0) { break; }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto9CD8F653_var), true);
    }
    libNtve_gf_CreateDialogItemLabel(gv_waterVars.lv_bootyQtyDialog, 200, 50, c_anchorTop, 0, 0, TextExpressionAssemble("Param/Expression/0C363269"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_waterVars.lv_bootyQtyText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    gf_UpdateBootyDialog();
    return true;
}

trigger auto_gf_UpdateBootyDialog_Trigger = null;

void gf_UpdateBootyDialog () {
    if (auto_gf_UpdateBootyDialog_Trigger == null) {
        auto_gf_UpdateBootyDialog_Trigger = TriggerCreate("auto_gf_UpdateBootyDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateBootyDialog_Trigger, false, false);
}

bool auto_gf_UpdateBootyDialog_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA0EC5EE7_g;
    int autoA0EC5EE7_var;

    // Implementation
    autoA0EC5EE7_g = PlayerGroupActive();
    autoA0EC5EE7_var = -1;
    while (true) {
        autoA0EC5EE7_var = PlayerGroupNextPlayer(autoA0EC5EE7_g, autoA0EC5EE7_var);
        if (autoA0EC5EE7_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/90EF40A0", "A", IntToText(gv_waterVars.lv_totalBooty[autoA0EC5EE7_var]));
        libNtve_gf_SetDialogItemText(gv_waterVars.lv_bootyQtyText, TextExpressionAssemble("Param/Expression/90EF40A0"), PlayerGroupSingle(autoA0EC5EE7_var));
    }
    return true;
}

trigger auto_gf_Makeunitsintoships_Trigger = null;
unit auto_gf_Makeunitsintoships_lp_unit;

void gf_Makeunitsintoships (unit lp_unit) {
    auto_gf_Makeunitsintoships_lp_unit = lp_unit;

    if (auto_gf_Makeunitsintoships_Trigger == null) {
        auto_gf_Makeunitsintoships_Trigger = TriggerCreate("auto_gf_Makeunitsintoships_TriggerFunc");
    }

    TriggerExecute(auto_gf_Makeunitsintoships_Trigger, false, false);
}

bool auto_gf_Makeunitsintoships_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Makeunitsintoships_lp_unit;

    // Variable Declarations
    bool lv_ismainship;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == gv_waterVars.lv_whoismainpirate)) {
        lv_ismainship = true;
    }

    if ((lv_ismainship == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ZHPL0122222222243");
        gv_waterVars.lv_hitsRemainingonPirate = 5;
        DialogCreate(102, 12, c_anchorCenter, 0, 0, true);
        gv_waterVars.lv_hPDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 102, 12, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 10, c_anchorTopLeft, 1, 1, StringToText(""), "Assets\\Textures\\green.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_waterVars.lv_hPBar = DialogControlLastCreated();
        DialogSetPositionRelativeToUnit(gv_waterVars.lv_hPDialog, lp_unit, "Ref_Origin", 0, -150);
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ZHPL01222222222432");
    }
    gv_waterVars.lv_alive[UnitGetOwner(lp_unit)] = true;
    UnitSetHeight(lp_unit, 3.0, 0.0);
    gv_waterVars.lv_boats[UnitGetOwner(lp_unit)] = lp_unit;
    return true;
}

trigger auto_gf_CreateWaterStuff_Trigger = null;

void gf_CreateWaterStuff () {
    if (auto_gf_CreateWaterStuff_Trigger == null) {
        auto_gf_CreateWaterStuff_Trigger = TriggerCreate("auto_gf_CreateWaterStuff_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateWaterStuff_Trigger, false, false);
}

bool auto_gf_CreateWaterStuff_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_waterVars.lv_actorint = 0;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL012222222223", c_unitCreateIgnorePlacement, 0, Point(127.96, 109.02));
    gv_waterVars.lv_unitstoclean[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222232", c_unitCreateIgnorePlacement, 0, Point(128.59, 111.77));
    gv_waterVars.lv_unitstoclean[2] = UnitLastCreated();
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(63.45, 145.76));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(108.71, 145.99));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(147.39, 147.33));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(192.51, 145.92));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(159.69, 68.55));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(129.68, 69.71));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(96.1, 68.13));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(83.84, 146.57));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(128.61, 145.23));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(170.28, 147.36));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(202.79, 110.33));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(201.18, 71.19));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(56.32, 71.36));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateModelAtPoint("ZerusLargeTree", Point(55.69, 107.53));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap ZerusLargeTree 0");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("ThunderLightning", Point(100.59, 110.44));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("ThunderLightning", Point(156.43, 111.86));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("RainEmitterLarge", Point(156.43, 111.86));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("RainEmitterLarge", Point(100.0, 110.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("RockWaterfall", Point(78.0, 148.74));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap RockWaterfall 5");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("RockWaterfall", Point(178.27, 148.74));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap RockWaterfall 5");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("BirdsTarsonis", Point(153.29, 111.96));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("BirdsTarsonis", Point(95.91, 111.38));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(54.93, 91.59));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(55.65, 124.72));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(127.99, 143.75));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(202.04, 119.26));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(201.3, 86.13));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Waterfall", Point(127.76, 68.25));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(68.47, 89.63));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(84.0, 121.3));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(103.24, 92.96));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(118.2, 117.5));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(139.45, 95.25));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(160.65, 119.47));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(184.57, 92.92));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("Fish", Point(188.74, 130.97));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(46.16, 155.87));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(80.28, 157.25));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(117.77, 158.78));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(156.8, 158.5));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(196.21, 157.11));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(211.92, 133.31));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(212.98, 95.01));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(209.23, 66.92));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(42.48, 141.88));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(43.37, 100.44));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(44.6, 64.16));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(74.52, 56.22));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(114.89, 53.22));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(155.15, 50.48));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(194.22, 49.62));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(70.44, 71.22));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(86.4, 70.65));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(100.57, 70.81));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(114.62, 71.31));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(128.09, 71.48));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(142.49, 71.49));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(158.23, 71.62));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(173.73, 71.4));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    lv_int += 1;
    libNtve_gf_CreateActorAtPoint("XelNaga_Cavern_Rock_Cliffs_Old", Point(187.09, 71.22));
    ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap XelNaga_Cavern_Rock_Cliffs_Old 1");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
    gv_waterVars.lv_actorstoclean[lv_int] = libNtve_gf_ActorLastCreated();
    gv_waterVars.lv_actorint = lv_int;
    return true;
}

trigger auto_gf_Cleanupwateractors_Trigger = null;

void gf_Cleanupwateractors () {
    if (auto_gf_Cleanupwateractors_Trigger == null) {
        auto_gf_Cleanupwateractors_Trigger = TriggerCreate("auto_gf_Cleanupwateractors_TriggerFunc");
    }

    TriggerExecute(auto_gf_Cleanupwateractors_Trigger, false, false);
}

bool auto_gf_Cleanupwateractors_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto21BE80B2_ae;
    int auto21BE80B2_var;
    const int auto0F24276D_ae = 15;
    int auto0F24276D_var;
    unitgroup auto9D9200F7_g;
    int auto9D9200F7_u;
    unit auto9D9200F7_var;

    // Implementation
    auto21BE80B2_ae = gv_waterVars.lv_actorint;
    auto21BE80B2_var = 0;
    for ( ; auto21BE80B2_var <= auto21BE80B2_ae; auto21BE80B2_var += 1 ) {
        ActorSend(gv_waterVars.lv_actorstoclean[auto21BE80B2_var], "Destroy Immediate");
    }
    UnitRemove(gv_waterVars.lv_unitstoclean[1]);
    UnitRemove(gv_waterVars.lv_unitstoclean[2]);
    auto0F24276D_var = 1;
    for ( ; auto0F24276D_var <= auto0F24276D_ae; auto0F24276D_var += 1 ) {
        gv_waterVars.lv_alive[auto0F24276D_var] = false;
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[auto0F24276D_var]), true);
    }
    auto9D9200F7_g = gv_waterVars.lv_bootyUnits;
    auto9D9200F7_u = UnitGroupCount(auto9D9200F7_g, c_unitCountAll);
    for (;; auto9D9200F7_u -= 1) {
        auto9D9200F7_var = UnitGroupUnitFromEnd(auto9D9200F7_g, auto9D9200F7_u);
        if (auto9D9200F7_var == null) { break; }
        UnitRemove(auto9D9200F7_var);
    }
    if ((gv_waterVars.lv_hPDialog != c_invalidDialogId)) {
        DialogDestroy(gv_waterVars.lv_hPDialog);
    }

    if ((gv_waterVars.lv_bootyQtyDialog != c_invalidDialogId)) {
        DialogDestroy(gv_waterVars.lv_bootyQtyDialog);
    }

    return true;
}

trigger auto_gf_ResetCDforShip_Trigger = null;
int auto_gf_ResetCDforShip_lp_player;
fixed auto_gf_ResetCDforShip_lp_cD;

void gf_ResetCDforShip (int lp_player, fixed lp_cD) {
    auto_gf_ResetCDforShip_lp_player = lp_player;
    auto_gf_ResetCDforShip_lp_cD = lp_cD;

    if (auto_gf_ResetCDforShip_Trigger == null) {
        auto_gf_ResetCDforShip_Trigger = TriggerCreate("auto_gf_ResetCDforShip_TriggerFunc");
    }

    TriggerExecute(auto_gf_ResetCDforShip_Trigger, false, false);
}

bool auto_gf_ResetCDforShip_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ResetCDforShip_lp_player;
    fixed lp_cD = auto_gf_ResetCDforShip_lp_cD;

    // Automatic Variable Declarations
    // Implementation
    gv_waterVars.lv_cooldowns[lp_player] = lp_cD;
    while ((gv_waterVars.lv_cooldowns[lp_player] > 0.0)) {
        Wait(0.1, c_timeGame);
        gv_waterVars.lv_cooldowns[lp_player] -= 0.1;
    }
    return true;
}

trigger auto_gf_ShootMissileMainShip_Trigger = null;
point auto_gf_ShootMissileMainShip_lp_destinationPoint;
int auto_gf_ShootMissileMainShip_lp_player;

void gf_ShootMissileMainShip (point lp_destinationPoint, int lp_player) {
    auto_gf_ShootMissileMainShip_lp_destinationPoint = lp_destinationPoint;
    auto_gf_ShootMissileMainShip_lp_player = lp_player;

    if (auto_gf_ShootMissileMainShip_Trigger == null) {
        auto_gf_ShootMissileMainShip_Trigger = TriggerCreate("auto_gf_ShootMissileMainShip_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShootMissileMainShip_Trigger, false, false);
}

bool auto_gf_ShootMissileMainShip_TriggerFunc (bool testConds, bool runActions) {
    point lp_destinationPoint = auto_gf_ShootMissileMainShip_lp_destinationPoint;
    int lp_player = auto_gf_ShootMissileMainShip_lp_player;

    // Variable Declarations
    point lv_startPosition;
    point lv_endposition;
    fixed lv_height;
    fixed lv_heightModifer;
    unit lv_theMissile;
    fixed lv_distanceRemaining;
    fixed lv_angle;
    fixed lv_distanceeachtick;
    point lv_currentpoint;
    actor[4] lv_wateractors;

    // Automatic Variable Declarations
    unitgroup auto93EA7972_g;
    int auto93EA7972_u;
    unit auto93EA7972_var;
    unitgroup autoBC0A0809_g;
    int autoBC0A0809_u;
    unit autoBC0A0809_var;

    // Variable Initialization
    lv_height = 3.0;
    lv_heightModifer = 2.0;

    // Implementation
    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        lv_startPosition = UnitGetPosition(gv_Skaters[lp_player]);
        lv_endposition = lp_destinationPoint;
        lv_distanceRemaining = DistanceBetweenPoints(lv_startPosition, lv_endposition);
        lv_angle = AngleBetweenPoints(lv_startPosition, lv_endposition);
        lv_distanceeachtick = (lv_distanceRemaining / 40.0);
        SoundPlayAtPointForPlayer(SoundLink("BattleshipShoot", -1), c_maxPlayers, PlayerGroupAll(), lv_startPosition, 5.0, 40.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL012222222223322", c_unitCreateIgnorePlacement, 0, lv_startPosition);
        lv_theMissile = UnitLastCreated();
        if ((lp_player == gv_waterVars.lv_whoismainpirate)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_theMissile), libNtve_gf_SetScale(5.5, 5.5, 5.5, 0.0));
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lv_theMissile), libNtve_gf_SetScale(3.0, 3.0, 3.0, 0.0));
        }
        ActorSend(libNtve_gf_MainActorofUnit(lv_theMissile), libNtve_gf_SetTintColor(Color(7.84, 7.84, 7.84), 0.5, 0.0));
        UnitSetHeight(lv_theMissile, 3.0, 0.0);
    }

    while ((gv_waterVars.lv_shouldshipsberunning == true) && (lv_distanceRemaining >= 0.0) && (lv_height >= 3.0)) {
        lv_height += lv_heightModifer;
        lv_heightModifer -= 0.1;
        UnitSetHeight(lv_theMissile, lv_height, 0.0625);
        UnitSetPosition(lv_theMissile, PointWithOffsetPolar(UnitGetPosition(lv_theMissile), lv_distanceeachtick, lv_angle), true);
        lv_distanceRemaining = (DistanceBetweenPoints(lv_startPosition, lv_endposition) - lv_distanceeachtick);
        lv_distanceRemaining -= (DistanceBetweenPoints(lv_startPosition, lv_endposition) - lv_distanceeachtick);
        lv_currentpoint = UnitGetPosition(lv_theMissile);
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_theMissile) == true)) {
        UnitRemove(lv_theMissile);
    }

    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        auto93EA7972_g = UnitGroup(null, c_playerAny, RegionCircle(lv_endposition, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto93EA7972_u = UnitGroupCount(auto93EA7972_g, c_unitCountAll);
        for (;; auto93EA7972_u -= 1) {
            auto93EA7972_var = UnitGroupUnitFromEnd(auto93EA7972_g, auto93EA7972_u);
            if (auto93EA7972_var == null) { break; }
            if ((gv_waterVars.lv_whoismainpirate != UnitGetOwner(auto93EA7972_var)) && (gv_waterVars.lv_alive[UnitGetOwner(auto93EA7972_var)] == true) && ((auto93EA7972_var == gv_Skaters[1]) || (auto93EA7972_var == gv_Skaters[2]) || (auto93EA7972_var == gv_Skaters[3]) || (auto93EA7972_var == gv_Skaters[4]) || (auto93EA7972_var == gv_Skaters[5]) || (auto93EA7972_var == gv_Skaters[6]) || (auto93EA7972_var == gv_Skaters[7]) || (auto93EA7972_var == gv_Skaters[8]))) {
                SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash2", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 40.0, 0.0);
                SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash22", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 70.0, 0.0);
                gv_waterVars.lv_alive[UnitGetOwner(auto93EA7972_var)] = false;
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto93EA7972_var), c_animNameDefault, "Death", 0, c_animTimeDefault);
                gf_Hidedeadship(auto93EA7972_var);
                gf_Createbootyatdeadshiplocation(lv_endposition);
            }

        }
        autoBC0A0809_g = UnitGroup(null, c_playerAny, RegionCircle(lv_endposition, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBC0A0809_u = UnitGroupCount(autoBC0A0809_g, c_unitCountAll);
        for (;; autoBC0A0809_u -= 1) {
            autoBC0A0809_var = UnitGroupUnitFromEnd(autoBC0A0809_g, autoBC0A0809_u);
            if (autoBC0A0809_var == null) { break; }
            if ((gv_waterVars.lv_whoismainpirate == UnitGetOwner(autoBC0A0809_var)) && (gv_waterVars.lv_alive[UnitGetOwner(autoBC0A0809_var)] == true) && ((autoBC0A0809_var == gv_Skaters[1]) || (autoBC0A0809_var == gv_Skaters[2]) || (autoBC0A0809_var == gv_Skaters[3]) || (autoBC0A0809_var == gv_Skaters[4]) || (autoBC0A0809_var == gv_Skaters[5]) || (autoBC0A0809_var == gv_Skaters[6]) || (autoBC0A0809_var == gv_Skaters[7]) || (autoBC0A0809_var == gv_Skaters[8]))) {
                gv_waterVars.lv_hitsRemainingonPirate -= 1;
                if ((gv_waterVars.lv_hitsRemainingonPirate <= 0)) {
                    SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash2", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 40.0, 0.0);
                    SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash22", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 70.0, 0.0);
                    gv_waterVars.lv_alive[UnitGetOwner(autoBC0A0809_var)] = false;
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoBC0A0809_var), c_animNameDefault, "Death", 0, c_animTimeDefault);
                    gf_Hidedeadship(autoBC0A0809_var);
                    gf_Createbootyatdeadshiplocation(lv_endposition);
                    gf_Createbootyatdeadshiplocation(lv_endposition);
                    gf_Createbootyatdeadshiplocation(lv_endposition);
                    DialogDestroy(gv_waterVars.lv_hPDialog);
                }
                else {
                    SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash2", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 40.0, 0.0);
                    gf_UpdateHPDialog();
                }
            }

        }
        SoundPlayAtPointForPlayer(SoundLink("BattleshipSplash", -1), c_maxPlayers, PlayerGroupAll(), lv_endposition, 5.0, 30.0, 0.0);
        libNtve_gf_CreateModelAtPoint("WaterSplashMassive", lv_currentpoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 3.200000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 6.000000");
        lv_wateractors[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("WaterRippleMassive", lv_currentpoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 3.200000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 6.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.000000 2.000000");
        lv_wateractors[2] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("CannonAttackImpact", lv_currentpoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 3.200000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        lv_wateractors[3] = libNtve_gf_ActorLastCreated();
        Wait(3.0, c_timeGame);
        ActorSend(lv_wateractors[1], "Destroy Immediate");
        ActorSend(lv_wateractors[2], "Destroy Immediate");
        ActorSend(lv_wateractors[3], "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_Hidedeadship_Trigger = null;
unit auto_gf_Hidedeadship_lp_unit;

void gf_Hidedeadship (unit lp_unit) {
    auto_gf_Hidedeadship_lp_unit = lp_unit;

    if (auto_gf_Hidedeadship_Trigger == null) {
        auto_gf_Hidedeadship_Trigger = TriggerCreate("auto_gf_Hidedeadship_TriggerFunc");
    }

    TriggerExecute(auto_gf_Hidedeadship_Trigger, false, false);
}

bool auto_gf_Hidedeadship_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Hidedeadship_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitAbilityEnable(lp_unit, "move", false);
        UnitAbilityEnable(lp_unit, "Check", false);
        Wait(1.0, c_timeGame);
    }

    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        Wait(1.0, c_timeGame);
    }

    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        Wait(1.0, c_timeGame);
    }

    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_unit), false);
    }

    return true;
}

trigger auto_gf_CreateRandomBooty_Trigger = null;

void gf_CreateRandomBooty () {
    if (auto_gf_CreateRandomBooty_Trigger == null) {
        auto_gf_CreateRandomBooty_Trigger = TriggerCreate("auto_gf_CreateRandomBooty_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateRandomBooty_Trigger, false, false);
}

bool auto_gf_CreateRandomBooty_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1942A758_n = 10;
    int auto1942A758_i;

    // Implementation
    for (auto1942A758_i = 1; auto1942A758_i <= auto1942A758_n; auto1942A758_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222233222", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(60)));
        UnitSetFacing(UnitLastCreated(), RandomFixed(0.0, 360.0), 2.0);
        UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
        UnitSetHeight(UnitLastCreated(), 3.0, 2.0);
        UnitGroupAdd(gv_waterVars.lv_bootyUnits, UnitLastCreated());
    }
    return true;
}

trigger auto_gf_Checkforbootycollision_Trigger = null;

void gf_Checkforbootycollision () {
    if (auto_gf_Checkforbootycollision_Trigger == null) {
        auto_gf_Checkforbootycollision_Trigger = TriggerCreate("auto_gf_Checkforbootycollision_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkforbootycollision_Trigger, false, false);
}

bool auto_gf_Checkforbootycollision_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup auto6B56DDBD_g;
    unitgroup auto6E069BF5_g;
    int auto6E069BF5_u;
    unit auto6E069BF5_var;

    // Variable Initialization

    // Implementation
    while ((gv_waterVars.lv_shouldshipsberunning == true)) {
        auto6B56DDBD_g = PlayerGroupActive();
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(auto6B56DDBD_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((UnitGroupCount(UnitGroup("ZHPL0122222222233222", c_playerAny, RegionCircle(UnitGetPosition(gv_waterVars.lv_boats[lv_enumplayer]), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) && (gv_waterVars.lv_alive[lv_enumplayer] == true)) {
                auto6E069BF5_g = UnitGroup("ZHPL0122222222233222", c_playerAny, RegionCircle(UnitGetPosition(gv_waterVars.lv_boats[lv_enumplayer]), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto6E069BF5_u = UnitGroupCount(auto6E069BF5_g, c_unitCountAll);
                for (;; auto6E069BF5_u -= 1) {
                    auto6E069BF5_var = UnitGroupUnitFromEnd(auto6E069BF5_g, auto6E069BF5_u);
                    if (auto6E069BF5_var == null) { break; }
                    UnitRemove(auto6E069BF5_var);
                    gv_waterVars.lv_totalBooty[lv_enumplayer] += 1;
                    SoundPlayForPlayer(SoundLink("C_UI_Money01", -1), c_maxPlayers, PlayerGroupSingle(lv_enumplayer), 200.0, 0.0);
                    gf_UpdateBootyDialog();
                }
            }

        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

void gf_Createbootyatdeadshiplocation (point lp_point) {
    // Automatic Variable Declarations
    const int auto5E8A8F20_n = 3;
    int auto5E8A8F20_i;

    // Implementation
    if ((gv_waterVars.lv_shouldshipsberunning == true)) {
        for (auto5E8A8F20_i = 1; auto5E8A8F20_i <= auto5E8A8F20_n; auto5E8A8F20_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222233222", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionCircle(lp_point, 3.0)));
            UnitSetFacing(UnitLastCreated(), RandomFixed(0.0, 360.0), 2.0);
            UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
            UnitSetHeight(UnitLastCreated(), 3.0, 2.0);
            UnitGroupAdd(gv_waterVars.lv_bootyUnits, UnitLastCreated());
        }
    }

}

trigger auto_gf_UpdateHPDialog_Trigger = null;

void gf_UpdateHPDialog () {
    if (auto_gf_UpdateHPDialog_Trigger == null) {
        auto_gf_UpdateHPDialog_Trigger = TriggerCreate("auto_gf_UpdateHPDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateHPDialog_Trigger, false, false);
}

bool auto_gf_UpdateHPDialog_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_waterVars.lv_hitsRemainingonPirate == 5)) {
        lv_width = 100;
    }
    else {
        if ((gv_waterVars.lv_hitsRemainingonPirate == 4)) {
            lv_width = 80;
        }
        else {
            if ((gv_waterVars.lv_hitsRemainingonPirate == 3)) {
                lv_width = 60;
            }
            else {
                if ((gv_waterVars.lv_hitsRemainingonPirate == 2)) {
                    lv_width = 40;
                }
                else {
                    if ((gv_waterVars.lv_hitsRemainingonPirate == 1)) {
                        lv_width = 20;
                    }

                }
            }
        }
    }
    DialogControlSetSize(gv_waterVars.lv_hPBar, PlayerGroupAll(), lv_width, 10);
    return true;
}

trigger auto_gf_JmoneyInit_Trigger = null;
unit auto_gf_JmoneyInit_lp_unit;

void gf_JmoneyInit (unit lp_unit) {
    auto_gf_JmoneyInit_lp_unit = lp_unit;

    if (auto_gf_JmoneyInit_Trigger == null) {
        auto_gf_JmoneyInit_Trigger = TriggerCreate("auto_gf_JmoneyInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_JmoneyInit_Trigger, false, false);
}

bool auto_gf_JmoneyInit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_JmoneyInit_lp_unit;

    // Variable Declarations
    unit lv_logounit;

    // Automatic Variable Declarations
    playergroup autoAF3E2E6C_g;
    int autoAF3E2E6C_var;

    // Variable Initialization

    // Implementation
    autoAF3E2E6C_g = gv_goalSoundGroup;
    autoAF3E2E6C_var = -1;
    while (true) {
        autoAF3E2E6C_var = PlayerGroupNextPlayer(autoAF3E2E6C_g, autoAF3E2E6C_var);
        if (autoAF3E2E6C_var < 0) { break; }
        SoundPlayForPlayer(SoundLink("MoneyRain", -1), c_maxPlayers, PlayerGroupSingle(autoAF3E2E6C_var), 100.0, 0.0);
    }
    TriggerEnable(gt_BoostMoney, true);
    TriggerEnable(gt_OnetimerMoney, true);
    gv_rainVars.lv_jmoneyUnit = lp_unit;
    gv_rainVars.lv_shouldmoneybefalling = true;
    UnitCreate(1, "ZHPL012222222222", c_unitCreateIgnorePlacement, 0, PointFromId(112), 270.0);
    lv_logounit = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.800000");
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_centerIcoLogoUnit), false);
    gf_RainMoneyInit();
    Wait(14.0, c_timeGame);
    gv_rainVars.lv_shouldmoneybefalling = false;
    gv_rainVars.lv_boostisover = true;
    TriggerEnable(gt_BoostMoney, false);
    TriggerEnable(gt_OnetimerMoney, false);
    Wait(1.0, c_timeGame);
    UnitRemove(lv_logounit);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_centerIcoLogoUnit), true);
    gf_CleanupMoney();
    return true;
}

trigger auto_gf_OnetimerInit_Trigger = null;
unit auto_gf_OnetimerInit_lp_unit;

void gf_OnetimerInit (unit lp_unit) {
    auto_gf_OnetimerInit_lp_unit = lp_unit;

    if (auto_gf_OnetimerInit_Trigger == null) {
        auto_gf_OnetimerInit_Trigger = TriggerCreate("auto_gf_OnetimerInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_OnetimerInit_Trigger, false, false);
}

bool auto_gf_OnetimerInit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_OnetimerInit_lp_unit;

    // Variable Declarations
    fixed lv_height;
    fixed lv_heightmodifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heightmodifier = 1.5;

    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        gf_OnetimerExplosion();
    }

    while ((gv_rainVars.lv_shouldmoneybefalling == true) && (UnitIsAlive(lp_unit) == true) && (lv_height >= 0.0)) {
        UnitSetHeight(lp_unit, lv_height, 0.0625);
        UnitSetHeight(gv_Sticks[UnitGetOwner(gv_rainVars.lv_jmoneyUnit)], lv_height, 0.0625);
        lv_height += lv_heightmodifier;
        lv_heightmodifier -= 0.1;
        if ((lv_heightmodifier > 0.0)) {
            gf_OnetimerMoneyFall();
        }

        Wait(0.0625, c_timeGame);
    }
    UnitSetHeight(lp_unit, 0.0, 0.2);
    UnitSetHeight(gv_Sticks[UnitGetOwner(gv_rainVars.lv_jmoneyUnit)], 0.0, 0.2);
    return true;
}

trigger auto_gf_OnetimerExplosion_Trigger = null;

void gf_OnetimerExplosion () {
    if (auto_gf_OnetimerExplosion_Trigger == null) {
        auto_gf_OnetimerExplosion_Trigger = TriggerCreate("auto_gf_OnetimerExplosion_TriggerFunc");
    }

    TriggerExecute(auto_gf_OnetimerExplosion_Trigger, false, false);
}

bool auto_gf_OnetimerExplosion_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_explosionunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        libNtve_gf_CreateActorAtPoint("250mmStrikeCannonsImpact", UnitGetPosition(gv_rainVars.lv_jmoneyUnit));
        lv_explosionunit = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(4.0, 4.0, 4.0, 0.0));
        Wait(2.0, c_timeGame);
    }

    if ((lv_explosionunit != null)) {
        ActorSend(lv_explosionunit, "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_OnetimerMoneyFall_Trigger = null;

void gf_OnetimerMoneyFall () {
    if (auto_gf_OnetimerMoneyFall_Trigger == null) {
        auto_gf_OnetimerMoneyFall_Trigger = TriggerCreate("auto_gf_OnetimerMoneyFall_TriggerFunc");
    }

    TriggerExecute(auto_gf_OnetimerMoneyFall_Trigger, false, false);
}

bool auto_gf_OnetimerMoneyFall_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_moneypoint;
    int lv_randomint;
    unit lv_moneyunit;
    int lv_height;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        lv_randomint = RandomInt(1, 3);
        lv_moneypoint = UnitGetPosition(gv_rainVars.lv_jmoneyUnit);
        lv_angle = RandomFixed(0.0, 360.0);
        if ((lv_randomint == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashLarge", c_unitCreateIgnorePlacement, 0, lv_moneypoint);
            lv_moneyunit = UnitLastCreated();
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
            UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
            UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        }
        else {
            if ((lv_randomint == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashMedium", c_unitCreateIgnorePlacement, 0, lv_moneypoint);
                lv_moneyunit = UnitLastCreated();
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
                UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
            }
            else {
                if ((lv_randomint == 3)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashSmall", c_unitCreateIgnorePlacement, 0, lv_moneypoint);
                    lv_moneyunit = UnitLastCreated();
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                    UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
                    UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                    UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                }

            }
        }
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        gf_OnetimerMoneyMove(lv_moneyunit);
        UnitSetHeight(lv_moneyunit, 0.0, 0.5);
        Wait(0.5, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lv_moneyunit, 1.0, 0.1);
        Wait(0.1, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lv_moneyunit, 0.0, 0.1);
    }

    return true;
}

trigger auto_gf_OnetimerMoneyMove_Trigger = null;
unit auto_gf_OnetimerMoneyMove_lp_unit;

void gf_OnetimerMoneyMove (unit lp_unit) {
    auto_gf_OnetimerMoneyMove_lp_unit = lp_unit;

    if (auto_gf_OnetimerMoneyMove_Trigger == null) {
        auto_gf_OnetimerMoneyMove_Trigger = TriggerCreate("auto_gf_OnetimerMoneyMove_TriggerFunc");
    }

    TriggerExecute(auto_gf_OnetimerMoneyMove_Trigger, false, false);
}

bool auto_gf_OnetimerMoneyMove_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_OnetimerMoneyMove_lp_unit;

    // Variable Declarations
    fixed lv_speed;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_speed = RandomFixed(0.5, 0.8);
    lv_angle = RandomFixed(0.0, 360.0);
    while ((gv_rainVars.lv_shouldmoneybefalling == true) && (lv_speed > 0.0)) {
        UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_speed, lv_angle), true);
        lv_speed -= 0.05;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_RainMoneyInit_Trigger = null;

void gf_RainMoneyInit () {
    if (auto_gf_RainMoneyInit_Trigger == null) {
        auto_gf_RainMoneyInit_Trigger = TriggerCreate("auto_gf_RainMoneyInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_RainMoneyInit_Trigger, false, false);
}

bool auto_gf_RainMoneyInit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_moneyRegion;
    int lv_randomint;
    point lv_thepoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        lv_moneyRegion = RegionCircle(UnitGetPosition(gv_rainVars.lv_jmoneyUnit), 10.0);
        lv_randomint = RandomInt(1, 3);
        lv_thepoint = RegionRandomPoint(lv_moneyRegion);
        if ((lv_randomint == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashLarge", c_unitCreateIgnorePlacement, 0, lv_thepoint);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
            UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
            UnitGroupAdd(gv_rainVars.lv_skyMoney, UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
            gf_Makemoneyfall(UnitLastCreated());
        }
        else {
            if ((lv_randomint == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashMedium", c_unitCreateIgnorePlacement, 0, lv_thepoint);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
                UnitGroupAdd(gv_rainVars.lv_skyMoney, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                gf_Makemoneyfall(UnitLastCreated());
            }
            else {
                if ((lv_randomint == 3)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashSmall", c_unitCreateIgnorePlacement, 0, lv_thepoint);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                    UnitSetHeight(UnitLastCreated(), 30.0, 0.0);
                    UnitGroupAdd(gv_rainVars.lv_skyMoney, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                    UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                    gf_Makemoneyfall(UnitLastCreated());
                }

            }
        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

trigger auto_gf_Makemoneyfall_Trigger = null;
unit auto_gf_Makemoneyfall_lp_moneyUnit;

void gf_Makemoneyfall (unit lp_moneyUnit) {
    auto_gf_Makemoneyfall_lp_moneyUnit = lp_moneyUnit;

    if (auto_gf_Makemoneyfall_Trigger == null) {
        auto_gf_Makemoneyfall_Trigger = TriggerCreate("auto_gf_Makemoneyfall_TriggerFunc");
    }

    TriggerExecute(auto_gf_Makemoneyfall_Trigger, false, false);
}

bool auto_gf_Makemoneyfall_TriggerFunc (bool testConds, bool runActions) {
    unit lp_moneyUnit = auto_gf_Makemoneyfall_lp_moneyUnit;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lp_moneyUnit, 0.0, 1.0);
        Wait(1.0, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lp_moneyUnit, 1.0, 0.1);
        Wait(0.1, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lp_moneyUnit, 0.0, 0.1);
    }

    return true;
}

trigger auto_gf_BoostMoneyInit_Trigger = null;
unit auto_gf_BoostMoneyInit_lp_unit;

void gf_BoostMoneyInit (unit lp_unit) {
    auto_gf_BoostMoneyInit_lp_unit = lp_unit;

    if (auto_gf_BoostMoneyInit_Trigger == null) {
        auto_gf_BoostMoneyInit_Trigger = TriggerCreate("auto_gf_BoostMoneyInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BoostMoneyInit_Trigger, false, false);
}

bool auto_gf_BoostMoneyInit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_BoostMoneyInit_lp_unit;

    // Variable Declarations
    int lv_randomint;
    point lv_thepoint;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_rainVars.lv_shouldmoneybefalling == true) && (gv_rainVars.lv_boostisover == false)) {
        lv_randomint = RandomInt(1, 3);
        lv_thepoint = UnitGetPosition(lp_unit);
        lv_angle = (UnitGetFacing(lp_unit) - 180.0);
        if ((lv_randomint == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashLarge", c_unitCreateIgnorePlacement, 0, lv_thepoint);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
            if ((UnitGetHeight(gv_rainVars.lv_jmoneyUnit) > 2.0)) {
                UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
            }
            else {
                UnitSetHeight(UnitLastCreated(), 2.0, 0.0);
            }
            UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
            UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
            gf_BoostMoneyFall(UnitLastCreated(), lv_angle);
        }
        else {
            if ((lv_randomint == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashMedium", c_unitCreateIgnorePlacement, 0, lv_thepoint);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                if ((UnitGetHeight(gv_rainVars.lv_jmoneyUnit) > 2.0)) {
                    UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
                }
                else {
                    UnitSetHeight(UnitLastCreated(), 2.0, 0.0);
                }
                UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                gf_BoostMoneyFall(UnitLastCreated(), lv_angle);
            }
            else {
                if ((lv_randomint == 3)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCashSmall", c_unitCreateIgnorePlacement, 0, lv_thepoint);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                    if ((UnitGetHeight(gv_rainVars.lv_jmoneyUnit) > 2.0)) {
                        UnitSetHeight(UnitLastCreated(), UnitGetHeight(gv_rainVars.lv_jmoneyUnit), 0.0);
                    }
                    else {
                        UnitSetHeight(UnitLastCreated(), 2.0, 0.0);
                    }
                    UnitGroupAdd(gv_rainVars.lv_boostMoney, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
                    UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                    gf_BoostMoneyFall(UnitLastCreated(), lv_angle);
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_BoostMoneyFall_Trigger = null;
unit auto_gf_BoostMoneyFall_lp_moneyUnit;
fixed auto_gf_BoostMoneyFall_lp_angle;

void gf_BoostMoneyFall (unit lp_moneyUnit, fixed lp_angle) {
    auto_gf_BoostMoneyFall_lp_moneyUnit = lp_moneyUnit;
    auto_gf_BoostMoneyFall_lp_angle = lp_angle;

    if (auto_gf_BoostMoneyFall_Trigger == null) {
        auto_gf_BoostMoneyFall_Trigger = TriggerCreate("auto_gf_BoostMoneyFall_TriggerFunc");
    }

    TriggerExecute(auto_gf_BoostMoneyFall_Trigger, false, false);
}

bool auto_gf_BoostMoneyFall_TriggerFunc (bool testConds, bool runActions) {
    unit lp_moneyUnit = auto_gf_BoostMoneyFall_lp_moneyUnit;
    fixed lp_angle = auto_gf_BoostMoneyFall_lp_angle;

    // Variable Declarations
    fixed lv_angleMin;
    fixed lv_angleMax;
    fixed lv_actualAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        lv_angleMin = (lp_angle - 25.0);
        lv_angleMax = (lp_angle + 25.0);
        lv_actualAngle = RandomFixed(lv_angleMin, lv_angleMax);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        gf_BoostMoneyMove(lp_moneyUnit, lv_actualAngle);
        UnitSetHeight(lp_moneyUnit, 0.0, 0.3);
        Wait(0.3, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lp_moneyUnit, 1.0, 0.1);
        Wait(0.1, c_timeGame);
    }

    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        UnitSetHeight(lp_moneyUnit, 0.0, 0.1);
    }

    return true;
}

trigger auto_gf_BoostMoneyMove_Trigger = null;
unit auto_gf_BoostMoneyMove_lp_moneyUnit;
fixed auto_gf_BoostMoneyMove_lp_angle;

void gf_BoostMoneyMove (unit lp_moneyUnit, fixed lp_angle) {
    auto_gf_BoostMoneyMove_lp_moneyUnit = lp_moneyUnit;
    auto_gf_BoostMoneyMove_lp_angle = lp_angle;

    if (auto_gf_BoostMoneyMove_Trigger == null) {
        auto_gf_BoostMoneyMove_Trigger = TriggerCreate("auto_gf_BoostMoneyMove_TriggerFunc");
    }

    TriggerExecute(auto_gf_BoostMoneyMove_Trigger, false, false);
}

bool auto_gf_BoostMoneyMove_TriggerFunc (bool testConds, bool runActions) {
    unit lp_moneyUnit = auto_gf_BoostMoneyMove_lp_moneyUnit;
    fixed lp_angle = auto_gf_BoostMoneyMove_lp_angle;

    // Variable Declarations
    fixed lv_speed;
    fixed lv_speedmodifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_speedmodifier = 0.05;

    // Implementation
    if ((gv_rainVars.lv_shouldmoneybefalling == true)) {
        lv_speed = RandomFixed(1.0, 2.0);
    }

    while ((gv_rainVars.lv_shouldmoneybefalling == true) && (lv_speed > 0.0)) {
        UnitSetPosition(lp_moneyUnit, PointWithOffsetPolar(UnitGetPosition(lp_moneyUnit), lv_speed, lp_angle), true);
        lv_speed -= lv_speedmodifier;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_CleanupMoney_Trigger = null;

void gf_CleanupMoney () {
    if (auto_gf_CleanupMoney_Trigger == null) {
        auto_gf_CleanupMoney_Trigger = TriggerCreate("auto_gf_CleanupMoney_TriggerFunc");
    }

    TriggerExecute(auto_gf_CleanupMoney_Trigger, false, false);
}

bool auto_gf_CleanupMoney_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_enumunit;

    // Automatic Variable Declarations
    unitgroup auto58DE54B4_g;
    int auto58DE54B4_u;
    unitgroup auto74F4507E_g;
    int auto74F4507E_u;
    unitgroup auto44B2E6C9_g;
    int auto44B2E6C9_u;

    // Variable Initialization

    // Implementation
    auto58DE54B4_g = gv_rainVars.lv_skyMoney;
    auto58DE54B4_u = UnitGroupCount(auto58DE54B4_g, c_unitCountAll);
    for (;; auto58DE54B4_u -= 1) {
        lv_enumunit = UnitGroupUnitFromEnd(auto58DE54B4_g, auto58DE54B4_u);
        if (lv_enumunit == null) { break; }
        UnitRemove(lv_enumunit);
    }
    auto74F4507E_g = gv_rainVars.lv_onetimerMoney;
    auto74F4507E_u = UnitGroupCount(auto74F4507E_g, c_unitCountAll);
    for (;; auto74F4507E_u -= 1) {
        lv_enumunit = UnitGroupUnitFromEnd(auto74F4507E_g, auto74F4507E_u);
        if (lv_enumunit == null) { break; }
        UnitRemove(lv_enumunit);
    }
    auto44B2E6C9_g = gv_rainVars.lv_boostMoney;
    auto44B2E6C9_u = UnitGroupCount(auto44B2E6C9_g, c_unitCountAll);
    for (;; auto44B2E6C9_u -= 1) {
        lv_enumunit = UnitGroupUnitFromEnd(auto44B2E6C9_g, auto44B2E6C9_u);
        if (lv_enumunit == null) { break; }
        UnitRemove(lv_enumunit);
    }
    return true;
}

trigger auto_gf_CityPlatformInit_Trigger = null;
unit auto_gf_CityPlatformInit_lp_unit;

void gf_CityPlatformInit (unit lp_unit) {
    auto_gf_CityPlatformInit_lp_unit = lp_unit;

    if (auto_gf_CityPlatformInit_Trigger == null) {
        auto_gf_CityPlatformInit_Trigger = TriggerCreate("auto_gf_CityPlatformInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_CityPlatformInit_Trigger, false, false);
}

bool auto_gf_CityPlatformInit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CityPlatformInit_lp_unit;

    // Variable Declarations
    point lv_thepoint;

    // Automatic Variable Declarations
    const int autoD283A4B5_ae = 15;
    int autoD283A4B5_var;

    // Variable Initialization

    // Implementation
    gv_cityPlatformVars.lv_rightpoints[1] = Point(139.38, 111.87);
    gv_cityPlatformVars.lv_rightpoints[2] = Point(139.9, 124.12);
    gv_cityPlatformVars.lv_rightpoints[3] = Point(140.54, 94.6);
    gv_cityPlatformVars.lv_rightpoints[4] = Point(156.48, 102.23);
    gv_cityPlatformVars.lv_rightpoints[5] = Point(158.12, 110.86);
    gv_cityPlatformVars.lv_rightpoints[6] = Point(159.79, 119.26);
    gv_cityPlatformVars.lv_leftpoints[1] = Point(115.25, 111.7);
    gv_cityPlatformVars.lv_leftpoints[2] = Point(112.0, 123.29);
    gv_cityPlatformVars.lv_leftpoints[3] = Point(111.32, 96.5);
    gv_cityPlatformVars.lv_leftpoints[4] = Point(100.22, 101.28);
    gv_cityPlatformVars.lv_leftpoints[5] = Point(96.93, 111.73);
    gv_cityPlatformVars.lv_leftpoints[6] = Point(93.68, 118.86);
    if ((PointGetX(UnitGetPosition(lp_unit)) <= 128.0)) {
        lv_thepoint = gv_cityPlatformVars.lv_leftpoints[RandomInt(1, 6)];
    }
    else {
        lv_thepoint = gv_cityPlatformVars.lv_rightpoints[RandomInt(1, 6)];
    }
    autoD283A4B5_var = 1;
    for ( ; autoD283A4B5_var <= autoD283A4B5_ae; autoD283A4B5_var += 1 ) {
        gv_cityPlatformVars.lv_hasunitfalled[autoD283A4B5_var] = false;
        gv_cityPlatformVars.lv_unitisindropship[autoD283A4B5_var] = false;
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[autoD283A4B5_var]), false);
    }
    gv_cityPlatformVars.lv_platformshouldberunning = true;
    gv_cityPlatformVars.lv_safezone = RegionCircle(lv_thepoint, 5.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL01222222222432", c_unitCreateIgnorePlacement, 0, lv_thepoint);
    gv_cityPlatformVars.lv_platform = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 120.0, 120.0, 120.0);
    UnitSetHeight(UnitLastCreated(), 8.2, 0.0);
    libNtve_gf_CreateModelAtPoint("YagdraFireballWeapon", lv_thepoint);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -8.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host SOpPointUpWorld");
    gv_cityPlatformVars.lv_platformfire = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_CityShootMissile, true);
    Wait(6.0, c_timeReal);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), false);
    gf_showhidearena(false);
    gf_Checkifunitsarefalling();
    libNtve_gf_CreateActorAtPoint("CharFallingRock", lv_thepoint);
    gv_cityPlatformVars.lv_fallingdebri[1] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 3.000000");
    libNtve_gf_CreateActorAtPoint("CharAshWeather", Point(101.12, 125.62));
    gv_cityPlatformVars.lv_fallingdebri[2] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor");
    libNtve_gf_CreateActorAtPoint("CharAshWeather", Point(100.88, 97.16));
    gv_cityPlatformVars.lv_fallingdebri[3] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    libNtve_gf_CreateActorAtPoint("CharAshWeather", Point(154.7, 96.74));
    gv_cityPlatformVars.lv_fallingdebri[4] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor");
    libNtve_gf_CreateActorAtPoint("CharAshWeather", Point(155.13, 129.83));
    gv_cityPlatformVars.lv_fallingdebri[5] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    libNtve_gf_CreateActorAtPoint("FlashingLights", lv_thepoint);
    gv_cityPlatformVars.lv_lights = libNtve_gf_ActorLastCreated();
    SoundPlayForPlayer(SoundLink("CityTerrainAway", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    gf_MakeBCflyby();
    gf_MakeBCflyby2();
    gf_MakeBCflyby3();
    gf_FallingMeteors();
    gf_FallingShips();
    GameSetBackground(c_backgroundFixed, "KorhalPlatformSkyParallax", 100.0);
    TerrainShowRegion(RegionEntireMap(), false);
    Wait(6.0, c_timeReal);
    TriggerEnable(gt_CityShootMissile, false);
    gf_Flyindropship(lv_thepoint);
    Wait(6.0, c_timeReal);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(129)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(8)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(10)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(13)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(12)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(131)), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), true);
    gf_showhidearena(true);
    TerrainShowRegion(RegionEntireMap(), true);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    ActorSend(gv_cityPlatformVars.lv_fallingdebri[1], "Destroy Immediate");
    ActorSend(gv_cityPlatformVars.lv_fallingdebri[2], "Destroy Immediate");
    ActorSend(gv_cityPlatformVars.lv_fallingdebri[3], "Destroy Immediate");
    ActorSend(gv_cityPlatformVars.lv_fallingdebri[4], "Destroy Immediate");
    ActorSend(gv_cityPlatformVars.lv_fallingdebri[5], "Destroy Immediate");
    ActorSend(gv_cityPlatformVars.lv_lights, "Destroy Immediate");
    UnitRemove(gv_cityPlatformVars.lv_platform);
    gv_cityPlatformVars.lv_platformshouldberunning = false;
    gv_cityPlatformVars.lv_canunitsbefalling = false;
    return true;
}

trigger auto_gf_showhidearena_Trigger = null;
bool auto_gf_showhidearena_lp_showhide;

void gf_showhidearena (bool lp_showhide) {
    auto_gf_showhidearena_lp_showhide = lp_showhide;

    if (auto_gf_showhidearena_Trigger == null) {
        auto_gf_showhidearena_Trigger = TriggerCreate("auto_gf_showhidearena_TriggerFunc");
    }

    TriggerExecute(auto_gf_showhidearena_Trigger, false, false);
}

bool auto_gf_showhidearena_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showhide = auto_gf_showhidearena_lp_showhide;

    // Automatic Variable Declarations
    // Implementation
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(1444566333)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(783868145)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(728871873)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(1383742038)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(130)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(52)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(247)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(248)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(219)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(218)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(968462071)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(220)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(221)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(237)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(238)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(233)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(234)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(236)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(235)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(232)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(222)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(241)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(242)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(245)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(246)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(240)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(239)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(244)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(243)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_centerIcoLogoUnit), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(129)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(8)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(10)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(13)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(12)), lp_showhide);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(131)), lp_showhide);
    return true;
}

trigger auto_gf_Flyindropship_Trigger = null;
point auto_gf_Flyindropship_lp_point;

void gf_Flyindropship (point lp_point) {
    auto_gf_Flyindropship_lp_point = lp_point;

    if (auto_gf_Flyindropship_Trigger == null) {
        auto_gf_Flyindropship_Trigger = TriggerCreate("auto_gf_Flyindropship_TriggerFunc");
    }

    TriggerExecute(auto_gf_Flyindropship_Trigger, false, false);
}

bool auto_gf_Flyindropship_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_Flyindropship_lp_point;

    // Variable Declarations
    unit lv_dropship;

    // Automatic Variable Declarations
    unitgroup autoD0113FC1_g;
    int autoD0113FC1_u;
    unit autoD0113FC1_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL01222222222433", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(lp_point, 30.0, 180.0));
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    lv_dropship = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    autoD0113FC1_g = UnitGroup(null, c_playerAny, gv_cityPlatformVars.lv_safezone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0113FC1_u = UnitGroupCount(autoD0113FC1_g, c_unitCountAll);
    for (;; autoD0113FC1_u -= 1) {
        autoD0113FC1_var = UnitGroupUnitFromEnd(autoD0113FC1_g, autoD0113FC1_u);
        if (autoD0113FC1_var == null) { break; }
        if ((gv_cityPlatformVars.lv_hasunitfalled[UnitGetOwner(autoD0113FC1_var)] == false) && ((autoD0113FC1_var == gv_Skaters[1]) || (autoD0113FC1_var == gv_Skaters[2]) || (autoD0113FC1_var == gv_Skaters[3]) || (autoD0113FC1_var == gv_Skaters[4]) || (autoD0113FC1_var == gv_Skaters[5]) || (autoD0113FC1_var == gv_Skaters[6]) || (autoD0113FC1_var == gv_Skaters[7]) || (autoD0113FC1_var == gv_Skaters[8]) || (autoD0113FC1_var == gv_Skaters[9]) || (autoD0113FC1_var == gv_Skaters[10]) || (autoD0113FC1_var == gv_Skaters[11]) || (autoD0113FC1_var == gv_Skaters[12]) || (autoD0113FC1_var == gv_Skaters[13]) || (autoD0113FC1_var == gv_Skaters[14]) || (autoD0113FC1_var == gv_Skaters[15]))) {
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(autoD0113FC1_var), false);
            gv_cityPlatformVars.lv_unitisindropship[UnitGetOwner(autoD0113FC1_var)] = true;
            TextTagAttachToUnitPoint(gv_TextTags[UnitGetOwner(autoD0113FC1_var)], lv_dropship, "Ref_Origin", 0, -10);
            SoundPlay(SoundLink("SwarmBunkerLoad", -1), PlayerGroupAll(), 200.0, 0.0);
        }

    }
    Wait(0.5, c_timeGame);
    UnitSetHeight(UnitLastCreated(), 30.0, 6.0);
    gf_Asteriodimpact(lp_point);
    Wait(6.0, c_timeGame);
    UnitRemove(lv_dropship);
    return true;
}

trigger auto_gf_Asteriodimpact_Trigger = null;
point auto_gf_Asteriodimpact_lp_point;

void gf_Asteriodimpact (point lp_point) {
    auto_gf_Asteriodimpact_lp_point = lp_point;

    if (auto_gf_Asteriodimpact_Trigger == null) {
        auto_gf_Asteriodimpact_Trigger = TriggerCreate("auto_gf_Asteriodimpact_TriggerFunc");
    }

    TriggerExecute(auto_gf_Asteriodimpact_Trigger, false, false);
}

bool auto_gf_Asteriodimpact_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_Asteriodimpact_lp_point;

    // Variable Declarations
    actor lv_fire;
    actor lv_explosion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222242", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(lp_point, 50.0, 180.0));
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetFacing(UnitLastCreated(), 0.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 7.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
    Wait(1.3, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    ActorSend(gv_cityPlatformVars.lv_platformfire, "Destroy Immediate");
    UnitRemove(UnitLastCreated());
    ActorSend(libNtve_gf_MainActorofUnit(gv_cityPlatformVars.lv_platform), "HostSiteOpsSet ::Host fallingdeath");
    UnitSetHeight(gv_cityPlatformVars.lv_platform, -30.0, 3.0);
    libNtve_gf_AttachActorToUnit(gv_cityPlatformVars.lv_platform, "FireMedium", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    lv_fire = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HugeDumpTruckExplosion", lp_point);
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -1.000000");
    SoundPlayAtPointForPlayer(SoundLink("CityMeteorImpact", -1), c_maxPlayers, PlayerGroupAll(), lp_point, 5.0, 150.0, 0.0);
    lv_explosion = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    ActorSend(lv_fire, "Destroy Immediate");
    ActorSend(lv_explosion, "Destroy Immediate");
    return true;
}

trigger auto_gf_CityShootmissile_Trigger = null;
unit auto_gf_CityShootmissile_lp_shootingUnit;
fixed auto_gf_CityShootmissile_lp_angle;

void gf_CityShootmissile (unit lp_shootingUnit, fixed lp_angle) {
    auto_gf_CityShootmissile_lp_shootingUnit = lp_shootingUnit;
    auto_gf_CityShootmissile_lp_angle = lp_angle;

    if (auto_gf_CityShootmissile_Trigger == null) {
        auto_gf_CityShootmissile_Trigger = TriggerCreate("auto_gf_CityShootmissile_TriggerFunc");
    }

    TriggerExecute(auto_gf_CityShootmissile_Trigger, false, false);
}

bool auto_gf_CityShootmissile_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shootingUnit = auto_gf_CityShootmissile_lp_shootingUnit;
    fixed lp_angle = auto_gf_CityShootmissile_lp_angle;

    // Variable Declarations
    unit lv_themissile;
    bool lv_hashitsomething;
    fixed lv_speed;
    int lv_enemyteam;
    unitgroup lv_possibleimpacts;

    // Automatic Variable Declarations
    unitgroup auto75F680E8_g;
    int auto75F680E8_u;
    unit auto75F680E8_var;

    // Variable Initialization
    lv_speed = 1.3;
    lv_possibleimpacts = UnitGroupEmpty();

    // Implementation
    if ((gv_cityPlatformVars.lv_platformshouldberunning == true)) {
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], UnitGetOwner(lp_shootingUnit)) == true)) {
            lv_enemyteam = 2;
        }
        else {
            lv_enemyteam = 1;
        }
        SoundPlayAtPointForPlayer(SoundLink("CityShootMissile", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_shootingUnit), 4.0, 100.0, 0.0);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_shootingUnit), c_animNameDefault, "Attack", 0, c_animTimeDefault);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222242", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_shootingUnit), 0.5, lp_angle));
        gf_Shootinganimation(UnitGetPosition(UnitLastCreated()));
        UnitSetFacing(UnitLastCreated(), lp_angle, 0.0);
        lv_themissile = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
        UnitSetHeight(UnitLastCreated(), 8.3, 0.0);
        if ((lv_enemyteam == 1)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_themissile), "SetTintColor {0,128,255 2.000000}");
        }
        else {
            ActorSend(libNtve_gf_MainActorofUnit(lv_themissile), "SetTintColor {255,0,0 2.000000}");
        }
    }

    while ((gv_cityPlatformVars.lv_platformshouldberunning == true) && (lv_hashitsomething == false)) {
        UnitSetPosition(lv_themissile, PointWithOffsetPolar(UnitGetPosition(lv_themissile), lv_speed, lp_angle), true);
        auto75F680E8_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_themissile), 1.3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto75F680E8_u = UnitGroupCount(auto75F680E8_g, c_unitCountAll);
        for (;; auto75F680E8_u -= 1) {
            auto75F680E8_var = UnitGroupUnitFromEnd(auto75F680E8_g, auto75F680E8_u);
            if (auto75F680E8_var == null) { break; }
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[lv_enemyteam], UnitGetOwner(auto75F680E8_var)) == true) && (gv_cityPlatformVars.lv_hasunitfalled[UnitGetOwner(auto75F680E8_var)] == false) && (gv_cityPlatformVars.lv_unitisindropship[UnitGetOwner(auto75F680E8_var)] == false) && ((auto75F680E8_var == gv_Skaters[1]) || (auto75F680E8_var == gv_Skaters[2]) || (auto75F680E8_var == gv_Skaters[3]) || (auto75F680E8_var == gv_Skaters[4]) || (auto75F680E8_var == gv_Skaters[5]) || (auto75F680E8_var == gv_Skaters[6]) || (auto75F680E8_var == gv_Skaters[7]) || (auto75F680E8_var == gv_Skaters[8]) || (auto75F680E8_var == gv_Skaters[9]) || (auto75F680E8_var == gv_Skaters[10]) || (auto75F680E8_var == gv_Skaters[11]) || (auto75F680E8_var == gv_Skaters[12]) || (auto75F680E8_var == gv_Skaters[13]) || (auto75F680E8_var == gv_Skaters[14]) || (auto75F680E8_var == gv_Skaters[15]))) {
                lv_hashitsomething = true;
                gf_Citymissileimpact(auto75F680E8_var, AngleBetweenPoints(UnitGetPosition(lv_themissile), UnitGetPosition(auto75F680E8_var)));
            }

        }
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_themissile) == true)) {
        UnitRemove(lv_themissile);
    }

    return true;
}

trigger auto_gf_Shootinganimation_Trigger = null;
point auto_gf_Shootinganimation_lp_point;

void gf_Shootinganimation (point lp_point) {
    auto_gf_Shootinganimation_lp_point = lp_point;

    if (auto_gf_Shootinganimation_Trigger == null) {
        auto_gf_Shootinganimation_Trigger = TriggerCreate("auto_gf_Shootinganimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_Shootinganimation_Trigger, false, false);
}

bool auto_gf_Shootinganimation_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_Shootinganimation_lp_point;

    // Variable Declarations
    actor[3] lv_actors;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateModelAtPoint("HybridFPlasmaAttackChargeModel", lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    lv_actors[1] = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeGame);
    ActorSend(lv_actors[1], "Destroy Immediate");
    return true;
}

trigger auto_gf_Citymissileimpact_Trigger = null;
unit auto_gf_Citymissileimpact_lp_unit;
fixed auto_gf_Citymissileimpact_lp_angle;

void gf_Citymissileimpact (unit lp_unit, fixed lp_angle) {
    auto_gf_Citymissileimpact_lp_unit = lp_unit;
    auto_gf_Citymissileimpact_lp_angle = lp_angle;

    if (auto_gf_Citymissileimpact_Trigger == null) {
        auto_gf_Citymissileimpact_Trigger = TriggerCreate("auto_gf_Citymissileimpact_TriggerFunc");
    }

    TriggerExecute(auto_gf_Citymissileimpact_Trigger, false, false);
}

bool auto_gf_Citymissileimpact_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Citymissileimpact_lp_unit;
    fixed lp_angle = auto_gf_Citymissileimpact_lp_angle;

    // Variable Declarations
    actor[3] lv_actors;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_cityPlatformVars.lv_platformshouldberunning == true)) {
        SoundPlayAtPointForPlayer(SoundLink("CityMissileImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 4.0, 100.0, 0.0);
        libNtve_gf_CreateModelAtPoint("KerriganWeaponImpact", PointWithOffsetPolar(UnitGetPosition(lp_unit), 0.5, (lp_angle - 180.0)));
        libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 0.500000");
        lv_actors[1] = libNtve_gf_ActorLastCreated();
        gf_ApplyForcePolar(lp_unit, 1.0, lp_angle);
        libNtve_gf_AttachActorToUnit(lp_unit, "FireMedium", "Ref_Origin");
        lv_actors[2] = libNtve_gf_ActorLastCreated();
        Wait(2.0, c_timeGame);
        ActorSend(lv_actors[1], "Destroy Immediate");
        ActorSend(lv_actors[2], "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_CityResetCD_Trigger = null;
int auto_gf_CityResetCD_lp_player;

void gf_CityResetCD (int lp_player) {
    auto_gf_CityResetCD_lp_player = lp_player;

    if (auto_gf_CityResetCD_Trigger == null) {
        auto_gf_CityResetCD_Trigger = TriggerCreate("auto_gf_CityResetCD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CityResetCD_Trigger, false, false);
}

bool auto_gf_CityResetCD_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CityResetCD_lp_player;

    // Automatic Variable Declarations
    // Implementation
    gv_cityPlatformVars.lv_cooldowns[lp_player] = true;
    Wait(1.2, c_timeGame);
    gv_cityPlatformVars.lv_cooldowns[lp_player] = false;
    return true;
}

trigger auto_gf_Fall_Trigger = null;
unit auto_gf_Fall_lp_unit;

void gf_Fall (unit lp_unit) {
    auto_gf_Fall_lp_unit = lp_unit;

    if (auto_gf_Fall_Trigger == null) {
        auto_gf_Fall_Trigger = TriggerCreate("auto_gf_Fall_TriggerFunc");
    }

    TriggerExecute(auto_gf_Fall_Trigger, false, false);
}

bool auto_gf_Fall_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Fall_lp_unit;

    // Variable Declarations
    fixed lv_height;
    fixed lv_increment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_height = 8.0;
    lv_increment = 0.05;

    // Implementation
    if ((gv_cityPlatformVars.lv_platformshouldberunning == true)) {
        gv_cityPlatformVars.lv_hasunitfalled[UnitGetOwner(lp_unit)] = true;
        UnitSetState(lp_unit, c_unitStateIgnoreTerrainZ, true);
        UnitSetState(gv_Sticks[UnitGetOwner(lp_unit)], c_unitStateIgnoreTerrainZ, true);
        UnitSetHeight(lp_unit, lv_height, 0.0);
        UnitSetHeight(gv_Sticks[UnitGetOwner(lp_unit)], lv_height, 0.0);
        UnitAbilityEnable(lp_unit, "move", false);
        UnitAbilityEnable(lp_unit, "Check", false);
    }

    while ((gv_cityPlatformVars.lv_platformshouldberunning == true) && (lv_height > -30.0)) {
        lv_height -= lv_increment;
        lv_increment += 0.1;
        UnitSetHeight(lp_unit, lv_height, 0.0625);
        UnitSetHeight(gv_Sticks[UnitGetOwner(lp_unit)], lv_height, 0.0625);
        Wait(0.0625, c_timeGame);
    }
    if ((gv_cityPlatformVars.lv_platformshouldberunning == true)) {
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lp_unit), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[UnitGetOwner(lp_unit)]), false);
        TextTagShow(gv_TextTags[UnitGetOwner(lp_unit)], PlayerGroupAll(), false);
    }

    return true;
}

trigger auto_gf_Checkifunitsarefalling_Trigger = null;

void gf_Checkifunitsarefalling () {
    if (auto_gf_Checkifunitsarefalling_Trigger == null) {
        auto_gf_Checkifunitsarefalling_Trigger = TriggerCreate("auto_gf_Checkifunitsarefalling_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkifunitsarefalling_Trigger, false, false);
}

bool auto_gf_Checkifunitsarefalling_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5FC3D087_g;
    int auto5FC3D087_u;
    unit auto5FC3D087_var;
    unitgroup auto2406899D_g;
    int auto2406899D_u;
    unit auto2406899D_var;

    // Implementation
    gv_cityPlatformVars.lv_canunitsbefalling = true;
    if ((gv_cityPlatformVars.lv_platformshouldberunning == true) && (gv_cityPlatformVars.lv_canunitsbefalling == true)) {
        auto5FC3D087_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5FC3D087_u = UnitGroupCount(auto5FC3D087_g, c_unitCountAll);
        for (;; auto5FC3D087_u -= 1) {
            auto5FC3D087_var = UnitGroupUnitFromEnd(auto5FC3D087_g, auto5FC3D087_u);
            if (auto5FC3D087_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto5FC3D087_var, gv_cityPlatformVars.lv_safezone) == false) && (gv_cityPlatformVars.lv_hasunitfalled[UnitGetOwner(auto5FC3D087_var)] == false) && (gv_cityPlatformVars.lv_unitisindropship[UnitGetOwner(auto5FC3D087_var)] == false) && ((auto5FC3D087_var == gv_Skaters[1]) || (auto5FC3D087_var == gv_Skaters[2]) || (auto5FC3D087_var == gv_Skaters[3]) || (auto5FC3D087_var == gv_Skaters[4]) || (auto5FC3D087_var == gv_Skaters[5]) || (auto5FC3D087_var == gv_Skaters[6]) || (auto5FC3D087_var == gv_Skaters[7]) || (auto5FC3D087_var == gv_Skaters[8]) || (auto5FC3D087_var == gv_Skaters[9]) || (auto5FC3D087_var == gv_Skaters[10]) || (auto5FC3D087_var == gv_Skaters[11]) || (auto5FC3D087_var == gv_Skaters[12]) || (auto5FC3D087_var == gv_Skaters[13]) || (auto5FC3D087_var == gv_Skaters[14]) || (auto5FC3D087_var == gv_Skaters[15]))) {
                gf_Fall(auto5FC3D087_var);
            }

        }
    }

    while ((gv_cityPlatformVars.lv_platformshouldberunning == true) && (gv_cityPlatformVars.lv_canunitsbefalling == true)) {
        auto2406899D_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2406899D_u = UnitGroupCount(auto2406899D_g, c_unitCountAll);
        for (;; auto2406899D_u -= 1) {
            auto2406899D_var = UnitGroupUnitFromEnd(auto2406899D_g, auto2406899D_u);
            if (auto2406899D_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto2406899D_var, gv_cityPlatformVars.lv_safezone) == false) && (gv_cityPlatformVars.lv_unitisindropship[UnitGetOwner(auto2406899D_var)] == false) && (gv_cityPlatformVars.lv_hasunitfalled[UnitGetOwner(auto2406899D_var)] == false) && ((auto2406899D_var == gv_Skaters[1]) || (auto2406899D_var == gv_Skaters[2]) || (auto2406899D_var == gv_Skaters[3]) || (auto2406899D_var == gv_Skaters[4]) || (auto2406899D_var == gv_Skaters[5]) || (auto2406899D_var == gv_Skaters[6]) || (auto2406899D_var == gv_Skaters[7]) || (auto2406899D_var == gv_Skaters[8]) || (auto2406899D_var == gv_Skaters[9]) || (auto2406899D_var == gv_Skaters[10]) || (auto2406899D_var == gv_Skaters[11]) || (auto2406899D_var == gv_Skaters[12]) || (auto2406899D_var == gv_Skaters[13]) || (auto2406899D_var == gv_Skaters[14]) || (auto2406899D_var == gv_Skaters[15]))) {
                gf_Fall(auto2406899D_var);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_MakeBCflyby_Trigger = null;

void gf_MakeBCflyby () {
    if (auto_gf_MakeBCflyby_Trigger == null) {
        auto_gf_MakeBCflyby_Trigger = TriggerCreate("auto_gf_MakeBCflyby_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeBCflyby_Trigger, false, false);
}

bool auto_gf_MakeBCflyby_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL012222222224", c_unitCreateIgnorePlacement, 0, Point(36.01, 126.74));
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetHeight(UnitLastCreated(), -5.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), Point(218.74, 127.62)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_gf_MakeBCflyby2_Trigger = null;

void gf_MakeBCflyby2 () {
    if (auto_gf_MakeBCflyby2_Trigger == null) {
        auto_gf_MakeBCflyby2_Trigger = TriggerCreate("auto_gf_MakeBCflyby2_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeBCflyby2_Trigger, false, false);
}

bool auto_gf_MakeBCflyby2_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(3.0, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL012222222224", c_unitCreateIgnorePlacement, 0, Point(213.6, 94.24));
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetHeight(UnitLastCreated(), -2.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), Point(36.0, 94.24)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_gf_MakeBCflyby3_Trigger = null;

void gf_MakeBCflyby3 () {
    if (auto_gf_MakeBCflyby3_Trigger == null) {
        auto_gf_MakeBCflyby3_Trigger = TriggerCreate("auto_gf_MakeBCflyby3_TriggerFunc");
    }

    TriggerExecute(auto_gf_MakeBCflyby3_Trigger, false, false);
}

bool auto_gf_MakeBCflyby3_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(6.0, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL012222222224", c_unitCreateIgnorePlacement, 0, Point(213.6, 94.24));
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 10.0, 0.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), Point(36.0, 94.24)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_gf_FallingMeteors_Trigger = null;

void gf_FallingMeteors () {
    if (auto_gf_FallingMeteors_Trigger == null) {
        auto_gf_FallingMeteors_Trigger = TriggerCreate("auto_gf_FallingMeteors_TriggerFunc");
    }

    TriggerExecute(auto_gf_FallingMeteors_Trigger, false, false);
}

bool auto_gf_FallingMeteors_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222242", c_unitCreateIgnorePlacement, 0, Point(85.57, 121.69));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "HostSiteOpsSet ::Host SOpPointDown");
    UnitSetHeight(UnitLastCreated(), 50.0, 0.0);
    UnitSetHeight(UnitLastCreated(), -50.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    Wait(4.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222242", c_unitCreateIgnorePlacement, 0, Point(172.99, 96.93));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "HostSiteOpsSet ::Host SOpPointDown");
    UnitSetHeight(UnitLastCreated(), 50.0, 0.0);
    UnitSetHeight(UnitLastCreated(), -50.0, 2.0);
    Wait(2.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_gf_FallingShips_Trigger = null;

void gf_FallingShips () {
    if (auto_gf_FallingShips_Trigger == null) {
        auto_gf_FallingShips_Trigger = TriggerCreate("auto_gf_FallingShips_TriggerFunc");
    }

    TriggerExecute(auto_gf_FallingShips_Trigger, false, false);
}

bool auto_gf_FallingShips_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(4.0, c_timeGame);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222243", c_unitCreateIgnorePlacement, 0, Point(144.64, 88.46));
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 60.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Death", 0, c_animTimeDefault);
    UnitSetHeight(UnitLastCreated(), -40.0, 3.0);
    Wait(3.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 2.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222243", c_unitCreateIgnorePlacement, 0, Point(117.24, 132.45));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "HostSiteOpsSet ::Host SOpPointDown");
    SoundPlayOnUnitForPlayer(SoundLink("CityShipFlyby", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 10.0, 100.0, 0.0);
    UnitSetHeight(UnitLastCreated(), 60.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Death", 0, c_animTimeDefault);
    UnitSetHeight(UnitLastCreated(), -40.0, 3.0);
    Wait(3.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_gf_GirlPower_Trigger = null;

void gf_GirlPower () {
    if (auto_gf_GirlPower_Trigger == null) {
        auto_gf_GirlPower_Trigger = TriggerCreate("auto_gf_GirlPower_TriggerFunc");
    }

    TriggerExecute(auto_gf_GirlPower_Trigger, false, false);
}

bool auto_gf_GirlPower_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomint;
    actor[16] lv_lights;

    // Automatic Variable Declarations
    playergroup autoE2F50099_g;
    int autoE2F50099_var;
    unitgroup autoE88A778E_g;
    int autoE88A778E_u;
    unit autoE88A778E_var;
    const int auto700A6173_ae = 15;
    int auto700A6173_var;

    // Variable Initialization

    // Implementation
    gv_isdanceactive = true;
    autoE2F50099_g = PlayerGroupActive();
    autoE2F50099_var = -1;
    while (true) {
        autoE2F50099_var = PlayerGroupNextPlayer(autoE2F50099_g, autoE2F50099_var);
        if (autoE2F50099_var < 0) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), autoE2F50099_var) == false)) {
            UnitIssueOrder(gv_Skaters[autoE2F50099_var], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[autoE2F50099_var], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_Skaters[autoE2F50099_var], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitAbilityEnable(gv_Skaters[autoE2F50099_var], "move", false);
            UnitAbilityEnable(gv_Skaters[autoE2F50099_var], "Check", false);
        }

    }
    Wait(1.0, c_timeGame);
    gf_PartyLights();
    gf_GirlpowerSpotlights();
    autoE88A778E_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE88A778E_u = UnitGroupCount(autoE88A778E_g, c_unitCountAll);
    for (;; autoE88A778E_u -= 1) {
        autoE88A778E_var = UnitGroupUnitFromEnd(autoE88A778E_g, autoE88A778E_u);
        if (autoE88A778E_var == null) { break; }
        if (((autoE88A778E_var == gv_Skaters[1]) || (autoE88A778E_var == gv_Skaters[2]) || (autoE88A778E_var == gv_Skaters[3]) || (autoE88A778E_var == gv_Skaters[4]) || (autoE88A778E_var == gv_Skaters[5]) || (autoE88A778E_var == gv_Skaters[6]) || (autoE88A778E_var == gv_Skaters[7]) || (autoE88A778E_var == gv_Skaters[8]) || (autoE88A778E_var == gv_Skaters[9]) || (autoE88A778E_var == gv_Skaters[10]) || (autoE88A778E_var == gv_Skaters[11]) || (autoE88A778E_var == gv_Skaters[12]) || (autoE88A778E_var == gv_Skaters[13]) || (autoE88A778E_var == gv_Skaters[14]) || (autoE88A778E_var == gv_Skaters[15]))) {
            lv_randomint = RandomInt(1, 8);
            libNtve_gf_CreateActorAtPoint("FlashingLights", UnitGetPosition(autoE88A778E_var));
            lv_lights[UnitGetOwner(autoE88A778E_var)] = libNtve_gf_ActorLastCreated();
            if ((lv_randomint == 1)) {
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Marine", 255));
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), "SetScale 2.000000");
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Stand Dance", c_animFlagPlayForever, c_animTimeDefault);
                gf_ReloopDance(3.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                gf_ReloopDance(6.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                gf_ReloopDance(9.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
            }
            else {
                if ((lv_randomint == 2)) {
                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Marauder", 255));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Stand Dance", c_animFlagPlayForever, c_animTimeDefault);
                    gf_ReloopDance(4.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                    gf_ReloopDance(8.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                }
                else {
                    if ((lv_randomint == 3)) {
                        ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Colossus", 255));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Walk A", c_animFlagPlayForever, c_animTimeDefault);
                    }
                    else {
                        if ((lv_randomint == 4)) {
                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Zergling", 255));
                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), "SetScale 2.000000");
                            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Stand Dance", c_animFlagPlayForever, c_animTimeDefault);
                            gf_ReloopDance(5.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                            gf_ReloopDance(10.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                        }
                        else {
                            if ((lv_randomint == 5)) {
                                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Thor", 255));
                                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Stand Dance", c_animFlagPlayForever, c_animTimeDefault);
                                gf_ReloopDance(5.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                                gf_ReloopDance(10.0, gv_Skaters[UnitGetOwner(autoE88A778E_var)]);
                            }
                            else {
                                if ((lv_randomint == 6)) {
                                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Roach", 255));
                                    ActorSend(libNtve_gf_MainActorofUnit(autoE88A778E_var), "HostSiteOpsSet ::Host fallingdeath");
                                    ActorSend(libNtve_gf_MainActorofUnit(autoE88A778E_var), "SetHeight 1.000000");
                                }
                                else {
                                    if ((lv_randomint == 7)) {
                                        ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("Drone", 255));
                                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(autoE88A778E_var), c_animNameDefault, "Attack", c_animFlagPlayForever, c_animTimeDefault);
                                    }
                                    else {
                                        if ((lv_randomint == 8)) {
                                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[UnitGetOwner(autoE88A778E_var)]), libNtve_gf_ModelSwap("SupplyDepot", 255));
                                            gf_Supplydepotdance(autoE88A778E_var);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }
    Wait(14.0, c_timeGame);
    auto700A6173_var = 1;
    for ( ; auto700A6173_var <= auto700A6173_ae; auto700A6173_var += 1 ) {
        if ((lv_lights[auto700A6173_var] != null)) {
            ActorSend(lv_lights[auto700A6173_var], "Destroy Immediate");
        }

    }
    gv_isdanceactive = false;
    gf_Resetlighting();
    return true;
}

trigger auto_gf_PartyLights_Trigger = null;

void gf_PartyLights () {
    if (auto_gf_PartyLights_Trigger == null) {
        auto_gf_PartyLights_Trigger = TriggerCreate("auto_gf_PartyLights_TriggerFunc");
    }

    TriggerExecute(auto_gf_PartyLights_Trigger, false, false);
}

bool auto_gf_PartyLights_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    GameSetLighting("ZeratulBriefing1APortrait", 2.0);
    Wait(2.0, c_timeGame);
    GameSetLighting("AdsiPistol", 2.0);
    Wait(2.0, c_timeGame);
    GameSetLighting("AgriaNight", 2.0);
    Wait(2.0, c_timeGame);
    GameSetLighting("CastanarCampaign", 2.0);
    Wait(2.0, c_timeGame);
    GameSetLighting("AgriaNight", 2.0);
    Wait(2.0, c_timeGame);
    GameSetLighting("ZeratulBriefing1APortrait", 2.0);
    return true;
}

trigger auto_gf_GirlpowerSpotlights_Trigger = null;

void gf_GirlpowerSpotlights () {
    if (auto_gf_GirlpowerSpotlights_Trigger == null) {
        auto_gf_GirlpowerSpotlights_Trigger = TriggerCreate("auto_gf_GirlpowerSpotlights_TriggerFunc");
    }

    TriggerExecute(auto_gf_GirlpowerSpotlights_Trigger, false, false);
}

bool auto_gf_GirlpowerSpotlights_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor[16] lv_spotlights;

    // Automatic Variable Declarations
    playergroup auto9BC420D6_g;
    int auto9BC420D6_var;
    const int auto461C529B_ae = 15;
    int auto461C529B_var;

    // Variable Initialization

    // Implementation
    auto9BC420D6_g = PlayerGroupActive();
    auto9BC420D6_var = -1;
    while (true) {
        auto9BC420D6_var = PlayerGroupNextPlayer(auto9BC420D6_g, auto9BC420D6_var);
        if (auto9BC420D6_var < 0) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), auto9BC420D6_var) == false)) {
            libNtve_gf_CreateActorAtPoint("XelNaga_Caverns_Cave_Light", UnitGetPosition(gv_Skaters[auto9BC420D6_var]));
            lv_spotlights[auto9BC420D6_var] = libNtve_gf_ActorLastCreated();
        }

    }
    Wait(14.0, c_timeGame);
    auto461C529B_var = 1;
    for ( ; auto461C529B_var <= auto461C529B_ae; auto461C529B_var += 1 ) {
        if ((lv_spotlights[auto461C529B_var] != null)) {
            ActorSend(lv_spotlights[auto461C529B_var], "Destroy Immediate");
        }

    }
    return true;
}

trigger auto_gf_ReloopDance_Trigger = null;
fixed auto_gf_ReloopDance_lp_waittime;
unit auto_gf_ReloopDance_lp_unit;

void gf_ReloopDance (fixed lp_waittime, unit lp_unit) {
    auto_gf_ReloopDance_lp_waittime = lp_waittime;
    auto_gf_ReloopDance_lp_unit = lp_unit;

    if (auto_gf_ReloopDance_Trigger == null) {
        auto_gf_ReloopDance_Trigger = TriggerCreate("auto_gf_ReloopDance_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReloopDance_Trigger, false, false);
}

bool auto_gf_ReloopDance_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_waittime = auto_gf_ReloopDance_lp_waittime;
    unit lp_unit = auto_gf_ReloopDance_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_waittime, c_timeGame);
    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Stand Dance", c_animFlagPlayForever, c_animTimeDefault);
    }

    return true;
}

trigger auto_gf_Supplydepotdance_Trigger = null;
unit auto_gf_Supplydepotdance_lp_unit;

void gf_Supplydepotdance (unit lp_unit) {
    auto_gf_Supplydepotdance_lp_unit = lp_unit;

    if (auto_gf_Supplydepotdance_Trigger == null) {
        auto_gf_Supplydepotdance_Trigger = TriggerCreate("auto_gf_Supplydepotdance_TriggerFunc");
    }

    TriggerExecute(auto_gf_Supplydepotdance_Trigger, false, false);
}

bool auto_gf_Supplydepotdance_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Supplydepotdance_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Burrow", c_animFlagPlayForever, c_animTimeDefault);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Unburrow", c_animFlagPlayForever, c_animTimeDefault);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Burrow", c_animFlagPlayForever, c_animTimeDefault);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Unburrow", c_animFlagPlayForever, c_animTimeDefault);
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Burrow", c_animFlagPlayForever, c_animTimeDefault);
        Wait(3.0, c_timeGame);
    }

    return true;
}

trigger auto_gf_ExplodePuck_Trigger = null;

void gf_ExplodePuck () {
    if (auto_gf_ExplodePuck_Trigger == null) {
        auto_gf_ExplodePuck_Trigger = TriggerCreate("auto_gf_ExplodePuck_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExplodePuck_Trigger, false, false);
}

bool auto_gf_ExplodePuck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_explosion;
    actor lv_explosion2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.5, c_timeGame);
    UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_pUCK, 0) * 0.1));
    UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_pUCK, 1) * 0.1));
    Wait(1.0, c_timeGame);
    gv_explosiongoal = UnitGroupClosestToPoint(UnitGroup("Goal02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pUCK));
    gv_explosionpoint = UnitGetPosition(gv_pUCK);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.500000");
    Wait(0.5, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.500000");
    Wait(0.5, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.1, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.1, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.1, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.1, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.1, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.0625, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.0625, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("ExplodePuckBeep", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 5.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ClearTintColor 0.100000");
    Wait(0.0625, c_timeGame);
    libNtve_gf_CreateModelAtPoint("SiegeTankSiegedAttackImpact", UnitGetPosition(gv_pUCK));
    lv_explosion = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 10.000000");
    libNtve_gf_CreateModelAtPoint("KerriganApocalypseExplosion", UnitGetPosition(gv_pUCK));
    lv_explosion2 = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
    libNtve_gf_PlayAnimation(lv_explosion2, c_animNameDefault, "Death", 0, c_animTimeDefault);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), false);
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    gf_ExplodeGoal();
    gf_ExplodeUnits();
    Wait(8.5, c_timeGame);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), true);
    ActorSend(lv_explosion, "Destroy Immediate");
    ActorSend(lv_explosion2, "Destroy Immediate");
    return true;
}

trigger auto_gf_ExplodeGoal_Trigger = null;

void gf_ExplodeGoal () {
    if (auto_gf_ExplodeGoal_Trigger == null) {
        auto_gf_ExplodeGoal_Trigger = TriggerCreate("auto_gf_ExplodeGoal_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExplodeGoal_Trigger, false, false);
}

bool auto_gf_ExplodeGoal_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto324CC7F6_g;
    int auto324CC7F6_var;

    // Implementation
    auto324CC7F6_g = PlayerGroupAll();
    auto324CC7F6_var = -1;
    while (true) {
        auto324CC7F6_var = PlayerGroupNextPlayer(auto324CC7F6_g, auto324CC7F6_var);
        if (auto324CC7F6_var < 0) { break; }
        CameraShakeStart(auto324CC7F6_var, c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 0.5);
    }
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackImpact", -1), PlayerGroupAll(), 200.0, 0.0);
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackImpact", -1), PlayerGroupAll(), 200.0, 0.0);
    UnitSetHeight(gv_explosiongoal, 60.0, 1.5);
    ActorSend(libNtve_gf_MainActorofUnit(gv_explosiongoal), "HostSiteOpsSet ::Host fallingdeath");
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(129)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(8)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(10)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(13)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(12)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(131)), false);
    Wait(2.0, c_timeGame);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_explosiongoal), false);
    Wait(7.0, c_timeGame);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_explosiongoal), true);
    ActorSend(libNtve_gf_MainActorofUnit(gv_explosiongoal), "HostSiteOpsSet ::Host");
    UnitSetHeight(gv_explosiongoal, 0.0, 0.0);
    return true;
}

trigger auto_gf_ExplodeUnits_Trigger = null;

void gf_ExplodeUnits () {
    if (auto_gf_ExplodeUnits_Trigger == null) {
        auto_gf_ExplodeUnits_Trigger = TriggerCreate("auto_gf_ExplodeUnits_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExplodeUnits_Trigger, false, false);
}

bool auto_gf_ExplodeUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitstoexplode;
    actor[16] lv_fires;

    // Automatic Variable Declarations
    unitgroup auto0A229BDE_g;
    int auto0A229BDE_u;
    unit auto0A229BDE_var;
    const int auto37D7120B_ae = 15;
    int auto37D7120B_var;

    // Variable Initialization
    lv_unitstoexplode = UnitGroupEmpty();

    // Implementation
    auto0A229BDE_g = UnitGroup(null, c_playerAny, RegionCircle(gv_explosionpoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A229BDE_u = UnitGroupCount(auto0A229BDE_g, c_unitCountAll);
    for (;; auto0A229BDE_u -= 1) {
        auto0A229BDE_var = UnitGroupUnitFromEnd(auto0A229BDE_g, auto0A229BDE_u);
        if (auto0A229BDE_var == null) { break; }
        if (((auto0A229BDE_var == gv_Skaters[1]) || (auto0A229BDE_var == gv_Skaters[2]) || (auto0A229BDE_var == gv_Skaters[3]) || (auto0A229BDE_var == gv_Skaters[4]) || (auto0A229BDE_var == gv_Skaters[5]) || (auto0A229BDE_var == gv_Skaters[6]) || (auto0A229BDE_var == gv_Skaters[7]) || (auto0A229BDE_var == gv_Skaters[8]) || (auto0A229BDE_var == gv_Skaters[9]) || (auto0A229BDE_var == gv_Skaters[10]) || (auto0A229BDE_var == gv_Skaters[11]) || (auto0A229BDE_var == gv_Skaters[12]) || (auto0A229BDE_var == gv_Skaters[13]) || (auto0A229BDE_var == gv_Skaters[14]) || (auto0A229BDE_var == gv_Skaters[15]))) {
            UnitGroupAdd(lv_unitstoexplode, auto0A229BDE_var);
            SoundPlay(SoundLink("NydusDeathSound12222", -1), PlayerGroupAll(), 60.0, 0.0);
            gf_ApplyForcePolar(auto0A229BDE_var, 5.0, AngleBetweenPoints(gv_explosionpoint, UnitGetPosition(auto0A229BDE_var)));
            libNtve_gf_AttachActorToUnit(auto0A229BDE_var, "FireMedium", "Ref_Head");
            lv_fires[UnitGetOwner(auto0A229BDE_var)] = libNtve_gf_ActorLastCreated();
        }

    }
    Wait(2.0, c_timeGame);
    auto37D7120B_var = 1;
    for ( ; auto37D7120B_var <= auto37D7120B_ae; auto37D7120B_var += 1 ) {
        if ((lv_fires[auto37D7120B_var] != null)) {
            ActorSend(lv_fires[auto37D7120B_var], "Destroy Immediate");
        }

    }
    return true;
}

trigger auto_gf_LingCannonInit_Trigger = null;
unit auto_gf_LingCannonInit_lp_shooter;

void gf_LingCannonInit (unit lp_shooter) {
    auto_gf_LingCannonInit_lp_shooter = lp_shooter;

    if (auto_gf_LingCannonInit_Trigger == null) {
        auto_gf_LingCannonInit_Trigger = TriggerCreate("auto_gf_LingCannonInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_LingCannonInit_Trigger, false, false);
}

bool auto_gf_LingCannonInit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shooter = auto_gf_LingCannonInit_lp_shooter;

    // Variable Declarations
    point lv_spawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_lingcannon.lv_islingcannonrunning = true;
    lv_spawnpoint = PointWithOffsetPolar(UnitGetPosition(lp_shooter), 10.0, AngleBetweenPoints(UnitGetPosition(lp_shooter), PointFromId(112)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp2", c_unitCreateIgnorePlacement, 0, lv_spawnpoint);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap HybridCannon");
    UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
    gv_lingcannon.lv_cannon = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
    gv_lingcannon.lv_theinteractionregion = RegionCircle(UnitGetPosition(UnitLastCreated()), 4.0);
    gv_lingcannon.lv_theMounter = lp_shooter;
    gf_Startcheckingforunit();
    Wait(14.0, c_timeGame);
    gf_Endlingcannon();
    return true;
}

trigger auto_gf_Firealing_Trigger = null;
point auto_gf_Firealing_lp_destinationPoint;

void gf_Firealing (point lp_destinationPoint) {
    auto_gf_Firealing_lp_destinationPoint = lp_destinationPoint;

    if (auto_gf_Firealing_Trigger == null) {
        auto_gf_Firealing_Trigger = TriggerCreate("auto_gf_Firealing_TriggerFunc");
    }

    TriggerExecute(auto_gf_Firealing_Trigger, false, false);
}

bool auto_gf_Firealing_TriggerFunc (bool testConds, bool runActions) {
    point lp_destinationPoint = auto_gf_Firealing_lp_destinationPoint;

    // Variable Declarations
    point lv_startpoint;
    point lv_endpoint;
    point lv_lingspawnpoint;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_startpoint = UnitGetPosition(gv_lingcannon.lv_cannon);
    lv_endpoint = lp_destinationPoint;
    lv_lingspawnpoint = PointWithOffsetPolar(lv_startpoint, 3.0, lv_angle);
    lv_angle = AngleBetweenPoints(lv_startpoint, lv_endpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp2", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(lv_startpoint, 5.5, lv_angle));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "ModelSwap Zergling");
    UnitSetScale(UnitLastCreated(), 225.0, 225.0, 225.0);
    UnitSetHeight(UnitLastCreated(), 3.5, 0.0);
    UnitSetHeight(UnitLastCreated(), 4.5, 0.25);
    UnitSetFacing(UnitLastCreated(), lv_angle, 0.0);
    UnitGroupAdd(gv_lingcannon.lv_lings, UnitLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_lingcannon.lv_cannon), c_animNameDefault, "Stand Work", 0, c_animTimeDefault);
    gf_Moveling(UnitLastCreated(), lv_startpoint, lp_destinationPoint, lv_angle);
    Wait(0.25, c_timeGame);
    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(UnitLastCreated()) == true)) {
        UnitSetHeight(UnitLastCreated(), 0.0, 0.75);
    }

    Wait(0.75, c_timeGame);
    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(UnitLastCreated()) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_lingcannon.lv_cannon), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        UnitSetHeight(UnitLastCreated(), 0.25, 0.15);
    }

    Wait(0.15, c_timeGame);
    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(UnitLastCreated()) == true)) {
        UnitSetHeight(UnitLastCreated(), 0.0, 0.15);
    }

    return true;
}

trigger auto_gf_Moveling_Trigger = null;
unit auto_gf_Moveling_lp_ling;
point auto_gf_Moveling_lp_startPoint;
point auto_gf_Moveling_lp_endPoint;
fixed auto_gf_Moveling_lp_angle;

void gf_Moveling (unit lp_ling, point lp_startPoint, point lp_endPoint, fixed lp_angle) {
    auto_gf_Moveling_lp_ling = lp_ling;
    auto_gf_Moveling_lp_startPoint = lp_startPoint;
    auto_gf_Moveling_lp_endPoint = lp_endPoint;
    auto_gf_Moveling_lp_angle = lp_angle;

    if (auto_gf_Moveling_Trigger == null) {
        auto_gf_Moveling_Trigger = TriggerCreate("auto_gf_Moveling_TriggerFunc");
    }

    TriggerExecute(auto_gf_Moveling_Trigger, false, false);
}

bool auto_gf_Moveling_TriggerFunc (bool testConds, bool runActions) {
    unit lp_ling = auto_gf_Moveling_lp_ling;
    point lp_startPoint = auto_gf_Moveling_lp_startPoint;
    point lp_endPoint = auto_gf_Moveling_lp_endPoint;
    fixed lp_angle = auto_gf_Moveling_lp_angle;

    // Variable Declarations
    fixed lv_speed;
    fixed lv_modifier;
    bool lv_isattached;
    unitgroup lv_possbileattachments;
    unit lv_finalunit;

    // Automatic Variable Declarations
    unitgroup autoFC8FA734_g;
    int autoFC8FA734_u;
    unit autoFC8FA734_var;

    // Variable Initialization
    lv_possbileattachments = UnitGroupEmpty();

    // Implementation
    lv_speed = (DistanceBetweenPoints(lp_startPoint, lp_endPoint) / 15.0);
    lv_modifier = (lv_speed / 50.0);
    while ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_ling) == true) && (lv_speed > 0.0)) {
        UnitSetPosition(lp_ling, PointWithOffsetPolar(UnitGetPosition(lp_ling), lv_speed, lp_angle), true);
        lv_speed -= lv_modifier;
        autoFC8FA734_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_ling), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFC8FA734_u = UnitGroupCount(autoFC8FA734_g, c_unitCountAll);
        for (;; autoFC8FA734_u -= 1) {
            autoFC8FA734_var = UnitGroupUnitFromEnd(autoFC8FA734_g, autoFC8FA734_u);
            if (autoFC8FA734_var == null) { break; }
            if ((autoFC8FA734_var != gv_lingcannon.lv_theMounter) && ((autoFC8FA734_var == gv_Skaters[1]) || (autoFC8FA734_var == gv_Skaters[2]) || (autoFC8FA734_var == gv_Skaters[3]) || (autoFC8FA734_var == gv_Skaters[4]) || (autoFC8FA734_var == gv_Skaters[5]) || (autoFC8FA734_var == gv_Skaters[6]) || (autoFC8FA734_var == gv_Skaters[7]) || (autoFC8FA734_var == gv_Skaters[8]) || (autoFC8FA734_var == gv_Skaters[9]) || (autoFC8FA734_var == gv_Skaters[10]) || (autoFC8FA734_var == gv_Skaters[11]) || (autoFC8FA734_var == gv_Skaters[12]) || (autoFC8FA734_var == gv_Skaters[13]) || (autoFC8FA734_var == gv_Skaters[14]) || (autoFC8FA734_var == gv_Skaters[15])) && (UnitGetCustomValue(autoFC8FA734_var, 17) != 1.0)) {
                UnitGroupAdd(lv_possbileattachments, autoFC8FA734_var);
            }

            if ((UnitGroupCount(lv_possbileattachments, c_unitCountAlive) > 0)) {
                lv_finalunit = UnitGroupClosestToPoint(lv_possbileattachments, UnitGetPosition(lp_ling));
                UnitRemove(lp_ling);
                gf_Playdeathlinganimation(lv_finalunit);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Playdeathlinganimation_Trigger = null;
unit auto_gf_Playdeathlinganimation_lp_unit;

void gf_Playdeathlinganimation (unit lp_unit) {
    auto_gf_Playdeathlinganimation_lp_unit = lp_unit;

    if (auto_gf_Playdeathlinganimation_Trigger == null) {
        auto_gf_Playdeathlinganimation_Trigger = TriggerCreate("auto_gf_Playdeathlinganimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_Playdeathlinganimation_Trigger, false, false);
}

bool auto_gf_Playdeathlinganimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Playdeathlinganimation_lp_unit;

    // Variable Declarations
    actor lv_lingactor;
    actor lv_deathactor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_AttachModelToUnit(lp_unit, "Zergling", "Ref_Head");
        UnitSetCustomValue(lp_unit, 17, 1.0);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.250000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor 255,255,255 255,255,255");
        lv_lingactor = libNtve_gf_ActorLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        SoundPlayForPlayer(SoundLink("NydusDeathSound12222", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
        Wait(0.75, c_timeGame);
    }

    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.75, c_timeGame);
    }

    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.75, c_timeGame);
    }

    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_unit) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_unit), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.75, c_timeGame);
    }

    if ((gv_lingcannon.lv_islingcannonrunning == true) && (UnitIsAlive(lp_unit) == true)) {
        ActorSend(lv_lingactor, "Destroy Immediate");
        SoundPlayForPlayer(SoundLink("NydusDeathSound12222", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitAbilityEnable(lp_unit, "move", false);
        UnitAbilityEnable(lp_unit, "Check", false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(lp_unit), false);
        libNtve_gf_CreateModelAtPoint("ZealotDeath", UnitGetPosition(lp_unit));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
        lv_deathactor = libNtve_gf_ActorLastCreated();
        libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(2.0, c_timeGame);
        ActorSend(lv_deathactor, "Destroy Immediate");
    }

    if ((lv_lingactor != null)) {
        ActorSend(lv_lingactor, "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_Startcheckingforunit_Trigger = null;

void gf_Startcheckingforunit () {
    if (auto_gf_Startcheckingforunit_Trigger == null) {
        auto_gf_Startcheckingforunit_Trigger = TriggerCreate("auto_gf_Startcheckingforunit_TriggerFunc");
    }

    TriggerExecute(auto_gf_Startcheckingforunit_Trigger, false, false);
}

bool auto_gf_Startcheckingforunit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto73F30F51_g;
    int auto73F30F51_u;
    unit auto73F30F51_var;

    // Implementation
    while ((gv_lingcannon.lv_islingcannonrunning == true)) {
        auto73F30F51_g = UnitGroup(null, c_playerAny, gv_lingcannon.lv_theinteractionregion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto73F30F51_u = UnitGroupCount(auto73F30F51_g, c_unitCountAll);
        for (;; auto73F30F51_u -= 1) {
            auto73F30F51_var = UnitGroupUnitFromEnd(auto73F30F51_g, auto73F30F51_u);
            if (auto73F30F51_var == null) { break; }
            if ((auto73F30F51_var != gv_lingcannon.lv_theMounter) && ((auto73F30F51_var == gv_Skaters[1]) || (auto73F30F51_var == gv_Skaters[2]) || (auto73F30F51_var == gv_Skaters[3]) || (auto73F30F51_var == gv_Skaters[4]) || (auto73F30F51_var == gv_Skaters[5]) || (auto73F30F51_var == gv_Skaters[6]) || (auto73F30F51_var == gv_Skaters[7]) || (auto73F30F51_var == gv_Skaters[8]) || (auto73F30F51_var == gv_Skaters[9]) || (auto73F30F51_var == gv_Skaters[10]) || (auto73F30F51_var == gv_Skaters[11]) || (auto73F30F51_var == gv_Skaters[12]) || (auto73F30F51_var == gv_Skaters[13]) || (auto73F30F51_var == gv_Skaters[14]) || (auto73F30F51_var == gv_Skaters[15]))) {
                gf_ApplyForcePolar(auto73F30F51_var, 0.5, AngleBetweenPoints(RegionGetCenter(gv_lingcannon.lv_theinteractionregion), UnitGetPosition(auto73F30F51_var)));
            }

            if ((auto73F30F51_var == gv_lingcannon.lv_theMounter) && (gv_lingcannon.lv_cannonismounted == false)) {
                gv_lingcannon.lv_cannonismounted = true;
                gf_Mountthecannon();
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Mountthecannon_Trigger = null;

void gf_Mountthecannon () {
    if (auto_gf_Mountthecannon_Trigger == null) {
        auto_gf_Mountthecannon_Trigger = TriggerCreate("auto_gf_Mountthecannon_TriggerFunc");
    }

    TriggerExecute(auto_gf_Mountthecannon_Trigger, false, false);
}

bool auto_gf_Mountthecannon_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_lingcannon.lv_theMounter), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Sticks[UnitGetOwner(gv_lingcannon.lv_theMounter)]), false);
    UnitSetPosition(gv_lingcannon.lv_theMounter, UnitGetPosition(gv_lingcannon.lv_cannon), false);
    UnitIssueOrder(gv_lingcannon.lv_theMounter, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_lingcannon.lv_theMounter, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_lingcannon.lv_theMounter, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(gv_lingcannon.lv_theMounter, "move", false);
    UnitAbilityEnable(gv_lingcannon.lv_theMounter, "Check", false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_lingcannon.lv_cannon));
    UnitSetHeight(UnitLastCreated(), 3.0, 0.5);
    gv_lingcannon.lv_mounterdummy = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(gv_lingcannon.lv_mounterdummy, libNtve_gf_TextureSelectByID("T1009Shattered"));
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], UnitGetOwner(gv_lingcannon.lv_theMounter)) == true)) {
        libNtve_gf_SendActorMessageToUnit(gv_lingcannon.lv_mounterdummy, libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_lingcannon.lv_mounterdummy, libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
    }
    TextTagAttachToUnit(gv_TextTags[UnitGetOwner(gv_lingcannon.lv_theMounter)], gv_lingcannon.lv_mounterdummy, 6.0);
    TriggerEnable(gt_TrackLingcannonMouse, true);
    TriggerEnable(gt_FireLingcannon, true);
    SoundPlayForPlayer(SoundLink("SpecialOpsDropship_Load", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    return true;
}

trigger auto_gf_Endlingcannon_Trigger = null;

void gf_Endlingcannon () {
    if (auto_gf_Endlingcannon_Trigger == null) {
        auto_gf_Endlingcannon_Trigger = TriggerCreate("auto_gf_Endlingcannon_TriggerFunc");
    }

    TriggerExecute(auto_gf_Endlingcannon_Trigger, false, false);
}

bool auto_gf_Endlingcannon_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto21847208_g;
    int auto21847208_u;
    unit auto21847208_var;

    // Implementation
    if ((gv_lingcannon.lv_cannon != null)) {
        UnitRemove(gv_lingcannon.lv_cannon);
    }

    if ((gv_lingcannon.lv_mounterdummy != null)) {
        UnitRemove(gv_lingcannon.lv_mounterdummy);
    }

    if ((gv_lingcannon.lv_theMounter != null)) {
        UnitRemove(gv_lingcannon.lv_theMounter);
    }

    TriggerEnable(gt_TrackLingcannonMouse, false);
    TriggerEnable(gt_FireLingcannon, false);
    gv_lingcannon.lv_cannon = null;
    gv_lingcannon.lv_cannonismounted = false;
    gv_lingcannon.lv_islingcannonrunning = false;
    gv_lingcannon.lv_mounterdummy = null;
    gv_lingcannon.lv_theinteractionregion = null;
    gv_lingcannon.lv_theMounter = null;
    auto21847208_g = gv_lingcannon.lv_lings;
    auto21847208_u = UnitGroupCount(auto21847208_g, c_unitCountAll);
    for (;; auto21847208_u -= 1) {
        auto21847208_var = UnitGroupUnitFromEnd(auto21847208_g, auto21847208_u);
        if (auto21847208_var == null) { break; }
        UnitRemove(auto21847208_var);
    }
    return true;
}

trigger auto_gf_Resetlighting_Trigger = null;

void gf_Resetlighting () {
    if (auto_gf_Resetlighting_Trigger == null) {
        auto_gf_Resetlighting_Trigger = TriggerCreate("auto_gf_Resetlighting_TriggerFunc");
    }

    TriggerExecute(auto_gf_Resetlighting_Trigger, false, false);
}

bool auto_gf_Resetlighting_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2B196708_g;
    int auto2B196708_var;
    playergroup autoE2722927_g;
    int autoE2722927_var;
    playergroup auto13259FFB_g;
    int auto13259FFB_var;

    // Implementation
    auto2B196708_g = gv_actualPlayerzonTeam[1];
    auto2B196708_var = -1;
    while (true) {
        auto2B196708_var = PlayerGroupNextPlayer(auto2B196708_g, auto2B196708_var);
        if (auto2B196708_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[5], auto2B196708_var) == true)) {
            PlayerSetLighting(auto2B196708_var, gv_dEFAULT_LIGHTING, 1.0);
        }
        else {
            PlayerSetLighting(auto2B196708_var, "IceWorldNight", 1.0);
        }
    }
    autoE2722927_g = gv_actualPlayerzonTeam[2];
    autoE2722927_var = -1;
    while (true) {
        autoE2722927_var = PlayerGroupNextPlayer(autoE2722927_g, autoE2722927_var);
        if (autoE2722927_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[5], autoE2722927_var) == true)) {
            PlayerSetLighting(autoE2722927_var, gv_dEFAULT_LIGHTING, 1.0);
        }
        else {
            PlayerSetLighting(autoE2722927_var, "IceWorldNight", 1.0);
        }
    }
    auto13259FFB_g = PlayerGroupAll();
    auto13259FFB_var = -1;
    while (true) {
        auto13259FFB_var = PlayerGroupNextPlayer(auto13259FFB_g, auto13259FFB_var);
        if (auto13259FFB_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto13259FFB_var) == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto13259FFB_var) == false)) {
            PlayerSetLighting(auto13259FFB_var, gv_dEFAULT_LIGHTING, 1.0);
        }

    }
    return true;
}

trigger auto_gf_Dance_Trigger = null;

void gf_Dance () {
    if (auto_gf_Dance_Trigger == null) {
        auto_gf_Dance_Trigger = TriggerCreate("auto_gf_Dance_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance_Trigger, false, false);
}

bool auto_gf_Dance_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3E3CA86A_ae = 5;
    const int auto3E3CA86A_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto3E3CA86A_ai >= 0 && lv_i <= auto3E3CA86A_ae) || (auto3E3CA86A_ai < 0 && lv_i >= auto3E3CA86A_ae) ) ; lv_i += auto3E3CA86A_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.65, c_timeGame);
    }
    Wait(0.65, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Dance2_Trigger = null;

void gf_Dance2 () {
    if (auto_gf_Dance2_Trigger == null) {
        auto_gf_Dance2_Trigger = TriggerCreate("auto_gf_Dance2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance2_Trigger, false, false);
}

bool auto_gf_Dance2_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6758DE10_ae = 7;
    const int auto6758DE10_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(1.9, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "ModelSwap DarkZealot");
    lv_i = 1;
    for ( ; ( (auto6758DE10_ai >= 0 && lv_i <= auto6758DE10_ae) || (auto6758DE10_ai < 0 && lv_i >= auto6758DE10_ae) ) ; lv_i += auto6758DE10_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.8, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 02", 0, c_animTimeDefault);
        Wait(0.8, c_timeGame);
    }
    return true;
}

trigger auto_gf_Dance3_Trigger = null;

void gf_Dance3 () {
    if (auto_gf_Dance3_Trigger == null) {
        auto_gf_Dance3_Trigger = TriggerCreate("auto_gf_Dance3_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance3_Trigger, false, false);
}

bool auto_gf_Dance3_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(1.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Dance4_Trigger = null;

void gf_Dance4 () {
    if (auto_gf_Dance4_Trigger == null) {
        auto_gf_Dance4_Trigger = TriggerCreate("auto_gf_Dance4_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance4_Trigger, false, false);
}

bool auto_gf_Dance4_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCB461320_ae = 4;
    const int autoCB461320_ai = 1;
    const int autoD9F34F81_ae = 3;
    const int autoD9F34F81_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    lv_i = 1;
    for ( ; ( (autoCB461320_ai >= 0 && lv_i <= autoCB461320_ae) || (autoCB461320_ai < 0 && lv_i >= autoCB461320_ae) ) ; lv_i += autoCB461320_ai ) {
        UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 6);
        Wait(0.3, c_timeReal);
        UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 7);
        Wait(0.3, c_timeReal);
    }
    lv_i = 1;
    for ( ; ( (autoD9F34F81_ai >= 0 && lv_i <= autoD9F34F81_ae) || (autoD9F34F81_ai < 0 && lv_i >= autoD9F34F81_ae) ) ; lv_i += autoD9F34F81_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.25, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 2.000000 AsTimeScale");
        Wait(0.35, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 2.000000 AsTimeScale");
        Wait(0.35, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Victory,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    return true;
}

trigger auto_gf_Dance5_Trigger = null;

void gf_Dance5 () {
    if (auto_gf_Dance5_Trigger == null) {
        auto_gf_Dance5_Trigger = TriggerCreate("auto_gf_Dance5_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance5_Trigger, false, false);
}

bool auto_gf_Dance5_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), "ModelSwap CivilianFemale");
    Wait(1.0, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.75, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    Wait(0.25, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 0.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 45.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 90.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 135.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 180.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 225.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 270.0));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 1.0, 315.0));
    Wait(3.0, c_timeReal);
    SoundStop(gv_ootersound, true);
    return true;
}

trigger auto_gf_Dance6_Trigger = null;

void gf_Dance6 () {
    if (auto_gf_Dance6_Trigger == null) {
        auto_gf_Dance6_Trigger = TriggerCreate("auto_gf_Dance6_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance6_Trigger, false, false);
}

bool auto_gf_Dance6_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoE3A070C4_ae = 7;
    const int autoE3A070C4_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 6);
    Wait(0.5, c_timeGame);
    UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 7);
    Wait(0.5, c_timeGame);
    UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 6);
    Wait(0.5, c_timeGame);
    UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 7);
    Wait(0.5, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoE3A070C4_ai >= 0 && lv_i <= autoE3A070C4_ae) || (autoE3A070C4_ai < 0 && lv_i >= autoE3A070C4_ae) ) ; lv_i += autoE3A070C4_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        if ((ModI(lv_i, 2) == 1)) {
            UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 6);
        }
        else {
            UnitSetTeamColorIndex(gv_Skaters[gv_ShootingPlayer], 7);
        }
        Wait(0.2, c_timeGame);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
    Wait(0.65, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 00", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Dance7_Trigger = null;

void gf_Dance7 () {
    if (auto_gf_Dance7_Trigger == null) {
        auto_gf_Dance7_Trigger = TriggerCreate("auto_gf_Dance7_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance7_Trigger, false, false);
}

bool auto_gf_Dance7_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoBF9282A9_ae = 4;
    const int autoBF9282A9_ai = 1;
    const int autoD5DAFAD7_ae = 4;
    const int autoD5DAFAD7_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoBF9282A9_ai >= 0 && lv_i <= autoBF9282A9_ae) || (autoBF9282A9_ai < 0 && lv_i >= autoBF9282A9_ae) ) ; lv_i += autoBF9282A9_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.4, c_timeGame);
    }
    Wait(0.65, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    Wait(4.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoD5DAFAD7_ai >= 0 && lv_i <= autoD5DAFAD7_ae) || (autoD5DAFAD7_ai < 0 && lv_i >= autoD5DAFAD7_ae) ) ; lv_i += autoD5DAFAD7_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.4, c_timeGame);
    }
    return true;
}

trigger auto_gf_Dance8_Trigger = null;

void gf_Dance8 () {
    if (auto_gf_Dance8_Trigger == null) {
        auto_gf_Dance8_Trigger = TriggerCreate("auto_gf_Dance8_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance8_Trigger, false, false);
}

bool auto_gf_Dance8_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1A35EA5F_ae = 3;
    const int auto1A35EA5F_ai = 1;
    const int autoC6AC04F0_ae = 4;
    const int autoC6AC04F0_ai = 1;
    const int auto7053F14D_ae = 3;
    const int auto7053F14D_ai = 1;
    const int auto4C54033C_ae = 4;
    const int auto4C54033C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto1A35EA5F_ai >= 0 && lv_i <= auto1A35EA5F_ae) || (auto1A35EA5F_ai < 0 && lv_i >= auto1A35EA5F_ae) ) ; lv_i += auto1A35EA5F_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.65, c_timeGame);
    }
    lv_i = 1;
    for ( ; ( (autoC6AC04F0_ai >= 0 && lv_i <= autoC6AC04F0_ae) || (autoC6AC04F0_ai < 0 && lv_i >= autoC6AC04F0_ae) ) ; lv_i += autoC6AC04F0_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.4, c_timeGame);
    }
    lv_i = 1;
    for ( ; ( (auto7053F14D_ai >= 0 && lv_i <= auto7053F14D_ae) || (auto7053F14D_ai < 0 && lv_i >= auto7053F14D_ae) ) ; lv_i += auto7053F14D_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.65, c_timeGame);
    }
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_i = 1;
    for ( ; ( (auto4C54033C_ai >= 0 && lv_i <= auto4C54033C_ae) || (auto4C54033C_ai < 0 && lv_i >= auto4C54033C_ae) ) ; lv_i += auto4C54033C_ai ) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Attack 01", 0, c_animTimeDefault);
        Wait(0.4, c_timeGame);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Dance9_Trigger = null;

void gf_Dance9 () {
    if (auto_gf_Dance9_Trigger == null) {
        auto_gf_Dance9_Trigger = TriggerCreate("auto_gf_Dance9_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance9_Trigger, false, false);
}

bool auto_gf_Dance9_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Dance10_Trigger = null;

void gf_Dance10 () {
    if (auto_gf_Dance10_Trigger == null) {
        auto_gf_Dance10_Trigger = TriggerCreate("auto_gf_Dance10_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance10_Trigger, false, false);
}

bool auto_gf_Dance10_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor lv_a;
    actor lv_s;

    // Automatic Variable Declarations
    const int auto89DBFA1C_ae = 3;
    const int auto89DBFA1C_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusPoolSparkles", "Ref_Head");
    lv_s = libNtve_gf_ActorLastCreated();
    Wait(2.5, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto89DBFA1C_ai >= 0 && lv_i <= auto89DBFA1C_ae) || (auto89DBFA1C_ai < 0 && lv_i >= auto89DBFA1C_ae) ) ; lv_i += auto89DBFA1C_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.25, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 2.000000 AsTimeScale");
        libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusLightning", "Ref_Head");
        lv_a = libNtve_gf_ActorLastCreated();
        Wait(0.35, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 2.000000 AsTimeScale");
        ActorSend(lv_a, libNtve_gf_Destroy());
        Wait(0.35, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Victory,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    return true;
}

trigger auto_gf_Dance11_Trigger = null;

void gf_Dance11 () {
    if (auto_gf_Dance11_Trigger == null) {
        auto_gf_Dance11_Trigger = TriggerCreate("auto_gf_Dance11_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance11_Trigger, false, false);
}

bool auto_gf_Dance11_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,00 0 -1.000000 -1.000000 0.500000 AsTimeScale");
    return true;
}

trigger auto_gf_Dance12_Trigger = null;

void gf_Dance12 () {
    if (auto_gf_Dance12_Trigger == null) {
        auto_gf_Dance12_Trigger = TriggerCreate("auto_gf_Dance12_TriggerFunc");
    }

    TriggerExecute(auto_gf_Dance12_Trigger, false, false);
}

bool auto_gf_Dance12_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto0EB3968B_ae = 7;
    const int auto0EB3968B_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(1.9, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(4.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto0EB3968B_ai >= 0 && lv_i <= auto0EB3968B_ae) || (auto0EB3968B_ai < 0 && lv_i >= auto0EB3968B_ae) ) ; lv_i += auto0EB3968B_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_gf_Anglefire_Trigger = null;

void gf_Anglefire () {
    if (auto_gf_Anglefire_Trigger == null) {
        auto_gf_Anglefire_Trigger = TriggerCreate("auto_gf_Anglefire_TriggerFunc");
    }

    TriggerExecute(auto_gf_Anglefire_Trigger, false, false);
}

bool auto_gf_Anglefire_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto2AEF6A64_ae = 2;
    const int auto2AEF6A64_ai = 1;
    const int autoD2534E29_ae = 3;
    const int autoD2534E29_ai = 1;
    const int autoBEC2D4CB_ae = 3;
    const int autoBEC2D4CB_ai = 1;

    // Variable Initialization

    // Implementation
    GameSetLighting("AdsiPistol", 8.0);
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusPoolSparkles", "Ref_Head");
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(2.25, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto2AEF6A64_ai >= 0 && lv_i <= auto2AEF6A64_ae) || (auto2AEF6A64_ai < 0 && lv_i >= auto2AEF6A64_ae) ) ; lv_i += auto2AEF6A64_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Flail,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.7, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Victory 03", 0, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoD2534E29_ai >= 0 && lv_i <= autoD2534E29_ae) || (autoD2534E29_ai < 0 && lv_i >= autoD2534E29_ae) ) ; lv_i += autoD2534E29_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
    }
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusLightning", "Ref_Head");
    lv_i = 1;
    for ( ; ( (autoBEC2D4CB_ai >= 0 && lv_i <= autoBEC2D4CB_ae) || (autoBEC2D4CB_ai < 0 && lv_i >= autoBEC2D4CB_ae) ) ; lv_i += autoBEC2D4CB_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    gf_Resetlighting();
    return true;
}

trigger auto_gf_BloodShot_Trigger = null;

void gf_BloodShot () {
    if (auto_gf_BloodShot_Trigger == null) {
        auto_gf_BloodShot_Trigger = TriggerCreate("auto_gf_BloodShot_TriggerFunc");
    }

    TriggerExecute(auto_gf_BloodShot_Trigger, false, false);
}

bool auto_gf_BloodShot_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto647D93EE_ae = 4;
    const int auto647D93EE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto647D93EE_ai >= 0 && lv_i <= auto647D93EE_ae) || (auto647D93EE_ai < 0 && lv_i >= auto647D93EE_ae) ) ; lv_i += auto647D93EE_ai ) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_pUCK));
        Wait(0.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_Guerrila_Trigger = null;

void gf_Guerrila () {
    if (auto_gf_Guerrila_Trigger == null) {
        auto_gf_Guerrila_Trigger = TriggerCreate("auto_gf_Guerrila_TriggerFunc");
    }

    TriggerExecute(auto_gf_Guerrila_Trigger, false, false);
}

bool auto_gf_Guerrila_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_tempplayer;

    // Automatic Variable Declarations
    const int auto94CE94C6_ae = 10;
    const int auto94CE94C6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto94CE94C6_ai >= 0 && lv_i <= auto94CE94C6_ae) || (auto94CE94C6_ai < 0 && lv_i >= auto94CE94C6_ae) ) ; lv_i += auto94CE94C6_ai ) {
        GameSetLighting("AiurFlashback", 1.0);
        Wait(0.5, c_timeGame);
        GameSetLighting(gv_dEFAULT_LIGHTING, 1.0);
        Wait(0.5, c_timeGame);
    }
    gf_Resetlighting();
    return true;
}

trigger auto_gf_Cherry_Trigger = null;

void gf_Cherry () {
    if (auto_gf_Cherry_Trigger == null) {
        auto_gf_Cherry_Trigger = TriggerCreate("auto_gf_Cherry_TriggerFunc");
    }

    TriggerExecute(auto_gf_Cherry_Trigger, false, false);
}

bool auto_gf_Cherry_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_Dance9();
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ModelSwap ShapeCherry");
    Wait(11.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_pUCK, "ModelSwap ShapeHockeyPuck");
    return true;
}

trigger auto_gf_ThemusicDance_Trigger = null;

void gf_ThemusicDance () {
    if (auto_gf_ThemusicDance_Trigger == null) {
        auto_gf_ThemusicDance_Trigger = TriggerCreate("auto_gf_ThemusicDance_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThemusicDance_Trigger, false, false);
}

bool auto_gf_ThemusicDance_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_height;
    actor lv_actor;
    actor lv_actor2;
    actor lv_actor3;
    actor lv_actor4;
    region lv_craterarea;
    unit lv_mothership;
    unitgroup lv_blastedunits;
    actor[16] lv_fires;

    // Automatic Variable Declarations
    unitgroup autoF6B4A05D_g;
    int autoF6B4A05D_u;
    unit autoF6B4A05D_var;
    unitgroup autoA096FDBA_g;
    int autoA096FDBA_u;
    unit autoA096FDBA_var;
    unitgroup autoE3833C03_g;
    int autoE3833C03_u;
    unit autoE3833C03_var;

    // Variable Initialization
    lv_height = 3.75;
    lv_blastedunits = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MusicShip", 0, 0, PointFromId(6));
    lv_mothership = UnitLastCreated();
    UnitBehaviorRemove(UnitLastCreated(), "CloakField", 1);
    UnitBehaviorRemove(UnitLastCreated(), "CloakFieldEffect", 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), gv_Skaters[gv_ShootingPlayer]), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_Skaters[gv_ShootingPlayer], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "move", false);
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "Check", false);
    libNtve_gf_AttachActorToUnit(lv_mothership, "Archon", "Ref_Head");
    SoundPlay(SoundLink("Hybrid_PlasmaBlastCharge", -1), PlayerGroupAll(), 150.0, 0.0);
    Wait(3.5, c_timeGame);
    libNtve_gf_AttachModelToUnit(lv_mothership, "KarassPlasmaSurgeLaunch", "Ref_Head");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.000000");
    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackLaunch", -1), PlayerGroupAll(), 150.0, 0.0);
    libNtve_gf_CreateModelAtPoint("HybridCPlasmaWeapon", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_actor = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actor, "SetScale 5.000000");
    ActorSend(lv_actor, "SetHeight 6.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 5.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 5.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 4.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 4.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 3.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 3.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 2.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 2.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 1.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 1.000000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "SetHeight 0.500000");
    Wait(0.0625, c_timeGame);
    ActorSend(lv_actor, "Destroy");
    Wait(0.0625, c_timeGame);
    libNtve_gf_CreateModelAtPoint("SiegeTankSiegedAttackImpact", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_actor4 = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actor4, "SetScale 3.000000");
    libNtve_gf_CreateModelAtPoint("BlastCratersDoodad", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_actor2 = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actor2, "SetHeight 0.300000");
    lv_craterarea = RegionCircle(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 2.5);
    libNtve_gf_CreateModelAtPoint("FireMedium", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_actor3 = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("FeedbackImpact", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
    lv_actor = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actor, "SetScale 5.000000");
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), false);
    SoundPlay(SoundLink("DestructibleDebris6x6_Explosion", -1), PlayerGroupAll(), 150.0, 0.0);
    autoF6B4A05D_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF6B4A05D_u = UnitGroupCount(autoF6B4A05D_g, c_unitCountAll);
    for (;; autoF6B4A05D_u -= 1) {
        autoF6B4A05D_var = UnitGroupUnitFromEnd(autoF6B4A05D_g, autoF6B4A05D_u);
        if (autoF6B4A05D_var == null) { break; }
        if ((autoF6B4A05D_var != gv_Skaters[gv_ShootingPlayer]) && ((autoF6B4A05D_var == gv_Skaters[1]) || (autoF6B4A05D_var == gv_Skaters[2]) || (autoF6B4A05D_var == gv_Skaters[3]) || (autoF6B4A05D_var == gv_Skaters[4]) || (autoF6B4A05D_var == gv_Skaters[5]) || (autoF6B4A05D_var == gv_Skaters[6]) || (autoF6B4A05D_var == gv_Skaters[7]) || (autoF6B4A05D_var == gv_Skaters[8]) || (autoF6B4A05D_var == gv_Skaters[9]) || (autoF6B4A05D_var == gv_Skaters[10]) || (autoF6B4A05D_var == gv_Skaters[11]) || (autoF6B4A05D_var == gv_Skaters[12]) || (autoF6B4A05D_var == gv_Skaters[13]) || (autoF6B4A05D_var == gv_Skaters[14]) || (autoF6B4A05D_var == gv_Skaters[15]))) {
            gf_ApplyForcePolar(autoF6B4A05D_var, 3.5, AngleBetweenPoints(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), UnitGetPosition(autoF6B4A05D_var)));
            UnitSetHeight(autoF6B4A05D_var, 6.0, 0.7);
            UnitSetHeight(gv_Sticks[UnitGetOwner(autoF6B4A05D_var)], 6.0, 0.7);
            UnitGroupAdd(lv_blastedunits, autoF6B4A05D_var);
            libNtve_gf_AttachActorToUnit(autoF6B4A05D_var, "FireMedium", "Ref_Head");
            lv_fires[UnitGetOwner(autoF6B4A05D_var)] = libNtve_gf_ActorLastCreated();
        }

    }
    Wait(1.0, c_timeGame);
    autoA096FDBA_g = lv_blastedunits;
    autoA096FDBA_u = UnitGroupCount(autoA096FDBA_g, c_unitCountAll);
    for (;; autoA096FDBA_u -= 1) {
        autoA096FDBA_var = UnitGroupUnitFromEnd(autoA096FDBA_g, autoA096FDBA_u);
        if (autoA096FDBA_var == null) { break; }
        UnitSetHeight(autoA096FDBA_var, 0.0, 0.7);
        UnitSetHeight(gv_Sticks[UnitGetOwner(autoA096FDBA_var)], 0.0, 0.7);
    }
    UnitSetHeight(lv_mothership, 80.0, 4.0);
    ActorSend(lv_actor4, "Destroy");
    Wait(2.0, c_timeGame);
    autoE3833C03_g = lv_blastedunits;
    autoE3833C03_u = UnitGroupCount(autoE3833C03_g, c_unitCountAll);
    for (;; autoE3833C03_u -= 1) {
        autoE3833C03_var = UnitGroupUnitFromEnd(autoE3833C03_g, autoE3833C03_u);
        if (autoE3833C03_var == null) { break; }
        ActorSend(lv_fires[UnitGetOwner(autoE3833C03_var)], "Destroy");
    }
    Wait(3.0, c_timeGame);
    UnitRemove(lv_mothership);
    ActorSend(lv_actor, "Destroy");
    ActorSend(lv_actor2, "Destroy");
    ActorSend(lv_actor3, "Destroy");
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "move", false);
    UnitAbilityEnable(gv_Skaters[gv_ShootingPlayer], "Check", false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), true);
    return true;
}

trigger auto_gf_SpinShield_Trigger = null;
unit auto_gf_SpinShield_lp_shield;
int auto_gf_SpinShield_lp_anglemodifier;

void gf_SpinShield (unit lp_shield, int lp_anglemodifier) {
    auto_gf_SpinShield_lp_shield = lp_shield;
    auto_gf_SpinShield_lp_anglemodifier = lp_anglemodifier;

    if (auto_gf_SpinShield_Trigger == null) {
        auto_gf_SpinShield_Trigger = TriggerCreate("auto_gf_SpinShield_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinShield_Trigger, false, false);
}

bool auto_gf_SpinShield_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shield = auto_gf_SpinShield_lp_shield;
    int lp_anglemodifier = auto_gf_SpinShield_lp_anglemodifier;

    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(lp_shield) == true)) {
        UnitSetFacing(lp_shield, lv_angle, 0.0625);
        lv_angle += lp_anglemodifier;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_SpinShield2_Trigger = null;
unit auto_gf_SpinShield2_lp_shield;

void gf_SpinShield2 (unit lp_shield) {
    auto_gf_SpinShield2_lp_shield = lp_shield;

    if (auto_gf_SpinShield2_Trigger == null) {
        auto_gf_SpinShield2_Trigger = TriggerCreate("auto_gf_SpinShield2_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinShield2_Trigger, false, false);
}

bool auto_gf_SpinShield2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shield = auto_gf_SpinShield2_lp_shield;

    // Variable Declarations
    fixed lv_angle;
    int lv_modifier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_modifier = 30;
    while ((UnitIsAlive(lp_shield) == true)) {
        UnitSetFacing(lp_shield, lv_angle, 0.0625);
        lv_angle += lv_modifier;
        lv_modifier -= 2;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_SpinShield3_Trigger = null;
unit auto_gf_SpinShield3_lp_shield;

void gf_SpinShield3 (unit lp_shield) {
    auto_gf_SpinShield3_lp_shield = lp_shield;

    if (auto_gf_SpinShield3_Trigger == null) {
        auto_gf_SpinShield3_Trigger = TriggerCreate("auto_gf_SpinShield3_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinShield3_Trigger, false, false);
}

bool auto_gf_SpinShield3_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shield = auto_gf_SpinShield3_lp_shield;

    // Variable Declarations
    fixed lv_angle;
    fixed lv_modifier;
    fixed lv_rate;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitIssueOrder(lp_shield, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(lp_shield, true);
    gf_SpinShield4();
    lv_modifier = 30;
    while ((lv_modifier > -30.0)) {
        UnitSetFacing(lp_shield, lv_angle, 0.0625);
        UnitSetPosition(lp_shield, PointWithOffsetPolar(UnitGetPosition(lp_shield), (lv_angle / 1000.0), UnitGetFacing(lp_shield)), true);
        lv_angle += lv_modifier;
        lv_modifier -= 0.5;
        Wait(0.0625, c_timeGame);
    }
    while ((lv_angle > -850.0)) {
        UnitSetFacing(lp_shield, lv_angle, 0.0625);
        UnitSetPosition(lp_shield, PointWithOffsetPolar(UnitGetPosition(lp_shield), (lv_angle / (1000+(100*lv_rate))), UnitGetFacing(lp_shield)), true);
        lv_rate *= 1.6;
        lv_angle += lv_modifier;
        lv_modifier += 0.5;
        Wait(0.0625, c_timeGame);
    }
    while ((lv_angle < 0.0)) {
        UnitSetFacing(lp_shield, 160.0, 1.0);
        UnitSetPosition(lp_shield, PointWithOffsetPolar(UnitGetPosition(lp_shield), (lv_angle / (1000+(100*lv_rate))), UnitGetFacing(lp_shield)), true);
        lv_rate *= 0.8;
        lv_angle -= lv_modifier;
        lv_modifier -= 0.4;
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_MakeUnitUncommandable(lp_shield, false);
    UnitIssueOrder(lp_shield, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_shield), 5.0, 160.0)), c_orderQueueReplace);
    return true;
}

trigger auto_gf_SpinShield4_Trigger = null;

void gf_SpinShield4 () {
    if (auto_gf_SpinShield4_Trigger == null) {
        auto_gf_SpinShield4_Trigger = TriggerCreate("auto_gf_SpinShield4_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinShield4_Trigger, false, false);
}

bool auto_gf_SpinShield4_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto4A9567F0_ae = 3;
    const int auto4A9567F0_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,00 0 -1.000000 -1.000000 0.500000 AsTimeScale");
    Wait(1.2, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto4A9567F0_ai >= 0 && lv_i <= auto4A9567F0_ae) || (auto4A9567F0_ai < 0 && lv_i >= auto4A9567F0_ae) ) ; lv_i += auto4A9567F0_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 0.500000 AsTimeScale");
        libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusLightning", "Ref_Head");
        Wait(1.0, c_timeGame);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.65, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,00 0 -1.000000 -1.000000 0.500000 AsTimeScale");
    return true;
}

trigger auto_gf_SpinShield5_Trigger = null;

void gf_SpinShield5 () {
    if (auto_gf_SpinShield5_Trigger == null) {
        auto_gf_SpinShield5_Trigger = TriggerCreate("auto_gf_SpinShield5_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinShield5_Trigger, false, false);
}

bool auto_gf_SpinShield5_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB1175DF7_ae = 4;
    const int autoB1175DF7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoB1175DF7_ai >= 0 && lv_i <= autoB1175DF7_ae) || (autoB1175DF7_ai < 0 && lv_i >= autoB1175DF7_ae) ) ; lv_i += autoB1175DF7_ai ) {
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Flail,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.6, c_timeGame);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(5.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Onegun_Trigger = null;

void gf_Onegun () {
    if (auto_gf_Onegun_Trigger == null) {
        auto_gf_Onegun_Trigger = TriggerCreate("auto_gf_Onegun_TriggerFunc");
    }

    TriggerExecute(auto_gf_Onegun_Trigger, false, false);
}

bool auto_gf_Onegun_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.7, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.7, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    Wait(0.7, c_timeGame);
    return true;
}

trigger auto_gf_Carlito_Trigger = null;

void gf_Carlito () {
    if (auto_gf_Carlito_Trigger == null) {
        auto_gf_Carlito_Trigger = TriggerCreate("auto_gf_Carlito_TriggerFunc");
    }

    TriggerExecute(auto_gf_Carlito_Trigger, false, false);
}

bool auto_gf_Carlito_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
    CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Victory,03 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(5.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(0.55, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Victory,03 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), "10");
    return true;
}

trigger auto_gf_Death_Trigger = null;

void gf_Death () {
    if (auto_gf_Death_Trigger == null) {
        auto_gf_Death_Trigger = TriggerCreate("auto_gf_Death_TriggerFunc");
    }

    TriggerExecute(auto_gf_Death_Trigger, false, false);
}

bool auto_gf_Death_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(3.5, c_timeGame);
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "VolatileDeathExplosion", "Ref_Head");
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "ModelSwap SpaceDiablo");
    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[gv_ShootingPlayer]), "SetScale 3.000000");
    SoundPlay(SoundLink("DiabloSmall_voxRoar", -1), gv_goalSoundGroup, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Stand,02 0 -1.000000 -1.000000 0.330000 AsTimeScale");
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "FireMedium", "Ref_Head");
    lv_a = libNtve_gf_ActorLastCreated();
    Wait(3.5, c_timeGame);
    GameSetLighting("AdsiPistol", 2.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Stand,02 0 -1.000000 -1.000000 0.330000 AsTimeScale");
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "ZerusLightning", "Ref_Head");
    Wait(4.8, c_timeGame);
    ActorSend(lv_a, libNtve_gf_Destroy());
    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[gv_ShootingPlayer]), "SetScale 2.000000");
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "MindSplatterExplosion", "Ref_Head");
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "ModelSwap HybridZergBlackDeath");
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Birth,01 0 -1.000000 -1.000000 0.500000 AsTimeScale");
    Wait(5.0, c_timeGame);
    gf_Resetlighting();
    return true;
}

trigger auto_gf_Daggius_Trigger = null;

void gf_Daggius () {
    if (auto_gf_Daggius_Trigger == null) {
        auto_gf_Daggius_Trigger = TriggerCreate("auto_gf_Daggius_TriggerFunc");
    }

    TriggerExecute(auto_gf_Daggius_Trigger, false, false);
}

bool auto_gf_Daggius_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.25, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.25, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.25, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.4, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.25, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 2.000000 AsTimeScale");
    Wait(0.35, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(0.25, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,01 0 -1.000000 -1.000000 1.500000 AsTimeScale");
    Wait(1.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[gv_ShootingPlayer], "AnimPlay BSD Dance,02 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    Wait(3.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 02", 0, c_animTimeDefault);
    return true;
}

trigger auto_gf_Sheep_Trigger = null;
unit auto_gf_Sheep_lp_unit;

void gf_Sheep (unit lp_unit) {
    auto_gf_Sheep_lp_unit = lp_unit;

    if (auto_gf_Sheep_Trigger == null) {
        auto_gf_Sheep_Trigger = TriggerCreate("auto_gf_Sheep_TriggerFunc");
    }

    TriggerExecute(auto_gf_Sheep_Trigger, false, false);
}

bool auto_gf_Sheep_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Sheep_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "ModelSwap Sheep");
    return true;
}

trigger auto_gf_Watermelons_Trigger = null;
unit auto_gf_Watermelons_lp_unit;

void gf_Watermelons (unit lp_unit) {
    auto_gf_Watermelons_lp_unit = lp_unit;

    if (auto_gf_Watermelons_Trigger == null) {
        auto_gf_Watermelons_Trigger = TriggerCreate("auto_gf_Watermelons_TriggerFunc");
    }

    TriggerExecute(auto_gf_Watermelons_Trigger, false, false);
}

bool auto_gf_Watermelons_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Watermelons_lp_unit;

    // Variable Declarations
    int lv_enumint;
    int lv_randomint;

    // Automatic Variable Declarations
    const int auto53DA2B8C_ae = 15;
    const int auto53DA2B8C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_enumint = 1;
    for ( ; ( (auto53DA2B8C_ai >= 0 && lv_enumint <= auto53DA2B8C_ae) || (auto53DA2B8C_ai < 0 && lv_enumint >= auto53DA2B8C_ae) ) ; lv_enumint += auto53DA2B8C_ai ) {
        if ((gv_Skaters[lv_enumint] != lp_unit) && (UnitIsAlive(gv_Skaters[lv_enumint]) == true)) {
            lv_randomint = RandomInt(1, 2);
            if ((lv_randomint == 1)) {
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lv_enumint]), "ModelSwap ShapeWatermelon");
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lv_enumint]), "ModelSwap ShapeWatermelonSmall");
            }
            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[lv_enumint]), "SetScale 3.000000");
        }

    }
    return true;
}

trigger auto_gf_TKTIger_Trigger = null;

void gf_TKTIger () {
    if (auto_gf_TKTIger_Trigger == null) {
        auto_gf_TKTIger_Trigger = TriggerCreate("auto_gf_TKTIger_TriggerFunc");
    }

    TriggerExecute(auto_gf_TKTIger_Trigger, false, false);
}

bool auto_gf_TKTIger_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    point lv_temppoint;
    fixed lv_tempfacing;
    fixed[7] lv_customvalues;
    actor lv_tempzealotactor;
    sound lv_bgsound;

    // Automatic Variable Declarations
    playergroup auto53EA5C27_g;
    int auto53EA5C27_var;
    playergroup auto643D8603_g;
    int auto643D8603_var;

    // Variable Initialization

    // Implementation
    gv_tigerCelebration.lv_isrunning = true;
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true)) {
        lv_team = 1;
        gv_tigerCelebration.lv_tigerTeam = 1;
    }
    else {
        lv_team = 2;
        gv_tigerCelebration.lv_tigerTeam = 2;
    }
    if ((lv_team == 1)) {
        auto53EA5C27_g = PlayerGroupSingle(gv_ShootingPlayer);
        auto53EA5C27_var = -1;
        while (true) {
            auto53EA5C27_var = PlayerGroupNextPlayer(auto53EA5C27_g, auto53EA5C27_var);
            if (auto53EA5C27_var < 0) { break; }
            if ((gv_Players[2] != auto53EA5C27_var)) {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto53EA5C27_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto53EA5C27_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 6);
                UnitRemove(gv_Skaters[auto53EA5C27_var]);
                UnitCreate(1, "TarsonisTiger", c_unitCreateIgnorePlacement, auto53EA5C27_var, lv_temppoint, lv_tempfacing);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto53EA5C27_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto53EA5C27_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto53EA5C27_var], "Zealot", "Ref_Hardpoint");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {TarsonisTigerFacing TarsonisTigerOffset}");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto53EA5C27_var], gv_Skaters[auto53EA5C27_var], 5.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[1] == true) && (gv_jerseyVars.lv_team1TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
            else {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto53EA5C27_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto53EA5C27_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto53EA5C27_var], 6);
                UnitRemove(gv_Skaters[auto53EA5C27_var]);
                UnitCreate(1, "TarsonisMonster", c_unitCreateIgnorePlacement, auto53EA5C27_var, lv_temppoint, lv_tempfacing);
                gf_Preservegoaliesize(UnitLastCreated());
                UnitAbilityEnable(gv_Skaters[auto53EA5C27_var], "NewForceField", false);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto53EA5C27_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto53EA5C27_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto53EA5C27_var], "Immortal", "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host TarsonisMonsterOffset");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                ActorSend(libNtve_gf_ActorLastCreated(), "TextureSelectById T2002Devil");
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(6), libNtve_gf_ConvertPlayerColorToColor(6)));
                TextTagAttachToUnit(gv_TextTags[auto53EA5C27_var], gv_Skaters[auto53EA5C27_var], 14.0);
                TextTagSetText(gv_TextTags[auto53EA5C27_var], StringExternal("Param/Value/7476EDFA"));
            }
        }
    }

    if ((lv_team == 2)) {
        auto643D8603_g = gv_actualPlayerzonTeam[2];
        auto643D8603_var = -1;
        while (true) {
            auto643D8603_var = PlayerGroupNextPlayer(auto643D8603_g, auto643D8603_var);
            if (auto643D8603_var < 0) { break; }
            if ((gv_Players[6] != auto643D8603_var)) {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto643D8603_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto643D8603_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 6);
                UnitRemove(gv_Skaters[auto643D8603_var]);
                UnitCreate(1, "TarsonisTiger", c_unitCreateIgnorePlacement, auto643D8603_var, lv_temppoint, lv_tempfacing);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto643D8603_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto643D8603_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto643D8603_var], "Zealot", "Ref_Hardpoint");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {TarsonisTigerFacing TarsonisTigerOffset}");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                TextTagAttachToUnit(gv_TextTags[auto643D8603_var], gv_Skaters[auto643D8603_var], 5.0);
                if ((gv_jerseyVars.lv_jerseysareonforteam[2] == true) && (gv_jerseyVars.lv_team2TeamNumber == 8)) {
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 2.0, 0.0));
                    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_TextureSelectByID("Jersey8Zealot"));
                }

            }
            else {
                lv_temppoint = UnitGetPosition(gv_Skaters[auto643D8603_var]);
                lv_tempfacing = UnitGetFacing(gv_Skaters[auto643D8603_var]);
                lv_customvalues[0] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 0);
                lv_customvalues[1] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 1);
                lv_customvalues[2] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 2);
                lv_customvalues[3] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 3);
                lv_customvalues[4] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 4);
                lv_customvalues[5] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 5);
                lv_customvalues[6] = UnitGetCustomValue(gv_Skaters[auto643D8603_var], 6);
                UnitRemove(gv_Skaters[auto643D8603_var]);
                UnitCreate(1, "TarsonisMonster", c_unitCreateIgnorePlacement, auto643D8603_var, lv_temppoint, lv_tempfacing);
                gf_Preservegoaliesize(UnitLastCreated());
                UnitAbilityEnable(gv_Skaters[auto643D8603_var], "NewForceField", false);
                libNtve_gf_SetAnimationTimeScale(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, 0.25);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 3.0);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetScale 4.000000");
                UnitSetCustomValue(UnitLastCreated(), 0, lv_customvalues[0]);
                UnitSetCustomValue(UnitLastCreated(), 1, lv_customvalues[1]);
                UnitSetCustomValue(UnitLastCreated(), 2, lv_customvalues[2]);
                UnitSetCustomValue(UnitLastCreated(), 3, lv_customvalues[3]);
                UnitSetCustomValue(UnitLastCreated(), 4, lv_customvalues[4]);
                UnitSetCustomValue(UnitLastCreated(), 5, lv_customvalues[5]);
                UnitSetCustomValue(UnitLastCreated(), 6, lv_customvalues[6]);
                gv_Skaters[auto643D8603_var] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto643D8603_var, true);
                libNtve_gf_AttachModelToUnit(gv_Skaters[auto643D8603_var], "Immortal", "Ref_Center");
                ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host TarsonisMonsterOffset");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
                ActorSend(libNtve_gf_ActorLastCreated(), "TextureSelectById T2002Devil");
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(6), libNtve_gf_ConvertPlayerColorToColor(6)));
                TextTagAttachToUnit(gv_TextTags[auto643D8603_var], gv_Skaters[auto643D8603_var], 14.0);
                TextTagSetText(gv_TextTags[auto643D8603_var], StringExternal("Param/Value/B3B520B5"));
            }
        }
    }

    TriggerEnable(gt_TigerAttack, true);
    SoundPlayForPlayer(SoundLink("TigerBackground", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_bgsound = SoundLastPlayed();
    Wait(15.0, c_timeGame);
    SoundStop(lv_bgsound, true);
    gv_tigerCelebration.lv_isrunning = false;
    TriggerEnable(gt_TigerAttack, false);
    return true;
}

trigger auto_gf_GoldenStickInit_Trigger = null;

void gf_GoldenStickInit () {
    if (auto_gf_GoldenStickInit_Trigger == null) {
        auto_gf_GoldenStickInit_Trigger = TriggerCreate("auto_gf_GoldenStickInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_GoldenStickInit_Trigger, false, false);
}

bool auto_gf_GoldenStickInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5DD949C0_g;
    int auto5DD949C0_var;

    // Implementation
    auto5DD949C0_g = PlayerGroupActive();
    auto5DD949C0_var = -1;
    while (true) {
        auto5DD949C0_var = PlayerGroupNextPlayer(auto5DD949C0_g, auto5DD949C0_var);
        if (auto5DD949C0_var < 0) { break; }
        if ((PlayerHandle(auto5DD949C0_var) == gv_hANDLE_LiNGKing)) {
            gv_goldenStickEnabled[auto5DD949C0_var] = true;
        }

    }
    return true;
}

void gf_AssignGoldenStick () {
    // Automatic Variable Declarations
    playergroup auto270423E4_g;
    int auto270423E4_var;

    // Implementation
    auto270423E4_g = PlayerGroupActive();
    auto270423E4_var = -1;
    while (true) {
        auto270423E4_var = PlayerGroupNextPlayer(auto270423E4_g, auto270423E4_var);
        if (auto270423E4_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[auto270423E4_var]) == true) && (gv_goldenStickEnabled[auto270423E4_var] == true) && (PlayerStatus(auto270423E4_var) == c_playerStatusActive)) {
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto270423E4_var], "ClearTintColor");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[auto270423E4_var]), "ModelSwap ZHStick");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[auto270423E4_var]), libNtve_gf_TextureSelectByID("Stick19Golden"));
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[auto270423E4_var]), libNtve_gf_TextureSelectByID("Stick19GoldenNormal"));
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[auto270423E4_var]), libNtve_gf_SetTintColor(Color(100.00, 93.33, 10.20), 1.5, 0.0));
        }

    }
}

trigger auto_gf_this_map_is_not_supposed_to_be_shared_Trigger = null;
int auto_gf_this_map_is_not_supposed_to_be_shared_lp_player;

void gf_this_map_is_not_supposed_to_be_shared (int lp_player) {
    auto_gf_this_map_is_not_supposed_to_be_shared_lp_player = lp_player;

    if (auto_gf_this_map_is_not_supposed_to_be_shared_Trigger == null) {
        auto_gf_this_map_is_not_supposed_to_be_shared_Trigger = TriggerCreate("auto_gf_this_map_is_not_supposed_to_be_shared_TriggerFunc");
    }

    TriggerExecute(auto_gf_this_map_is_not_supposed_to_be_shared_Trigger, false, false);
}

bool auto_gf_this_map_is_not_supposed_to_be_shared_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_this_map_is_not_supposed_to_be_shared_lp_player;

    // Variable Declarations
    fixed lv_red;
    fixed lv_green;
    fixed lv_blue;
    int lv_i;

    // Automatic Variable Declarations
    const int auto855212BB_ae = 100;
    const int auto855212BB_ai = 1;
    const int autoE87C8349_ae = 100;
    const int autoE87C8349_ai = 1;
    const int autoA7D40A5D_ae = 100;
    const int autoA7D40A5D_ai = 1;
    const int auto1F5DB4BC_ae = 100;
    const int auto1F5DB4BC_ai = 1;
    const int autoC339C1CB_ae = 100;
    const int autoC339C1CB_ai = 1;
    const int autoA20E30E2_ae = 100;
    const int autoA20E30E2_ai = 1;

    // Variable Initialization
    lv_red = 100.0;

    // Implementation
    libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
    while (true) {
        lv_i = 1;
        for ( ; ( (auto855212BB_ai >= 0 && lv_i <= auto855212BB_ae) || (auto855212BB_ai < 0 && lv_i >= auto855212BB_ae) ) ; lv_i += auto855212BB_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_green += 1.0;
        }
        lv_i = 1;
        for ( ; ( (autoE87C8349_ai >= 0 && lv_i <= autoE87C8349_ae) || (autoE87C8349_ai < 0 && lv_i >= autoE87C8349_ae) ) ; lv_i += autoE87C8349_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_red -= 1.0;
        }
        lv_i = 1;
        for ( ; ( (autoA7D40A5D_ai >= 0 && lv_i <= autoA7D40A5D_ae) || (autoA7D40A5D_ai < 0 && lv_i >= autoA7D40A5D_ae) ) ; lv_i += autoA7D40A5D_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_blue += 1.0;
        }
        lv_i = 1;
        for ( ; ( (auto1F5DB4BC_ai >= 0 && lv_i <= auto1F5DB4BC_ae) || (auto1F5DB4BC_ai < 0 && lv_i >= auto1F5DB4BC_ae) ) ; lv_i += auto1F5DB4BC_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_green -= 1.0;
        }
        lv_i = 1;
        for ( ; ( (autoC339C1CB_ai >= 0 && lv_i <= autoC339C1CB_ae) || (autoC339C1CB_ai < 0 && lv_i >= autoC339C1CB_ae) ) ; lv_i += autoC339C1CB_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_red += 1.0;
        }
        lv_i = 1;
        for ( ; ( (autoA20E30E2_ai >= 0 && lv_i <= autoA20E30E2_ae) || (autoA20E30E2_ai < 0 && lv_i >= autoA20E30E2_ae) ) ; lv_i += autoA20E30E2_ai ) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[lp_player], libNtve_gf_SetTeamColor(Color(lv_red, lv_green, lv_blue), Color(lv_red, lv_green, lv_blue)));
            Wait(0.0625, c_timeGame);
            lv_blue -= 1.0;
        }
    }
    return true;
}

trigger auto_gf_ApplyNinja_Trigger = null;
int auto_gf_ApplyNinja_lp_player;
unit auto_gf_ApplyNinja_lp_zealot;
unit auto_gf_ApplyNinja_lp_stick;

void gf_ApplyNinja (int lp_player, unit lp_zealot, unit lp_stick) {
    auto_gf_ApplyNinja_lp_player = lp_player;
    auto_gf_ApplyNinja_lp_zealot = lp_zealot;
    auto_gf_ApplyNinja_lp_stick = lp_stick;

    if (auto_gf_ApplyNinja_Trigger == null) {
        auto_gf_ApplyNinja_Trigger = TriggerCreate("auto_gf_ApplyNinja_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyNinja_Trigger, false, false);
}

bool auto_gf_ApplyNinja_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ApplyNinja_lp_player;
    unit lp_zealot = auto_gf_ApplyNinja_lp_zealot;
    unit lp_stick = auto_gf_ApplyNinja_lp_stick;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_Players[2] != lp_player) && (gv_Players[6] != lp_player)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_zealot), "ModelSwap FinalZealot");
        ActorSend(libNtve_gf_MainActorofUnit(lp_stick), "ModelSwap ZHStick");
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_player) == true)) {
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_TextureSelectByID("ZealotSkin15"));
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_TextureSelectByID("ZealotSkinNoSpecular"));
            libNtve_gf_AttachModelToUnit(lp_zealot, "Helmet15Red", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
            libNtve_gf_AttachModelToUnit(lp_zealot, "Jersey15RedAccessory", "Ref_Hardpoint");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
            libNtve_gf_AttachModelToUnit(lp_zealot, "Skate15Red", "Ref_Target 01");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.800000");
            libNtve_gf_AttachModelToUnit(lp_zealot, "Skate15Red", "Ref_Target 02");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.800000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_stick), libNtve_gf_TextureSelectByID("Stick15Red"));
        }
        else {
            libNtve_gf_AttachModelToUnit(lp_zealot, "Helmet15Blue", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_SetTeamColor(Color(0.00, 50.20, 100.00), Color(0.00, 50.20, 100.00)));
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_TextureSelectByID("ZealotSkin15"));
            libNtve_gf_SendActorMessageToUnit(lp_zealot, libNtve_gf_TextureSelectByID("ZealotSkinNoSpecular"));
            libNtve_gf_AttachModelToUnit(lp_zealot, "Jersey15BlueAccessory", "Ref_Hardpoint");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
            libNtve_gf_AttachModelToUnit(lp_zealot, "Skate15Blue", "Ref_Target 01");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.800000");
            libNtve_gf_AttachModelToUnit(lp_zealot, "Skate15Blue", "Ref_Target 02");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.800000");
            ActorSend(libNtve_gf_MainActorofUnit(lp_stick), libNtve_gf_TextureSelectByID("Stick15Blue"));
        }
    }

    return true;
}

trigger auto_gf_AssignNinjaSkin_Trigger = null;

void gf_AssignNinjaSkin () {
    if (auto_gf_AssignNinjaSkin_Trigger == null) {
        auto_gf_AssignNinjaSkin_Trigger = TriggerCreate("auto_gf_AssignNinjaSkin_TriggerFunc");
    }

    TriggerExecute(auto_gf_AssignNinjaSkin_Trigger, false, false);
}

bool auto_gf_AssignNinjaSkin_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto110B92A1_g;
    int auto110B92A1_var;

    // Implementation
    auto110B92A1_g = PlayerGroupActive();
    auto110B92A1_var = -1;
    while (true) {
        auto110B92A1_var = PlayerGroupNextPlayer(auto110B92A1_g, auto110B92A1_var);
        if (auto110B92A1_var < 0) { break; }
        if ((PlayerHandle(auto110B92A1_var) == gv_hANDLE_themusic) && (gv_ninja.lv_active == true) && (UnitIsAlive(gv_Skaters[auto110B92A1_var]) == true) && (GameAttributeGameValue("2") != "0002")) {
            gf_ApplyNinja(auto110B92A1_var, gv_Skaters[auto110B92A1_var], gv_Sticks[auto110B92A1_var]);
        }

    }
    return true;
}

trigger auto_gf_ApplyMuerteHatSingle_Trigger = null;
int auto_gf_ApplyMuerteHatSingle_lp_player;

void gf_ApplyMuerteHatSingle (int lp_player) {
    auto_gf_ApplyMuerteHatSingle_lp_player = lp_player;

    if (auto_gf_ApplyMuerteHatSingle_Trigger == null) {
        auto_gf_ApplyMuerteHatSingle_Trigger = TriggerCreate("auto_gf_ApplyMuerteHatSingle_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyMuerteHatSingle_Trigger, false, false);
}

bool auto_gf_ApplyMuerteHatSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ApplyMuerteHatSingle_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_Skaters[lp_player]) == true) && (gv_muerteHatEnabled[lp_player] == true) && (PlayerStatus(lp_player) == c_playerStatusActive)) {
        if ((gv_Players[2] != lp_player) && (gv_Players[6] != lp_player)) {
            libNtve_gf_AttachModelToUnit(gv_Skaters[lp_player], "MuerteHat", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000");
        }
        else {
            if (((gv_Players[2] != lp_player) || (gv_Players[6] != lp_player))) {
                libNtve_gf_AttachModelToUnit(gv_Skaters[lp_player], "MuerteHat", "Ref_Head");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.900000");
            }

        }
    }

    return true;
}

trigger auto_gf_AssignMuerteHattoAll_Trigger = null;

void gf_AssignMuerteHattoAll () {
    if (auto_gf_AssignMuerteHattoAll_Trigger == null) {
        auto_gf_AssignMuerteHattoAll_Trigger = TriggerCreate("auto_gf_AssignMuerteHattoAll_TriggerFunc");
    }

    TriggerExecute(auto_gf_AssignMuerteHattoAll_Trigger, false, false);
}

bool auto_gf_AssignMuerteHattoAll_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA8B4A43A_g;
    int autoA8B4A43A_var;

    // Implementation
    autoA8B4A43A_g = PlayerGroupActive();
    autoA8B4A43A_var = -1;
    while (true) {
        autoA8B4A43A_var = PlayerGroupNextPlayer(autoA8B4A43A_g, autoA8B4A43A_var);
        if (autoA8B4A43A_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[autoA8B4A43A_var]) == true) && (gv_muerteHatEnabled[autoA8B4A43A_var] == true) && (PlayerStatus(autoA8B4A43A_var) == c_playerStatusActive)) {
            if ((gv_Players[2] != autoA8B4A43A_var) && (gv_Players[6] != autoA8B4A43A_var)) {
                libNtve_gf_AttachModelToUnit(gv_Skaters[autoA8B4A43A_var], "MuerteHat", "Ref_Head");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000");
            }
            else {
                if (((gv_Players[2] != autoA8B4A43A_var) || (gv_Players[6] != autoA8B4A43A_var))) {
                    libNtve_gf_AttachModelToUnit(gv_Skaters[autoA8B4A43A_var], "MuerteHat", "Ref_Head");
                    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.900000");
                }

            }
        }

    }
    return true;
}

trigger auto_gf_DragonStickInit_Trigger = null;

void gf_DragonStickInit () {
    if (auto_gf_DragonStickInit_Trigger == null) {
        auto_gf_DragonStickInit_Trigger = TriggerCreate("auto_gf_DragonStickInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_DragonStickInit_Trigger, false, false);
}

bool auto_gf_DragonStickInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0A68A06A_g;
    int auto0A68A06A_var;

    // Implementation
    auto0A68A06A_g = PlayerGroupActive();
    auto0A68A06A_var = -1;
    while (true) {
        auto0A68A06A_var = PlayerGroupNextPlayer(auto0A68A06A_g, auto0A68A06A_var);
        if (auto0A68A06A_var < 0) { break; }
        if (((PlayerHandle(auto0A68A06A_var) == gv_hANDLE_THREE) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_TWODEUCE) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_MEEPOMART) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SLIDE) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SLIDEEU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_MALDURASEU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_MALDU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SNAKEEU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SNAKE) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SHARP) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_SHARPEU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_NEXEU) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_NEX) || (PlayerHandle(auto0A68A06A_var) == gv_hANDLE_KHOLIN))) {
            gv_dragonStickEnabled[auto0A68A06A_var] = true;
        }

    }
    return true;
}

void gf_AssignDragonSticks () {
    // Automatic Variable Declarations
    playergroup auto8E4B0B59_g;
    int auto8E4B0B59_var;

    // Implementation
    auto8E4B0B59_g = PlayerGroupActive();
    auto8E4B0B59_var = -1;
    while (true) {
        auto8E4B0B59_var = PlayerGroupNextPlayer(auto8E4B0B59_g, auto8E4B0B59_var);
        if (auto8E4B0B59_var < 0) { break; }
        if ((UnitIsAlive(gv_Skaters[auto8E4B0B59_var]) == true) && (gv_dragonStickEnabled[auto8E4B0B59_var] == true) && (PlayerStatus(auto8E4B0B59_var) == c_playerStatusActive)) {
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto8E4B0B59_var], "ClearTintColor");
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto8E4B0B59_var], "ModelSwap DragonStick");
        }

    }
}

trigger auto_gf_ApplyGokuHairSingle_Trigger = null;
int auto_gf_ApplyGokuHairSingle_lp_player;

void gf_ApplyGokuHairSingle (int lp_player) {
    auto_gf_ApplyGokuHairSingle_lp_player = lp_player;

    if (auto_gf_ApplyGokuHairSingle_Trigger == null) {
        auto_gf_ApplyGokuHairSingle_Trigger = TriggerCreate("auto_gf_ApplyGokuHairSingle_TriggerFunc");
    }

    TriggerExecute(auto_gf_ApplyGokuHairSingle_Trigger, false, false);
}

bool auto_gf_ApplyGokuHairSingle_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ApplyGokuHairSingle_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_Skaters[lp_player]) == true) && (gv_gokuHairEnabled[lp_player] == true) && (gv_Players[2] != lp_player) && (gv_Players[6] != lp_player)) {
        libNtve_gf_AttachModelToUnit(gv_Skaters[lp_player], "GokuHair", "Ref_Head");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.700000,1.700000,2.300000");
    }

    return true;
}

trigger auto_gf_AssignGokuHairtoAll_Trigger = null;

void gf_AssignGokuHairtoAll () {
    if (auto_gf_AssignGokuHairtoAll_Trigger == null) {
        auto_gf_AssignGokuHairtoAll_Trigger = TriggerCreate("auto_gf_AssignGokuHairtoAll_TriggerFunc");
    }

    TriggerExecute(auto_gf_AssignGokuHairtoAll_Trigger, false, false);
}

bool auto_gf_AssignGokuHairtoAll_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7389A7C9_g;
    int auto7389A7C9_var;

    // Implementation
    auto7389A7C9_g = PlayerGroupActive();
    auto7389A7C9_var = -1;
    while (true) {
        auto7389A7C9_var = PlayerGroupNextPlayer(auto7389A7C9_g, auto7389A7C9_var);
        if (auto7389A7C9_var < 0) { break; }
        if ((PlayerStatus(auto7389A7C9_var) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[auto7389A7C9_var]) == true) && (gv_gokuHairEnabled[auto7389A7C9_var] == true) && (gv_Players[2] != auto7389A7C9_var) && (gv_Players[6] != auto7389A7C9_var)) {
            libNtve_gf_AttachModelToUnit(gv_Skaters[auto7389A7C9_var], "GokuHair", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.700000,1.700000,2.300000");
        }

    }
    return true;
}

void gf_ApplyAfro (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_AttachActorToUnit(lp_unit, "Afro", "Ref_Head");
    if ((gv_Players[2] != UnitGetOwner(lp_unit)) && (gv_Players[6] != UnitGetOwner(lp_unit))) {
    }
    else {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.600000");
    }
    if (((PlayerHandle(UnitGetOwner(lp_unit)) == "") || (PlayerHandle(UnitGetOwner(lp_unit)) == gv_hANDLE_TWODEUCE))) {
        gv_currentAfro = libNtve_gf_ActorLastCreated();
    }

}

void gf_AssignStormTrooperHelmet () {
    // Automatic Variable Declarations
    playergroup autoDC173AA6_g;
    int autoDC173AA6_var;

    // Implementation
    autoDC173AA6_g = PlayerGroupActive();
    autoDC173AA6_var = -1;
    while (true) {
        autoDC173AA6_var = PlayerGroupNextPlayer(autoDC173AA6_g, autoDC173AA6_var);
        if (autoDC173AA6_var < 0) { break; }
        if ((PlayerStatus(autoDC173AA6_var) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[autoDC173AA6_var]) == true) && (gv_stormTrooperEnabled[autoDC173AA6_var] == true) && (gv_Players[2] != autoDC173AA6_var) && (gv_Players[6] != autoDC173AA6_var)) {
            libNtve_gf_AttachModelToUnit(gv_Skaters[autoDC173AA6_var], "StormTrooperHelmet", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.550000");
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[autoDC173AA6_var], libNtve_gf_TextureSelectByID("StormtrooperZealot"));
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[autoDC173AA6_var], libNtve_gf_TextureSelectByID("NovaStick"));
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[autoDC173AA6_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        }

        if ((PlayerStatus(autoDC173AA6_var) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[autoDC173AA6_var]) == true) && (gv_stormTrooperEnabled[autoDC173AA6_var] == true) && ((gv_Players[2] == autoDC173AA6_var) || (gv_Players[6] == autoDC173AA6_var))) {
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[autoDC173AA6_var], libNtve_gf_TextureSelectByID("StormtrooperZealot"));
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[autoDC173AA6_var], libNtve_gf_TextureSelectByID("NovaStick"));
            libNtve_gf_SendActorMessageToUnit(gv_Skaters[autoDC173AA6_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
        }

    }
}

void gf_AssignStormTrooperHelmetDeath (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && (UnitIsAlive(gv_Skaters[lp_player]) == true) && (gv_Players[2] != lp_player) && (gv_Players[6] != lp_player)) {
        libNtve_gf_AttachModelToUnit(gv_Skaters[lp_player], "StormTrooperHelmet", "Ref_Head");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.550000");
    }

}

trigger auto_gf_UpdateShop_Trigger = null;
int auto_gf_UpdateShop_lp_player;
string auto_gf_UpdateShop_lp_command;

void gf_UpdateShop (int lp_player, string lp_command) {
    auto_gf_UpdateShop_lp_player = lp_player;
    auto_gf_UpdateShop_lp_command = lp_command;

    if (auto_gf_UpdateShop_Trigger == null) {
        auto_gf_UpdateShop_Trigger = TriggerCreate("auto_gf_UpdateShop_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateShop_Trigger, false, false);
}

bool auto_gf_UpdateShop_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UpdateShop_lp_player;
    string lp_command = auto_gf_UpdateShop_lp_command;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_command == "scrollleft")) {
        if ((gv_shopScrollIndex[lp_player] > 0)) {
            gv_shopScrollIndex[lp_player] -= 1;
            BankValueSetFromInt(gv_Banks[lp_player], "Shop", "ScrollIndex", gv_shopScrollIndex[lp_player]);
        }

        SoundPlay(SoundLink("UI_ScrollButtonSelect", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        if ((lp_command == "scrollright")) {
            if ((gv_shopScrollIndex[lp_player] < gv_ofAvailableSkins)) {
                gv_shopScrollIndex[lp_player] += 1;
                BankValueSetFromInt(gv_Banks[lp_player], "Shop", "ScrollIndex", gv_shopScrollIndex[lp_player]);
            }

            SoundPlay(SoundLink("UI_ScrollButtonSelect", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

    }
    if ((lp_command == "init")) {
        Wait(0.0625, c_timeGame);
        ActorSend(ActorFromDialogControl(gv_shopDialog[lp_player][0]), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(0), libNtve_gf_ConvertPlayerColorToColor(0)));
    }

    if ((BankValueGetAsFlag(gv_Banks[lp_player], "Shop", ("skinz" + IntToString(gv_skinShowOrder[gv_shopScrollIndex[lp_player]]))) == false)) {
        DialogControlSetEnabled(gv_shopDialog[lp_player][3], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][3], TextExpressionAssemble("Param/Expression/6CF4A278"), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_shopDialog[lp_player][3], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    }
    else {
        if ((BankValueGetAsInt(gv_Banks[lp_player], "Shop", "EquippedSkin") == gv_skinShowOrder[gv_shopScrollIndex[lp_player]])) {
            DialogControlSetEnabled(gv_shopDialog[lp_player][3], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][3], TextExpressionAssemble("Param/Expression/5A49858F"), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_shopDialog[lp_player][3], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
        }
        else {
            DialogControlSetEnabled(gv_shopDialog[lp_player][3], PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][3], TextExpressionAssemble("Param/Expression/563EAE87"), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_shopDialog[lp_player][3], Color(22*100/255,128*100/255,0), PlayerGroupAll());
        }
    }
    ActorSend(ActorFromDialogControl(gv_shopDialog[lp_player][0]), libNtve_gf_TextureSelectByID(gv_skinTexture[gv_skinShowOrder[gv_shopScrollIndex[lp_player]]][1]));
    BankSave(gv_Banks[lp_player]);
    TextExpressionSetToken("Param/Expression/53A72BFD", "A", gv_skinName[gv_skinShowOrder[gv_shopScrollIndex[lp_player]]]);
    libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][1], TextExpressionAssemble("Param/Expression/53A72BFD"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/CE5BB51C", "A", IntToText(gv_skinPrice[gv_skinShowOrder[gv_shopScrollIndex[lp_player]]]));
    libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][2], TextExpressionAssemble("Param/Expression/CE5BB51C"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/2AC8347B", "A", FormatNumber(BankValueGetAsInt(gv_Banks[lp_player], "Shop", "Money")));
    libNtve_gf_SetDialogItemText(gv_shopDialog[lp_player][9], TextExpressionAssemble("Param/Expression/2AC8347B"), PlayerGroupAll());
    return true;
}

void gf_AddPlayerHasColorBorder (int lp_player, int lp_relativeDialogItem) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemImage(gv_shop[lp_player], 50, 50, c_anchorCenter, 50, 50, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_gold.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lp_relativeDialogItem, c_anchorCenter, 0, 0);
}

trigger auto_gf_PlayAttackAnimation_Trigger = null;
actor auto_gf_PlayAttackAnimation_lp_actor;

void gf_PlayAttackAnimation (actor lp_actor) {
    auto_gf_PlayAttackAnimation_lp_actor = lp_actor;

    if (auto_gf_PlayAttackAnimation_Trigger == null) {
        auto_gf_PlayAttackAnimation_Trigger = TriggerCreate("auto_gf_PlayAttackAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayAttackAnimation_Trigger, false, false);
}

bool auto_gf_PlayAttackAnimation_TriggerFunc (bool testConds, bool runActions) {
    actor lp_actor = auto_gf_PlayAttackAnimation_lp_actor;

    // Automatic Variable Declarations
    // Implementation
    ActorSend(lp_actor, MakeMsgAnimBracketStart("Attack", "Attack", "Stand", "Stand", 0, -1.0, c_animTimeVariantAsAutomatic));
    Wait(5.0, c_timeGame);
    ActorSend(lp_actor, MakeMsgAnimBracketStop("Attack", 0, -1.0, c_animTimeVariantAsAutomatic));
    ActorSend(lp_actor, libNtve_gf_AnimClear("Attack", -1.0));
    return true;
}

void gf_SortByPrice () {
    // Variable Declarations
    int lv_itemsToSort;
    int lv_i;
    int lv_low;
    bool[101] lv_done;
    int lv_order;

    // Automatic Variable Declarations
    int auto7429B33F_ae;
    const int auto7429B33F_ai = 1;
    int auto43168A8C_ae;
    const int auto43168A8C_ai = 1;

    // Variable Initialization
    lv_itemsToSort = gv_ofAvailableSkins;
    lv_low = gv_skinPrice[gv_availableSkins[1]];

    // Implementation
    while ((lv_itemsToSort > 0)) {
        auto7429B33F_ae = gv_ofAvailableSkins;
        lv_i = 1;
        for ( ; ( (auto7429B33F_ai >= 0 && lv_i <= auto7429B33F_ae) || (auto7429B33F_ai < 0 && lv_i >= auto7429B33F_ae) ) ; lv_i += auto7429B33F_ai ) {
            if ((lv_done[lv_i] == false) && (lv_low > gv_skinPrice[gv_availableSkins[lv_i]])) {
                lv_low = gv_skinPrice[gv_availableSkins[lv_i]];
            }

        }
        auto43168A8C_ae = gv_ofAvailableSkins;
        lv_i = 1;
        for ( ; ( (auto43168A8C_ai >= 0 && lv_i <= auto43168A8C_ae) || (auto43168A8C_ai < 0 && lv_i >= auto43168A8C_ae) ) ; lv_i += auto43168A8C_ai ) {
            if ((lv_low == gv_skinPrice[gv_availableSkins[lv_i]])) {
                lv_order += 1;
                gv_skinShowOrder[lv_order] = gv_availableSkins[lv_i];
                lv_done[lv_i] = true;
                lv_itemsToSort -= 1;
            }

        }
        lv_low = 999999;
    }
}

void gf_ApplyCustomizations () {
    // Variable Declarations
    int lv_comma1;
    string lv_temp;
    string lv_temp2;
    int lv_comma2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temp = "";
    lv_temp2 = "";

    // Implementation
    gf_ApplySkins();
}

void gf_ApplySkins () {
    // Automatic Variable Declarations
    playergroup auto59E55964_g;
    int auto59E55964_var;

    // Implementation
    auto59E55964_g = PlayerGroupActive();
    auto59E55964_var = -1;
    while (true) {
        auto59E55964_var = PlayerGroupNextPlayer(auto59E55964_g, auto59E55964_var);
        if (auto59E55964_var < 0) { break; }
        if ((gv_rewardstatusOFF[auto59E55964_var] == false)) {
            if (((gv_skinTest[auto59E55964_var] == 1) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_RUCKLE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LEVI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KAIOKEN) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_XAPOS)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), "TextureSelectById zealotmodel_Black");
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID(gv_skinTexture[30][1]));
            }

            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_OOTER) || (gv_skinTest[auto59E55964_var] == 2)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap DarkProbe");
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BlackProbe"));
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.0, 0.0, 0.0), Color(0.0, 0.0, 0.0)));
            }
            else {
                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_WATERMELON) || (gv_skinTest[auto59E55964_var] == 3))) {
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Watermelon"));
                }
                else {
                    if (((gv_skinTest[auto59E55964_var] == 4) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KRAZYMEN)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap DarkZealot");
                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.0, 0.0, 0.0), Color(100.0, 0.0, 0.0)));
                    }
                    else {
                        if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_BORBORYGMUS) || (gv_skinTest[auto59E55964_var] == 5))) {
                            if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.0, 0.0, 0.0), Color(100.0, 0.0, 0.0)));
                            }
                            else {
                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("borb"));
                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.0, 0.0, 0.0), Color(0.0, 0.0, 0.0)));
                            }
                        }
                        else {
                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_TEROH) || (gv_skinTest[auto59E55964_var] == 6)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1011Metal"));
                            }
                            else {
                                if (((gv_skinTest[auto59E55964_var] == 7) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TURA)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T3005TRON"));
                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.0, 100.0, 100.0), Color(100.0, 100.0, 100.0)));
                                }
                                else {
                                    if (((gv_skinTest[auto59E55964_var] == 8) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KURT) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KURTEU))) {
                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("BlackPinkTape"));
                                    }
                                    else {
                                        if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_HWCUBSFTW) || (gv_skinTest[auto59E55964_var] == 9) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_HWCUBSFTW_EU))) {
                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("CubsZealot"));
                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("CubsZealot2"));
                                        }
                                        else {
                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_HOK) || (gv_skinTest[auto59E55964_var] == 10) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ALOMINUS)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1002Criminal"));
                                            }
                                            else {
                                                if (((gv_skinTest[auto59E55964_var] == 11) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BLOODSHOT)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("BloodshotStick"));
                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2001Evil"));
                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.0, 0.0, 0.0), Color(0.0, 0.0, 0.0)));
                                                }
                                                else {
                                                    if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_CHERRY) || (gv_skinTest[auto59E55964_var] == 12)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1010Defender"));
                                                    }
                                                    else {
                                                        if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_COUNTRYKEN) || (gv_skinTest[auto59E55964_var] == 13)) && ((auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[6]))) {
                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Black"));
                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.0, 100.0, 100.0), Color(100.0, 100.0, 100.0)));
                                                        }
                                                        else {
                                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_SALMANAZAREU) || (gv_skinTest[auto59E55964_var] == 14) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_FELIXEU)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.0, 0.0, 0.0), Color(100.0, 0.0, 0.0)));
                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBlack"));
                                                            }
                                                            else {
                                                                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_GIRLPOWER) || (gv_skinTest[auto59E55964_var] == 15))) {
                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Standard2"));
                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("NeonPinkEmi"));
                                                                }
                                                                else {
                                                                    if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_PROSTER) || (gv_skinTest[auto59E55964_var] == 16))) {
                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(3), libNtve_gf_ConvertPlayerColorToColor(3)));
                                                                    }
                                                                    else {
                                                                        if (((gv_skinTest[auto59E55964_var] == 17) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BRUCE))) {
                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(3), libNtve_gf_ConvertPlayerColorToColor(3)));
                                                                            UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "shoulderset11", gv_Skaters[auto59E55964_var], 1);
                                                                            UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "helmet11", gv_Skaters[auto59E55964_var], 1);
                                                                        }
                                                                        else {
                                                                            if (((gv_skinTest[auto59E55964_var] == 18) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ALERTEYES))) {
                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2003Shining"));
                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(6), libNtve_gf_ConvertPlayerColorToColor(6)));
                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBo313"));
                                                                            }
                                                                            else {
                                                                                if ((GameAttributeGameValue("2") != "0002") && ((gv_skinTest[auto59E55964_var] == 19) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DEATH))) {
                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBo313"));
                                                                                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                    }
                                                                                    else {
                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                    }
                                                                                    ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[auto59E55964_var]), "SetTintColor {59,59,59 2.000000}");
                                                                                    if ((GameAttributeGameValue("2") != "0002")) {
                                                                                        gf_AssignStormTrooperHelmetDeath(auto59E55964_var);
                                                                                    }

                                                                                }
                                                                                else {
                                                                                    if (((gv_skinTest[auto59E55964_var] == 20) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ANGLEFIRE))) {
                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin12"));
                                                                                        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                        }
                                                                                        else {
                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if (((gv_skinTest[auto59E55964_var] == 21) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_PERSAMIN))) {
                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1004Aquamarine"));
                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin14"));
                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                            }
                                                                                            else {
                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_LiNGKing) || (gv_skinTest[auto59E55964_var] == 22) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LiNGKingEU))) {
                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("LingKingZealot"));
                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LingKingStick"));
                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(4), libNtve_gf_ConvertPlayerColorToColor(4)));
                                                                                            }
                                                                                            else {
                                                                                                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_DAGGIUS) || (gv_skinTest[auto59E55964_var] == 23))) {
                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1004Aquamarine"));
                                                                                                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                    }
                                                                                                    else {
                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_THEAMERICANR) || (gv_skinTest[auto59E55964_var] == 24))) {
                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2001Evil"));
                                                                                                        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                        }
                                                                                                        else {
                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if (((gv_skinTest[auto59E55964_var] == 25) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MOFOWH))) {
                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("camo3"));
                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("mofowthstick"));
                                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                            }
                                                                                                            else {
                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_SNAKEEU) || (gv_skinTest[auto59E55964_var] == 26))) {
                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2001Evil"));
                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(4), libNtve_gf_ConvertPlayerColorToColor(4)));
                                                                                                            }
                                                                                                            else {
                                                                                                                if (((gv_skinTest[auto59E55964_var] == 27) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_GENERALEU))) {
                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("generalskin"));
                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin1"));
                                                                                                                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 28) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_JOkeREU))) {
                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1010Defender"));
                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(0), libNtve_gf_ConvertPlayerColorToColor(0)));
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 29) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SplatterArtEU))) {
                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("splatterartskin"));
                                                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 30) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_JunkyEU))) {
                                                                                                                                ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), "TextureSelectById zealotmodel_Black");
                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID(gv_skinTexture[30][1]));
                                                                                                                                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 31) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NEXEU))) {
                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("whiteandyellow"));
                                                                                                                                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 32) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_THEROBSTR) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_THEROBSTREU))) {
                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2001Evil"));
                                                                                                                                        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 33) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DUCKSLAYEREU))) {
                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1010Defender"));
                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBo31"));
                                                                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 34) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KIngsrangER))) {
                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1007StoneGuardian"));
                                                                                                                                                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 35) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DUCKHUNTER) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DUCKHUNTEREU))) {
                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1011Metal"));
                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("DuckHunterStick"));
                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 50.20), Color(50.20, 0.00, 50.20)));
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 36) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_GIGIDAPOPPER))) {
                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("White"));
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 37) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SHUSUKE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SHUSUKEEU))) {
                                                                                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("ShusukeRed"));
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey4Stick"));
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("ShusukeBlue"));
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey1Stick"));
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 38) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_JINXEU))) {
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BlueWhite"));
                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(0), libNtve_gf_ConvertPlayerColorToColor(0)));
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 39) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ART))) {
                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1012Camoflauged"));
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_DALTONUS) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DALTONEU) || (gv_skinTest[auto59E55964_var] == 40))) {
                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(6), libNtve_gf_ConvertPlayerColorToColor(6)));
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_TOWNKRIER) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TKEU) || (gv_skinTest[auto59E55964_var] == 41))) {
                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(6), libNtve_gf_ConvertPlayerColorToColor(6)));
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_PORNHACK) || (gv_skinTest[auto59E55964_var] == 42)) && ((auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[6]))) {
                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_ModelSwap("Crabeetle", 1));
                                                                                                                                                                                UnitSetScale(gv_Skaters[auto59E55964_var], 250.0, 250.0, 250.0);
                                                                                                                                                                                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_PORNHACK) || (gv_skinTest[auto59E55964_var] == 42)) && (auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_ModelSwap("CarrionBird", 1));
                                                                                                                                                                                    UnitSetHeight(gv_Skaters[auto59E55964_var], 2.0, 0.0);
                                                                                                                                                                                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 43) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_YODA) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_YODAEU))) {
                                                                                                                                                                                        if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("YodaZealot"));
                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 77.65, 0.00), Color(0.00, 75.69, 0.00)));
                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("YodaStick"));
                                                                                                                                                                                        }
                                                                                                                                                                                        else {
                                                                                                                                                                                            if (((auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[6]))) {
                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("YodaImmortal"));
                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 77.65, 0.00), Color(0.00, 75.69, 0.00)));
                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("YodaStick"));
                                                                                                                                                                                            }

                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 44) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_RAININGWAVE))) {
                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Black"));
                                                                                                                                                                                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                                                                                                                                                                                            }
                                                                                                                                                                                            else {
                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                                                                                                                                                                                            }
                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin16"));
                                                                                                                                                                                        }
                                                                                                                                                                                        else {
                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 45) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NSGANDALF) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NSGANDALFEU))) {
                                                                                                                                                                                                if (((auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[6]))) {
                                                                                                                                                                                                    libNtve_gf_AttachActorToUnit(gv_Skaters[auto59E55964_var], "GandalfHat", "Ref_Head");
                                                                                                                                                                                                    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.200000,0.200000,0.180000");
                                                                                                                                                                                                    ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {MoveHat12 MoveHat3}");
                                                                                                                                                                                                }
                                                                                                                                                                                                else {
                                                                                                                                                                                                    if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6])) {
                                                                                                                                                                                                        libNtve_gf_AttachActorToUnit(gv_Skaters[auto59E55964_var], "GandalfHat", "Ref_Head");
                                                                                                                                                                                                        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.150000,0.150000,0.120000");
                                                                                                                                                                                                        ActorSend(libNtve_gf_ActorLastCreated(), "HostSiteOpsSet ::Host {MoveHat122 MoveHat3}");
                                                                                                                                                                                                    }

                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            else {
                                                                                                                                                                                                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_TENKZ) || (gv_skinTest[auto59E55964_var] == 46))) {
                                                                                                                                                                                                    if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6]) && (GameAttributeGameValue("2") != "0002")) {
                                                                                                                                                                                                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Skaters[auto59E55964_var]), false);
                                                                                                                                                                                                        libNtve_gf_AttachActorToUnit(gv_Skaters[auto59E55964_var], "ZealotWireframe", "Ref_Origin");
                                                                                                                                                                                                        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,0,0 10.000000}");
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else {
                                                                                                                                                                                                        if (((auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[6])) && (GameAttributeGameValue("2") != "0002")) {
                                                                                                                                                                                                            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_Skaters[auto59E55964_var]), false);
                                                                                                                                                                                                            libNtve_gf_AttachActorToUnit(gv_Skaters[auto59E55964_var], "ImmortalWireframe", "Ref_Origin");
                                                                                                                                                                                                            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,0,0 10.000000}");
                                                                                                                                                                                                        }

                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                else {
                                                                                                                                                                                                    if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_NOVA) || (gv_skinTest[auto59E55964_var] == 47))) {
                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("NovaSkin"));
                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("NovaStick"));
                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else {
                                                                                                                                                                                                        if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_MLGBX) || (gv_skinTest[auto59E55964_var] == 48)) && (!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])))) {
                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap LabBot");
                                                                                                                                                                                                        }
                                                                                                                                                                                                        else {
                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 49) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TWODEUCE)) && (gv_isAfroModeOn == true)) {
                                                                                                                                                                                                                gf_ApplyAfro(gv_Skaters[auto59E55964_var]);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else {
                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 50) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MCDOUDLES) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MCDOUDLESEU))) {
                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("McdoudlesSkin"));
                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("NovaStick"));
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else {
                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 51) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DAUNTLESS))) {
                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("RainbowSkin"));
                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("RainbowSkin"));
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 52) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BLITZERG))) {
                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BlitzZealot"));
                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("BlitzStick"));
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 53) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CHADGG))) {
                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("ChadggZealot"));
                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("ChadggZealot2"));
                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 69.02, 0.00), Color(0.00, 65.10, 0.00)));
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 54) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CAFCA))) {
                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("CafcaZealot"));
                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("CafcaStick"));
                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(45.49, 30.59, 21.18), Color(45.49, 30.59, 21.18)));
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 55) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KHOLIN)) && (!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])))) {
                                                                                                                                                                                                                                        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto59E55964_var) == true)) {
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("MusicZealotBlue"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("MusicStick"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("MusicZealotBlue"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("MusicStick"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(100.00, 5.10, 5.10)));
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 56) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BLUEDREAM))) {
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BlueDreamZealot"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("BlueDreamStick"));
                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_BULBASAAUR) || (gv_skinTest[auto59E55964_var] == 57) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BULBASAAUREU))) {
                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BulbaZealot"));
                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("BulbaStick"));
                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 58) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DARKANGEL))) {
                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("DarkAngelStick"));
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 59) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DEATH)) && (GameAttributeGameValue("2") != "0002")) {
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 60) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SQUIRTLE))) {
                                                                                                                                                                                                                                                            if ((gv_altgoalie[auto59E55964_var] == false)) {
                                                                                                                                                                                                                                                                if (((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2]))) {
                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomTauren");
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomGrunt");
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("SquirtleZealot"));
                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("SquirtleZealot"));
                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(5.10, 94.90, 77.25), Color(3.92, 96.08, 75.29)));
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 61) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPY) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPYEU)) && (!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])))) {
                                                                                                                                                                                                                                                                if ((gv_altgoalie[auto59E55964_var] == false)) {
                                                                                                                                                                                                                                                                    if ((gv_altgoalie2[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Entropy_Zealot"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        if ((gv_altgoalie3[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomAlarak");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDarkZealot");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                    if ((gv_altgoalie3[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomArtanis");
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDarkZealot");
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                if ((gv_altgoalie[auto59E55964_var] == false) && ((gv_skinTest[auto59E55964_var] == 61) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPY) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPYEU))) {
                                                                                                                                                                                                                                                                    if ((gv_altgoalie2[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                        if ((gv_altgoalie4[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDragoon");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Entropy_Immortal"));
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        if ((gv_altgoalie4[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDragoon");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDarkImmortal");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                    if ((gv_altgoalie[auto59E55964_var] == true) && ((gv_skinTest[auto59E55964_var] == 61) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPY) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ENTROPYEU))) {
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomReaver");
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EntropyStick"));
                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 62) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DANTE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DANTEEU))) {
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey13Zealot"));
                                                                                                                                                                                                                                                                            ActorSend(libNtve_gf_MainActorofUnit(gv_Skaters[auto59E55964_var]), "SetTintColor {0,64,0 2.000000}");
                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("DanteStick"));
                                                                                                                                                                                                                                                                            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[auto59E55964_var]), "SetTintColor {0,64,0 2.000000}");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 63) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LIME) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LIMEEU))) {
                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey9stick"));
                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey7Zealot"));
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_EWOK) || (gv_skinTest[auto59E55964_var] == 64) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_EWOKEU)) && (!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])))) {
                                                                                                                                                                                                                                                                                    if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomCarbotZergling");
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey3Stick"));
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomMoopy");
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EwokStick"));
                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 64) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_EWOK) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_EWOKEU))) {
                                                                                                                                                                                                                                                                                        if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomCarbotZerglingGoalie");
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey3Stick"));
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomMoopyGoalie");
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("EwokStick"));
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 65) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CHAOTIC))) {
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1005Bloodstained"));
                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey1Stick"));
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 66) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MYTHIC))) {
                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1013Holographic"));
                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey1Stick"));
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                if ((!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2]))) && ((gv_skinTest[auto59E55964_var] == 67) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NGLOOGIK) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NGLOOGIKEU))) {
                                                                                                                                                                                                                                                                                                    if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("LogikSkin"));
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LoogikStick2"));
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 100.00), Color(50.20, 0.00, 100.00)));
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LoogikStick"));
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey13Zealot"));
                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 100.00), Color(50.20, 0.00, 100.00)));
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                    if (((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])) && ((gv_skinTest[auto59E55964_var] == 67) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NGLOOGIK) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NGLOOGIKEU))) {
                                                                                                                                                                                                                                                                                                        if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("LogikSkin"));
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LoogikStick2"));
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 100.00), Color(50.20, 0.00, 100.00)));
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey13Zealot"));
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LoogikStick"));
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(50.20, 0.00, 100.00), Color(50.20, 0.00, 100.00)));
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                        if ((gv_altgoalie[auto59E55964_var] == true) && ((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])) && ((gv_skinTest[auto59E55964_var] == 68) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CREATOR1) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LEEROY_EU))) {
                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDarkArchon");
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                            if ((!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2]))) && ((gv_skinTest[auto59E55964_var] == 68) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CREATOR1) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LEEROY_EU))) {
                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomDarkZealot");
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                if (((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])) && ((gv_skinTest[auto59E55964_var] == 69) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SPITFIRE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SPITFIREEU))) {
                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap CustomCyclone");
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                    if ((!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2]))) && ((gv_skinTest[auto59E55964_var] == 69) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SPITFIRE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SPITFIREEU))) {
                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap MarineXPR");
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 70) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_UNFORGIVEN) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_UNFORGIVENEU))) {
                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("BlueDreamZealot"));
                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey3Stick"));
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 71) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_JEROUSEK) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_JEROUSEKEU))) {
                                                                                                                                                                                                                                                                                                                                if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("JeroSkin2"));
                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("JeroStick"));
                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 100.00, 100.00), Color(0.00, 100.00, 100.00)));
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                    gv_stormTrooperEnabled[auto59E55964_var] = true;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 72) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SLIDE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SLIDEEU))) {
                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("RainbowSkin"));
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 73) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ANGRYTITS) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ANGRYTITSEU))) {
                                                                                                                                                                                                                                                                                                                                        if ((gv_altgoalie[auto59E55964_var] == true)) {
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey3Zealot"));
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("AngryTitsStick"));
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 50.20, 0.00), Color(100.00, 50.20, 0.00)));
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                            if ((!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2])))) {
                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], "ModelSwap AngryZealot");
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Jersey3Zealot"));
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(34.51, 98.43, 23.53)));
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("AngryTitsStick2"));
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 74) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SUNSHINE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SUNSHINEEU))) {
                                                                                                                                                                                                                                                                                                                                            gf_RedlineCreatepowerupanimation(gv_Skaters[auto59E55964_var], Color(100.00, 100.00, 0.00), 3.0, false);
                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 50.20, 0.00), Color(100.00, 50.20, 0.00)));
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                            if (((gv_skinTest[auto59E55964_var] == 75) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_YEPHANEU))) {
                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Black"));
                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBlack"));
                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 76) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CRESCENDO) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CRESCENDOEU))) {
                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("CrescendoSkin"));
                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("CrescendoStick"));
                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 77) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LINDHOLM) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_LINDHOLMEU))) {
                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("LindholmSkin"));
                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("LindholmStick"));
                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 78) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KEVENKEU))) {
                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("KevenKSkin"));
                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("KevenKStick"));
                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 100.00, 100.00), Color(0.00, 100.00, 100.00)));
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                            if ((!((auto59E55964_var == gv_Players[6]) || (auto59E55964_var == gv_Players[2]))) && ((gv_skinTest[auto59E55964_var] == 79) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BACKFISCH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BACKFISCHEU))) {
                                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Backfisch_Zealot"));
                                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Backfisch_Stick"));
                                                                                                                                                                                                                                                                                                                                                                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 100.00, 0.00), Color(0.00, 50.20, 0.00)));
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                if (((gv_skinTest[auto59E55964_var] == 79) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BACKFISCH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BACKFISCHEU))) {
                                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("Backfisch_Immortal"));
                                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("Backfisch_Stick"));
                                                                                                                                                                                                                                                                                                                                                                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(0.00, 100.00, 0.00), Color(0.00, 50.20, 0.00)));
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                    if (((gv_skinTest[auto59E55964_var] == 80) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SITTINGDUCK) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SITTINGDUCKEU))) {
                                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T1011Metal"));
                                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("SittingDuckStick"));
                                                                                                                                                                                                                                                                                                                                                                        libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(50.20, 0.00, 0.00)));
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                        if (((gv_skinTest[auto59E55964_var] == 81) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_YEUYEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_YEUYEUEU))) {
                                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_ModelSwap("CustomAdept", 1));
                                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("DarkAngelStick"));
                                                                                                                                                                                                                                                                                                                                                                            libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_SetTeamColor(Color(100.00, 100.00, 100.00), Color(100.00, 100.00, 100.00)));
                                                                                                                                                                                                                                                                                                                                                                        }

                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6]) && ((PlayerHandle(auto59E55964_var) == gv_hANDLE_GUERRILA) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_STRAWBERRY) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BULBASAAUR) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_BULBASAAUREU) || ((BankValueGetAsInt(gv_Banks[auto59E55964_var], "Settings", "PrizeToggle") == 1) && ((PlayerHandle(auto59E55964_var) == gv_hANDLE_STEALTH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_STEALTHEU))) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_PERSAMIN) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_RIOT) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAXWELL) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TWODEUCE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_RAVEN) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_REIMER) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_HOTPIE) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_HOTPIEEU))) {
                UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "helmet8", gv_Skaters[auto59E55964_var], 1);
                UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "shoulderset6", gv_Skaters[auto59E55964_var], 1);
                if ((PlayerHandle(auto59E55964_var) == gv_hANDLE_GUERRILA)) {
                    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), libNtve_gf_TextureSelectByID("T2002E"));
                }

                if ((PlayerHandle(auto59E55964_var) == gv_hANDLE_PERSAMIN)) {
                    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), libNtve_gf_TextureSelectByID("T1004Aquamarine"));
                }

            }

            if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6]) && (PlayerHandle(auto59E55964_var) == gv_hANDLE_KURT) && (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KURTEU)) {
                UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "helmet152", gv_Skaters[auto59E55964_var], 1);
            }

            if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6]) && ((PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUR) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUREU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_PETERDLAI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_THENEWGIRL) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TOWNKRIER) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TINGBM) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TKEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_KRAZYMEN) || ((BankValueGetAsInt(gv_Banks[auto59E55964_var], "Settings", "PrizeToggle") == 0) && ((PlayerHandle(auto59E55964_var) == gv_hANDLE_STEALTH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_STEALTHEU))) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_TEROH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DUCKHUNTEREU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_APPLESOUP) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_ECUNAMI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SEAN) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_SEANEU))) {
                gf_ApplyModel(3, 3, auto59E55964_var);
                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHIEU))) {
                    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), libNtve_gf_TextureSelectByID("White"));
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID(gv_skinTexture[30][1]));
                }

                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_KRAZYMEN))) {
                    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), libNtve_gf_TextureSelectByID("Black"));
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002Devil"));
                }

                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_TEROH) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_DUCKHUNTEREU))) {
                    ActorScopeSend(ActorScopeFromUnit(gv_Skaters[auto59E55964_var]), libNtve_gf_TextureSelectByID("T1011Metal"));
                }

            }

            if ((auto59E55964_var != gv_Players[2]) && (auto59E55964_var != gv_Players[6]) && ((PlayerHandle(auto59E55964_var) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_CERVANTEZEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_GUERRILA) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_NAVYSEALS) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_RASPUTIN))) {
                libNtve_gf_SendActorMessageToUnit(gv_Skaters[auto59E55964_var], libNtve_gf_TextureSelectByID("T2002E"));
                UnitBehaviorAdd(gv_Skaters[auto59E55964_var], "helmet14", gv_Skaters[auto59E55964_var], 1);
            }

            if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUR) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUREU) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_PERPLEX) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_APPLESOUP))) {
                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHI) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_MAHARISHIEU))) {
                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBo313"));
                }

                if (((PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUR) || (PlayerHandle(auto59E55964_var) == gv_hANDLE_VAPOUREU))) {
                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickBo315"));
                }

                if ((PlayerHandle(auto59E55964_var) == gv_hANDLE_PERPLEX)) {
                    if (((auto59E55964_var == gv_Players[1]) || (auto59E55964_var == gv_Players[2]) || (auto59E55964_var == gv_Players[3]) || (auto59E55964_var == gv_Players[4]))) {
                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin16"));
                    }
                    else {
                        libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin6b"));
                    }
                }

                if ((PlayerHandle(auto59E55964_var) == gv_hANDLE_APPLESOUP)) {
                    libNtve_gf_SendActorMessageToUnit(gv_Sticks[auto59E55964_var], libNtve_gf_TextureSelectByID("StickSkin1"));
                }

            }

        }

        if ((PlayerHandle(auto59E55964_var) != gv_hANDLE_TWODEUCE) && (gv_afrosAllowedtoPlayer[auto59E55964_var] == true) && (UnitIsAlive(gv_Skaters[auto59E55964_var]) == true)) {
            gf_ApplyAfro(gv_Skaters[auto59E55964_var]);
        }

    }
    if ((GameAttributeGameValue("2") == "0002")) {
        gf_LeagueJerseys();
    }

    gf_AssignDragonSticks();
    gf_AssignGokuHairtoAll();
    gf_AssignStormTrooperHelmet();
    gf_AssignMuerteHattoAll();
    gf_AssignNinjaSkin();
    gf_AssignGoldenStick();
}

void gf_ApplyModel (int lp_helm, int lp_shoulders, int lp_player) {
    // Variable Declarations
    unit lv_tEMP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_tEMP = gv_Skaters[lp_player];
    UnitBehaviorRemove(lv_tEMP, "helmet1", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "helmet2", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "helmet3", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "helmet4", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "helmet5", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "shoulderset1", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "shoulderset2", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "shoulderset3", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "shoulderset4", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lv_tEMP, "shoulderset5", c_unitBehaviorCountAll);
    if ((lp_helm == 3)) {
        UnitBehaviorAdd(lv_tEMP, "helmet3", lv_tEMP, 1);
    }

    if ((lp_shoulders == 3)) {
        UnitBehaviorAdd(lv_tEMP, "shoulderset3", lv_tEMP, 1);
    }

}

void gf_ApplySaveGoalieSound (int lp_player, bool lp_fF) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_player) == gv_hANDLE_NSGANDALF) || (PlayerHandle(lp_player) == gv_hANDLE_NSGANDALFEU))) {
        SoundPlay(SoundLink("save_youshallnotpass", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
    }
    else {
        if ((PlayerHandle(lp_player) == gv_hANDLE_PERPLEX)) {
            SoundPlay(SoundLink("GS_wow", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
        }
        else {
            if ((PlayerHandle(lp_player) == gv_hANDLE_BRUCE)) {
                SoundPlay(SoundLink("GS_nelson", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
            }
            else {
                if ((PlayerHandle(lp_player) == gv_hANDLE_PORNHACK)) {
                    SoundPlay(SoundLink("pornsave", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
                }
                else {
                    if (((PlayerHandle(lp_player) == gv_hANDLE_RESSLAYER) || (PlayerHandle(lp_player) == gv_hANDLE_RESSLAYEREU))) {
                        SoundPlay(SoundLink("GS_resslayer", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
                    }
                    else {
                        if (((PlayerHandle(lp_player) == gv_hANDLE_SILENTART) || (PlayerHandle(lp_player) == gv_hANDLE_SILENTARTEU))) {
                            SoundPlay(SoundLink("GS_silentart", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                        }
                        else {
                            if (((PlayerHandle(lp_player) == gv_hANDLE_ENTROPY) || (PlayerHandle(lp_player) == gv_hANDLE_ENTROPYEU))) {
                                if ((gv_altGoalieSave[lp_player] == 0)) {
                                    SoundPlay(SoundLink("CrowdGaspGoalieBlock", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 1)) {
                                    SoundPlay(SoundLink("EntropySave", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 2)) {
                                    SoundPlay(SoundLink("EntSave1", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 3)) {
                                    SoundPlay(SoundLink("EntSave2", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 4)) {
                                    SoundPlay(SoundLink("EntSave3", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 5)) {
                                    SoundPlay(SoundLink("EntSave4", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 6)) {
                                    SoundPlay(SoundLink("EntSave5", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 7)) {
                                    SoundPlay(SoundLink("EntSave6", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                                if ((gv_altGoalieSave[lp_player] == 8)) {
                                    SoundPlay(SoundLink("EntSave7", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }

                            }
                            else {
                                if (((PlayerHandle(lp_player) == gv_hANDLE_EWOK) || (PlayerHandle(lp_player) == gv_hANDLE_EWOKEU))) {
                                    SoundPlay(SoundLink("EwokSave", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                }
                                else {
                                    if (((PlayerHandle(lp_player) == gv_hANDLE_KEVENKEU) || (PlayerHandle(lp_player) == gv_hANDLE_KEVENKEU))) {
                                        SoundPlay(SoundLink("KevenKSave", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                    }
                                    else {
                                        if ((PlayerHandle(lp_player) == gv_hANDLE_TWODEUCE)) {
                                            SoundPlay(SoundLink("EntSave5", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                        }
                                        else {
                                            if (((PlayerHandle(lp_player) == gv_hANDLE_SITTINGDUCK) || (PlayerHandle(lp_player) == gv_hANDLE_SITTINGDUCKEU))) {
                                                SoundPlay(SoundLink("SittingDuckHorn", -1), PlayerGroupAll(), (gv_puckMagnitude * 80.0), 0.0);
                                            }
                                            else {
                                                SoundPlay(SoundLink("CrowdGaspGoalieBlock", -1), PlayerGroupAll(), (gv_puckMagnitude * 40.0), 0.0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((lp_fF == true)) {
        SoundPlayAtPoint(SoundLink("GoalieBlock", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gv_puckMagnitude * 60.0), 0.0);
    }

}

void gf_RewardPoints (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_Banks[lp_player], "Shop", "Money", (BankValueGetAsInt(gv_Banks[lp_player], "Shop", "Money") + gv_playerTotalPoints[lp_player]));
}

trigger auto_gf_ShowScoreboard3_Trigger = null;
int auto_gf_ShowScoreboard3_lp_playerNumber;
bool auto_gf_ShowScoreboard3_lp_duringPeriod;
bool auto_gf_ShowScoreboard3_lp_fade;

void gf_ShowScoreboard3 (int lp_playerNumber, bool lp_duringPeriod, bool lp_fade) {
    auto_gf_ShowScoreboard3_lp_playerNumber = lp_playerNumber;
    auto_gf_ShowScoreboard3_lp_duringPeriod = lp_duringPeriod;
    auto_gf_ShowScoreboard3_lp_fade = lp_fade;

    if (auto_gf_ShowScoreboard3_Trigger == null) {
        auto_gf_ShowScoreboard3_Trigger = TriggerCreate("auto_gf_ShowScoreboard3_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowScoreboard3_Trigger, false, false);
}

bool auto_gf_ShowScoreboard3_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNumber = auto_gf_ShowScoreboard3_lp_playerNumber;
    bool lp_duringPeriod = auto_gf_ShowScoreboard3_lp_duringPeriod;
    bool lp_fade = auto_gf_ShowScoreboard3_lp_fade;

    // Variable Declarations
    string lv_lightNormal;
    string lv_lightReverse;
    int lv_newPeriod;
    int lv_fadeTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_introOver == true)) {
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[5], lp_playerNumber) == true)) {
            lv_lightNormal = "ZealotHockeyLighting";
            lv_lightReverse = "ZealotHockeyLightingReversed";
        }
        else {
            lv_lightNormal = "IceWorldNight";
            lv_lightReverse = "IceWorldNightReversed2";
        }
        if ((lp_duringPeriod == true)) {
            lv_newPeriod = (gv_Period+1);
        }
        else {
            lv_newPeriod = gv_Period;
        }
        if ((lp_fade == true)) {
            lv_fadeTime = 1;
        }
        else {
            lv_fadeTime = 0;
        }
        if ((gv_verticalCamera[lp_playerNumber] == true)) {
            if ((ModI(lv_newPeriod, 2) == 1)) {
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_playerNumber) == true)) {
                    CameraSetValue(lp_playerNumber, c_cameraValueYaw, 180.0, 0.25, -1, 10.0);
                    if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), true);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                    }

                    PlayerSetLighting(lp_playerNumber, lv_lightReverse, lv_fadeTime);
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
                else {
                    CameraSetValue(lp_playerNumber, c_cameraValueYaw, 0.0, 0.25, -1, 10.0);
                    if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), true);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                    }

                    PlayerSetLighting(lp_playerNumber, lv_lightNormal, lv_fadeTime);
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
            }
            else {
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_playerNumber) == false)) {
                    CameraSetValue(lp_playerNumber, c_cameraValueYaw, 180.0, 0.25, -1, 10.0);
                    if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), true);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                    }

                    PlayerSetLighting(lp_playerNumber, lv_lightReverse, lv_fadeTime);
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
                else {
                    CameraSetValue(lp_playerNumber, c_cameraValueYaw, 0.0, 0.25, -1, 10.0);
                    if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), true);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                    }

                    PlayerSetLighting(lp_playerNumber, lv_lightNormal, lv_fadeTime);
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
            }
        }
        else {
            if ((gv_mirroredCamera[lp_playerNumber] == true)) {
                if ((ModI(lv_newPeriod, 2) == 1)) {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_playerNumber) == true)) {
                        CameraSetValue(lp_playerNumber, c_cameraValueYaw, 270.0, 0.25, -1, 10.0);
                        if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), true);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                        }

                        PlayerSetLighting(lp_playerNumber, lv_lightReverse, lv_fadeTime);
                        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupSingle(lp_playerNumber));
                        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                    }
                    else {
                        CameraSetValue(lp_playerNumber, c_cameraValueYaw, 90.0, 0.25, -1, 10.0);
                        if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), true);
                        }

                        PlayerSetLighting(lp_playerNumber, lv_lightNormal, lv_fadeTime);
                        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupSingle(lp_playerNumber));
                        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                    }
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lp_playerNumber) == false)) {
                        CameraSetValue(lp_playerNumber, c_cameraValueYaw, 270.0, 0.25, -1, 10.0);
                        if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), true);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), false);
                        }

                        PlayerSetLighting(lp_playerNumber, lv_lightReverse, lv_fadeTime);
                        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupSingle(lp_playerNumber));
                        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                    }
                    else {
                        CameraSetValue(lp_playerNumber, c_cameraValueYaw, 90.0, 0.25, -1, 10.0);
                        if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), true);
                        }

                        PlayerSetLighting(lp_playerNumber, lv_lightNormal, lv_fadeTime);
                        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupSingle(lp_playerNumber));
                        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                    }
                }
            }
            else {
                if ((ModI(lv_newPeriod, 2) == 1)) {
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
                else {
                    libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupSingle(lp_playerNumber));
                    DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 14);
                    DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 14);
                    DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupSingle(lp_playerNumber), c_anchorTop, -103, 42);
                    DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupSingle(lp_playerNumber), c_anchorTop, 110, 42);
                }
                CameraSetValue(lp_playerNumber, c_cameraValueYaw, 90.0, 0.25, -1, 10.0);
                if ((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3009") == "0001")) {
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(lp_playerNumber), libNtve_gf_MainActorofUnit(UnitFromId(85)), true);
                }

                PlayerSetLighting(lp_playerNumber, lv_lightNormal, lv_fadeTime);
            }
        }
    }

    return true;
}

void gf_Setboundsformaingame () {
    // Automatic Variable Declarations
    // Implementation
    gf_Cleanupsingledraftarea();
    RegionPlayableMapSet(RegionFromId(61));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(59), true);
    TerrainShowRegion(RegionEntireMap(), false);
    TerrainShowRegion(RegionFromId(61), true);
}

void gf_SetNewAlliancesandSettings () {
    // Automatic Variable Declarations
    playergroup auto69519CB4_g;
    int auto69519CB4_var;
    playergroup autoF1A6802B_g;
    int autoF1A6802B_var;

    // Implementation
    if ((gv_initialVote.lv_selectedgamemode == 1)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamPlayersGroup1, gv_actualPlayerzonTeam[1]);
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamPlayersGroup2, gv_actualPlayerzonTeam[2]);
    }
    else {
        PlayerGroupClear(gv_teamPlayersGroup1);
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_actualPlayerzonTeam[1], gv_teamPlayersGroup1);
        PlayerGroupClear(gv_teamPlayersGroup2);
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_actualPlayerzonTeam[2], gv_teamPlayersGroup2);
        auto69519CB4_g = gv_actualPlayerzonTeam[1];
        auto69519CB4_var = -1;
        while (true) {
            auto69519CB4_var = PlayerGroupNextPlayer(auto69519CB4_g, auto69519CB4_var);
            if (auto69519CB4_var < 0) { break; }
            gv_boostcolor[auto69519CB4_var] = 2;
        }
        autoF1A6802B_g = gv_actualPlayerzonTeam[2];
        autoF1A6802B_var = -1;
        while (true) {
            autoF1A6802B_var = PlayerGroupNextPlayer(autoF1A6802B_g, autoF1A6802B_var);
            if (autoF1A6802B_var < 0) { break; }
            gv_boostcolor[autoF1A6802B_var] = 1;
        }
        libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetPlayerGroupAlliance(gv_actualPlayerzonTeam[1], libNtve_ge_AllianceSetting_Ally);
        libNtve_gf_SetPlayerGroupAlliance(gv_actualPlayerzonTeam[2], libNtve_ge_AllianceSetting_Ally);
    }
}

trigger auto_gf_Cleanupsingledraftarea_Trigger = null;

void gf_Cleanupsingledraftarea () {
    if (auto_gf_Cleanupsingledraftarea_Trigger == null) {
        auto_gf_Cleanupsingledraftarea_Trigger = TriggerCreate("auto_gf_Cleanupsingledraftarea_TriggerFunc");
    }

    TriggerExecute(auto_gf_Cleanupsingledraftarea_Trigger, false, false);
}

bool auto_gf_Cleanupsingledraftarea_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2BE7BB2D_g;
    int auto2BE7BB2D_u;
    unit auto2BE7BB2D_var;

    // Implementation
    auto2BE7BB2D_g = UnitGroup(null, c_playerAny, RegionFromId(62), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2BE7BB2D_u = UnitGroupCount(auto2BE7BB2D_g, c_unitCountAll);
    for (;; auto2BE7BB2D_u -= 1) {
        auto2BE7BB2D_var = UnitGroupUnitFromEnd(auto2BE7BB2D_g, auto2BE7BB2D_u);
        if (auto2BE7BB2D_var == null) { break; }
        UnitRemove(auto2BE7BB2D_var);
    }
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(62), null);
    return true;
}

trigger auto_gf_InitTeamSelection_Trigger = null;

void gf_InitTeamSelection () {
    if (auto_gf_InitTeamSelection_Trigger == null) {
        auto_gf_InitTeamSelection_Trigger = TriggerCreate("auto_gf_InitTeamSelection_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitTeamSelection_Trigger, false, false);
}

bool auto_gf_InitTeamSelection_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[3] lv_dialogbg;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_dialogbg[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    if ((GameAttributeGameValue("2") == "0001") && (gv_testredlinemode == false)) {
        TriggerEnable(gt_VoteClick, true);
        gv_FaceoffTimer += 12;
        DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
        gv_initialVote.lv_fullscreenbgdialog = DialogLastCreated();
        DialogSetRenderPriority(DialogLastCreated(), 0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_dialogbg[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_dialogbg[2] = DialogControlLastCreated();
        gv_initialVote.lv_teamSelectModeEnabled = true;
        DialogCreate(3000, 250, c_anchorBottom, 0, 0, true);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_initialVote.lv_selectionDialog = DialogLastCreated();
        DialogSetRenderPriority(DialogLastCreated(), 2000);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 80, c_anchorBottom, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 1, c_anchorBottom, 0, 80, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(18.04, 27.06, 39.61), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 78, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_initialVote.lv_buttonBG[1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(5.10, 8.24, 13.33), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 12, c_anchorBottom, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(82.35, 15.69, 15.29), PlayerGroupAll());
        gv_initialVote.lv_buttonBar[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 66, c_anchorBottom, 0, 12, StringExternal("Param/Value/8C9DE0AC"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_initialVote.lv_buttonText[1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 78, c_anchorBottom, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        gv_initialVote.lv_button[1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_initialVote.lv_button[1], StringExternal("Param/Value/65EC2A45"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 78, c_anchorBottom, 251, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_initialVote.lv_buttonBG[2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(5.10, 8.24, 13.33), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 12, c_anchorBottom, 251, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(82.35, 15.69, 15.29), PlayerGroupAll());
        gv_initialVote.lv_buttonBar[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 66, c_anchorBottom, 251, 12, StringExternal("Param/Value/D217E083"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_initialVote.lv_buttonText[2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 78, c_anchorBottom, 252, 0, StringToText(""), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        gv_initialVote.lv_button[2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_initialVote.lv_button[2], StringExternal("Param/Value/DA1FAB47"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 78, c_anchorBottom, -252, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_initialVote.lv_buttonBG[3] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(5.10, 8.24, 13.33), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_initialVote.lv_selectionDialog, 250, 12, c_anchorBottom, -252, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(82.35, 15.69, 15.29), PlayerGroupAll());
        gv_initialVote.lv_buttonBar[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 66, c_anchorBottom, -252, 12, StringExternal("Param/Value/B67BFEB5"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_initialVote.lv_buttonText[3] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 78, c_anchorBottom, -252, 0, StringToText(""), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        gv_initialVote.lv_button[3] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_initialVote.lv_button[3], StringExternal("Param/Value/4FA9880F"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 80, c_anchorBottom, 0, 70, StringExternal("Param/Value/A364B255"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_initialVote.lv_modetotals[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 80, c_anchorBottom, 251, 70, StringExternal("Param/Value/8E5E217E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_initialVote.lv_modetotals[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 80, c_anchorBottom, -252, 70, StringExternal("Param/Value/AA9C2B67"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_initialVote.lv_modetotals[3] = DialogControlLastCreated();
        while (!((gv_initialVote.lv_iscountdownreadytoshow == true))) {
            Wait(0.1, c_timeGame);
        }
        gf_Makefuzzies();
        if ((gv_skipstart == false)) {
            libNtve_gf_CreateDialogItemLabel(gv_initialVote.lv_fullscreenbgdialog, 500, 500, c_anchorCenter, 0, -80, StringExternal("Param/Value/68B42ED1"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52", PlayerGroupAll());
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C6895DCC"), PlayerGroupAll());
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/701803EA"), PlayerGroupAll());
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0567E6F6"), PlayerGroupAll());
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/84283A3E"), PlayerGroupAll());
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0A66CD72"), PlayerGroupAll());
            Wait(1.0, c_timeReal);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 100.0);
        }

        DialogDestroy(gv_initialVote.lv_selectionDialog);
        TriggerEnable(gt_VoteClick, false);
        gf_DetectMode();
        Wait(0.5, c_timeReal);
        if ((gv_skipstart == true)) {
            gv_initialVote.lv_selectedgamemode = 1;
        }

        if ((gv_initialVote.lv_selectedgamemode == 1)) {
            if ((gv_skipstart == false)) {
                libNtve_gf_CreateDialogItemLabel(gv_initialVote.lv_fullscreenbgdialog, 500, 500, c_anchorCenter, 0, -80, StringExternal("Param/Value/FFA54577"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(gv_initialVote.lv_fullscreenbgdialog, 500, 500, c_anchorCenter, 0, -80, StringExternal("Param/Value/429B5352"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52", PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
            Wait(3.0, c_timeGame);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 100.0);
            Wait(1.0, c_timeGame);
            gv_initialVote.lv_readytoproceedtopregamestats = true;
        }
        else {
            if ((gv_initialVote.lv_selectedgamemode == 2)) {
                libNtve_gf_CreateDialogItemLabel(gv_initialVote.lv_fullscreenbgdialog, 500, 500, c_anchorCenter, 0, -80, StringExternal("Param/Value/69406D06"), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52", PlayerGroupAll());
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
                Wait(3.0, c_timeGame);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 100.0);
                Wait(1.0, c_timeGame);
                gv_initialVote.lv_readytoproceedtopregamestats = true;
            }
            else {
                if ((gv_initialVote.lv_selectedgamemode == 3)) {
                    libNtve_gf_CreateDialogItemLabel(gv_initialVote.lv_fullscreenbgdialog, 500, 500, c_anchorCenter, 0, -80, StringExternal("Param/Value/EA628FE8"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52", PlayerGroupAll());
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
                    Wait(3.0, c_timeGame);
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 100.0);
                    Wait(1.0, c_timeGame);
                    gf_Initsingledraft();
                }

            }
        }
        DialogControlFadeTransparency(lv_dialogbg[1], PlayerGroupAll(), 0.75, 100.0);
        DialogControlFadeTransparency(lv_dialogbg[2], PlayerGroupAll(), 0.75, 100.0);
        Wait(2.0, c_timeGame);
        gv__3kIntro.lv_stopeverything = true;
        DialogDestroy(gv_initialVote.lv_fullscreenbgdialog);
    }

    return true;
}

trigger auto_gf_UpdateVoteTotals_Trigger = null;

void gf_UpdateVoteTotals () {
    if (auto_gf_UpdateVoteTotals_Trigger == null) {
        auto_gf_UpdateVoteTotals_Trigger = TriggerCreate("auto_gf_UpdateVoteTotals_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateVoteTotals_Trigger, false, false);
}

bool auto_gf_UpdateVoteTotals_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int[4] lv_totals;

    // Automatic Variable Declarations
    playergroup auto57B0ED03_g;
    int auto57B0ED03_var;

    // Variable Initialization

    // Implementation
    auto57B0ED03_g = PlayerGroupActive();
    auto57B0ED03_var = -1;
    while (true) {
        auto57B0ED03_var = PlayerGroupNextPlayer(auto57B0ED03_g, auto57B0ED03_var);
        if (auto57B0ED03_var < 0) { break; }
        if ((gv_initialVote.lv_playerVotes[auto57B0ED03_var] == 1)) {
            lv_totals[1] += 1;
        }
        else {
            if ((gv_initialVote.lv_playerVotes[auto57B0ED03_var] == 2)) {
                lv_totals[2] += 1;
            }
            else {
                if ((gv_initialVote.lv_playerVotes[auto57B0ED03_var] == 3)) {
                    lv_totals[3] += 1;
                }

            }
        }
    }
    TextExpressionSetToken("Param/Expression/03D20978", "A", IntToText(lv_totals[1]));
    libNtve_gf_SetDialogItemText(gv_initialVote.lv_modetotals[1], TextExpressionAssemble("Param/Expression/03D20978"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/1FC7FC43", "A", IntToText(lv_totals[2]));
    libNtve_gf_SetDialogItemText(gv_initialVote.lv_modetotals[2], TextExpressionAssemble("Param/Expression/1FC7FC43"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/5686E3BF", "A", IntToText(lv_totals[3]));
    libNtve_gf_SetDialogItemText(gv_initialVote.lv_modetotals[3], TextExpressionAssemble("Param/Expression/5686E3BF"), PlayerGroupAll());
    return true;
}

trigger auto_gf_DisableModeButton_Trigger = null;
int auto_gf_DisableModeButton_lp_button;
playergroup auto_gf_DisableModeButton_lp_playerGroup;

void gf_DisableModeButton (int lp_button, playergroup lp_playerGroup) {
    auto_gf_DisableModeButton_lp_button = lp_button;
    auto_gf_DisableModeButton_lp_playerGroup = lp_playerGroup;

    if (auto_gf_DisableModeButton_Trigger == null) {
        auto_gf_DisableModeButton_Trigger = TriggerCreate("auto_gf_DisableModeButton_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisableModeButton_Trigger, false, false);
}

bool auto_gf_DisableModeButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_button = auto_gf_DisableModeButton_lp_button;
    playergroup lp_playerGroup = auto_gf_DisableModeButton_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_button == 1)) {
        DialogControlSetVisible(gv_initialVote.lv_button[1], lp_playerGroup, false);
        DialogControlSetVisible(gv_initialVote.lv_button[2], lp_playerGroup, false);
        DialogControlSetVisible(gv_initialVote.lv_button[3], lp_playerGroup, false);
        DialogControlFadeTransparency(gv_initialVote.lv_buttonBG[1], lp_playerGroup, 0.5, 70.0);
        DialogControlFadeTransparency(gv_initialVote.lv_buttonBar[1], lp_playerGroup, 0.5, 70.0);
        DialogControlFadeTransparency(gv_initialVote.lv_buttonText[1], lp_playerGroup, 0.5, 70.0);
    }
    else {
        if ((lp_button == 2)) {
            DialogControlSetVisible(gv_initialVote.lv_button[1], lp_playerGroup, false);
            DialogControlSetVisible(gv_initialVote.lv_button[2], lp_playerGroup, false);
            DialogControlSetVisible(gv_initialVote.lv_button[3], lp_playerGroup, false);
            DialogControlFadeTransparency(gv_initialVote.lv_buttonBG[2], lp_playerGroup, 0.5, 70.0);
            DialogControlFadeTransparency(gv_initialVote.lv_buttonBar[2], lp_playerGroup, 0.5, 70.0);
            DialogControlFadeTransparency(gv_initialVote.lv_buttonText[2], lp_playerGroup, 0.5, 70.0);
        }
        else {
            if ((lp_button == 3)) {
                DialogControlSetVisible(gv_initialVote.lv_button[1], lp_playerGroup, false);
                DialogControlSetVisible(gv_initialVote.lv_button[2], lp_playerGroup, false);
                DialogControlSetVisible(gv_initialVote.lv_button[3], lp_playerGroup, false);
                DialogControlFadeTransparency(gv_initialVote.lv_buttonBG[3], lp_playerGroup, 0.5, 70.0);
                DialogControlFadeTransparency(gv_initialVote.lv_buttonBar[3], lp_playerGroup, 0.5, 70.0);
                DialogControlFadeTransparency(gv_initialVote.lv_buttonText[3], lp_playerGroup, 0.5, 70.0);
            }

        }
    }
    return true;
}

void gf_DetectMode () {
    // Variable Declarations
    int[4] lv_totals;

    // Automatic Variable Declarations
    playergroup auto4DFE2D57_g;
    int auto4DFE2D57_var;

    // Variable Initialization

    // Implementation
    auto4DFE2D57_g = PlayerGroupActive();
    auto4DFE2D57_var = -1;
    while (true) {
        auto4DFE2D57_var = PlayerGroupNextPlayer(auto4DFE2D57_g, auto4DFE2D57_var);
        if (auto4DFE2D57_var < 0) { break; }
        if ((gv_initialVote.lv_playerVotes[auto4DFE2D57_var] == 1)) {
            lv_totals[1] += 1;
        }
        else {
            if ((gv_initialVote.lv_playerVotes[auto4DFE2D57_var] == 2)) {
                lv_totals[2] += 1;
            }
            else {
                if ((gv_initialVote.lv_playerVotes[auto4DFE2D57_var] == 3)) {
                    lv_totals[3] += 1;
                }

            }
        }
    }
    if ((lv_totals[3] >= lv_totals[2]) && (lv_totals[3] >= lv_totals[1])) {
        gv_initialVote.lv_selectedgamemode = 3;
    }
    else {
        if ((lv_totals[1] > lv_totals[3]) && (lv_totals[1] >= lv_totals[2])) {
            gv_initialVote.lv_selectedgamemode = 1;
        }
        else {
            if ((lv_totals[2] > lv_totals[3]) && (lv_totals[2] >= lv_totals[1])) {
                gv_initialVote.lv_selectedgamemode = 2;
                gf_Setautobalanceteams();
            }

        }
    }
}

void gf_Setautobalanceteams () {
    // Variable Declarations
    int lv_int;
    bool lv_putonteam1;

    // Automatic Variable Declarations
    playergroup autoC0093EE4_g;
    int autoC0093EE4_var;
    const int autoF11C15FA_ae = 8;
    int autoF11C15FA_var;

    // Variable Initialization
    lv_putonteam1 = true;

    // Implementation
    PlayerGroupClear(gv_actualPlayerzonTeam[1]);
    PlayerGroupClear(gv_actualPlayerzonTeam[2]);
    autoC0093EE4_g = PlayerGroupActive();
    autoC0093EE4_var = -1;
    while (true) {
        autoC0093EE4_var = PlayerGroupNextPlayer(autoC0093EE4_g, autoC0093EE4_var);
        if (autoC0093EE4_var < 0) { break; }
        gv_sort.lv_playerGamePlayed[autoC0093EE4_var] = (gv_stats_GamesPlayed[autoC0093EE4_var] + BankValueGetAsInt(gv_Banks[autoC0093EE4_var], "Stats", "LegacyGames"));
    }
    gf_Sortthescorearray();
    autoF11C15FA_var = 1;
    for ( ; autoF11C15FA_var <= autoF11C15FA_ae; autoF11C15FA_var += 1 ) {
        if ((PlayerStatus(gv_sort.lv_bestPlayerOrder[autoF11C15FA_var]) == c_playerStatusActive)) {
            if ((lv_putonteam1 == true)) {
                PlayerGroupAdd(gv_actualPlayerzonTeam[1], gv_sort.lv_bestPlayerOrder[autoF11C15FA_var]);
                gv_shieldcolor[gv_sort.lv_bestPlayerOrder[autoF11C15FA_var]] = 2;
                lv_putonteam1 = false;
            }
            else {
                PlayerGroupAdd(gv_actualPlayerzonTeam[2], gv_sort.lv_bestPlayerOrder[autoF11C15FA_var]);
                gv_shieldcolor[gv_sort.lv_bestPlayerOrder[autoF11C15FA_var]] = 1;
                lv_putonteam1 = true;
            }
        }

    }
}

void gf_Sortthescorearray () {
    // Variable Declarations
    int lv_tempbestpoints;
    int lv_bestplayer;
    int lv_position;
    bool[9] lv_playerhasbeenplaced;

    // Automatic Variable Declarations
    const int auto7CF79CCF_ae = 8;
    int auto7CF79CCF_var;

    // Variable Initialization
    lv_position = 1;

    // Implementation
    while ((lv_position < 9)) {
        lv_tempbestpoints = 0;
        auto7CF79CCF_var = 1;
        for ( ; auto7CF79CCF_var <= auto7CF79CCF_ae; auto7CF79CCF_var += 1 ) {
            if ((gv_sort.lv_playerGamePlayed[auto7CF79CCF_var] >= lv_tempbestpoints) && (lv_playerhasbeenplaced[auto7CF79CCF_var] == false)) {
                lv_tempbestpoints = gv_sort.lv_playerGamePlayed[auto7CF79CCF_var];
                lv_bestplayer = auto7CF79CCF_var;
            }

        }
        gv_sort.lv_bestPlayerOrder[lv_position] = lv_bestplayer;
        lv_playerhasbeenplaced[lv_bestplayer] = true;
        lv_position += 1;
    }
}

trigger auto_gf_Checkforleaversingledraft_Trigger = null;

void gf_Checkforleaversingledraft () {
    if (auto_gf_Checkforleaversingledraft_Trigger == null) {
        auto_gf_Checkforleaversingledraft_Trigger = TriggerCreate("auto_gf_Checkforleaversingledraft_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkforleaversingledraft_Trigger, false, false);
}

bool auto_gf_Checkforleaversingledraft_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAFEE7963_ae = 8;
    int autoAFEE7963_var;

    // Implementation
    while ((gv_singleDraft.lv_shouldwecheckforleavers == true)) {
        autoAFEE7963_var = 1;
        for ( ; autoAFEE7963_var <= autoAFEE7963_ae; autoAFEE7963_var += 1 ) {
            if ((UnitIsAlive(gv_singleDraft.lv_zealotPickerUnits[autoAFEE7963_var]) == true) && (gv_singleDraft.lv_ismarkedasaleaver[autoAFEE7963_var] == false) && (PlayerStatus(autoAFEE7963_var) != c_playerStatusActive)) {
                gv_singleDraft.lv_ismarkedasaleaver[autoAFEE7963_var] = true;
                ActorSend(libNtve_gf_MainActorofUnit(gv_singleDraft.lv_zealotPickerUnits[autoAFEE7963_var]), "SetTintColor {NULL 2.000000}");
                libNtve_gf_SetDialogItemText(gv_singleDraft.lv_nametagnames[autoAFEE7963_var], StringExternal("Param/Value/439307D8"), PlayerGroupAll());
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_Initsingledraft_Trigger = null;

void gf_Initsingledraft () {
    if (auto_gf_Initsingledraft_Trigger == null) {
        auto_gf_Initsingledraft_Trigger = TriggerCreate("auto_gf_Initsingledraft_TriggerFunc");
    }

    TriggerExecute(auto_gf_Initsingledraft_Trigger, false, false);
}

bool auto_gf_Initsingledraft_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totaloptins;
    playergroup lv_optinplayergroup;
    int lv_tempplayer;
    int lv_nonpickedPosition;
    playergroup lv_optinplayergroundmorethan50games;

    // Automatic Variable Declarations
    playergroup auto670726C3_g;
    int auto670726C3_var;
    playergroup auto9245068A_g;
    int auto9245068A_var;
    playergroup autoA56146E8_g;
    int autoA56146E8_var;
    const int auto31CD5A5F_ae = 8;
    int auto31CD5A5F_var;
    playergroup auto8612845D_g;
    int auto8612845D_var;
    playergroup auto3F0E1381_g;
    int auto3F0E1381_var;
    playergroup auto51B9FC66_g;
    int auto51B9FC66_var;
    playergroup autoBC16117C_g;
    int autoBC16117C_var;
    playergroup auto2E0A0B02_g;
    int auto2E0A0B02_var;
    playergroup auto8B596362_g;
    int auto8B596362_var;
    playergroup autoB18809FA_g;
    int autoB18809FA_var;
    const int auto6FA68F69_ae = 8;
    int auto6FA68F69_var;
    playergroup auto91A3CC18_g;
    int auto91A3CC18_var;

    // Variable Initialization
    lv_optinplayergroup = PlayerGroupEmpty();
    lv_optinplayergroundmorethan50games = PlayerGroupEmpty();

    // Implementation
    gf_BuildPregameStatsforSingleDraftNoTeams();
    TriggerEnable(gt_PlatformEasterEgg, true);
    PlayerGroupClear(gv_actualPlayerzonTeam[1]);
    PlayerGroupClear(gv_actualPlayerzonTeam[2]);
    auto670726C3_g = GameAttributePlayersForTeam(1);
    auto670726C3_var = -1;
    while (true) {
        auto670726C3_var = PlayerGroupNextPlayer(auto670726C3_g, auto670726C3_var);
        if (auto670726C3_var < 0) { break; }
        PlayerSetColorIndex(auto670726C3_var, 0, true);
        gv_singleDraft.lv_totalplayersvstotalvotes[1] += 1;
    }
    auto9245068A_g = GameAttributePlayersForTeam(2);
    auto9245068A_var = -1;
    while (true) {
        auto9245068A_var = PlayerGroupNextPlayer(auto9245068A_g, auto9245068A_var);
        if (auto9245068A_var < 0) { break; }
        PlayerSetColorIndex(auto9245068A_var, 0, true);
        gv_singleDraft.lv_totalplayersvstotalvotes[1] += 1;
    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
    GameSetLighting("StarshipDark", 0.0);
    gv_singleDraft.lv_nonpickedunitplatforms[1] = DoodadFromId(300);
    gv_singleDraft.lv_nonpickedunitplatforms[2] = DoodadFromId(318);
    gv_singleDraft.lv_nonpickedunitplatforms[3] = DoodadFromId(322);
    gv_singleDraft.lv_nonpickedunitplatforms[4] = DoodadFromId(367);
    gv_singleDraft.lv_nonpickedunitplatforms[5] = DoodadFromId(319);
    gv_singleDraft.lv_nonpickedunitplatforms[6] = DoodadFromId(320);
    gv_singleDraft.lv_beaconUnitSlotsRedTeam[1] = DoodadFromId(308);
    gv_singleDraft.lv_beaconUnitSlotsRedTeam[2] = DoodadFromId(295);
    gv_singleDraft.lv_beaconUnitSlotsRedTeam[3] = DoodadFromId(304);
    gv_singleDraft.lv_beaconUnitSlotsBlueTeam[1] = DoodadFromId(317);
    gv_singleDraft.lv_beaconUnitSlotsBlueTeam[2] = DoodadFromId(306);
    gv_singleDraft.lv_beaconUnitSlotsBlueTeam[3] = DoodadFromId(312);
    UnitSetState(UnitFromId(296), c_unitStateHighlightable, true);
    UnitSetState(UnitFromId(296), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(296), c_unitStateTooltipable, true);
    gv_FaceoffTimer += 9999;
    gv_singleDraft.lv_whopicksonwhichturn[1] = 1;
    gv_singleDraft.lv_whopicksonwhichturn[2] = 2;
    gv_singleDraft.lv_whopicksonwhichturn[3] = 2;
    gv_singleDraft.lv_whopicksonwhichturn[4] = 1;
    gv_singleDraft.lv_whopicksonwhichturn[5] = 1;
    gv_singleDraft.lv_whopicksonwhichturn[6] = 2;
    gv_singleDraft.lv_captainPoint[1] = Point(37.02, 215.91);
    gv_singleDraft.lv_captainPoint[2] = Point(61.51, 215.73);
    gv_singleDraft.lv_draftmiddlepoint = Point(49.29, 215.91);
    gv_singleDraft.lv_selectedPointTeam1[1] = Point(34.15, 211.55);
    gv_singleDraft.lv_selectedPointTeam1[2] = Point(32.0, 215.6);
    gv_singleDraft.lv_selectedPointTeam1[3] = Point(34.03, 219.68);
    gv_singleDraft.lv_selectedPointTeam2[1] = Point(64.22, 211.44);
    gv_singleDraft.lv_selectedPointTeam2[2] = Point(66.27, 215.59);
    gv_singleDraft.lv_selectedPointTeam2[3] = Point(64.34, 219.37);
    gv_singleDraft.lv_notSelectedPoint[1] = Point(42.36, 207.17);
    gv_singleDraft.lv_notSelectedPoint[2] = Point(49.44, 205.21);
    gv_singleDraft.lv_notSelectedPoint[3] = Point(56.67, 207.03);
    gv_singleDraft.lv_notSelectedPoint[4] = Point(42.31, 224.16);
    gv_singleDraft.lv_notSelectedPoint[5] = Point(49.55, 226.14);
    gv_singleDraft.lv_notSelectedPoint[6] = Point(56.58, 224.2);
    TriggerEnable(gt_DraftVoteClick1, true);
    CameraSetBounds(PlayerGroupAll(), RegionFromId(58), true);
    autoA56146E8_g = PlayerGroupAll();
    autoA56146E8_var = -1;
    while (true) {
        autoA56146E8_var = PlayerGroupNextPlayer(autoA56146E8_g, autoA56146E8_var);
        if (autoA56146E8_var < 0) { break; }
        CameraSave(autoA56146E8_var);
        CameraLockInput(autoA56146E8_var, true);
        CameraPan(autoA56146E8_var, RegionGetCenter(RegionFromId(58)), 0.0, -1, 10.0, false);
        libNtve_gf_SwooshCamera(autoA56146E8_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), 40.0, RegionGetCenter(RegionFromId(58)), 0.0);
        libNtve_gf_SwooshCamera(autoA56146E8_var, 40.0, 65.0, RegionGetCenter(RegionFromId(58)), 3.0);
    }
    DialogCreate(3000, 250, c_anchorBottom, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_singleDraft.lv_captainOptindialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 2000);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 80, c_anchorBottom, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 1, c_anchorBottom, 0, 80, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(18.04, 27.06, 39.61), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 80, c_anchorBottom, -435, 0, StringExternal("Param/Value/8E06C83C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize32", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_captainOptindialog, 250, 78, c_anchorBottom, -126, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_captainOptinVoteButtonBG[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(5.10, 8.24, 13.33), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_captainOptindialog, 250, 12, c_anchorBottom, -126, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(82.35, 15.69, 15.29), PlayerGroupAll());
    gv_singleDraft.lv_captainOptinVoteButtonBar[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 66, c_anchorBottom, -126, 12, StringExternal("Param/Value/9889773C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_singleDraft.lv_captainOptinVoteButtonText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 78, c_anchorBottom, -126, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_captainOptinVoteButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_captainOptindialog, 250, 78, c_anchorBottom, 126, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_captainOptinVoteButtonBG[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(5.10, 8.24, 13.33), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_captainOptindialog, 250, 12, c_anchorBottom, 126, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(82.35, 15.69, 15.29), PlayerGroupAll());
    gv_singleDraft.lv_captainOptinVoteButtonBar[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 66, c_anchorBottom, 126, 12, StringExternal("Param/Value/06091A4D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_singleDraft.lv_captainOptinVoteButtonText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 78, c_anchorBottom, 126, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_captainOptinVoteButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_singleDraft.lv_captainOptindialog, 200, 80, c_anchorBottom, 415, 0, StringExternal("Param/Value/2E79F101"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize32", PlayerGroupAll());
    Wait(1.0, c_timeReal);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/A0ACCB41"), PlayerGroupAll());
    Wait(1.0, c_timeReal);
    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6BA86E23"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/3C413ED4"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/505399F9"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/0DDB1C97"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/7DCDD0E0"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    if ((gv_singleDraft.lv_totalplayersvstotalvotes[1] > gv_singleDraft.lv_totalplayersvstotalvotes[2])) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/263DA5C4"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
    }

    TriggerEnable(gt_DraftVoteClick1, false);
    DialogDestroy(gv_singleDraft.lv_captainOptindialog);
    auto31CD5A5F_var = 1;
    for ( ; auto31CD5A5F_var <= auto31CD5A5F_ae; auto31CD5A5F_var += 1 ) {
        if ((gv_singleDraft.lv_captainVoteValues[auto31CD5A5F_var] == true) && (PlayerStatus(auto31CD5A5F_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_optinplayergroup, auto31CD5A5F_var);
        }

    }
    lv_totaloptins = PlayerGroupCount(lv_optinplayergroup);
    if ((lv_totaloptins == 0)) {
        gv_singleDraft.lv_iscaptainbattlehappening = true;
        gf_CaptainBattleStartcaptainbattle();
        while (!((gv_singleDraft.lv_iscaptainbattlehappening == false))) {
            Wait(0.0625, c_timeGame);
        }
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_singleDraft.lv_playersStillAlive, lv_optinplayergroup);
        lv_totaloptins = PlayerGroupCount(lv_optinplayergroup);
    }

    if ((lv_totaloptins == 0)) {
        autoBC16117C_g = GameAttributePlayersForTeam(1);
        autoBC16117C_var = -1;
        while (true) {
            autoBC16117C_var = PlayerGroupNextPlayer(autoBC16117C_g, autoBC16117C_var);
            if (autoBC16117C_var < 0) { break; }
            PlayerGroupAdd(lv_optinplayergroup, autoBC16117C_var);
        }
        auto2E0A0B02_g = GameAttributePlayersForTeam(2);
        auto2E0A0B02_var = -1;
        while (true) {
            auto2E0A0B02_var = PlayerGroupNextPlayer(auto2E0A0B02_g, auto2E0A0B02_var);
            if (auto2E0A0B02_var < 0) { break; }
            PlayerGroupAdd(lv_optinplayergroup, auto2E0A0B02_var);
        }
        lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
        gv_singleDraft.lv_actualCaptains[1] = lv_tempplayer;
        PlayerGroupRemove(lv_optinplayergroup, lv_tempplayer);
        lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
        gv_singleDraft.lv_actualCaptains[2] = lv_tempplayer;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/13B5B02C"));
    }
    else {
        if ((lv_totaloptins == 1)) {
            gv_singleDraft.lv_actualCaptains[1] = PlayerGroupPlayer(lv_optinplayergroup, 1);
            PlayerGroupRemove(lv_optinplayergroup, gv_singleDraft.lv_actualCaptains[1]);
            auto3F0E1381_g = GameAttributePlayersForTeam(1);
            auto3F0E1381_var = -1;
            while (true) {
                auto3F0E1381_var = PlayerGroupNextPlayer(auto3F0E1381_g, auto3F0E1381_var);
                if (auto3F0E1381_var < 0) { break; }
                if ((gv_singleDraft.lv_actualCaptains[1] != auto3F0E1381_var)) {
                    PlayerGroupAdd(lv_optinplayergroup, auto3F0E1381_var);
                }

            }
            auto51B9FC66_g = GameAttributePlayersForTeam(2);
            auto51B9FC66_var = -1;
            while (true) {
                auto51B9FC66_var = PlayerGroupNextPlayer(auto51B9FC66_g, auto51B9FC66_var);
                if (auto51B9FC66_var < 0) { break; }
                if ((gv_singleDraft.lv_actualCaptains[1] != auto51B9FC66_var)) {
                    PlayerGroupAdd(lv_optinplayergroup, auto51B9FC66_var);
                }

            }
            lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
            gv_singleDraft.lv_actualCaptains[2] = lv_tempplayer;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D328CFC2"));
        }
        else {
            if ((lv_totaloptins == 2)) {
                gv_singleDraft.lv_actualCaptains[1] = PlayerGroupPlayer(lv_optinplayergroup, 1);
                gv_singleDraft.lv_actualCaptains[2] = PlayerGroupPlayer(lv_optinplayergroup, 2);
            }
            else {
                if ((lv_totaloptins > 2)) {
                    auto8612845D_g = lv_optinplayergroup;
                    auto8612845D_var = -1;
                    while (true) {
                        auto8612845D_var = PlayerGroupNextPlayer(auto8612845D_g, auto8612845D_var);
                        if (auto8612845D_var < 0) { break; }
                        if (((gv_stats_GamesPlayed[auto8612845D_var] + BankValueGetAsInt(gv_Banks[auto8612845D_var], "Stats", "LegacyGames")) > 50)) {
                            PlayerGroupAdd(lv_optinplayergroundmorethan50games, auto8612845D_var);
                            PlayerGroupRemove(lv_optinplayergroup, auto8612845D_var);
                        }

                    }
                    if ((PlayerGroupCount(lv_optinplayergroundmorethan50games) == 0)) {
                        lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
                        gv_singleDraft.lv_actualCaptains[1] = lv_tempplayer;
                        PlayerGroupRemove(lv_optinplayergroup, lv_tempplayer);
                        lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
                        gv_singleDraft.lv_actualCaptains[2] = lv_tempplayer;
                    }
                    else {
                        if ((PlayerGroupCount(lv_optinplayergroundmorethan50games) == 1)) {
                            lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroundmorethan50games);
                            gv_singleDraft.lv_actualCaptains[1] = lv_tempplayer;
                            lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroup);
                            gv_singleDraft.lv_actualCaptains[2] = lv_tempplayer;
                        }
                        else {
                            if ((PlayerGroupCount(lv_optinplayergroundmorethan50games) > 1)) {
                                lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroundmorethan50games);
                                gv_singleDraft.lv_actualCaptains[1] = lv_tempplayer;
                                PlayerGroupRemove(lv_optinplayergroundmorethan50games, lv_tempplayer);
                                lv_tempplayer = gf_RandomPlayerFromPlayerGroup(lv_optinplayergroundmorethan50games);
                                gv_singleDraft.lv_actualCaptains[2] = lv_tempplayer;
                            }

                        }
                    }
                }

            }
        }
    }
    gf_Createspawninanimation(1.0, 0.0, gv_singleDraft.lv_captainPoint[1], Color(100.00, 0.00, 0.00), gv_singleDraft.lv_actualCaptains[1], true);
    ActorSend(ActorFromDoodad(DoodadFromId(314)), "SetTintColor 255,0,0 1.000000");
    PlayerSetColorIndex(gv_singleDraft.lv_actualCaptains[1], 1, true);
    PlayerGroupAdd(gv_actualPlayerzonTeam[1], gv_singleDraft.lv_actualCaptains[1]);
    gv_shieldcolor[gv_singleDraft.lv_actualCaptains[1]] = 2;
    Wait(1.0, c_timeGame);
    gf_Createspawninanimation(1.0, 0.0, gv_singleDraft.lv_captainPoint[2], Color(13.33, 63.53, 100.00), gv_singleDraft.lv_actualCaptains[2], true);
    ActorSend(ActorFromDoodad(DoodadFromId(310)), "SetTintColor 0,128,255 1.000000");
    PlayerSetColorIndex(gv_singleDraft.lv_actualCaptains[2], 2, true);
    PlayerGroupAdd(gv_actualPlayerzonTeam[2], gv_singleDraft.lv_actualCaptains[2]);
    gv_shieldcolor[gv_singleDraft.lv_actualCaptains[2]] = 1;
    Wait(3.0, c_timeGame);
    auto8B596362_g = GameAttributePlayersForTeam(1);
    auto8B596362_var = -1;
    while (true) {
        auto8B596362_var = PlayerGroupNextPlayer(auto8B596362_g, auto8B596362_var);
        if (auto8B596362_var < 0) { break; }
        if ((auto8B596362_var != gv_singleDraft.lv_actualCaptains[1]) && (auto8B596362_var != gv_singleDraft.lv_actualCaptains[2])) {
            PlayerGroupAdd(gv_singleDraft.lv_playerslefttobepicked, auto8B596362_var);
        }

    }
    autoB18809FA_g = GameAttributePlayersForTeam(2);
    autoB18809FA_var = -1;
    while (true) {
        autoB18809FA_var = PlayerGroupNextPlayer(autoB18809FA_g, autoB18809FA_var);
        if (autoB18809FA_var < 0) { break; }
        if ((autoB18809FA_var != gv_singleDraft.lv_actualCaptains[1]) && (autoB18809FA_var != gv_singleDraft.lv_actualCaptains[2])) {
            PlayerGroupAdd(gv_singleDraft.lv_playerslefttobepicked, autoB18809FA_var);
        }

    }
    if ((gv_testSingleDraft == true)) {
        auto6FA68F69_var = 1;
        for ( ; auto6FA68F69_var <= auto6FA68F69_ae; auto6FA68F69_var += 1 ) {
            if ((auto6FA68F69_var != gv_singleDraft.lv_actualCaptains[1]) && (auto6FA68F69_var != gv_singleDraft.lv_actualCaptains[2])) {
                PlayerGroupAdd(gv_singleDraft.lv_playerslefttobepicked, auto6FA68F69_var);
            }

        }
    }

    auto91A3CC18_g = gv_singleDraft.lv_playerslefttobepicked;
    auto91A3CC18_var = -1;
    while (true) {
        auto91A3CC18_var = PlayerGroupNextPlayer(auto91A3CC18_g, auto91A3CC18_var);
        if (auto91A3CC18_var < 0) { break; }
        lv_nonpickedPosition += 1;
        gv_singleDraft.lv_whichplayerisonwhichnonpickplatform[auto91A3CC18_var] = lv_nonpickedPosition;
        gf_Createspawninanimation(2.0, 2.0, gv_singleDraft.lv_notSelectedPoint[lv_nonpickedPosition], Color(100.00, 100.00, 100.00), auto91A3CC18_var, false);
    }
    TriggerEnable(gt_DraftRoleClick, true);
    TriggerEnable(gt_PickaplayerClick, true);
    TriggerEnable(gt_PlatformDance, true);
    gf_Createrolemenu();
    Wait(1.0, c_timeGame);
    gf_Createpillmenu();
    gf_StartPlayerTurn();
    gv_singleDraft.lv_shouldwecheckforleavers = true;
    gf_Checkforleaversingledraft();
    return true;
}

trigger auto_gf_CaptainBattleStartcaptainbattle_Trigger = null;

void gf_CaptainBattleStartcaptainbattle () {
    if (auto_gf_CaptainBattleStartcaptainbattle_Trigger == null) {
        auto_gf_CaptainBattleStartcaptainbattle_Trigger = TriggerCreate("auto_gf_CaptainBattleStartcaptainbattle_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattleStartcaptainbattle_Trigger, false, false);
}

bool auto_gf_CaptainBattleStartcaptainbattle_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA98A660A_ae = 8;
    int autoA98A660A_var;
    playergroup autoB82D7A91_g;
    int autoB82D7A91_var;
    const int auto16521BEC_ae = 8;
    int auto16521BEC_var;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F4DF9650"));
    TriggerEnable(gt_CaptainBattleAttack, true);
    TriggerEnable(gt_CaptainBattleBurst, true);
    TriggerEnable(gt_CaptainBattleMissileOOB, true);
    TriggerEnable(gt_CaptainBattleUnitDeath, true);
    gv_singleDraft.lv_battlespawnpoints[1] = PointFromId(68);
    gv_singleDraft.lv_battlespawnpoints[2] = PointFromId(71);
    gv_singleDraft.lv_battlespawnpoints[3] = PointFromId(72);
    gv_singleDraft.lv_battlespawnpoints[4] = PointFromId(73);
    gv_singleDraft.lv_battlespawnpoints[5] = PointFromId(74);
    gv_singleDraft.lv_battlespawnpoints[6] = PointFromId(76);
    gv_singleDraft.lv_battlespawnpoints[7] = PointFromId(78);
    gv_singleDraft.lv_battlespawnpoints[8] = PointFromId(79);
    autoA98A660A_var = 1;
    for ( ; autoA98A660A_var <= autoA98A660A_ae; autoA98A660A_var += 1 ) {
        if ((PlayerStatus(autoA98A660A_var) == c_playerStatusActive)) {
            libNtve_gf_UnitCreateFacingPoint(1, "CaptainWarrior", c_unitCreateIgnorePlacement, autoA98A660A_var, gv_singleDraft.lv_battlespawnpoints[autoA98A660A_var], Point(49.17, 215.59));
            UnitSelect(UnitLastCreated(), autoA98A660A_var, true);
            gv_singleDraft.lv_battleunits[autoA98A660A_var] = UnitLastCreated();
            UnitAbilityEnable(UnitLastCreated(), "move", false);
            UnitAbilityEnable(UnitLastCreated(), "Burst", false);
            UnitAbilityEnable(UnitLastCreated(), "FreezeTagFreezeBullet", false);
            UnitSetCursor(UnitLastCreated(), "Arrow_Prot");
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
            TextTagCreate(PlayerName(autoA98A660A_var), 20, UnitGetPosition(UnitLastCreated()), 0.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), gv_singleDraft.lv_battleunits[autoA98A660A_var], 1.5);
            TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 40.0);
            gv_singleDraft.lv_battleNametags[autoA98A660A_var] = TextTagLastCreated();
            PlayerGroupAdd(gv_singleDraft.lv_playersStillAlive, autoA98A660A_var);
        }

    }
    SoundPlayForPlayer(SoundLink("CityPlatformIntense", -1), c_maxPlayers, PlayerGroupAll(), 60.0, 0.0);
    DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupAll(), c_anchorBottom, 0, -20);
    autoB82D7A91_g = PlayerGroupActive();
    autoB82D7A91_var = -1;
    while (true) {
        autoB82D7A91_var = PlayerGroupNextPlayer(autoB82D7A91_g, autoB82D7A91_var);
        if (autoB82D7A91_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoB82D7A91_var, 65.0, 40.0, RegionGetCenter(RegionFromId(58)), 7.0);
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(2.0, c_timeGame);
    auto16521BEC_var = 1;
    for ( ; auto16521BEC_var <= auto16521BEC_ae; auto16521BEC_var += 1 ) {
        if ((UnitIsAlive(gv_singleDraft.lv_battleunits[auto16521BEC_var]) == true)) {
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto16521BEC_var], "move", true);
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto16521BEC_var], "Burst", true);
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto16521BEC_var], "FreezeTagFreezeBullet", true);
        }

    }
    gv_singleDraft.lv_canbulletsexist = true;
    gf_CaptainBattleCountdown();
    return true;
}

trigger auto_gf_CaptainBattleCountdown_Trigger = null;

void gf_CaptainBattleCountdown () {
    if (auto_gf_CaptainBattleCountdown_Trigger == null) {
        auto_gf_CaptainBattleCountdown_Trigger = TriggerCreate("auto_gf_CaptainBattleCountdown_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattleCountdown_Trigger, false, false);
}

bool auto_gf_CaptainBattleCountdown_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_time < 20) && (gv_singleDraft.lv_canbulletsexist == true)) {
        lv_time += 1;
        if (((lv_time == 20) || (lv_time == 19) || (lv_time == 18) || (lv_time == 17))) {
            SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
        }

        Wait(1.0, c_timeReal);
    }
    if ((lv_time >= 20) && (gv_singleDraft.lv_canbulletsexist == true)) {
        gv_singleDraft.lv_canbulletsexist = false;
        gf_CaptainBattleEndcaptainbattle();
    }

    return true;
}

void gf_CaptainBattleKnockback (unit lp_unit, fixed lp_angle) {
    // Variable Declarations
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 0.8;

    // Implementation
    while ((lv_distance > 0.0) && (UnitIsAlive(lp_unit) == true)) {
        UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_distance, lp_angle), true);
        lv_distance -= 0.035;
        Wait(0.0625, c_timeGame);
    }
}

trigger auto_gf_CaptainBattleShootmissile_Trigger = null;
unit auto_gf_CaptainBattleShootmissile_lp_shootingUnit;
fixed auto_gf_CaptainBattleShootmissile_lp_angle;

void gf_CaptainBattleShootmissile (unit lp_shootingUnit, fixed lp_angle) {
    auto_gf_CaptainBattleShootmissile_lp_shootingUnit = lp_shootingUnit;
    auto_gf_CaptainBattleShootmissile_lp_angle = lp_angle;

    if (auto_gf_CaptainBattleShootmissile_Trigger == null) {
        auto_gf_CaptainBattleShootmissile_Trigger = TriggerCreate("auto_gf_CaptainBattleShootmissile_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattleShootmissile_Trigger, false, false);
}

bool auto_gf_CaptainBattleShootmissile_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shootingUnit = auto_gf_CaptainBattleShootmissile_lp_shootingUnit;
    fixed lp_angle = auto_gf_CaptainBattleShootmissile_lp_angle;

    // Variable Declarations
    unit lv_themissile;
    bool lv_hashitsomething;
    fixed lv_speed;
    int lv_enemyteam;
    unitgroup lv_possibleimpacts;

    // Automatic Variable Declarations
    unitgroup auto5A8032AF_g;
    int auto5A8032AF_u;
    unit auto5A8032AF_var;

    // Variable Initialization
    lv_speed = 0.7;
    lv_possibleimpacts = UnitGroupEmpty();

    // Implementation
    if ((gv_singleDraft.lv_canbulletsexist == true)) {
        SoundPlayAtPointForPlayer(SoundLink("CityShootMissile", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_shootingUnit), 4.0, 100.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZHPL0122222222242", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lp_shootingUnit), 0.5, lp_angle));
        UnitSetFacing(UnitLastCreated(), lp_angle, 0.0);
        lv_themissile = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 35.0, 35.0, 35.0);
        UnitSetHeight(UnitLastCreated(), 8.3, 0.0);
        ActorSend(libNtve_gf_MainActorofUnit(lv_themissile), "SetTintColor {0,128,255 2.000000}");
    }

    while ((gv_singleDraft.lv_canbulletsexist == true) && (lv_hashitsomething == false) && (UnitIsAlive(lv_themissile) == true)) {
        UnitSetPosition(lv_themissile, PointWithOffsetPolar(UnitGetPosition(lv_themissile), lv_speed, lp_angle), true);
        auto5A8032AF_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_themissile), 0.8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5A8032AF_u = UnitGroupCount(auto5A8032AF_g, c_unitCountAll);
        for (;; auto5A8032AF_u -= 1) {
            auto5A8032AF_var = UnitGroupUnitFromEnd(auto5A8032AF_g, auto5A8032AF_u);
            if (auto5A8032AF_var == null) { break; }
            if ((lp_shootingUnit != auto5A8032AF_var) && ((auto5A8032AF_var == gv_singleDraft.lv_battleunits[1]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[2]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[3]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[4]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[5]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[6]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[7]) || (auto5A8032AF_var == gv_singleDraft.lv_battleunits[8]))) {
                lv_hashitsomething = true;
                gf_CaptainBattlemissileimpact(auto5A8032AF_var, AngleBetweenPoints(UnitGetPosition(lv_themissile), UnitGetPosition(auto5A8032AF_var)));
            }

        }
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_themissile) == true)) {
        UnitRemove(lv_themissile);
    }

    return true;
}

trigger auto_gf_CaptainBattlemissileimpact_Trigger = null;
unit auto_gf_CaptainBattlemissileimpact_lp_unit;
fixed auto_gf_CaptainBattlemissileimpact_lp_angle;

void gf_CaptainBattlemissileimpact (unit lp_unit, fixed lp_angle) {
    auto_gf_CaptainBattlemissileimpact_lp_unit = lp_unit;
    auto_gf_CaptainBattlemissileimpact_lp_angle = lp_angle;

    if (auto_gf_CaptainBattlemissileimpact_Trigger == null) {
        auto_gf_CaptainBattlemissileimpact_Trigger = TriggerCreate("auto_gf_CaptainBattlemissileimpact_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattlemissileimpact_Trigger, false, false);
}

bool auto_gf_CaptainBattlemissileimpact_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CaptainBattlemissileimpact_lp_unit;
    fixed lp_angle = auto_gf_CaptainBattlemissileimpact_lp_angle;

    // Variable Declarations
    actor[3] lv_actors;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_singleDraft.lv_canbulletsexist == true)) {
        SoundPlayAtPointForPlayer(SoundLink("CityMissileImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 4.0, 100.0, 0.0);
        libNtve_gf_CreateModelAtPoint("KerriganWeaponImpact", PointWithOffsetPolar(UnitGetPosition(lp_unit), 0.5, (lp_angle - 180.0)));
        libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 0.500000");
        lv_actors[1] = libNtve_gf_ActorLastCreated();
        gf_CaptainBattleKnockback(lp_unit, lp_angle);
        libNtve_gf_AttachActorToUnit(lp_unit, "FireMedium", "Ref_Origin");
        lv_actors[2] = libNtve_gf_ActorLastCreated();
        Wait(2.0, c_timeGame);
        ActorSend(lv_actors[1], "Destroy Immediate");
        ActorSend(lv_actors[2], "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_CaptainBattlemissileoob_Trigger = null;
unit auto_gf_CaptainBattlemissileoob_lp_unit;

void gf_CaptainBattlemissileoob (unit lp_unit) {
    auto_gf_CaptainBattlemissileoob_lp_unit = lp_unit;

    if (auto_gf_CaptainBattlemissileoob_Trigger == null) {
        auto_gf_CaptainBattlemissileoob_Trigger = TriggerCreate("auto_gf_CaptainBattlemissileoob_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattlemissileoob_Trigger, false, false);
}

bool auto_gf_CaptainBattlemissileoob_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CaptainBattlemissileoob_lp_unit;

    // Variable Declarations
    actor[3] lv_actors;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_singleDraft.lv_canbulletsexist == true)) {
        SoundPlayAtPointForPlayer(SoundLink("CityMissileImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 4.0, 100.0, 0.0);
        libNtve_gf_CreateModelAtPoint("KerriganWeaponImpact", PointWithOffsetPolar(UnitGetPosition(lp_unit), 0.0, 0.0));
        libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 0.500000");
        lv_actors[1] = libNtve_gf_ActorLastCreated();
        UnitRemove(lp_unit);
        Wait(2.0, c_timeGame);
        ActorSend(lv_actors[1], "Destroy Immediate");
    }

    return true;
}

trigger auto_gf_G15Charge_Trigger = null;
unit auto_gf_G15Charge_lp_unit;

void gf_G15Charge (unit lp_unit) {
    auto_gf_G15Charge_lp_unit = lp_unit;

    if (auto_gf_G15Charge_Trigger == null) {
        auto_gf_G15Charge_Trigger = TriggerCreate("auto_gf_G15Charge_TriggerFunc");
    }

    TriggerExecute(auto_gf_G15Charge_Trigger, false, false);
}

bool auto_gf_G15Charge_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_G15Charge_lp_unit;

    // Variable Declarations
    fixed lv_distance;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 0.7;
    lv_angle = UnitGetCustomValue(lp_unit, 0);

    // Implementation
    libNtve_gf_CreateModelAtPoint("ShuttleTransportUnloadModel", UnitGetPosition(lp_unit));
    libNtve_gf_AttachModelToUnit(lp_unit, "MothershipCoreEnergizeImpact", "Ref_Shield");
    SoundPlay(SoundLink("CaptainWarriorShootSound", -1), PlayerGroupAll(), 80.0, 0.0);
    while ((lv_distance > 0.0)) {
        UnitSetPosition(lp_unit, PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_distance, lv_angle), true);
        lv_distance -= 0.1;
        lv_angle = UnitGetCustomValue(lp_unit, 0);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_CaptainBattleEndcaptainbattle_Trigger = null;

void gf_CaptainBattleEndcaptainbattle () {
    if (auto_gf_CaptainBattleEndcaptainbattle_Trigger == null) {
        auto_gf_CaptainBattleEndcaptainbattle_Trigger = TriggerCreate("auto_gf_CaptainBattleEndcaptainbattle_TriggerFunc");
    }

    TriggerExecute(auto_gf_CaptainBattleEndcaptainbattle_Trigger, false, false);
}

bool auto_gf_CaptainBattleEndcaptainbattle_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto111973D0_ae = 8;
    int auto111973D0_var;
    const int autoF6A790D3_ae = 8;
    int autoF6A790D3_var;
    playergroup auto0AF00546_g;
    int auto0AF00546_var;

    // Implementation
    gv_singleDraft.lv_canbulletsexist = false;
    auto111973D0_var = 1;
    for ( ; auto111973D0_var <= auto111973D0_ae; auto111973D0_var += 1 ) {
        if ((PlayerStatus(auto111973D0_var) == c_playerStatusActive)) {
            libNtve_gf_SwooshCamera(auto111973D0_var, 40.0, 65.0, RegionGetCenter(RegionFromId(58)), 3.0);
        }

        if ((UnitIsAlive(gv_singleDraft.lv_battleunits[auto111973D0_var]) == true)) {
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto111973D0_var], "move", false);
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto111973D0_var], "Burst", false);
            UnitAbilityEnable(gv_singleDraft.lv_battleunits[auto111973D0_var], "FreezeTagFreezeBullet", false);
        }

    }
    TriggerEnable(gt_CaptainBattleAttack, false);
    TriggerEnable(gt_CaptainBattleBurst, false);
    TriggerEnable(gt_CaptainBattleMissileOOB, false);
    TriggerEnable(gt_CaptainBattleUnitDeath, false);
    Wait(3.0, c_timeGame);
    SoundStop(gv_singleDraft.lv_battleMusic, true);
    autoF6A790D3_var = 1;
    for ( ; autoF6A790D3_var <= autoF6A790D3_ae; autoF6A790D3_var += 1 ) {
        TextTagDestroy(gv_singleDraft.lv_battleNametags[autoF6A790D3_var]);
        if ((UnitIsAlive(gv_singleDraft.lv_battleunits[autoF6A790D3_var]) == true)) {
            UnitRemove(gv_singleDraft.lv_battleunits[autoF6A790D3_var]);
        }

    }
    gv_singleDraft.lv_iscaptainbattlehappening = false;
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto0AF00546_g = PlayerGroupAll();
    auto0AF00546_var = -1;
    while (true) {
        auto0AF00546_var = PlayerGroupNextPlayer(auto0AF00546_g, auto0AF00546_var);
        if (auto0AF00546_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], auto0AF00546_var) == true)) {
            DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto0AF00546_var), c_anchorBottom, 0, -20);
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto0AF00546_var), c_anchorBottomRight, 0, 0);
            DialogSetPosition(gv_PowerBarDialog[auto0AF00546_var], c_anchorBottom, 0, 300);
        }
        else {
            UISetFrameVisible(PlayerGroupSingle(auto0AF00546_var), c_syncFrameTypeAllianceButton, false);
            DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto0AF00546_var), c_anchorBottom, 0, -9999);
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto0AF00546_var), c_anchorBottomRight, 0, -9999);
            DialogSetPosition(gv_PowerBarDialog[auto0AF00546_var], c_anchorBottom, 0, 150);
        }
    }
    return true;
}

trigger auto_gf_StartPlayerTurn_Trigger = null;

void gf_StartPlayerTurn () {
    if (auto_gf_StartPlayerTurn_Trigger == null) {
        auto_gf_StartPlayerTurn_Trigger = TriggerCreate("auto_gf_StartPlayerTurn_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartPlayerTurn_Trigger, false, false);
}

bool auto_gf_StartPlayerTurn_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(gv_singleDraft.lv_playerslefttobepicked) > 0)) {
        gv_singleDraft.lv_currentTurnNumber += 1;
        gf_StartTurnTimer(gv_singleDraft.lv_whopicksonwhichturn[gv_singleDraft.lv_currentTurnNumber], 15);
        DialogControlFadeTransparency(gv_singleDraft.lv_pills[gv_singleDraft.lv_currentTurnNumber], PlayerGroupAll(), 0.5, 0.0);
        gf_AnimatePointertoNextTurn();
        if ((gv_singleDraft.lv_whopicksonwhichturn[gv_singleDraft.lv_currentTurnNumber] == 1)) {
            SoundPlayForPlayer(SoundLink("StartTurn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gv_singleDraft.lv_whichslotisupforwhichteam[1] += 1;
            if ((PlayerGroupCount(gv_singleDraft.lv_playerslefttobepicked) == 1)) {
                Wait(1.0, c_timeGame);
                gf_Pickaplayer(gf_RandomPlayerFromPlayerGroup(gv_singleDraft.lv_playerslefttobepicked), gv_singleDraft.lv_actualCaptains[1], false);
            }
            else {
                DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[2], PlayerGroupAll(), false);
                DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[1], PlayerGroupAll(), true);
                gf_ShowPickButtonstoPlayer(gv_singleDraft.lv_actualCaptains[1]);
            }
        }
        else {
            SoundPlayForPlayer(SoundLink("StartTurn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gv_singleDraft.lv_whichslotisupforwhichteam[2] += 1;
            if ((PlayerGroupCount(gv_singleDraft.lv_playerslefttobepicked) == 1)) {
                Wait(1.0, c_timeGame);
                gf_Pickaplayer(gf_RandomPlayerFromPlayerGroup(gv_singleDraft.lv_playerslefttobepicked), gv_singleDraft.lv_actualCaptains[2], false);
            }
            else {
                DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[2], PlayerGroupAll(), true);
                DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[1], PlayerGroupAll(), false);
                gf_ShowPickButtonstoPlayer(gv_singleDraft.lv_actualCaptains[2]);
            }
        }
    }
    else {
        gf_Endsingledraft();
    }
    return true;
}

trigger auto_gf_StartTurnTimer_Trigger = null;
int auto_gf_StartTurnTimer_lp_team;
int auto_gf_StartTurnTimer_lp_totalTime;

void gf_StartTurnTimer (int lp_team, int lp_totalTime) {
    auto_gf_StartTurnTimer_lp_team = lp_team;
    auto_gf_StartTurnTimer_lp_totalTime = lp_totalTime;

    if (auto_gf_StartTurnTimer_Trigger == null) {
        auto_gf_StartTurnTimer_Trigger = TriggerCreate("auto_gf_StartTurnTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartTurnTimer_Trigger, false, false);
}

bool auto_gf_StartTurnTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_StartTurnTimer_lp_team;
    int lp_totalTime = auto_gf_StartTurnTimer_lp_totalTime;

    // Variable Declarations
    int lv_timeRemaining;
    int lv_beginningTurn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_timeRemaining = lp_totalTime;
    while ((lv_timeRemaining > -1) && (gv_singleDraft.lv_stopTimer == false)) {
        TextExpressionSetToken("Param/Expression/9F278DB3", "A", IntToText(lv_timeRemaining));
        libNtve_gf_SetDialogItemText(gv_singleDraft.lv_timeremainingforpicktext[lp_team], TextExpressionAssemble("Param/Expression/9F278DB3"), PlayerGroupAll());
        if ((lv_timeRemaining < 7)) {
            DialogControlSetVisible(gv_singleDraft.lv_timeremainingforpicktext[lp_team], PlayerGroupAll(), true);
            SoundPlayForPlayer(SoundLink("TimeIsLow", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_timeRemaining == 0)) {
            gf_HidePickButtonsfromPlayer(gv_singleDraft.lv_actualCaptains[gv_singleDraft.lv_whopicksonwhichturn[gv_singleDraft.lv_currentTurnNumber]]);
        }

        lv_timeRemaining -= 1;
        Wait(1.0, c_timeReal);
    }
    DialogControlSetVisible(gv_singleDraft.lv_timeremainingforpicktext[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_timeremainingforpicktext[2], PlayerGroupAll(), false);
    Wait(0.25, c_timeReal);
    if ((lv_timeRemaining == -1) && (gv_singleDraft.lv_stopTimer == false)) {
        gf_Pickaplayer(gf_RandomPlayerFromPlayerGroup(gv_singleDraft.lv_playerslefttobepicked), gv_singleDraft.lv_actualCaptains[gv_singleDraft.lv_whopicksonwhichturn[gv_singleDraft.lv_currentTurnNumber]], true);
    }

    gv_singleDraft.lv_stopTimer = false;
    return true;
}

trigger auto_gf_Pickaplayer_Trigger = null;
int auto_gf_Pickaplayer_lp_pickedPlayer;
int auto_gf_Pickaplayer_lp_captainwhopicked;
bool auto_gf_Pickaplayer_lp_pickingbecausetimertimedout;

void gf_Pickaplayer (int lp_pickedPlayer, int lp_captainwhopicked, bool lp_pickingbecausetimertimedout) {
    auto_gf_Pickaplayer_lp_pickedPlayer = lp_pickedPlayer;
    auto_gf_Pickaplayer_lp_captainwhopicked = lp_captainwhopicked;
    auto_gf_Pickaplayer_lp_pickingbecausetimertimedout = lp_pickingbecausetimertimedout;

    if (auto_gf_Pickaplayer_Trigger == null) {
        auto_gf_Pickaplayer_Trigger = TriggerCreate("auto_gf_Pickaplayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Pickaplayer_Trigger, false, false);
}

bool auto_gf_Pickaplayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_pickedPlayer = auto_gf_Pickaplayer_lp_pickedPlayer;
    int lp_captainwhopicked = auto_gf_Pickaplayer_lp_captainwhopicked;
    bool lp_pickingbecausetimertimedout = auto_gf_Pickaplayer_lp_pickingbecausetimertimedout;

    // Variable Declarations
    int lv_selectedplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedplayer = lp_pickedPlayer;

    // Implementation
    if ((lp_pickingbecausetimertimedout == false)) {
        gv_singleDraft.lv_stopTimer = true;
    }

    if ((PlayerGroupHasPlayer(gv_singleDraft.lv_playerslefttobepicked, lv_selectedplayer) == true)) {
        gf_HidePickButtonsfromPlayer(lp_captainwhopicked);
        PlayerGroupRemove(gv_singleDraft.lv_playerslefttobepicked, lv_selectedplayer);
        if ((gv_singleDraft.lv_whopicksonwhichturn[gv_singleDraft.lv_currentTurnNumber] == 1)) {
            PlayerGroupAdd(gv_actualPlayerzonTeam[1], lv_selectedplayer);
            gv_shieldcolor[lv_selectedplayer] = 2;
            PlayerSetColorIndex(lv_selectedplayer, 1, true);
            libNtve_gf_SetPlayerGroupAlliance(gv_actualPlayerzonTeam[1], libNtve_ge_AllianceSetting_Ally);
            gf_SpawnOutAnimation(lv_selectedplayer);
            Wait(1.0, c_timeGame);
            gf_Createspawninanimation(1.0, 0.0, gv_singleDraft.lv_selectedPointTeam1[gv_singleDraft.lv_whichslotisupforwhichteam[1]], Color(100.00, 0.00, 0.00), lv_selectedplayer, true);
            ActorSend(ActorFromDoodad(gv_singleDraft.lv_beaconUnitSlotsRedTeam[gv_singleDraft.lv_whichslotisupforwhichteam[1]]), "SetTintColor 255,0,0 1.000000");
        }
        else {
            PlayerGroupAdd(gv_actualPlayerzonTeam[2], lv_selectedplayer);
            gv_shieldcolor[lv_selectedplayer] = 1;
            PlayerSetColorIndex(lv_selectedplayer, 2, true);
            libNtve_gf_SetPlayerGroupAlliance(gv_actualPlayerzonTeam[2], libNtve_ge_AllianceSetting_Ally);
            gf_SpawnOutAnimation(lv_selectedplayer);
            Wait(1.0, c_timeGame);
            gf_Createspawninanimation(1.0, 0.0, gv_singleDraft.lv_selectedPointTeam2[gv_singleDraft.lv_whichslotisupforwhichteam[2]], Color(13.33, 63.53, 100.00), lv_selectedplayer, true);
            ActorSend(ActorFromDoodad(gv_singleDraft.lv_beaconUnitSlotsBlueTeam[gv_singleDraft.lv_whichslotisupforwhichteam[2]]), "SetTintColor 0,128,255 1.000000");
        }
        Wait(1.0, c_timeGame);
        gf_StartPlayerTurn();
    }

    return true;
}

trigger auto_gf_DisableCaptainButton_Trigger = null;
int auto_gf_DisableCaptainButton_lp_button;
playergroup auto_gf_DisableCaptainButton_lp_playerGroup;

void gf_DisableCaptainButton (int lp_button, playergroup lp_playerGroup) {
    auto_gf_DisableCaptainButton_lp_button = lp_button;
    auto_gf_DisableCaptainButton_lp_playerGroup = lp_playerGroup;

    if (auto_gf_DisableCaptainButton_Trigger == null) {
        auto_gf_DisableCaptainButton_Trigger = TriggerCreate("auto_gf_DisableCaptainButton_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisableCaptainButton_Trigger, false, false);
}

bool auto_gf_DisableCaptainButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_button = auto_gf_DisableCaptainButton_lp_button;
    playergroup lp_playerGroup = auto_gf_DisableCaptainButton_lp_playerGroup;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_button == 1)) {
        DialogControlSetVisible(gv_singleDraft.lv_captainOptinVoteButton[1], lp_playerGroup, false);
        DialogControlSetVisible(gv_singleDraft.lv_captainOptinVoteButton[2], lp_playerGroup, false);
        DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonBG[1], lp_playerGroup, 0.5, 70.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonBar[1], lp_playerGroup, 0.5, 70.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonText[1], lp_playerGroup, 0.5, 70.0);
    }
    else {
        if ((lp_button == 2)) {
            DialogControlSetVisible(gv_singleDraft.lv_captainOptinVoteButton[1], lp_playerGroup, false);
            DialogControlSetVisible(gv_singleDraft.lv_captainOptinVoteButton[2], lp_playerGroup, false);
            DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonBG[2], lp_playerGroup, 0.5, 70.0);
            DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonBar[2], lp_playerGroup, 0.5, 70.0);
            DialogControlFadeTransparency(gv_singleDraft.lv_captainOptinVoteButtonText[2], lp_playerGroup, 0.5, 70.0);
        }

    }
    return true;
}

trigger auto_gf_AnimatePointertoNextTurn_Trigger = null;

void gf_AnimatePointertoNextTurn () {
    if (auto_gf_AnimatePointertoNextTurn_Trigger == null) {
        auto_gf_AnimatePointertoNextTurn_Trigger = TriggerCreate("auto_gf_AnimatePointertoNextTurn_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnimatePointertoNextTurn_Trigger, false, false);
}

bool auto_gf_AnimatePointertoNextTurn_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto17F804DA_n = 25;
    int auto17F804DA_i;

    // Implementation
    for (auto17F804DA_i = 1; auto17F804DA_i <= auto17F804DA_n; auto17F804DA_i += 1) {
        DialogControlSetPosition(gv_singleDraft.lv_pillPointer, PlayerGroupAll(), c_anchorBottom, (DialogControlGetOffsetX(gv_singleDraft.lv_pillPointer, 1) + 4), -5);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_ShowPickButtonstoPlayer_Trigger = null;
int auto_gf_ShowPickButtonstoPlayer_lp_player;

void gf_ShowPickButtonstoPlayer (int lp_player) {
    auto_gf_ShowPickButtonstoPlayer_lp_player = lp_player;

    if (auto_gf_ShowPickButtonstoPlayer_Trigger == null) {
        auto_gf_ShowPickButtonstoPlayer_Trigger = TriggerCreate("auto_gf_ShowPickButtonstoPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowPickButtonstoPlayer_Trigger, false, false);
}

bool auto_gf_ShowPickButtonstoPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ShowPickButtonstoPlayer_lp_player;

    // Automatic Variable Declarations
    const int autoD215F109_ae = 8;
    int autoD215F109_var;

    // Implementation
    autoD215F109_var = 1;
    for ( ; autoD215F109_var <= autoD215F109_ae; autoD215F109_var += 1 ) {
        if ((gv_singleDraft.lv_pickButtons[autoD215F109_var] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_singleDraft.lv_pickButtons[autoD215F109_var], PlayerGroupSingle(lp_player), true);
        }

    }
    return true;
}

trigger auto_gf_HidePickButtonsfromPlayer_Trigger = null;
int auto_gf_HidePickButtonsfromPlayer_lp_player;

void gf_HidePickButtonsfromPlayer (int lp_player) {
    auto_gf_HidePickButtonsfromPlayer_lp_player = lp_player;

    if (auto_gf_HidePickButtonsfromPlayer_Trigger == null) {
        auto_gf_HidePickButtonsfromPlayer_Trigger = TriggerCreate("auto_gf_HidePickButtonsfromPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_HidePickButtonsfromPlayer_Trigger, false, false);
}

bool auto_gf_HidePickButtonsfromPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_HidePickButtonsfromPlayer_lp_player;

    // Automatic Variable Declarations
    const int autoAB7FBF21_ae = 8;
    int autoAB7FBF21_var;

    // Implementation
    autoAB7FBF21_var = 1;
    for ( ; autoAB7FBF21_var <= autoAB7FBF21_ae; autoAB7FBF21_var += 1 ) {
        if ((gv_singleDraft.lv_pickButtons[autoAB7FBF21_var] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_singleDraft.lv_pickButtons[autoAB7FBF21_var], PlayerGroupSingle(lp_player), false);
        }

    }
    return true;
}

trigger auto_gf_Createpillmenu_Trigger = null;

void gf_Createpillmenu () {
    if (auto_gf_Createpillmenu_Trigger == null) {
        auto_gf_Createpillmenu_Trigger = TriggerCreate("auto_gf_Createpillmenu_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createpillmenu_Trigger, false, false);
}

bool auto_gf_Createpillmenu_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(3000, 70, c_anchorTop, 0, 0, true);
    gv_singleDraft.lv_pillmenubg = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 70, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTop, -650, 10, StringExternal("Param/Value/42DE0B8B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize24", PlayerGroupAll());
    gv_singleDraft.lv_teamsTurnText[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTop, 650, 10, StringExternal("Param/Value/832B90BA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    gv_singleDraft.lv_teamsTurnText[2] = DialogControlLastCreated();
    DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_teamsTurnText[2], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 25, c_anchorBottom, -345, -5, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
    gv_singleDraft.lv_pillPointer = DialogControlLastCreated();
    DialogCreate(600, 50, c_anchorTop, 20, 20, true);
    gv_singleDraft.lv_pillmenudialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 0, 0, StringToText(""), "redpill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[1] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 100, 0, StringToText(""), "bluepill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[2] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 200, 0, StringToText(""), "bluepill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 300, 0, StringToText(""), "redpill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[4] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 400, 0, StringToText(""), "redpill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[5] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 69, 13, c_anchorTopLeft, 500, 0, StringToText(""), "bluepill.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_pills[6] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    DialogCreate(3000, 250, c_anchorTop, 0, 0, true);
    gv_singleDraft.lv_timeremainingforpicktextdialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 80, c_anchorBottom, -547, 80, StringExternal("Param/Value/244F312F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    gv_singleDraft.lv_timeremainingforpicktext[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 80, c_anchorBottom, 550, 80, StringExternal("Param/Value/6B76E228"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    gv_singleDraft.lv_timeremainingforpicktext[2] = DialogControlLastCreated();
    DialogControlSetVisible(gv_singleDraft.lv_timeremainingforpicktext[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_timeremainingforpicktext[2], PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_BounceZealot_Trigger = null;
int auto_gf_BounceZealot_lp_player;

void gf_BounceZealot (int lp_player) {
    auto_gf_BounceZealot_lp_player = lp_player;

    if (auto_gf_BounceZealot_Trigger == null) {
        auto_gf_BounceZealot_Trigger = TriggerCreate("auto_gf_BounceZealot_TriggerFunc");
    }

    TriggerExecute(auto_gf_BounceZealot_Trigger, false, false);
}

bool auto_gf_BounceZealot_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_BounceZealot_lp_player;

    // Variable Declarations
    fixed lv_height;
    fixed lv_baseheight;
    unit lv_unit;
    bool lv_landed;
    fixed lv_heightchange;
    fixed lv_heightchangemodifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heightchange = 1.0;
    lv_heightchangemodifier = -0.05;

    // Implementation
    SoundPlayForPlayer(SoundLink("VoidSeeker_AttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    lv_height = UnitGetHeight(gv_singleDraft.lv_zealotPickerUnits[lp_player]);
    lv_baseheight = UnitGetHeight(gv_singleDraft.lv_zealotPickerUnits[lp_player]);
    lv_unit = gv_singleDraft.lv_zealotPickerUnits[lp_player];
    while ((UnitIsAlive(lv_unit) == true) && (lv_landed == false) && (PlayerGroupHasPlayer(gv_singleDraft.lv_playerslefttobepicked, lp_player) == true)) {
        lv_heightchange += lv_heightchangemodifier;
        lv_height += lv_heightchange;
        UnitSetHeight(lv_unit, lv_height, 0.0625);
        if ((lv_height <= lv_baseheight)) {
            lv_landed = true;
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_unit) == true) && (PlayerGroupHasPlayer(gv_singleDraft.lv_playerslefttobepicked, lp_player) == true)) {
        UnitSetHeight(lv_unit, lv_baseheight, 0.0625);
    }

    gv_isZealotBouncing[lp_player] = false;
    return true;
}

trigger auto_gf_SpawnOutAnimation_Trigger = null;
int auto_gf_SpawnOutAnimation_lp_player;

void gf_SpawnOutAnimation (int lp_player) {
    auto_gf_SpawnOutAnimation_lp_player = lp_player;

    if (auto_gf_SpawnOutAnimation_Trigger == null) {
        auto_gf_SpawnOutAnimation_Trigger = TriggerCreate("auto_gf_SpawnOutAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnOutAnimation_Trigger, false, false);
}

bool auto_gf_SpawnOutAnimation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SpawnOutAnimation_lp_player;

    // Variable Declarations
    actor lv_model;
    unit lv_zealot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_zealot = gv_singleDraft.lv_zealotPickerUnits[lp_player];
    SoundPlayAtPointForPlayer(SoundLink("SingleDraftWarpin", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_zealot), 3.0, 30.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(lv_zealot, "SetOpacity 0.000000 1.000000");
    libNtve_gf_CreateModelAtPoint("MothershipCoreEnergizeImpact", UnitGetPosition(lv_zealot));
    lv_model = libNtve_gf_ActorLastCreated();
    ActorSend(lv_model, libNtve_gf_SetHeight(2.0));
    ActorSend(lv_model, "SetScale 1.500000");
    Wait(3.0, c_timeGame);
    UnitRemove(lv_zealot);
    ActorSend(lv_model, "Destroy Immediate");
    return true;
}

trigger auto_gf_Createspawninanimation_Trigger = null;
fixed auto_gf_Createspawninanimation_lp_animationheight;
fixed auto_gf_Createspawninanimation_lp_unitheight;
point auto_gf_Createspawninanimation_lp_point;
color auto_gf_Createspawninanimation_lp_color;
int auto_gf_Createspawninanimation_lp_player;
bool auto_gf_Createspawninanimation_lp_picked;

void gf_Createspawninanimation (fixed lp_animationheight, fixed lp_unitheight, point lp_point, color lp_color, int lp_player, bool lp_picked) {
    auto_gf_Createspawninanimation_lp_animationheight = lp_animationheight;
    auto_gf_Createspawninanimation_lp_unitheight = lp_unitheight;
    auto_gf_Createspawninanimation_lp_point = lp_point;
    auto_gf_Createspawninanimation_lp_color = lp_color;
    auto_gf_Createspawninanimation_lp_player = lp_player;
    auto_gf_Createspawninanimation_lp_picked = lp_picked;

    if (auto_gf_Createspawninanimation_Trigger == null) {
        auto_gf_Createspawninanimation_Trigger = TriggerCreate("auto_gf_Createspawninanimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createspawninanimation_Trigger, false, false);
}

bool auto_gf_Createspawninanimation_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_animationheight = auto_gf_Createspawninanimation_lp_animationheight;
    fixed lp_unitheight = auto_gf_Createspawninanimation_lp_unitheight;
    point lp_point = auto_gf_Createspawninanimation_lp_point;
    color lp_color = auto_gf_Createspawninanimation_lp_color;
    int lp_player = auto_gf_Createspawninanimation_lp_player;
    bool lp_picked = auto_gf_Createspawninanimation_lp_picked;

    // Variable Declarations
    actor lv_model;
    unit lv_zealot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_singleDraft.lv_nametexttags[lp_player] != c_invalidDialogId)) {
        DialogDestroy(gv_singleDraft.lv_nametexttags[lp_player]);
    }

    SoundPlayAtPointForPlayer(SoundLink("SingleDraftWarpin", -1), c_maxPlayers, PlayerGroupAll(), lp_point, 3.0, 30.0, 0.0);
    libNtve_gf_CreateModelAtPoint("MothershipCoreEnergizeImpact", lp_point);
    lv_model = libNtve_gf_ActorLastCreated();
    ActorSend(lv_model, libNtve_gf_SetHeight(lp_animationheight));
    ActorSend(lv_model, "SetScale 1.500000");
    libNtve_gf_UnitCreateFacingPoint(1, "Zealot", c_unitCreateIgnorePlacement, lp_player, lp_point, gv_singleDraft.lv_draftmiddlepoint);
    gv_singleDraft.lv_zealotPickerUnits[lp_player] = UnitLastCreated();
    lv_zealot = UnitLastCreated();
    UnitSetScale(lv_zealot, 135.0, 135.0, 135.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_zealot), libNtve_gf_SetTeamColor(lp_color, lp_color));
    ActorSend(libNtve_gf_MainActorofUnit(lv_zealot), libNtve_gf_SetTintColor(lp_color, 10.0, 0.0));
    UnitSetHeight(lv_zealot, lp_unitheight, 0.0);
    UnitSetState(lv_zealot, c_unitStateHighlightable, false);
    UnitSetState(lv_zealot, c_unitStateCursorable, false);
    UnitSetState(lv_zealot, c_unitStateMoveSuppressed, false);
    UnitSetState(lv_zealot, c_unitStateSelectable, false);
    UnitSetState(lv_zealot, c_unitStateTargetable, false);
    if ((gv_singleDraft.lv_selectedRole[lp_player] == 2)) {
        libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[lp_player], "ModelSwap Immortal");
    }

    DialogCreate(202, 87, c_anchorCenter, 0, 0, true);
    gv_singleDraft.lv_nametexttags[lp_player] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    if ((lp_picked == false)) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorTopLeft, 35, 0, StringToText(""), StringExternal("Param/Value/40002355"), "Assets\\Textures\\ui_checkboxbutton_normaloverpressedover_terran.dds");
        gv_singleDraft.lv_pickButtons[lp_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_checkboxbutton_normalpressed_terran.dds", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 35, c_anchorTopLeft, 46, 53, PlayerName(lp_player), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_singleDraft.lv_nametagnames[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_color, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 28, 28, c_anchorTopLeft, 10, 55, StringToText(""), "Assets\\Textures\\075.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleiconimage[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/57D38D9C"), PlayerGroupAll());
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lv_zealot, "Ref_Origin", -80, -125);
    gf_Updateroleicons();
    if ((UnitIsAlive(gv_singleDraft.lv_zealotPickerUnits[lp_player]) == true) && (gv_singleDraft.lv_ismarkedasaleaver[lp_player] == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(gv_singleDraft.lv_zealotPickerUnits[lp_player]), "SetTintColor {NULL 2.000000}");
        libNtve_gf_SetDialogItemText(gv_singleDraft.lv_nametagnames[lp_player], StringExternal("Param/Value/3DD0012B"), PlayerGroupAll());
    }

    Wait(1.0, c_timeGame);
    if ((gv_singleDraft.lv_ismarkedasaleaver[lp_player] == false)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_zealot), "ClearTintColor 5.000000");
    }

    Wait(3.0, c_timeGame);
    ActorSend(lv_model, "Destroy Immediate");
    return true;
}

trigger auto_gf_Createrolemenu_Trigger = null;

void gf_Createrolemenu () {
    if (auto_gf_Createrolemenu_Trigger == null) {
        auto_gf_Createrolemenu_Trigger = TriggerCreate("auto_gf_Createrolemenu_TriggerFunc");
    }

    TriggerExecute(auto_gf_Createrolemenu_Trigger, false, false);
}

bool auto_gf_Createrolemenu_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 100, c_anchorBottom, 0, 35, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_singleDraft.lv_roleMenuDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), "position-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonBG[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 125, 0, StringToText(""), "position-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonBG[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 250, 0, StringToText(""), "position-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonBG[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 375, 0, StringToText(""), "position-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonBG[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 500, 0, StringToText(""), "position-background.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonBG[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 36, 36, c_anchorTopLeft, 32, 31, StringToText(""), "position-icon-any.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonIcons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 36, 36, c_anchorTopLeft, 157, 31, StringToText(""), "position-icon-goalie.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonIcons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 36, 36, c_anchorTopLeft, 282, 31, StringToText(""), "position-icon-attack.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonIcons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 36, 36, c_anchorTopLeft, 407, 31, StringToText(""), "position-icon-defend.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonIcons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 36, 36, c_anchorTopLeft, 533, 31, StringToText(""), "position-icon-support.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_roleMenuButtonIcons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/B38F2893"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_roleMenuButtonHotspots[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 125, 0, StringExternal("Param/Value/01860057"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_roleMenuButtonHotspots[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 250, 0, StringExternal("Param/Value/5F030B99"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_roleMenuButtonHotspots[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 375, 0, StringExternal("Param/Value/E1690E11"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_roleMenuButtonHotspots[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 500, 0, StringExternal("Param/Value/531ED809"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_singleDraft.lv_roleMenuButtonHotspots[5] = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[2], PlayerGroupAll(), 0.0, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[3], PlayerGroupAll(), 0.0, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[4], PlayerGroupAll(), 0.0, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[5], PlayerGroupAll(), 0.0, 40.0);
    return true;
}

trigger auto_gf_Updateroleicons_Trigger = null;

void gf_Updateroleicons () {
    if (auto_gf_Updateroleicons_Trigger == null) {
        auto_gf_Updateroleicons_Trigger = TriggerCreate("auto_gf_Updateroleicons_TriggerFunc");
    }

    TriggerExecute(auto_gf_Updateroleicons_Trigger, false, false);
}

bool auto_gf_Updateroleicons_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto06830A68_ae = 8;
    int auto06830A68_var;

    // Implementation
    auto06830A68_var = 1;
    for ( ; auto06830A68_var <= auto06830A68_ae; auto06830A68_var += 1 ) {
        if ((gv_singleDraft.lv_nametexttags[auto06830A68_var] != c_invalidDialogId) && (gv_singleDraft.lv_ismarkedasaleaver[auto06830A68_var] == false)) {
            if ((gv_singleDraft.lv_selectedRole[auto06830A68_var] == 1)) {
                libNtve_gf_SetDialogItemImage(gv_singleDraft.lv_roleiconimage[auto06830A68_var], "position-icon-any.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_singleDraft.lv_roleiconimage[auto06830A68_var], StringExternal("Param/Value/330E6B0E"), PlayerGroupAll());
                libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[auto06830A68_var], "ModelSwap Zealot");
            }
            else {
                if ((gv_singleDraft.lv_selectedRole[auto06830A68_var] == 2)) {
                    libNtve_gf_SetDialogItemImage(gv_singleDraft.lv_roleiconimage[auto06830A68_var], "position-icon-goalie.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_singleDraft.lv_roleiconimage[auto06830A68_var], StringExternal("Param/Value/5679D07E"), PlayerGroupAll());
                    libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[auto06830A68_var], "ModelSwap Immortal");
                }
                else {
                    if ((gv_singleDraft.lv_selectedRole[auto06830A68_var] == 3)) {
                        libNtve_gf_SetDialogItemImage(gv_singleDraft.lv_roleiconimage[auto06830A68_var], "position-icon-attack.dds", PlayerGroupAll());
                        libNtve_gf_SetDialogItemTooltip(gv_singleDraft.lv_roleiconimage[auto06830A68_var], StringExternal("Param/Value/D8BAF3D3"), PlayerGroupAll());
                        libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[auto06830A68_var], "ModelSwap Zealot");
                    }
                    else {
                        if ((gv_singleDraft.lv_selectedRole[auto06830A68_var] == 4)) {
                            libNtve_gf_SetDialogItemImage(gv_singleDraft.lv_roleiconimage[auto06830A68_var], "position-icon-defend.dds", PlayerGroupAll());
                            libNtve_gf_SetDialogItemTooltip(gv_singleDraft.lv_roleiconimage[auto06830A68_var], StringExternal("Param/Value/F0A746A4"), PlayerGroupAll());
                            libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[auto06830A68_var], "ModelSwap Zealot");
                        }
                        else {
                            if ((gv_singleDraft.lv_selectedRole[auto06830A68_var] == 5)) {
                                libNtve_gf_SetDialogItemImage(gv_singleDraft.lv_roleiconimage[auto06830A68_var], "position-icon-support.dds", PlayerGroupAll());
                                libNtve_gf_SetDialogItemTooltip(gv_singleDraft.lv_roleiconimage[auto06830A68_var], StringExternal("Param/Value/59C815C6"), PlayerGroupAll());
                                libNtve_gf_SendActorMessageToUnit(gv_singleDraft.lv_zealotPickerUnits[auto06830A68_var], "ModelSwap Zealot");
                            }

                        }
                    }
                }
            }
        }

    }
    return true;
}

trigger auto_gf_Endsingledraft_Trigger = null;

void gf_Endsingledraft () {
    if (auto_gf_Endsingledraft_Trigger == null) {
        auto_gf_Endsingledraft_Trigger = TriggerCreate("auto_gf_Endsingledraft_TriggerFunc");
    }

    TriggerExecute(auto_gf_Endsingledraft_Trigger, false, false);
}

bool auto_gf_Endsingledraft_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_fadeDialog;
    actor[9] lv_teleportmodels;

    // Automatic Variable Declarations
    const int autoE6CED417_ae = 8;
    int autoE6CED417_var;
    const int autoE8DE2DB2_ae = 8;
    int autoE8DE2DB2_var;
    const int autoF742037A_ae = 8;
    int autoF742037A_var;
    playergroup auto578CFF77_g;
    int auto578CFF77_var;

    // Variable Initialization
    lv_fadeDialog = c_invalidDialogId;

    // Implementation
    gv_singleDraft.lv_shouldwecheckforleavers = false;
    TriggerEnable(gt_PlatformEasterEgg, false);
    TriggerEnable(gt_PlatformDance, false);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("SingleDraftOutro", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_captainPoint[1]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam1[1]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam1[2]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[3] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam1[3]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[4] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_captainPoint[2]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[5] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam2[1]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[6] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam2[2]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[7] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("HybridEnergyDrainImpact", gv_singleDraft.lv_selectedPointTeam2[3]);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,3.000000");
    lv_teleportmodels[8] = libNtve_gf_ActorLastCreated();
    autoE6CED417_var = 1;
    for ( ; autoE6CED417_var <= autoE6CED417_ae; autoE6CED417_var += 1 ) {
        if ((UnitIsAlive(gv_singleDraft.lv_zealotPickerUnits[autoE6CED417_var]) == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_singleDraft.lv_zealotPickerUnits[autoE6CED417_var]), "SetTintColor {255,255,255 8.000000} 1.000000");
            ActorSend(libNtve_gf_MainActorofUnit(gv_singleDraft.lv_zealotPickerUnits[autoE6CED417_var]), "SetOpacity 0.000000 2.000000");
        }

    }
    Wait(3.0, c_timeGame);
    autoE8DE2DB2_var = 1;
    for ( ; autoE8DE2DB2_var <= autoE8DE2DB2_ae; autoE8DE2DB2_var += 1 ) {
        ActorSend(lv_teleportmodels[autoE8DE2DB2_var], "Destroy");
    }
    Wait(3.0, c_timeGame);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    lv_fadeDialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 9999);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    Wait(1.5, c_timeGame);
    gf_Resetlighting();
    DialogDestroy(gv_singleDraft.lv_roleMenuDialog);
    DialogDestroy(gv_singleDraft.lv_pillmenudialog);
    DialogDestroy(gv_singleDraft.lv_pillmenubg);
    DialogDestroy(gv_singleDraft.lv_timeremainingforpicktextdialog);
    autoF742037A_var = 1;
    for ( ; autoF742037A_var <= autoF742037A_ae; autoF742037A_var += 1 ) {
        if ((gv_singleDraft.lv_nametexttags[autoF742037A_var] != c_invalidDialogId)) {
            DialogDestroy(gv_singleDraft.lv_nametexttags[autoF742037A_var]);
        }

    }
    TriggerEnable(gt_DraftRoleClick, false);
    TriggerEnable(gt_PickaplayerClick, false);
    gv_FaceoffTimer = 28;
    auto578CFF77_g = PlayerGroupAll();
    auto578CFF77_var = -1;
    while (true) {
        auto578CFF77_var = PlayerGroupNextPlayer(auto578CFF77_g, auto578CFF77_var);
        if (auto578CFF77_var < 0) { break; }
        CameraRestore(auto578CFF77_var, 0.0, -1, 10.0);
    }
    gv_initialVote.lv_readytoproceedtopregamestats = true;
    Wait(0.25, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.5, c_timeGame);
    DialogDestroy(lv_fadeDialog);
    return true;
}

void gf_ApplyForcePolar2 (int lp_player, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    gv_powerplayisavailableforteam[lp_team] = true;
    TechTreeAbilityAllow(lp_player, AbilityCommand("SkaterWarpIn", 0), true);
    UnitAbilityEnable(gv_Skaters[lp_player], "SkaterWarpIn", true);
    UnitAbilityShow(gv_Skaters[lp_player], "SkaterWarpIn", true);
    SoundPlayForPlayer(SoundLink("PowerplayReady", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[lp_player]), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
    UIDisplayMessage(gv_actualPlayerzonTeam[lp_team], c_messageAreaSubtitle, StringExternal("Param/Value/6CC56E0D"));
    if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[9], lp_player) == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/3B9A6562"));
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/D09A7033"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/47E9898A"));
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/CD66B113"));
    }
}

void gf_ApplyForcePolar3 (int lp_player, int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    gv_powerplayisavailableforteam[lp_team] = false;
    TechTreeAbilityAllow(lp_player, AbilityCommand("SkaterWarpIn", 0), false);
    UnitAbilityEnable(gv_Skaters[lp_player], "SkaterWarpIn", false);
    UnitAbilityShow(gv_Skaters[lp_player], "SkaterWarpIn", false);
}

void gf_Setpowerplaynotavailable () {
    // Automatic Variable Declarations
    // Implementation
    gv_powerplayisavailableforteam[1] = false;
    gv_powerplayisavailableforteam[2] = false;
}

trigger auto_gf_ShowScoreboard_Trigger = null;

void gf_ShowScoreboard () {
    if (auto_gf_ShowScoreboard_Trigger == null) {
        auto_gf_ShowScoreboard_Trigger = TriggerCreate("auto_gf_ShowScoreboard_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowScoreboard_Trigger, false, false);
}

bool auto_gf_ShowScoreboard_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;
    int lv_x;

    // Automatic Variable Declarations
    const int autoD381293E_n = 20;
    int autoD381293E_i;
    playergroup auto909D7F66_g;
    int auto909D7F66_var;

    // Variable Initialization
    lv_y = -60;

    // Implementation
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardBG, PlayerGroupAll(), 0.0, 0.0);
    SoundPlay(SoundLink("UI_ConsoleOut_Terr", -1), PlayerGroupAll(), 100.0, 0.0);
    for (autoD381293E_i = 1; autoD381293E_i <= autoD381293E_n; autoD381293E_i += 1) {
        lv_y += 3;
        DialogControlSetPosition(gv_uIScoreboardItems.lv_scoreboardBG, PlayerGroupAll(), c_anchorTop, lv_x, lv_y);
        Wait(0.0625, c_timeGame);
    }
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore1, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore2, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardTimer, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_shotsOnGoal1, PlayerGroupAll(), 0.5, 35.0);
    DialogControlFadeTransparency(gv_shotsOnGoal2, PlayerGroupAll(), 0.5, 35.0);
    if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), 0.5, 0.0);
    }

    if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), 0.5, 0.0);
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), 0.5, 0.0);
    }

    if ((gv_team3UI.lv_scoreboardLogosLeague != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosLeague, PlayerGroupAll(), 0.5, 0.0);
    }

    auto909D7F66_g = PlayerGroupAll();
    auto909D7F66_var = -1;
    while (true) {
        auto909D7F66_var = PlayerGroupNextPlayer(auto909D7F66_g, auto909D7F66_var);
        if (auto909D7F66_var < 0) { break; }
        gf_ShowScoreboard3(auto909D7F66_var, true, false);
    }
    return true;
}

trigger auto_gf_ShowScoreboard2_Trigger = null;

void gf_ShowScoreboard2 () {
    if (auto_gf_ShowScoreboard2_Trigger == null) {
        auto_gf_ShowScoreboard2_Trigger = TriggerCreate("auto_gf_ShowScoreboard2_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowScoreboard2_Trigger, false, false);
}

bool auto_gf_ShowScoreboard2_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y;
    int lv_x;

    // Automatic Variable Declarations
    const int autoDF854833_n = 20;
    int autoDF854833_i;

    // Variable Initialization

    // Implementation
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore1, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore2, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardTimer, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_shotsOnGoal1, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_shotsOnGoal2, PlayerGroupAll(), 0.5, 100.0);
    if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), 0.5, 100.0);
    }

    if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), 0.5, 100.0);
    }

    if ((gv_team3UI.lv_scoreboardLogosLeague != c_invalidDialogControlId)) {
        DialogControlFadeTransparency(gv_team3UI.lv_scoreboardLogosLeague, PlayerGroupAll(), 0.5, 100.0);
    }

    Wait(0.5, c_timeGame);
    SoundPlay(SoundLink("UI_ConsoleOut_Terr", -1), PlayerGroupAll(), 100.0, 0.0);
    for (autoDF854833_i = 1; autoDF854833_i <= autoDF854833_n; autoDF854833_i += 1) {
        lv_y -= 3;
        DialogControlSetPosition(gv_uIScoreboardItems.lv_scoreboardBG, PlayerGroupAll(), c_anchorTop, lv_x, lv_y);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void gf_CheckWatchlist () {
    // Automatic Variable Declarations
    const int auto1ABD9E8F_ae = 12;
    int auto1ABD9E8F_var;

    // Implementation
    auto1ABD9E8F_var = 1;
    for ( ; auto1ABD9E8F_var <= auto1ABD9E8F_ae; auto1ABD9E8F_var += 1 ) {
        if ((PlayerHandle(auto1ABD9E8F_var) == gv_hANDLE_COWSMOKE)) {
            libNtve_gf_CreateDialogItemLabel(gv_options, 200, 25, c_anchorBottomLeft, 25, 95, StringExternal("Param/Value/E81FDA42"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_watchlist_Dialog_Item2 = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto1ABD9E8F_var), false);
            libNtve_gf_CreateDialogItemCheckBox(gv_options, 25, 25, c_anchorBottomLeft, 220, 95, StringExternal("Param/Value/A7A0940C"), false);
            gv_watchlist_Dialog_Item = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto1ABD9E8F_var), false);
            gv_votekickPlayer = auto1ABD9E8F_var;
            break;
        }

    }
}

trigger auto_gf_Info_Trigger = null;
int auto_gf_Info_lp_player;

void gf_Info (int lp_player) {
    auto_gf_Info_lp_player = lp_player;

    if (auto_gf_Info_Trigger == null) {
        auto_gf_Info_Trigger = TriggerCreate("auto_gf_Info_TriggerFunc");
    }

    TriggerExecute(auto_gf_Info_Trigger, false, false);
}

bool auto_gf_Info_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Info_lp_player;

    // Automatic Variable Declarations
    // Implementation
    return true;
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("UI_Bnet_MatchCountdown1", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    DialogControlSetVisible(gv_optionsItems[0], PlayerGroupSingle(lp_player), true);
    Wait(10.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_optionsItems[0], StringExternal("Param/Value/6DF0182A"), PlayerGroupSingle(lp_player));
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_optionsItems[0], StringExternal("Param/Value/73F01F46"), PlayerGroupSingle(lp_player));
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    DialogControlSetVisible(gv_optionsItems[0], PlayerGroupSingle(lp_player), false);
    return true;
}

trigger auto_gf_GoalieToggleNotification_Trigger = null;
int auto_gf_GoalieToggleNotification_lp_player;
bool auto_gf_GoalieToggleNotification_lp_onlyGoalie;

void gf_GoalieToggleNotification (int lp_player, bool lp_onlyGoalie) {
    auto_gf_GoalieToggleNotification_lp_player = lp_player;
    auto_gf_GoalieToggleNotification_lp_onlyGoalie = lp_onlyGoalie;

    if (auto_gf_GoalieToggleNotification_Trigger == null) {
        auto_gf_GoalieToggleNotification_Trigger = TriggerCreate("auto_gf_GoalieToggleNotification_TriggerFunc");
    }

    TriggerExecute(auto_gf_GoalieToggleNotification_Trigger, false, false);
}

bool auto_gf_GoalieToggleNotification_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_GoalieToggleNotification_lp_player;
    bool lp_onlyGoalie = auto_gf_GoalieToggleNotification_lp_onlyGoalie;

    // Variable Declarations
    int lv_localdialog;
    int lv_localdialogimage;
    int lv_incrementnum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localdialog = c_invalidDialogId;
    lv_localdialogimage = c_invalidDialogControlId;

    // Implementation
    if ((DialogIsVisible(gv_optinuidialog[lp_player], lp_player) == true)) {
        DialogSetVisible(gv_optinuidialog[lp_player], PlayerGroupAll(), false);
    }

    DialogCreate(200, 40, c_anchorTopLeft, 40, 40, true);
    gv_optinuidialog[lp_player] = DialogLastCreated();
    lv_localdialog = DialogLastCreated();
    DialogSetImageVisible(gv_optinuidialog[lp_player], false);
    DialogSetVisible(gv_optinuidialog[lp_player], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_optinuidialog[lp_player], 200, 80, c_anchorTopLeft, 0, 0, StringToText(""), "optinout.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_localdialogimage = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_localdialogimage, PlayerGroupSingle(lp_player), 0.0, 100.0);
    DialogSetVisible(lv_localdialog, PlayerGroupSingle(lp_player), true);
    DialogControlFadeTransparency(lv_localdialogimage, PlayerGroupSingle(lp_player), 0.1, 0.0);
    if ((lp_onlyGoalie == false)) {
        DialogControlSetPosition(lv_localdialogimage, PlayerGroupSingle(lp_player), c_anchorTopLeft, 0, -40);
        SoundPlay(SoundLink("UI_BnetSelectNegative", -1), PlayerGroupSingle(lp_player), 150.0, 0.0);
    }
    else {
        DialogControlSetPosition(lv_localdialogimage, PlayerGroupSingle(lp_player), c_anchorTopLeft, 0, 0);
        SoundPlay(SoundLink("UI_DoorMenu_ListSelect", -1), PlayerGroupSingle(lp_player), 150.0, 0.0);
    }
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(lv_localdialogimage, PlayerGroupSingle(lp_player), 0.1, 100.0);
    Wait(0.15, c_timeGame);
    DialogDestroy(lv_localdialog);
    return true;
}

void gf_CreateUIOptionsDialog () {
    // Automatic Variable Declarations
    // Implementation
    return ;
    DialogCreate(1500, 1000, c_anchorBottomLeft, 0, 0, true);
    gv_uIOptionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 15, 110, StringExternal("Param/Value/C1BC8BF9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6C6B986D"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorBottomLeft, 150, 110, StringToText(""), true);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void gf_HideLightSettingsInit (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(284)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(291)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(277)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(290)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(293)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(278)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(288)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(276)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(287)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(280)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(297)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(282)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(62)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(63)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(313)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(315)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(316)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(303)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(323)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(305)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(302)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(301)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(307)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(28)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(438)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(309)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(321)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(311)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(281)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(283)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, libNtve_gf_MainActorofUnit(UnitFromId(279)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(188)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(275)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(167)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(274)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(166)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(273)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(158)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(272)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(118)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(271)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(168)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(270)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(164)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(269)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(165)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(169)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(268)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(170)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(267)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(266)), false);
    gf_ShowHideActorForPlayerGroup(lp_players, ActorFromDoodad(DoodadFromId(171)), false);
}

void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_immediate == true)) {
        ActorSend(lv_agent, "Signal Destroy_Immediate");
    }
    else {
        ActorSend(lv_agent, "Signal Destroy_Normal");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

void gf_SetAllHotkeys3 (int lp_player, bool lp_zXCV) {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_zXCV == true)) {
        CatalogFieldValueSet(c_gameCatalogButton, "PsytrousOxideOn", "Hotkey", lp_player, ("Button/Hotkey/" + "Z"));
        CatalogFieldValueSet(c_gameCatalogButton, "Charge", "Hotkey", lp_player, ("Button/Hotkey/" + "X"));
        CatalogFieldValueSet(c_gameCatalogButton, "Block", "Hotkey", lp_player, ("Button/Hotkey/" + "C"));
        CatalogFieldValueSet(c_gameCatalogButton, "CancelOneTimer", "Hotkey", lp_player, ("Button/Hotkey/" + "C"));
        CatalogFieldValueSet(c_gameCatalogButton, "ParkColonistVehicle", "Hotkey", lp_player, ("Button/Hotkey/" + "V"));
        CatalogFieldValueSet(c_gameCatalogButton, "ForceField", "Hotkey", lp_player, ("Button/Hotkey/" + "X"));
        CatalogFieldValueSet(c_gameCatalogButton, "GoalieRecall", "Hotkey", lp_player, ("Button/Hotkey/" + "B"));
        CatalogFieldValueSet(c_gameCatalogButton, "SkaterWarpIn", "Hotkey", lp_player, ("Button/Hotkey/" + "B"));
        CatalogFieldValueSet(c_gameCatalogButton, "RemoteShield", "Hotkey", lp_player, ("Button/Hotkey/" + "C"));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, "PsytrousOxideOn", "Hotkey", lp_player, ("Button/Hotkey/" + "Q"));
        CatalogFieldValueSet(c_gameCatalogButton, "Charge", "Hotkey", lp_player, ("Button/Hotkey/" + "W"));
        CatalogFieldValueSet(c_gameCatalogButton, "Block", "Hotkey", lp_player, ("Button/Hotkey/" + "E"));
        CatalogFieldValueSet(c_gameCatalogButton, "CancelOneTimer", "Hotkey", lp_player, ("Button/Hotkey/" + "E"));
        CatalogFieldValueSet(c_gameCatalogButton, "ParkColonistVehicle", "Hotkey", lp_player, ("Button/Hotkey/" + "R"));
        CatalogFieldValueSet(c_gameCatalogButton, "ForceField", "Hotkey", lp_player, ("Button/Hotkey/" + "W"));
        CatalogFieldValueSet(c_gameCatalogButton, "GoalieRecall", "Hotkey", lp_player, ("Button/Hotkey/" + "T"));
        CatalogFieldValueSet(c_gameCatalogButton, "SkaterWarpIn", "Hotkey", lp_player, ("Button/Hotkey/" + "T"));
        CatalogFieldValueSet(c_gameCatalogButton, "RemoteShield", "Hotkey", lp_player, ("Button/Hotkey/" + "E"));
    }
}

trigger auto_gf_UpdateChargeProgress_Trigger = null;
int auto_gf_UpdateChargeProgress_lp_player;
unit auto_gf_UpdateChargeProgress_lp_unit;

void gf_UpdateChargeProgress (int lp_player, unit lp_unit) {
    auto_gf_UpdateChargeProgress_lp_player = lp_player;
    auto_gf_UpdateChargeProgress_lp_unit = lp_unit;

    if (auto_gf_UpdateChargeProgress_Trigger == null) {
        auto_gf_UpdateChargeProgress_Trigger = TriggerCreate("auto_gf_UpdateChargeProgress_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateChargeProgress_Trigger, false, false);
}

bool auto_gf_UpdateChargeProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UpdateChargeProgress_lp_player;
    unit lp_unit = auto_gf_UpdateChargeProgress_lp_unit;

    // Variable Declarations
    int lv_cooldowns;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((lp_player == gv_Players[2]) && (gv_uIElements.lv_chargebarIsBeingChanged[lp_player] == false) && (gv_pullGoalie[1] == false)) || ((lp_player == gv_Players[6]) && (gv_uIElements.lv_chargebarIsBeingChanged[lp_player] == false) && (gv_pullGoalie[2] == false)))) {
        gv_uIElements.lv_chargebarIsBeingChanged[lp_player] = true;
        DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(lp_player), true);
        while ((UnitAbilityChargeInfo(lp_unit, AbilityCommand("Check", 0), c_unitAbilChargeCountLeft) < 2.0) && (UnitIsAlive(lp_unit) == true)) {
            if ((UnitAbilityChargeInfo(lp_unit, AbilityCommand("Check", 0), c_unitAbilChargeCountLeft) == 0.0)) {
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 1, 24);
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 0.0, 100.0);
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 0.0, 60.0);
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[1], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), libNtve_gf_ArithmeticIntClamp(((lv_cooldowns * 34) / 192), 1, 34), 24);
            }

            if ((UnitAbilityChargeInfo(lp_unit, AbilityCommand("Check", 0), c_unitAbilChargeCountLeft) == 1.0)) {
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 34, 24);
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[1], Color(0.00, 75.69, 0.00), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 0.0, 0.0);
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[2], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 0.0, 60.0);
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), libNtve_gf_ArithmeticIntClamp(((lv_cooldowns * 34) / 192), 1, 34), 24);
            }

            lv_cooldowns += 1;
            if ((lv_cooldowns >= 192)) {
                lv_cooldowns = 0;
                UnitAbilityAddChargeUsed(lp_unit, "Check", "Abil/GuardianShield", -1.0);
            }

            if ((UnitAbilityChargeInfo(lp_unit, AbilityCommand("Check", 0), c_unitAbilChargeCountLeft) >= 2.0)) {
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 34, 24);
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[1], Color(0.00, 75.69, 0.00), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 0.0, 0.0);
                DialogControlSetSize(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 34, 24);
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[2], Color(0.00, 75.69, 0.00), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 0.0, 0.0);
            }

            Wait(0.0625, c_timeGame);
        }
        gv_uIElements.lv_chargebarIsBeingChanged[lp_player] = false;
        DialogControlSetSize(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 34, 24);
        libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[1], Color(0.00, 75.69, 0.00), PlayerGroupSingle(lp_player));
        DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[1], PlayerGroupSingle(lp_player), 0.0, 0.0);
        DialogControlSetSize(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 34, 24);
        libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_chargebarValues[2], Color(0.00, 75.69, 0.00), PlayerGroupSingle(lp_player));
        DialogControlFadeTransparency(gv_uIElements.lv_chargebarValues[2], PlayerGroupSingle(lp_player), 0.0, 0.0);
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], lp_player) == false)) {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(lp_player), false);
        }

    }

    return true;
}

trigger auto_gf_Floatafuzzy_Trigger = null;
int auto_gf_Floatafuzzy_lp_startXcoordinate;
int auto_gf_Floatafuzzy_lp_startYcoordinate;
int auto_gf_Floatafuzzy_lp_width;
int auto_gf_Floatafuzzy_lp_height;
string auto_gf_Floatafuzzy_lp_image;
fixed auto_gf_Floatafuzzy_lp_transparency;
int auto_gf_Floatafuzzy_lp_lessthanheight;
int auto_gf_Floatafuzzy_lp_rotationMOD;
int auto_gf_Floatafuzzy_lp_xMOD;
int auto_gf_Floatafuzzy_lp_yMOD;
color auto_gf_Floatafuzzy_lp_color;

void gf_Floatafuzzy (int lp_startXcoordinate, int lp_startYcoordinate, int lp_width, int lp_height, string lp_image, fixed lp_transparency, int lp_lessthanheight, int lp_rotationMOD, int lp_xMOD, int lp_yMOD, color lp_color) {
    auto_gf_Floatafuzzy_lp_startXcoordinate = lp_startXcoordinate;
    auto_gf_Floatafuzzy_lp_startYcoordinate = lp_startYcoordinate;
    auto_gf_Floatafuzzy_lp_width = lp_width;
    auto_gf_Floatafuzzy_lp_height = lp_height;
    auto_gf_Floatafuzzy_lp_image = lp_image;
    auto_gf_Floatafuzzy_lp_transparency = lp_transparency;
    auto_gf_Floatafuzzy_lp_lessthanheight = lp_lessthanheight;
    auto_gf_Floatafuzzy_lp_rotationMOD = lp_rotationMOD;
    auto_gf_Floatafuzzy_lp_xMOD = lp_xMOD;
    auto_gf_Floatafuzzy_lp_yMOD = lp_yMOD;
    auto_gf_Floatafuzzy_lp_color = lp_color;

    if (auto_gf_Floatafuzzy_Trigger == null) {
        auto_gf_Floatafuzzy_Trigger = TriggerCreate("auto_gf_Floatafuzzy_TriggerFunc");
    }

    TriggerExecute(auto_gf_Floatafuzzy_Trigger, false, false);
}

bool auto_gf_Floatafuzzy_TriggerFunc (bool testConds, bool runActions) {
    int lp_startXcoordinate = auto_gf_Floatafuzzy_lp_startXcoordinate;
    int lp_startYcoordinate = auto_gf_Floatafuzzy_lp_startYcoordinate;
    int lp_width = auto_gf_Floatafuzzy_lp_width;
    int lp_height = auto_gf_Floatafuzzy_lp_height;
    string lp_image = auto_gf_Floatafuzzy_lp_image;
    fixed lp_transparency = auto_gf_Floatafuzzy_lp_transparency;
    int lp_lessthanheight = auto_gf_Floatafuzzy_lp_lessthanheight;
    int lp_rotationMOD = auto_gf_Floatafuzzy_lp_rotationMOD;
    int lp_xMOD = auto_gf_Floatafuzzy_lp_xMOD;
    int lp_yMOD = auto_gf_Floatafuzzy_lp_yMOD;
    color lp_color = auto_gf_Floatafuzzy_lp_color;

    // Variable Declarations
    int lv_rotationdegree;
    int lv_xcoordinate;
    int lv_ycoordinate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xcoordinate = lp_startXcoordinate;
    lv_ycoordinate = lp_startYcoordinate;

    // Implementation
    DialogCreate(2500, 2500, c_anchorTop, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 888);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lp_width, lp_height, c_anchorTop, 0, 0, StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lp_transparency);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    while ((lv_ycoordinate < (lp_lessthanheight * 1)) && (gv__3kIntro.lv_stopeverything == false)) {
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), lv_rotationdegree, PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_xcoordinate, lv_ycoordinate);
        lv_rotationdegree += lp_rotationMOD;
        lv_xcoordinate -= lp_xMOD;
        lv_ycoordinate += lp_yMOD;
        Wait(0.0625, c_timeGame);
    }
    DialogDestroy(DialogLastCreated());
    return true;
}

trigger auto_gf_Movebgup_Trigger = null;
int auto_gf_Movebgup_lp_dialogitem;

void gf_Movebgup (int lp_dialogitem) {
    auto_gf_Movebgup_lp_dialogitem = lp_dialogitem;

    if (auto_gf_Movebgup_Trigger == null) {
        auto_gf_Movebgup_Trigger = TriggerCreate("auto_gf_Movebgup_TriggerFunc");
    }

    TriggerExecute(auto_gf_Movebgup_Trigger, false, false);
}

bool auto_gf_Movebgup_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_Movebgup_lp_dialogitem;

    // Automatic Variable Declarations
    const int auto37F1AE6F_n = 600;
    int auto37F1AE6F_i;

    // Implementation
    for (auto37F1AE6F_i = 1; auto37F1AE6F_i <= auto37F1AE6F_n; auto37F1AE6F_i += 1) {
        if ((gv__3kIntro.lv_stopeverything == false) && (lp_dialogitem != c_invalidDialogControlId)) {
            DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorBottom, DialogControlGetOffsetX(lp_dialogitem, 1), (DialogControlGetOffsetY(lp_dialogitem, 1) - 1));
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_Moveimageleft_Trigger = null;
int auto_gf_Moveimageleft_lp_dialogitem;

void gf_Moveimageleft (int lp_dialogitem) {
    auto_gf_Moveimageleft_lp_dialogitem = lp_dialogitem;

    if (auto_gf_Moveimageleft_Trigger == null) {
        auto_gf_Moveimageleft_Trigger = TriggerCreate("auto_gf_Moveimageleft_TriggerFunc");
    }

    TriggerExecute(auto_gf_Moveimageleft_Trigger, false, false);
}

bool auto_gf_Moveimageleft_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_Moveimageleft_lp_dialogitem;

    // Automatic Variable Declarations
    const int auto5A7B6F5F_n = 500;
    int auto5A7B6F5F_i;

    // Implementation
    for (auto5A7B6F5F_i = 1; auto5A7B6F5F_i <= auto5A7B6F5F_n; auto5A7B6F5F_i += 1) {
        if ((gv__3kIntro.lv_stopeverything == false) && (lp_dialogitem != c_invalidDialogControlId)) {
            DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorBottom, (DialogControlGetOffsetX(lp_dialogitem, 1) - 1), DialogControlGetOffsetY(lp_dialogitem, 1));
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_Moveimageleft3_Trigger = null;
int auto_gf_Moveimageleft3_lp_dialogitem;

void gf_Moveimageleft3 (int lp_dialogitem) {
    auto_gf_Moveimageleft3_lp_dialogitem = lp_dialogitem;

    if (auto_gf_Moveimageleft3_Trigger == null) {
        auto_gf_Moveimageleft3_Trigger = TriggerCreate("auto_gf_Moveimageleft3_TriggerFunc");
    }

    TriggerExecute(auto_gf_Moveimageleft3_Trigger, false, false);
}

bool auto_gf_Moveimageleft3_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_Moveimageleft3_lp_dialogitem;

    // Automatic Variable Declarations
    const int auto0055AA20_n = 500;
    int auto0055AA20_i;

    // Implementation
    for (auto0055AA20_i = 1; auto0055AA20_i <= auto0055AA20_n; auto0055AA20_i += 1) {
        if ((gv__3kIntro.lv_stopeverything == false) && (lp_dialogitem != c_invalidDialogControlId)) {
            DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorCenter, (DialogControlGetOffsetX(lp_dialogitem, 1) - 1), DialogControlGetOffsetY(lp_dialogitem, 1));
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_Moveimageright_Trigger = null;
int auto_gf_Moveimageright_lp_dialogitem;

void gf_Moveimageright (int lp_dialogitem) {
    auto_gf_Moveimageright_lp_dialogitem = lp_dialogitem;

    if (auto_gf_Moveimageright_Trigger == null) {
        auto_gf_Moveimageright_Trigger = TriggerCreate("auto_gf_Moveimageright_TriggerFunc");
    }

    TriggerExecute(auto_gf_Moveimageright_Trigger, false, false);
}

bool auto_gf_Moveimageright_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_Moveimageright_lp_dialogitem;

    // Automatic Variable Declarations
    const int autoD7B6949B_n = 500;
    int autoD7B6949B_i;

    // Implementation
    for (autoD7B6949B_i = 1; autoD7B6949B_i <= autoD7B6949B_n; autoD7B6949B_i += 1) {
        if ((gv__3kIntro.lv_stopeverything == false) && (lp_dialogitem != c_invalidDialogControlId)) {
            DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorCenter, (DialogControlGetOffsetX(lp_dialogitem, 1) + 1), DialogControlGetOffsetY(lp_dialogitem, 1));
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_Moveimageright2_Trigger = null;
int auto_gf_Moveimageright2_lp_dialogitem;

void gf_Moveimageright2 (int lp_dialogitem) {
    auto_gf_Moveimageright2_lp_dialogitem = lp_dialogitem;

    if (auto_gf_Moveimageright2_Trigger == null) {
        auto_gf_Moveimageright2_Trigger = TriggerCreate("auto_gf_Moveimageright2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Moveimageright2_Trigger, false, false);
}

bool auto_gf_Moveimageright2_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_Moveimageright2_lp_dialogitem;

    // Automatic Variable Declarations
    const int auto72876249_n = 500;
    int auto72876249_i;

    // Implementation
    for (auto72876249_i = 1; auto72876249_i <= auto72876249_n; auto72876249_i += 1) {
        if ((gv__3kIntro.lv_stopeverything == false) && (lp_dialogitem != c_invalidDialogControlId)) {
            DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorBottom, (DialogControlGetOffsetX(lp_dialogitem, 1) + 1), DialogControlGetOffsetY(lp_dialogitem, 1));
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_Makefuzzies_Trigger = null;

void gf_Makefuzzies () {
    if (auto_gf_Makefuzzies_Trigger == null) {
        auto_gf_Makefuzzies_Trigger = TriggerCreate("auto_gf_Makefuzzies_TriggerFunc");
    }

    TriggerExecute(auto_gf_Makefuzzies_Trigger, false, false);
}

bool auto_gf_Makefuzzies_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0846605D_n = 10;
    int auto0846605D_i;

    // Implementation
    for (auto0846605D_i = 1; auto0846605D_i <= auto0846605D_n; auto0846605D_i += 1) {
        gf_Floatafuzzy(0, 0, 20, 20, "Assets\\Textures\\dust3_blend.dds", 60.0, 2500, 3, 0, 5, Color(3.92, 96.08, 93.73));
        gf_Floatafuzzy(80, 0, 8, 5, "Assets\\Textures\\dust3_blend.dds", 60.0, 2500, 1, 0, 8, Color(1.96, 88.24, 98.04));
        gf_Floatafuzzy(-200, 0, 5, 3, "Assets\\Textures\\dust4.dds", 50.0, 2500, 1, 2, 7, Color(16.86, 96.86, 96.86));
        gf_Floatafuzzy(400, 0, 5, 7, "Assets\\Textures\\dust3_blend.dds", 20.0, 2500, -1, 1, 6, Color(40.00, 70.20, 100.00));
        gf_Floatafuzzy(-550, 0, 5, 7, "Assets\\Textures\\dust3_blend.dds", 60.0, 2500, -1, -3, 6, Color(50.20, 74.90, 100.00));
        gf_Floatafuzzy(-750, 0, 8, 12, "Assets\\Textures\\dust4.dds", 50.0, 1500, 0, -2, 10, Color(18.82, 98.04, 66.27));
        gf_Floatafuzzy(900, 0, 10, 15, "Assets\\Textures\\dustdots2sharp.dds", 30.0, 1500, 2, 0, 3, Color(65.88, 82.75, 100.00));
        gf_Floatafuzzy(-200, 0, 20, 20, "Assets\\Textures\\dust3.dds", 40.0, 1500, 3, 1, 6, Color(65.88, 88.63, 100.00));
        gf_Floatafuzzy(950, 0, 7, 9, "Assets\\Textures\\dust3_blend.dds", 40.0, 1500, 1, 0, 7, Color(65.88, 88.63, 100.00));
        gf_Floatafuzzy(-420, 0, 16, 20, "Assets\\Textures\\dust3_blend.dds", 40.0, 1500, 1, 0, 9, Color(65.88, 88.63, 100.00));
        gf_Floatafuzzy(0, 0, 12, 14, "Assets\\Textures\\dust3_blend.dds", 60.0, 1500, 2, 0, 12, Color(39.61, 93.73, 77.65));
        gf_Floatafuzzy(-630, 0, 30, 26, "Assets\\Textures\\dust3_blend.dds", 50.0, 1500, 2, -2, 18, Color(39.61, 93.73, 77.65));
        gf_Floatafuzzy(250, 0, 30, 25, "Assets\\Textures\\dust3_blend.dds", 50.0, 1500, 4, 1, 16, Color(56.86, 76.08, 100.00));
        gf_Floatafuzzy(700, 0, 28, 34, "Assets\\Textures\\dust3_blend.dds", 75.0, 1500, 4, 1, 23, Color(56.86, 76.08, 100.00));
        gf_Floatafuzzy(-700, -500, 41, 34, "Assets\\Textures\\dust3_blend.dds", 60.0, 1500, 4, 1, 42, Color(56.86, 76.08, 100.00));
        gf_Floatafuzzy(222, -700, 55, 68, "Assets\\Textures\\dust3_blend.dds", 60.0, 1500, 4, -1, 35, Color(1.57, 95.69, 84.31));
        gf_Floatafuzzy(-700, -1800, 55, 68, "Assets\\Textures\\dust3_blend.dds", 60.0, 1500, 4, 1, 42, Color(57.25, 84.71, 99.61));
        gf_Floatafuzzy(-500, -1200, 28, 34, "Assets\\Textures\\dust3_blend.dds", 60.0, 1500, 4, -1, 35, Color(57.25, 84.71, 99.61));
        Wait(4.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_Destroyfinaldialog_Trigger = null;
int auto_gf_Destroyfinaldialog_lp_dialog;

void gf_Destroyfinaldialog (int lp_dialog) {
    auto_gf_Destroyfinaldialog_lp_dialog = lp_dialog;

    if (auto_gf_Destroyfinaldialog_Trigger == null) {
        auto_gf_Destroyfinaldialog_Trigger = TriggerCreate("auto_gf_Destroyfinaldialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_Destroyfinaldialog_Trigger, false, false);
}

bool auto_gf_Destroyfinaldialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_gf_Destroyfinaldialog_lp_dialog;

    // Automatic Variable Declarations
    // Implementation
    Wait(3.0, c_timeGame);
    DialogDestroy(lp_dialog);
    return true;
}

trigger auto_gf_MoveIcebg1_Trigger = null;
int auto_gf_MoveIcebg1_lp_dialogitem;
int auto_gf_MoveIcebg1_lp_increment;
int auto_gf_MoveIcebg1_lp_startw;
int auto_gf_MoveIcebg1_lp_starth;
fixed auto_gf_MoveIcebg1_lp_duration;

void gf_MoveIcebg1 (int lp_dialogitem, int lp_increment, int lp_startw, int lp_starth, fixed lp_duration) {
    auto_gf_MoveIcebg1_lp_dialogitem = lp_dialogitem;
    auto_gf_MoveIcebg1_lp_increment = lp_increment;
    auto_gf_MoveIcebg1_lp_startw = lp_startw;
    auto_gf_MoveIcebg1_lp_starth = lp_starth;
    auto_gf_MoveIcebg1_lp_duration = lp_duration;

    if (auto_gf_MoveIcebg1_Trigger == null) {
        auto_gf_MoveIcebg1_Trigger = TriggerCreate("auto_gf_MoveIcebg1_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveIcebg1_Trigger, false, false);
}

bool auto_gf_MoveIcebg1_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_MoveIcebg1_lp_dialogitem;
    int lp_increment = auto_gf_MoveIcebg1_lp_increment;
    int lp_startw = auto_gf_MoveIcebg1_lp_startw;
    int lp_starth = auto_gf_MoveIcebg1_lp_starth;
    fixed lp_duration = auto_gf_MoveIcebg1_lp_duration;

    // Variable Declarations
    int lv_w;
    int lv_h;
    fixed lv_elapsed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_w = lp_startw;
    lv_h = lp_starth;

    // Implementation
    while ((gv_uIIntro.lv_uIIceResize == true) && (lv_elapsed < lp_duration)) {
        DialogControlSetSize(lp_dialogitem, PlayerGroupAll(), lv_w, lv_h);
        lv_w += lp_increment;
        lv_h = ((lv_w * lp_starth) / lp_startw);
        lv_elapsed += 0.0625;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_SpinDialogItem_Trigger = null;
int auto_gf_SpinDialogItem_lp_dialogitem;
int auto_gf_SpinDialogItem_lp_angle;
fixed auto_gf_SpinDialogItem_lp_duration;

void gf_SpinDialogItem (int lp_dialogitem, int lp_angle, fixed lp_duration) {
    auto_gf_SpinDialogItem_lp_dialogitem = lp_dialogitem;
    auto_gf_SpinDialogItem_lp_angle = lp_angle;
    auto_gf_SpinDialogItem_lp_duration = lp_duration;

    if (auto_gf_SpinDialogItem_Trigger == null) {
        auto_gf_SpinDialogItem_Trigger = TriggerCreate("auto_gf_SpinDialogItem_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinDialogItem_Trigger, false, false);
}

bool auto_gf_SpinDialogItem_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_SpinDialogItem_lp_dialogitem;
    int lp_angle = auto_gf_SpinDialogItem_lp_angle;
    fixed lp_duration = auto_gf_SpinDialogItem_lp_duration;

    // Variable Declarations
    int lv_angle;
    fixed lv_elapsed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((gv_uIIntro.lv_uISpinners == true) && (lv_elapsed < lp_duration)) {
        libNtve_gf_SetDialogItemRotation(lp_dialogitem, lv_angle, PlayerGroupAll());
        lv_angle += lp_angle;
        lv_elapsed += 0.0625;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_MoveIcebg2_Trigger = null;
int auto_gf_MoveIcebg2_lp_dialogitem;
int auto_gf_MoveIcebg2_lp_increment;

void gf_MoveIcebg2 (int lp_dialogitem, int lp_increment) {
    auto_gf_MoveIcebg2_lp_dialogitem = lp_dialogitem;
    auto_gf_MoveIcebg2_lp_increment = lp_increment;

    if (auto_gf_MoveIcebg2_Trigger == null) {
        auto_gf_MoveIcebg2_Trigger = TriggerCreate("auto_gf_MoveIcebg2_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveIcebg2_Trigger, false, false);
}

bool auto_gf_MoveIcebg2_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_MoveIcebg2_lp_dialogitem;
    int lp_increment = auto_gf_MoveIcebg2_lp_increment;

    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = DialogControlGetOffsetX(lp_dialogitem, 1);
    lv_y = DialogControlGetOffsetY(lp_dialogitem, 1);

    // Implementation
    while ((gv_uIIntro.lv_uISpotlightmovement == true)) {
        DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorTopLeft, lv_x, lv_y);
        lv_x += lp_increment;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_LogHeatmapTempContainerSOG_Trigger = null;
int auto_gf_LogHeatmapTempContainerSOG_lp_shootingPlayer;
point auto_gf_LogHeatmapTempContainerSOG_lp_pointoftheShot;
bool auto_gf_LogHeatmapTempContainerSOG_lp_oneTimer;
fixed auto_gf_LogHeatmapTempContainerSOG_lp_angle;

void gf_LogHeatmapTempContainerSOG (int lp_shootingPlayer, point lp_pointoftheShot, bool lp_oneTimer, fixed lp_angle) {
    auto_gf_LogHeatmapTempContainerSOG_lp_shootingPlayer = lp_shootingPlayer;
    auto_gf_LogHeatmapTempContainerSOG_lp_pointoftheShot = lp_pointoftheShot;
    auto_gf_LogHeatmapTempContainerSOG_lp_oneTimer = lp_oneTimer;
    auto_gf_LogHeatmapTempContainerSOG_lp_angle = lp_angle;

    if (auto_gf_LogHeatmapTempContainerSOG_Trigger == null) {
        auto_gf_LogHeatmapTempContainerSOG_Trigger = TriggerCreate("auto_gf_LogHeatmapTempContainerSOG_TriggerFunc");
    }

    TriggerExecute(auto_gf_LogHeatmapTempContainerSOG_Trigger, false, false);
}

bool auto_gf_LogHeatmapTempContainerSOG_TriggerFunc (bool testConds, bool runActions) {
    int lp_shootingPlayer = auto_gf_LogHeatmapTempContainerSOG_lp_shootingPlayer;
    point lp_pointoftheShot = auto_gf_LogHeatmapTempContainerSOG_lp_pointoftheShot;
    bool lp_oneTimer = auto_gf_LogHeatmapTempContainerSOG_lp_oneTimer;
    fixed lp_angle = auto_gf_LogHeatmapTempContainerSOG_lp_angle;

    // Automatic Variable Declarations
    // Implementation
    gv_heatmapVars.lv_tempShotPlayer = lp_shootingPlayer;
    gv_heatmapVars.lv_tempShotPoint = lp_pointoftheShot;
    gv_heatmapVars.lv_tempShotOneTimer = lp_oneTimer;
    gv_heatmapVars.lv_tempShotTime = FixedToInt(TimerGetRemaining(gv_Timer));
    gv_heatmapVars.lv_tempShotAngle = lp_angle;
    return true;
}

void gf_HeatmapLogLastShotasaRealShot () {
    // Automatic Variable Declarations
    // Implementation
    gv_heatmapVars.lv_totalShots += 1;
    if ((gv_heatmapVars.lv_totalShots < 121)) {
        gv_heatmapVars.lv_shotPlayer[gv_heatmapVars.lv_totalShots] = gv_heatmapVars.lv_tempShotPlayer;
        gv_heatmapVars.lv_shotPoint[gv_heatmapVars.lv_totalShots] = gv_heatmapVars.lv_tempShotPoint;
        gv_heatmapVars.lv_shotOneTimer[gv_heatmapVars.lv_totalShots] = gv_heatmapVars.lv_tempShotOneTimer;
        gv_heatmapVars.lv_shotPeriod[gv_heatmapVars.lv_totalShots] = gv_Period;
        gv_heatmapVars.lv_shotTime[gv_heatmapVars.lv_totalShots] = gv_heatmapVars.lv_tempShotTime;
        gv_heatmapVars.lv_shotAngle[gv_heatmapVars.lv_totalShots] = gv_heatmapVars.lv_tempShotAngle;
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_heatmapVars.lv_shotPlayer[gv_heatmapVars.lv_totalShots]) == true)) {
            gv_heatmapVars.lv_shotTeam[gv_heatmapVars.lv_totalShots] = 1;
        }
        else {
            gv_heatmapVars.lv_shotTeam[gv_heatmapVars.lv_totalShots] = 2;
        }
    }

}

trigger auto_gf_HeatmapConvertLastRealShottoGoal_Trigger = null;

void gf_HeatmapConvertLastRealShottoGoal () {
    if (auto_gf_HeatmapConvertLastRealShottoGoal_Trigger == null) {
        auto_gf_HeatmapConvertLastRealShottoGoal_Trigger = TriggerCreate("auto_gf_HeatmapConvertLastRealShottoGoal_TriggerFunc");
    }

    TriggerExecute(auto_gf_HeatmapConvertLastRealShottoGoal_Trigger, false, false);
}

bool auto_gf_HeatmapConvertLastRealShottoGoal_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_heatmapVars.lv_shotScored[gv_heatmapVars.lv_totalShots] = true;
    return true;
}

trigger auto_gf_CreateInstantStatsScreen_Trigger = null;
int auto_gf_CreateInstantStatsScreen_lp_player;

void gf_CreateInstantStatsScreen (int lp_player) {
    auto_gf_CreateInstantStatsScreen_lp_player = lp_player;

    if (auto_gf_CreateInstantStatsScreen_Trigger == null) {
        auto_gf_CreateInstantStatsScreen_Trigger = TriggerCreate("auto_gf_CreateInstantStatsScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateInstantStatsScreen_Trigger, false, false);
}

bool auto_gf_CreateInstantStatsScreen_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CreateInstantStatsScreen_lp_player;

    // Variable Declarations
    int lv_team1Players;
    int lv_team2Players;
    int lv_dialogheight;
    fixed lv_team1Possesion;
    fixed lv_team2Possesion;
    fixed lv_team1PossesionPct;
    fixed lv_team2PossesionPct;

    // Automatic Variable Declarations
    playergroup auto21B77BE1_g;
    int auto21B77BE1_var;
    playergroup auto665A024C_g;
    int auto665A024C_var;

    // Variable Initialization

    // Implementation
    auto21B77BE1_g = gv_actualPlayerzonTeam[1];
    auto21B77BE1_var = -1;
    while (true) {
        auto21B77BE1_var = PlayerGroupNextPlayer(auto21B77BE1_g, auto21B77BE1_var);
        if (auto21B77BE1_var < 0) { break; }
        lv_team1Players += 1;
    }
    auto665A024C_g = gv_actualPlayerzonTeam[2];
    auto665A024C_var = -1;
    while (true) {
        auto665A024C_var = PlayerGroupNextPlayer(auto665A024C_g, auto665A024C_var);
        if (auto665A024C_var < 0) { break; }
        lv_team2Players += 1;
    }
    lv_dialogheight = (((lv_team1Players + lv_team2Players) * 45) + 60);
    DialogCreate(3000, lv_dialogheight, c_anchorCenter, 0, 50, true);
    gv_team3UI.lv_quickStatScreenDialog[lp_player] = DialogLastCreated();
    DialogSetImageVisible(gv_team3UI.lv_quickStatScreenDialog[lp_player], false);
    DialogSetVisible(gv_team3UI.lv_quickStatScreenDialog[lp_player], PlayerGroupAll(), false);
    DialogSetVisible(gv_team3UI.lv_quickStatScreenDialog[lp_player], PlayerGroupSingle(lp_player), true);
    libNtve_gf_CreateDialogItemImage(gv_team3UI.lv_quickStatScreenDialog[lp_player], 3000, lv_dialogheight, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 450, PlayerGroupAll());
    gf_SpinDialogItem4(gv_team3UI.lv_quickStatScreenDialog[lp_player], lv_team1Players, lv_team2Players, false);
    return true;
}

trigger auto_gf_ResetTabstatCDs_Trigger = null;
int auto_gf_ResetTabstatCDs_lp_player;

void gf_ResetTabstatCDs (int lp_player) {
    auto_gf_ResetTabstatCDs_lp_player = lp_player;

    if (auto_gf_ResetTabstatCDs_Trigger == null) {
        auto_gf_ResetTabstatCDs_Trigger = TriggerCreate("auto_gf_ResetTabstatCDs_TriggerFunc");
    }

    TriggerExecute(auto_gf_ResetTabstatCDs_Trigger, false, false);
}

bool auto_gf_ResetTabstatCDs_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ResetTabstatCDs_lp_player;

    // Automatic Variable Declarations
    // Implementation
    Wait(10.0, c_timeGame);
    if ((gv_tabStatVars.lv_tabShowCharges[lp_player] < 3)) {
        gv_tabStatVars.lv_tabShowCharges[lp_player] += 1;
    }

    return true;
}

trigger auto_gf_Setinitialtabstatcharges_Trigger = null;

void gf_Setinitialtabstatcharges () {
    if (auto_gf_Setinitialtabstatcharges_Trigger == null) {
        auto_gf_Setinitialtabstatcharges_Trigger = TriggerCreate("auto_gf_Setinitialtabstatcharges_TriggerFunc");
    }

    TriggerExecute(auto_gf_Setinitialtabstatcharges_Trigger, false, false);
}

bool auto_gf_Setinitialtabstatcharges_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA1041C34_g;
    int autoA1041C34_var;

    // Implementation
    autoA1041C34_g = PlayerGroupActive();
    autoA1041C34_var = -1;
    while (true) {
        autoA1041C34_var = PlayerGroupNextPlayer(autoA1041C34_g, autoA1041C34_var);
        if (autoA1041C34_var < 0) { break; }
        gv_tabStatVars.lv_tabShowCharges[autoA1041C34_var] = 3;
    }
    return true;
}

void gf_GoalieShutoutsLogScorePeriodStart (int lp_period) {
    // Automatic Variable Declarations
    // Implementation
}

void gf_GoalieShutoutsLogScorePeriodEnd (int lp_period) {
    // Automatic Variable Declarations
    // Implementation
}

void gf_GoalieShutoutsLogtimeinnetPeriodStart (int lp_period) {
    // Automatic Variable Declarations
    // Implementation
}

void gf_GoalieShutoutsLogtimeinnetPeriodEnd (int lp_period) {
    // Automatic Variable Declarations
    // Implementation
}

void gf_GoalieShutoutsCalculategoalieshutouts (int lp_period) {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

int gf_Returntimeinnet (int lp_player) {
    // Variable Declarations
    int lv_timeinnetvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 1)) {
        lv_timeinnetvalue = libNtve_gf_ArithmeticIntClamp(FixedToInt(TimerGetElapsed(gv_timeinnet.lv_nettimeTimers[lp_player])), 0, 240);
    }
    else {
        if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 2)) {
            lv_timeinnetvalue = libNtve_gf_ArithmeticIntClamp(FixedToInt(TimerGetElapsed(gv_timeinnet.lv_nettimeTimers[lp_player])), 0, 480);
        }
        else {
            if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 3)) {
                lv_timeinnetvalue = libNtve_gf_ArithmeticIntClamp(FixedToInt(TimerGetElapsed(gv_timeinnet.lv_nettimeTimers[lp_player])), 0, 720);
            }
            else {
                if ((gv_uIPeriodStats.lv_timesshownAKAperiod >= 4)) {
                    lv_timeinnetvalue = libNtve_gf_ArithmeticIntClamp(FixedToInt(TimerGetElapsed(gv_timeinnet.lv_nettimeTimers[lp_player])), 0, 810);
                }

            }
        }
    }
    return lv_timeinnetvalue;
}

void gf_CreatePlayerStats (int lp_player) {
    // Variable Declarations
    color lv_overallBarColor;
    color lv_offenseBarColor;
    color lv_goalieBarColor;
    color lv_handlingBarColor;
    color lv_defenseBarColor;
    fixed lv_r;
    fixed lv_g;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_overallBarColor = ColorWithAlpha(0,0,0,0);
    lv_offenseBarColor = ColorWithAlpha(0,0,0,0);
    lv_goalieBarColor = ColorWithAlpha(0,0,0,0);
    lv_handlingBarColor = ColorWithAlpha(0,0,0,0);
    lv_defenseBarColor = ColorWithAlpha(0,0,0,0);

    // Implementation
    if ((gv_overall[lp_player] <= 50.0)) {
        lv_r = 0.0;
    }
    else {
        if ((gv_overall[lp_player] < 75.0)) {
            lv_r = ((gv_overall[lp_player]-50)*4);
        }
        else {
            lv_r = 100.0;
        }
    }
    if ((gv_overall[lp_player] <= 75.0)) {
        lv_g = 100.0;
    }
    else {
        lv_g = ((100-gv_overall[lp_player])*4);
    }
    lv_overallBarColor = Color(lv_r, lv_g, 0.0);
    if ((gv_offense[lp_player] <= 50.0)) {
        lv_r = 0.0;
    }
    else {
        if ((gv_offense[lp_player] < 75.0)) {
            lv_r = ((gv_offense[lp_player]-50)*4);
        }
        else {
            lv_r = 100.0;
        }
    }
    if ((gv_offense[lp_player] <= 75.0)) {
        lv_g = 100.0;
    }
    else {
        lv_g = ((100-gv_offense[lp_player])*4);
    }
    lv_offenseBarColor = Color(lv_r, lv_g, 0.0);
    if ((gv_defense[lp_player] <= 50.0)) {
        lv_r = 0.0;
    }
    else {
        if ((gv_defense[lp_player] < 75.0)) {
            lv_r = ((gv_defense[lp_player]-50)*4);
        }
        else {
            lv_r = 100.0;
        }
    }
    if ((gv_defense[lp_player] <= 75.0)) {
        lv_g = 100.0;
    }
    else {
        lv_g = ((100-gv_defense[lp_player])*4);
    }
    lv_defenseBarColor = Color(lv_r, lv_g, 0.0);
    if ((gv_goalie[lp_player] <= 50.0)) {
        lv_r = 0.0;
    }
    else {
        if ((gv_goalie[lp_player] < 75.0)) {
            lv_r = ((gv_goalie[lp_player]-50)*4);
        }
        else {
            lv_r = 100.0;
        }
    }
    if ((gv_goalie[lp_player] <= 75.0)) {
        lv_g = 100.0;
    }
    else {
        lv_g = ((100-gv_goalie[lp_player])*4);
    }
    lv_goalieBarColor = Color(lv_r, lv_g, 0.0);
    if ((gv_handling[lp_player] <= 50.0)) {
        lv_r = 0.0;
    }
    else {
        if ((gv_handling[lp_player] < 75.0)) {
            lv_r = ((gv_handling[lp_player]-50)*4);
        }
        else {
            lv_r = 100.0;
        }
    }
    if ((gv_handling[lp_player] <= 75.0)) {
        lv_g = 100.0;
    }
    else {
        lv_g = ((100-gv_handling[lp_player])*4);
    }
    lv_handlingBarColor = Color(lv_r, lv_g, 0.0);
    DialogCreate(500, 1000, c_anchorCenter, 0, 0, true);
    gv_hoverStatsDialog[lp_player] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 170, c_anchorTop, -15, 10, StringToText(""), "Assets\\Textures\\ui_replay_frame_mapcontainer_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/9E0E8988", "A", PlayerName(lp_player));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 20, TextExpressionAssemble("Param/Expression/9E0E8988"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -100, 50, StringExternal("Param/Value/F6305C71"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -100, 75, StringExternal("Param/Value/F3DC794D"), Color(100.00, 50.20, 50.20), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -100, 100, StringExternal("Param/Value/234B6E07"), Color(50.20, 100.00, 50.20), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -100, 125, StringExternal("Param/Value/BCB79D19"), Color(58.82, 87.06, 98.04), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -100, 150, StringExternal("Param/Value/4EC391EB"), Color(100.00, 74.12, 87.06), false, 2.0);
    if ((gv_overall[lp_player] < 100.0)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 160, 50, FixedToText(gv_overall[lp_player], 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 145, 50, FixedToText(100.0, 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_overallBarColor, PlayerGroupAll());
    if ((gv_goalie[lp_player] < 100.0)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 160, 125, FixedToText(gv_goalie[lp_player], 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 145, 125, FixedToText(100.0, 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_goalieBarColor, PlayerGroupAll());
    if ((gv_offense[lp_player] < 100.0)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 160, 75, FixedToText(gv_offense[lp_player], 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 145, 75, FixedToText(100.0, 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_offenseBarColor, PlayerGroupAll());
    if ((gv_handling[lp_player] < 100.0)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 160, 150, FixedToText(gv_handling[lp_player], 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 145, 150, FixedToText(100.0, 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_handlingBarColor, PlayerGroupAll());
    if ((gv_defense[lp_player] < 100.0)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 160, 100, FixedToText(gv_defense[lp_player], 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 145, 100, FixedToText(100.0, 0), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_defenseBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((gv_overall[lp_player]*2)), 15, c_anchorTopLeft, 200, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_overallBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((gv_offense[lp_player]*2)), 3, c_anchorTopLeft, 200, 80, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_offenseBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((gv_defense[lp_player]*2)), 3, c_anchorTopLeft, 200, 105, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_defenseBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((gv_goalie[lp_player]*2)), 3, c_anchorTopLeft, 200, 130, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_goalieBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((gv_handling[lp_player]*2)), 3, c_anchorTopLeft, 200, 155, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_handlingBarColor, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 125, c_anchorTopLeft, 188, 40, StringToText(""), "Assets\\Textures\\lazerbolt1_blue_lines1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPosition(DialogLastCreated(), c_anchorCenter, 0, 200);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
}

void gf_CreateAchievmentIcons () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_prizescroll;
    int[16] lv_playerindex;
    int lv_k;

    // Automatic Variable Declarations
    playergroup auto7FA5F794_g;
    int auto7FA5F794_var;
    playergroup auto175EDB45_g;
    int auto175EDB45_var;
    int autoE121986F_ae;
    const int autoE121986F_ai = 1;
    int autoBE0E6184_ae;
    const int autoBE0E6184_ai = 1;

    // Variable Initialization

    // Implementation
    auto7FA5F794_g = gv_actualPlayerzonTeam[1];
    auto7FA5F794_var = -1;
    while (true) {
        auto7FA5F794_var = PlayerGroupNextPlayer(auto7FA5F794_g, auto7FA5F794_var);
        if (auto7FA5F794_var < 0) { break; }
        lv_k += 1;
        lv_playerindex[lv_k] = auto7FA5F794_var;
    }
    auto175EDB45_g = gv_actualPlayerzonTeam[2];
    auto175EDB45_var = -1;
    while (true) {
        auto175EDB45_var = PlayerGroupNextPlayer(auto175EDB45_g, auto175EDB45_var);
        if (auto175EDB45_var < 0) { break; }
        lv_k += 1;
        lv_playerindex[lv_k] = auto175EDB45_var;
    }
    autoE121986F_ae = lv_k;
    lv_i = 1;
    for ( ; ( (autoE121986F_ai >= 0 && lv_i <= autoE121986F_ae) || (autoE121986F_ai < 0 && lv_i >= autoE121986F_ae) ) ; lv_i += autoE121986F_ai ) {
        lv_prizescroll = 40;
        autoBE0E6184_ae = gv_totalPrizeEvents;
        lv_j = 1;
        for ( ; ( (autoBE0E6184_ai >= 0 && lv_j <= autoBE0E6184_ae) || (autoBE0E6184_ai < 0 && lv_j >= autoBE0E6184_ae) ) ; lv_j += autoBE0E6184_ai ) {
            if ((gv_prizes[lv_playerindex[lv_i]][lv_j] != "")) {
                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "fullheart")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_heart, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/685E4B61"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Developer")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_developer, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B1AD7458"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "YT")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_yT, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B164D0DD"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Commissioner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_commissioner, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/56B104E9"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Newspaper")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_newspaper, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/CFA18E46"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Show Host")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_showhost, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E8A8EB50"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Zealot Hockey Caster")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_replay, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/ACF4423D"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "test4")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_gM, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8E8DB776"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Winter Classic")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 50, 50, c_anchorTopLeft, (lv_prizescroll+550), (lv_i*40-7), StringToText(""), gv_winterClassic, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/C445A464"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S1 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS1, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FFE15F5A"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Bo3")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_bo3, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/35F1078F"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "Clan War")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_clanWar, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/97AAA899"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "EU IHL")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_eUIHL, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/04A7D905"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S1 Top 4 Paid")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS1Top4Paid, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/7AE4AC5F"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S2 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS2, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8F4EB319"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S3 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS3, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/687B2015"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S4 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS4, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B58163DF"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S5 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS5, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2FD398B4"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S6 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv_zHLS6, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/CCA96525"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "3ktourny")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), gv__3ktourny, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8648AF90"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "leaguemusic")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), "Assets\\Textures\\ui-editoricon-data_types_digitalsounds.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/439BDEEC"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S7 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), "zhls7.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/58481380"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "CHL Champion")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), "chl-trophy.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4A313C01"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S8 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), "ZHLS8.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3444BB3B"), PlayerGroupAll());
                }

                if ((gv_prizes[lv_playerindex[lv_i]][lv_j] == "ZHL S9 Winner")) {
                    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 30, 30, c_anchorTopLeft, (lv_prizescroll+560), (lv_i*40+3), StringToText(""), "ZHLS8.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9173BBEE"), PlayerGroupAll());
                }

                lv_prizescroll += 30;
            }

        }
    }
}

trigger auto_gf_JetFlyby_Trigger = null;

void gf_JetFlyby () {
    if (auto_gf_JetFlyby_Trigger == null) {
        auto_gf_JetFlyby_Trigger = TriggerCreate("auto_gf_JetFlyby_TriggerFunc");
    }

    TriggerExecute(auto_gf_JetFlyby_Trigger, false, false);
}

bool auto_gf_JetFlyby_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_jets;
    actor[4] lv_flames;

    // Automatic Variable Declarations
    playergroup auto0F174DF9_g;
    int auto0F174DF9_var;

    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("JetFlyby", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    Wait(11.0, c_timeGame);
    UnitCreate(1, "StadiumJet", c_unitCreateIgnorePlacement, 0, Point(4.1, 124.4), 0.0);
    lv_jets[1] = UnitLastCreated();
    UnitCreate(1, "StadiumJet", c_unitCreateIgnorePlacement, 0, Point(11.97, 112.15), 0.0);
    lv_jets[2] = UnitLastCreated();
    UnitCreate(1, "StadiumJet", c_unitCreateIgnorePlacement, 0, Point(4.12, 100.08), 0.0);
    lv_jets[3] = UnitLastCreated();
    UnitIssueOrder(lv_jets[1], OrderTargetingPoint(AbilityCommand("move", 0), Point(247.8, 124.17)), c_orderQueueReplace);
    UnitIssueOrder(lv_jets[2], OrderTargetingPoint(AbilityCommand("move", 0), Point(255.67, 111.92)), c_orderQueueReplace);
    UnitIssueOrder(lv_jets[3], OrderTargetingPoint(AbilityCommand("move", 0), Point(247.82, 99.85)), c_orderQueueReplace);
    libNtve_gf_AttachActorToUnit(lv_jets[1], "FireMedium", "Ref_Origin");
    lv_flames[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(lv_jets[2], "FireMedium", "Ref_Origin");
    lv_flames[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(lv_jets[3], "FireMedium", "Ref_Origin");
    lv_flames[3] = libNtve_gf_ActorLastCreated();
    Wait(0.5, c_timeGame);
    auto0F174DF9_g = PlayerGroupAll();
    auto0F174DF9_var = -1;
    while (true) {
        auto0F174DF9_var = PlayerGroupNextPlayer(auto0F174DF9_g, auto0F174DF9_var);
        if (auto0F174DF9_var < 0) { break; }
        CameraShakeStart(auto0F174DF9_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.08, 2.0, 100.0, 3.0);
    }
    Wait(1.5, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[1]), "SetOpacity 0.000000 1.500000");
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[2]), "SetOpacity 0.000000 1.500000");
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[3]), "SetOpacity 0.000000 1.500000");
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[1]), "SetScale 1.000000 1.500000");
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[2]), "SetScale 1.000000 1.500000");
    ActorSend(libNtve_gf_MainActorofUnit(lv_jets[3]), "SetScale 1.000000 1.500000");
    ActorSend(lv_flames[1], "SetOpacity 0.000000 1.500000");
    ActorSend(lv_flames[2], "SetOpacity 0.000000 1.500000");
    ActorSend(lv_flames[3], "SetOpacity 0.000000 1.500000");
    Wait(0.5, c_timeGame);
    UnitSetHeight(lv_jets[1], 40.0, 3.0);
    UnitSetHeight(lv_jets[2], 40.0, 3.0);
    UnitSetHeight(lv_jets[3], 40.0, 3.0);
    Wait(2.0, c_timeGame);
    UnitRemove(lv_jets[1]);
    UnitRemove(lv_jets[2]);
    UnitRemove(lv_jets[3]);
    ActorSend(lv_flames[1], "Destroy");
    ActorSend(lv_flames[2], "Destroy");
    ActorSend(lv_flames[3], "Destroy");
    return true;
}

void gf_BuildPregameStats () {
    // Variable Declarations
    int lv_team1Players;
    int lv_team2Players;
    int lv_dialogheight;
    int lv_coloffset1;
    int lv_coloffset2;
    int lv_coloffset3;
    int lv_coloffset4;
    int lv_yoffset;

    // Automatic Variable Declarations
    playergroup auto38EEECD5_g;
    int auto38EEECD5_var;
    playergroup auto3D37A36A_g;
    int auto3D37A36A_var;
    playergroup auto19F36FA9_g;
    int auto19F36FA9_var;
    playergroup auto9BA185B9_g;
    int auto9BA185B9_var;

    // Variable Initialization
    lv_coloffset1 = 15;
    lv_coloffset2 = 300;
    lv_coloffset3 = 400;
    lv_coloffset4 = 500;
    lv_yoffset = 50;

    // Implementation
    if ((gv_uIPregameStats.lv_canvasDialog != c_invalidDialogId)) {
        DialogDestroy(gv_uIPregameStats.lv_canvasDialog);
    }

    auto38EEECD5_g = gv_actualPlayerzonTeam[1];
    auto38EEECD5_var = -1;
    while (true) {
        auto38EEECD5_var = PlayerGroupNextPlayer(auto38EEECD5_g, auto38EEECD5_var);
        if (auto38EEECD5_var < 0) { break; }
        lv_team1Players += 1;
    }
    auto3D37A36A_g = gv_actualPlayerzonTeam[2];
    auto3D37A36A_var = -1;
    while (true) {
        auto3D37A36A_var = PlayerGroupNextPlayer(auto3D37A36A_g, auto3D37A36A_var);
        if (auto3D37A36A_var < 0) { break; }
        lv_team2Players += 1;
    }
    lv_dialogheight = (((lv_team1Players + lv_team2Players) * 40) + 40);
    DialogCreate(1200, lv_dialogheight, c_anchorCenter, 150, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_uIPregameStats.lv_canvasDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 900, lv_dialogheight, c_anchorLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPregameStats.lv_canvasBG = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 0, PlayerGroupAll());
    DialogControlFadeTransparency(gv_uIPregameStats.lv_canvasBG, PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 900, 40, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset1, 10, StringExternal("Param/Value/581A8812"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset2, 10, StringExternal("Param/Value/96FB992E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, 10, StringExternal("Param/Value/2980D50C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset4, 10, StringExternal("Param/Value/31781DB1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto19F36FA9_g = gv_actualPlayerzonTeam[1];
    auto19F36FA9_var = -1;
    while (true) {
        auto19F36FA9_var = PlayerGroupNextPlayer(auto19F36FA9_g, auto19F36FA9_var);
        if (auto19F36FA9_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset1, lv_yoffset, PlayerName(auto19F36FA9_var), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset2, lv_yoffset, IntToText((gv_stats_GamesPlayed[auto19F36FA9_var]+BankValueGetAsInt(gv_Banks[auto19F36FA9_var], "Stats", "LegacyGames"))), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_stats_GamesPlayed[auto19F36FA9_var] == 0)) {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, StringExternal("Param/Value/6621C796"), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, (IntToText(RoundI(((gv_stats_GamesWon[auto19F36FA9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto19F36FA9_var])))) + StringExternal("Param/Value/A1837B57")), Color(100.0, ((100-RoundI(((gv_stats_GamesWon[auto19F36FA9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto19F36FA9_var]))))*2.5), ((60-RoundI(((gv_stats_GamesWon[auto19F36FA9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto19F36FA9_var]))))*10)), false, 2.0);
        }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset4, lv_yoffset, IntToText(gv_stats_Points[auto19F36FA9_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yoffset += 40;
    }
    auto9BA185B9_g = gv_actualPlayerzonTeam[2];
    auto9BA185B9_var = -1;
    while (true) {
        auto9BA185B9_var = PlayerGroupNextPlayer(auto9BA185B9_g, auto9BA185B9_var);
        if (auto9BA185B9_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset1, lv_yoffset, PlayerName(auto9BA185B9_var), Color(0,66*100/255,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset2, lv_yoffset, IntToText((gv_stats_GamesPlayed[auto9BA185B9_var]+BankValueGetAsInt(gv_Banks[auto9BA185B9_var], "Stats", "LegacyGames"))), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_stats_GamesPlayed[auto9BA185B9_var] == 0)) {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, StringExternal("Param/Value/813689ED"), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, (IntToText(((gv_stats_GamesWon[auto9BA185B9_var] * 100) / gv_stats_GamesPlayed[auto9BA185B9_var])) + StringExternal("Param/Value/53D2BDF9")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, (IntToText(RoundI(((gv_stats_GamesWon[auto9BA185B9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto9BA185B9_var])))) + StringExternal("Param/Value/37C8801F")), Color(100.0, ((100-RoundI(((gv_stats_GamesWon[auto9BA185B9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto9BA185B9_var]))))*2.5), ((60-RoundI(((gv_stats_GamesWon[auto9BA185B9_var] * 100) / FixedToInt(gv_stats_GamesPlayed[auto9BA185B9_var]))))*10)), false, 2.0);
        }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset4, lv_yoffset, IntToText(gv_stats_Points[auto9BA185B9_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yoffset += 40;
    }
    gf_CreateAchievmentIcons();
}

void gf_BuildPregameStatsforSingleDraftNoTeams () {
    // Variable Declarations
    int lv_totalPlayers;
    int lv_team1Players;
    int lv_team2Players;
    int lv_dialogheight;
    int lv_coloffset1;
    int lv_coloffset2;
    int lv_coloffset3;
    int lv_coloffset4;
    int lv_yoffset;
    playergroup lv_activeplayergroup;

    // Automatic Variable Declarations
    const int autoA7338F05_ae = 8;
    int autoA7338F05_var;
    playergroup autoD97E88EC_g;
    int autoD97E88EC_var;

    // Variable Initialization
    lv_coloffset1 = 15;
    lv_coloffset2 = 300;
    lv_coloffset3 = 400;
    lv_coloffset4 = 500;
    lv_yoffset = 50;
    lv_activeplayergroup = PlayerGroupEmpty();

    // Implementation
    autoA7338F05_var = 1;
    for ( ; autoA7338F05_var <= autoA7338F05_ae; autoA7338F05_var += 1 ) {
        if ((PlayerStatus(autoA7338F05_var) == c_playerStatusActive)) {
            lv_totalPlayers += 1;
            PlayerGroupAdd(lv_activeplayergroup, autoA7338F05_var);
        }

    }
    lv_dialogheight = ((lv_totalPlayers * 40) + 40);
    DialogCreate(1200, lv_dialogheight, c_anchorCenter, 250, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_uIPregameStats.lv_canvasDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 700, lv_dialogheight, c_anchorLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPregameStats.lv_canvasBG = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 0, PlayerGroupAll());
    DialogControlFadeTransparency(gv_uIPregameStats.lv_canvasBG, PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPregameStats.lv_canvasDialog, 700, 40, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset1, 10, StringExternal("Param/Value/B36B1819"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset2, 10, StringExternal("Param/Value/E76AC6B5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, 10, StringExternal("Param/Value/FA6C724C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset4, 10, StringExternal("Param/Value/1713BA22"), ColorWithAlpha(0,0,0,0), false, 2.0);
    autoD97E88EC_g = lv_activeplayergroup;
    autoD97E88EC_var = -1;
    while (true) {
        autoD97E88EC_var = PlayerGroupNextPlayer(autoD97E88EC_g, autoD97E88EC_var);
        if (autoD97E88EC_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset1, lv_yoffset, PlayerName(autoD97E88EC_var), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset2, lv_yoffset, IntToText((gv_stats_GamesPlayed[autoD97E88EC_var]+BankValueGetAsInt(gv_Banks[autoD97E88EC_var], "Stats", "LegacyGames"))), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_stats_GamesPlayed[autoD97E88EC_var] == 0)) {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, StringExternal("Param/Value/8B20A5AD"), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset3, lv_yoffset, (IntToText(RoundI(((gv_stats_GamesWon[autoD97E88EC_var] * 100) / FixedToInt(gv_stats_GamesPlayed[autoD97E88EC_var])))) + StringExternal("Param/Value/4D71F64E")), Color(100.0, ((100-RoundI(((gv_stats_GamesWon[autoD97E88EC_var] * 100) / FixedToInt(gv_stats_GamesPlayed[autoD97E88EC_var]))))*2.5), ((60-RoundI(((gv_stats_GamesWon[autoD97E88EC_var] * 100) / FixedToInt(gv_stats_GamesPlayed[autoD97E88EC_var]))))*10)), false, 2.0);
        }
        libNtve_gf_CreateDialogItemLabel(gv_uIPregameStats.lv_canvasDialog, 300, 80, c_anchorTopLeft, lv_coloffset4, lv_yoffset, IntToText(gv_stats_Points[autoD97E88EC_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_yoffset += 40;
    }
    gf_CreateAchievmentIcons();
}

trigger auto_gf_SpinDialogItem4_Trigger = null;
int auto_gf_SpinDialogItem4_lp_dialog;
int auto_gf_SpinDialogItem4_lp_team1Players;
int auto_gf_SpinDialogItem4_lp_team2Players;
bool auto_gf_SpinDialogItem4_lp_intermission;

void gf_SpinDialogItem4 (int lp_dialog, int lp_team1Players, int lp_team2Players, bool lp_intermission) {
    auto_gf_SpinDialogItem4_lp_dialog = lp_dialog;
    auto_gf_SpinDialogItem4_lp_team1Players = lp_team1Players;
    auto_gf_SpinDialogItem4_lp_team2Players = lp_team2Players;
    auto_gf_SpinDialogItem4_lp_intermission = lp_intermission;

    if (auto_gf_SpinDialogItem4_Trigger == null) {
        auto_gf_SpinDialogItem4_Trigger = TriggerCreate("auto_gf_SpinDialogItem4_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinDialogItem4_Trigger, false, false);
}

bool auto_gf_SpinDialogItem4_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_gf_SpinDialogItem4_lp_dialog;
    int lp_team1Players = auto_gf_SpinDialogItem4_lp_team1Players;
    int lp_team2Players = auto_gf_SpinDialogItem4_lp_team2Players;
    bool lp_intermission = auto_gf_SpinDialogItem4_lp_intermission;

    // Variable Declarations
    int lv_rLTotalGoal;
    int lv_whichplayerismvp;
    int lv_statDialog;
    int lv_xoffset;
    int lv_xstart;
    int lv_yoffset;
    int lv_sttemp;
    int lv_sttemp2;
    fixed lv_tempSavePct;
    int lv_stattextverticaloffset;
    int lv_rowcount;
    bool[16] lv_mVPStatus;
    color lv_graytext;
    int lv_glowwidth;
    int lv_glowxoffset;
    fixed lv_glowytransparency;
    fixed lv_redlineSave;

    // Automatic Variable Declarations
    playergroup auto3E629364_g;
    int auto3E629364_var;
    const int auto52AB0782_ae = 15;
    int auto52AB0782_var;
    playergroup auto0C759E80_g;
    int auto0C759E80_var;
    const int autoA22DA08A_ae = 15;
    int autoA22DA08A_var;
    playergroup auto33109B00_g;
    int auto33109B00_var;
    playergroup auto0C117BA3_g;
    int auto0C117BA3_var;

    // Variable Initialization
    lv_statDialog = lp_dialog;
    lv_xoffset = 130;
    lv_xstart = -355;
    lv_yoffset = 105;
    lv_stattextverticaloffset = 31;
    lv_rowcount = 1;
    lv_graytext = Color(50.20, 50.20, 50.20);
    lv_glowytransparency = 75.0;

    // Implementation
    auto3E629364_g = gv_actualPlayerzonTeam[1];
    auto3E629364_var = -1;
    while (true) {
        auto3E629364_var = PlayerGroupNextPlayer(auto3E629364_g, auto3E629364_var);
        if (auto3E629364_var < 0) { break; }
        lv_mVPStatus[auto3E629364_var] = true;
        lv_sttemp = gf_GetTotalPlayerPoints(auto3E629364_var);
        gv_playerTotalPoints[auto3E629364_var] = lv_sttemp;
        auto52AB0782_var = 1;
        for ( ; auto52AB0782_var <= auto52AB0782_ae; auto52AB0782_var += 1 ) {
            lv_sttemp2 = gf_GetTotalPlayerPoints(auto52AB0782_var);
            if ((lv_sttemp < lv_sttemp2)) {
                lv_mVPStatus[auto3E629364_var] = false;
                break;
            }

        }
    }
    auto0C759E80_g = gv_actualPlayerzonTeam[2];
    auto0C759E80_var = -1;
    while (true) {
        auto0C759E80_var = PlayerGroupNextPlayer(auto0C759E80_g, auto0C759E80_var);
        if (auto0C759E80_var < 0) { break; }
        lv_mVPStatus[auto0C759E80_var] = true;
        lv_sttemp = gf_GetTotalPlayerPoints(auto0C759E80_var);
        gv_playerTotalPoints[auto0C759E80_var] = lv_sttemp;
        autoA22DA08A_var = 1;
        for ( ; autoA22DA08A_var <= autoA22DA08A_ae; autoA22DA08A_var += 1 ) {
            lv_sttemp2 = gf_GetTotalPlayerPoints(autoA22DA08A_var);
            if ((lv_sttemp < lv_sttemp2)) {
                lv_mVPStatus[auto0C759E80_var] = false;
                break;
            }

        }
    }
    gf_ClearBestScores();
    gf_CalculateBestScores();
    libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 60, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 2, c_anchorTop, 0, 60, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/16DCAC1D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/C9CB3CB3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    if ((gv_rEDLINE_MODE == true)) {
        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/D2AB42A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/1B793616"), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/982FD015"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/A002637A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/BC35F93E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/892AE957"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/00789626"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_xstart += lv_xoffset;
    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, 20, StringExternal("Param/Value/897D8747"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_Createbootystats(lv_statDialog);
    libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 10, c_anchorTop, 0, 62, StringToText(""), "Intro\\stats assets\\stat-shadow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 10, c_anchorTop, -528, 62, StringToText(""), "Intro\\stats assets\\stat-shadow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(lv_statDialog, 1, 2000, c_anchorTop, -533, 62, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
    lv_xstart = -670;
    auto33109B00_g = gv_actualPlayerzonTeam[1];
    auto33109B00_var = -1;
    while (true) {
        auto33109B00_var = PlayerGroupNextPlayer(auto33109B00_g, auto33109B00_var);
        if (auto33109B00_var < 0) { break; }
        libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 45, c_anchorTop, 0, (lv_yoffset - 45), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 440, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        if ((gv_rEDLINE_MODE == true) && (auto33109B00_var == gv_Players[2])) {
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 76.86, 0.00), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        }
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 70.0);
        libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 2, c_anchorTop, 0, lv_yoffset, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 95.0);
        if ((lv_rowcount == 2)) {
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 45, c_anchorTop, 0, (lv_yoffset - 45), StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 460, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 65.0);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 230, 50, c_anchorTop, lv_xstart, (lv_yoffset - 45), PlayerName(auto33109B00_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_eloChange[auto33109B00_var] == 0.0)) {
            TextExpressionSetToken("Param/Expression/40609C1F", "A", FixedToText(gv_eloOLD[auto33109B00_var], 0));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/40609C1F") + TextExpressionAssemble("Param/Expression/594DF168")), PlayerGroupAll());
        }
        else {
            if ((gv_eloChange[auto33109B00_var] > 0.0)) {
                TextExpressionSetToken("Param/Expression/03E4652A", "A", FixedToText(gv_eloOLD[auto33109B00_var], 0));
                TextExpressionSetToken("Param/Expression/03E4652A", "B", FixedToText(gv_eloChange[auto33109B00_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/03E4652A") + TextExpressionAssemble("Param/Expression/4068E0C0")), PlayerGroupAll());
            }
            else {
                TextExpressionSetToken("Param/Expression/1022F613", "A", FixedToText(gv_eloOLD[auto33109B00_var], 0));
                TextExpressionSetToken("Param/Expression/1022F613", "B", FixedToText(gv_eloChange[auto33109B00_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/1022F613") + TextExpressionAssemble("Param/Expression/63BEAD6D")), PlayerGroupAll());
            }
        }
        if ((gv_grayName[auto33109B00_var] == false)) {
            if ((gv_rEDLINE_MODE == true) && (auto33109B00_var == gv_Players[2])) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 85.10, 0.00), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(99.61, 17.25, 17.25), PlayerGroupAll());
            }
        }
        else {
            if ((gv_playerforfeit2[auto33109B00_var] == false)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
            }
            else {
                gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
                if ((gv_eloDifference1 > 1600.0)) {
                    gv_eloDifference1 = 1600.0;
                }

                gv_eloChange[auto33109B00_var] = (-(((1000.0 / gv_team2ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*0.333));
                TextExpressionSetToken("Param/Expression/B5962720", "A", FixedToText(gv_eloOLD[auto33109B00_var], 0));
                TextExpressionSetToken("Param/Expression/B5962720", "B", FixedToText(gv_eloChange[auto33109B00_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/B5962720") + TextExpressionAssemble("Param/Expression/F590219E")), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
            }
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        if ((lv_mVPStatus[auto33109B00_var] == true)) {
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, (lv_xstart - 30), (lv_yoffset - 45));
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 20, 20, c_anchorTop, (lv_xstart + 102), (lv_yoffset - 32), StringToText(""), "crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }

        lv_xstart += 315;
        lv_sttemp = (gv_inGameStatsSteals[auto33109B00_var] - gv_inGameStatsTurnovers[auto33109B00_var]);
        if ((gv_uIPeriodStats.lv_bestST[auto33109B00_var] == true)) {
            if ((lv_sttemp > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        if ((lv_sttemp == 0)) {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), lv_graytext, false, 2.0);
        }
        else {
            if ((lv_sttemp > 0)) {
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), Color(35.29, 76.86, 7.06), false, 2.0);
            }
            else {
                if ((lv_sttemp < 0)) {
                    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), Color(100.00, 0.00, 0.00), false, 2.0);
                }

            }
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestGoals[auto33109B00_var] == true)) {
            if ((gv_inGameStatsGoals[auto33109B00_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsGoals[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestGoals[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_rEDLINE_MODE == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_redlineMode.lv_shotsonGoal[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            if ((gv_uIPeriodStats.lv_bestAssists[auto33109B00_var] == true)) {
                if ((gv_inGameStatsAssists[auto33109B00_var] > 9)) {
                    lv_glowxoffset = 85;
                }
                else {
                    lv_glowxoffset = 93;
                }
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
            }

            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsAssists[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_uIPeriodStats.lv_bestAssists[auto33109B00_var] == true)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
            }
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPickups[auto33109B00_var] == true)) {
            if ((gv_inGameStatsBlocks[auto33109B00_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, (lv_xstart), (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsBlocks[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPickups[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPasses[auto33109B00_var] == true)) {
            if ((gv_inGameStatsPasses[auto33109B00_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsPasses[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPasses[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPassesRevd[auto33109B00_var] == true)) {
            if ((gv_inGameStatsPassedTo[auto33109B00_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsPassedTo[auto33109B00_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPassesRevd[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_rEDLINE_MODE == true)) {
            if ((gv_Players[2] == auto33109B00_var)) {
                lv_rLTotalGoal += gv_inGameStatsGoals[gv_Players[1]];
                lv_rLTotalGoal += gv_inGameStatsGoals[gv_Players[2]];
                lv_rLTotalGoal += gv_inGameStatsGoals[gv_Players[3]];
                lv_rLTotalGoal += gv_inGameStatsGoals[gv_Players[5]];
                lv_rLTotalGoal += gv_inGameStatsGoals[gv_Players[7]];
                if (((gv_redlineMode.lv_saves[auto33109B00_var] + lv_rLTotalGoal) != 0)) {
                    lv_redlineSave = ((IntToFixed(gv_redlineMode.lv_saves[auto33109B00_var]) / (IntToFixed(gv_redlineMode.lv_saves[auto33109B00_var]) + IntToFixed(lv_rLTotalGoal))) * 100.0);
                    lv_sttemp = 1;
                }
                else {
                    lv_redlineSave = 0.0;
                    lv_sttemp = 0;
                }
            }
            else {
                lv_redlineSave = 0.0;
                lv_sttemp = 0;
            }
        }
        else {
            lv_sttemp = (gv_inGameStatsGoalieBlock[auto33109B00_var]+gv_inGameStatsGoalieAllow[auto33109B00_var]);
        }
        if ((lv_sttemp != 0)) {
            if ((gv_rEDLINE_MODE == true)) {
                lv_sttemp = RoundI(lv_redlineSave);
            }
            else {
                lv_sttemp = RoundI(((gv_inGameStatsGoalieBlock[auto33109B00_var] * 100.0) / (gv_inGameStatsGoalieBlock[auto33109B00_var] + gv_inGameStatsGoalieAllow[auto33109B00_var])));
            }
            if ((gv_uIPeriodStats.lv_bestSave[auto33109B00_var] == true)) {
                if ((lv_sttemp > 9) && (lv_sttemp < 100)) {
                    lv_glowxoffset = 85;
                }
                else {
                    if ((lv_sttemp == 100)) {
                        lv_glowxoffset = 80;
                    }
                    else {
                        lv_glowxoffset = 93;
                    }
                    lv_glowxoffset = 93;
                }
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 110, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
            }

            TextExpressionSetToken("Param/Expression/774B7022", "A", IntToText(lv_sttemp));
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 100, 30, c_anchorTop, (lv_xstart - 50), (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/774B7022"), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_uIPeriodStats.lv_bestSave[auto33109B00_var] == true)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
            }
            if ((gv_rEDLINE_MODE == true)) {
                TextExpressionSetToken("Param/Expression/C1A69BDE", "A", PlayerName(auto33109B00_var));
                TextExpressionSetToken("Param/Expression/2CC92988", "A", IntToText(gv_redlineMode.lv_saves[auto33109B00_var]));
                TextExpressionSetToken("Param/Expression/2CC92988", "B", IntToText(lv_rLTotalGoal));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/C1A69BDE") + TextExpressionAssemble("Param/Expression/2CC92988")), PlayerGroupAll());
            }
            else {
                TextExpressionSetToken("Param/Expression/9A0A0A6E", "A", PlayerName(auto33109B00_var));
                TextExpressionSetToken("Param/Expression/624B6641", "A", IntToText(gv_inGameStatsGoalieBlock[auto33109B00_var]));
                TextExpressionSetToken("Param/Expression/624B6641", "B", IntToText(gv_inGameStatsGoalieAllow[auto33109B00_var]));
                TextExpressionSetToken("Param/Expression/624B6641", "C", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gf_Returntimeinnet(auto33109B00_var)));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/9A0A0A6E") + TextExpressionAssemble("Param/Expression/624B6641")), PlayerGroupAll());
            }
            if ((lv_sttemp >= 90) && (gv_inGameStatsGoalieBlock[auto33109B00_var] >= 3)) {
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 20, 20, c_anchorTop, (lv_xstart - 115), (lv_yoffset - lv_stattextverticaloffset), StringToText(""), "fireicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }

        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 100, 30, c_anchorTop, (lv_xstart - 50), (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/BBE7ECAE"), ColorWithAlpha(0,0,0,0), false, 2.0);
            TextExpressionSetToken("Param/Expression/E7399C52", "A", PlayerName(auto33109B00_var));
            TextExpressionSetToken("Param/Expression/27601A3D", "A", IntToText(gv_inGameStatsGoalieBlock[auto33109B00_var]));
            TextExpressionSetToken("Param/Expression/27601A3D", "B", IntToText(gv_inGameStatsGoalieAllow[auto33109B00_var]));
            TextExpressionSetToken("Param/Expression/27601A3D", "C", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gf_Returntimeinnet(auto33109B00_var)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/E7399C52") + TextExpressionAssemble("Param/Expression/27601A3D")), PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPosessionTime[auto33109B00_var] == true)) {
            lv_glowxoffset = 77;
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        lv_sttemp = 0;
        lv_sttemp2 = gv_inGameStatsPossesionTime[auto33109B00_var];
        while ((lv_sttemp2 >= 60)) {
            lv_sttemp += 1;
            lv_sttemp2 -= 60;
        }
        if ((lv_sttemp2 > 9)) {
            if (((lv_sttemp + lv_sttemp2) == 0)) {
                TextExpressionSetToken("Param/Expression/F3CED96E", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/F3CED96E", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/F3CED96E"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/1AB00747", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/1AB00747", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/1AB00747"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
        }
        else {
            if (((lv_sttemp + lv_sttemp2) == 0)) {
                TextExpressionSetToken("Param/Expression/A520FF9E", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/A520FF9E", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/A520FF9E"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/0566F1C5", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/0566F1C5", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/0566F1C5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
        }
        if ((gv_uIPeriodStats.lv_bestPosessionTime[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        lv_sttemp = gf_GetTotalPlayerPoints(auto33109B00_var);
        if ((gv_uIPeriodStats.lv_bestTotalPoints[auto33109B00_var] == true)) {
            if ((lv_sttemp > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestTotalPoints[auto33109B00_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart = -670;
        lv_yoffset += 45;
        lv_rowcount += 1;
        if ((lv_rowcount == 3)) {
            lv_rowcount = 1;
        }

    }
    lv_rowcount = 1;
    auto0C117BA3_g = gv_actualPlayerzonTeam[2];
    auto0C117BA3_var = -1;
    while (true) {
        auto0C117BA3_var = PlayerGroupNextPlayer(auto0C117BA3_g, auto0C117BA3_var);
        if (auto0C117BA3_var < 0) { break; }
        libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 45, c_anchorTop, 0, (lv_yoffset - 45), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 440, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 0.00, 100.00), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 70.0);
        libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 2, c_anchorTop, 0, lv_yoffset, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 95.0);
        if ((lv_rowcount == 2)) {
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 3000, 45, c_anchorTop, 0, (lv_yoffset - 45), StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 460, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 65.0);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 230, 50, c_anchorTop, lv_xstart, (lv_yoffset - 45), PlayerName(auto0C117BA3_var), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_eloChange[auto0C117BA3_var] == 0.0)) {
            TextExpressionSetToken("Param/Expression/EE9E70F9", "A", FixedToText(gv_eloOLD[auto0C117BA3_var], 0));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/EE9E70F9") + TextExpressionAssemble("Param/Expression/C0EF8780")), PlayerGroupAll());
        }
        else {
            if ((gv_eloChange[auto0C117BA3_var] > 0.0)) {
                TextExpressionSetToken("Param/Expression/E456BC88", "A", FixedToText(gv_eloOLD[auto0C117BA3_var], 0));
                TextExpressionSetToken("Param/Expression/E456BC88", "B", FixedToText(gv_eloChange[auto0C117BA3_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/E456BC88") + TextExpressionAssemble("Param/Expression/877DE5C3")), PlayerGroupAll());
            }
            else {
                TextExpressionSetToken("Param/Expression/D77E6982", "A", FixedToText(gv_eloOLD[auto0C117BA3_var], 0));
                TextExpressionSetToken("Param/Expression/D77E6982", "B", FixedToText(gv_eloChange[auto0C117BA3_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/D77E6982") + TextExpressionAssemble("Param/Expression/6F1FF7D1")), PlayerGroupAll());
            }
        }
        if ((gv_grayName[auto0C117BA3_var] == false)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 51.76, 100.00), PlayerGroupAll());
        }
        else {
            if ((gv_playerforfeit2[auto0C117BA3_var] == false)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
            }
            else {
                gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
                if ((gv_eloDifference1 > 1600.0)) {
                    gv_eloDifference1 = 1600.0;
                }

                gv_eloChange[auto0C117BA3_var] = (-(((1000.0 / gv_team1ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*0.333));
                TextExpressionSetToken("Param/Expression/D0B1F4B8", "A", FixedToText(gv_eloOLD[auto0C117BA3_var], 0));
                TextExpressionSetToken("Param/Expression/D0B1F4B8", "B", FixedToText(gv_eloChange[auto0C117BA3_var], 0));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/D0B1F4B8") + TextExpressionAssemble("Param/Expression/02E56183")), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(50.20, 50.20, 50.20), PlayerGroupAll());
            }
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        if ((lv_mVPStatus[auto0C117BA3_var] == true)) {
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, (lv_xstart - 30), (lv_yoffset - 45));
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 20, 20, c_anchorTop, (lv_xstart + 102), (lv_yoffset - 32), StringToText(""), "crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }

        lv_xstart += 315;
        lv_sttemp = (gv_inGameStatsSteals[auto0C117BA3_var] - gv_inGameStatsTurnovers[auto0C117BA3_var]);
        if ((gv_uIPeriodStats.lv_bestST[auto0C117BA3_var] == true)) {
            if ((lv_sttemp > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        if ((lv_sttemp == 0)) {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), lv_graytext, false, 2.0);
        }
        else {
            if ((lv_sttemp > 0)) {
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), Color(35.29, 76.86, 7.06), false, 2.0);
            }
            else {
                if ((lv_sttemp < 0)) {
                    libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), Color(100.00, 0.00, 0.00), false, 2.0);
                }

            }
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestGoals[auto0C117BA3_var] == true)) {
            if ((gv_inGameStatsGoals[auto0C117BA3_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsGoals[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestGoals[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_rEDLINE_MODE == true)) {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_redlineMode.lv_shotsonGoal[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            if ((gv_uIPeriodStats.lv_bestAssists[auto0C117BA3_var] == true)) {
                if ((gv_inGameStatsAssists[auto0C117BA3_var] > 9)) {
                    lv_glowxoffset = 85;
                }
                else {
                    lv_glowxoffset = 93;
                }
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
            }

            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsAssists[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_uIPeriodStats.lv_bestAssists[auto0C117BA3_var] == true)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
            }
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPickups[auto0C117BA3_var] == true)) {
            if ((gv_inGameStatsBlocks[auto0C117BA3_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, (lv_xstart), (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsBlocks[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPickups[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPasses[auto0C117BA3_var] == true)) {
            if ((gv_inGameStatsPasses[auto0C117BA3_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsPasses[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPasses[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPassesRevd[auto0C117BA3_var] == true)) {
            if ((gv_inGameStatsPassedTo[auto0C117BA3_var] > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(gv_inGameStatsPassedTo[auto0C117BA3_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestPassesRevd[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        lv_sttemp = (gv_inGameStatsGoalieBlock[auto0C117BA3_var]+gv_inGameStatsGoalieAllow[auto0C117BA3_var]);
        if ((lv_sttemp != 0)) {
            lv_sttemp = RoundI(((gv_inGameStatsGoalieBlock[auto0C117BA3_var] * 100.0) / (gv_inGameStatsGoalieBlock[auto0C117BA3_var] + gv_inGameStatsGoalieAllow[auto0C117BA3_var])));
            if ((gv_uIPeriodStats.lv_bestSave[auto0C117BA3_var] == true)) {
                if ((lv_sttemp > 9) && (lv_sttemp < 100)) {
                    lv_glowxoffset = 85;
                }
                else {
                    if ((lv_sttemp == 100)) {
                        lv_glowxoffset = 80;
                    }
                    else {
                        lv_glowxoffset = 93;
                    }
                    lv_glowxoffset = 93;
                }
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 110, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
            }

            TextExpressionSetToken("Param/Expression/1D564E5F", "A", IntToText(lv_sttemp));
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 100, 30, c_anchorTop, (lv_xstart - 50), (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/1D564E5F"), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_uIPeriodStats.lv_bestSave[auto0C117BA3_var] == true)) {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
            }
            TextExpressionSetToken("Param/Expression/FA04F2DD", "A", PlayerName(auto0C117BA3_var));
            TextExpressionSetToken("Param/Expression/9DEFFB99", "A", IntToText(gv_inGameStatsGoalieBlock[auto0C117BA3_var]));
            TextExpressionSetToken("Param/Expression/9DEFFB99", "B", IntToText(gv_inGameStatsGoalieAllow[auto0C117BA3_var]));
            TextExpressionSetToken("Param/Expression/9DEFFB99", "C", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gf_Returntimeinnet(auto0C117BA3_var)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/FA04F2DD") + TextExpressionAssemble("Param/Expression/9DEFFB99")), PlayerGroupAll());
            if ((lv_sttemp >= 90) && (gv_inGameStatsGoalieBlock[auto0C117BA3_var] >= 3)) {
                libNtve_gf_CreateDialogItemImage(lv_statDialog, 20, 20, c_anchorTop, (lv_xstart - 115), (lv_yoffset - lv_stattextverticaloffset), StringToText(""), "fireicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }

        }
        else {
            libNtve_gf_CreateDialogItemLabel(lv_statDialog, 100, 30, c_anchorTop, (lv_xstart - 50), (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/4A9183C4"), ColorWithAlpha(0,0,0,0), false, 2.0);
            TextExpressionSetToken("Param/Expression/608E29A8", "A", PlayerName(auto0C117BA3_var));
            TextExpressionSetToken("Param/Expression/E0D73BE9", "A", IntToText(gv_inGameStatsGoalieBlock[auto0C117BA3_var]));
            TextExpressionSetToken("Param/Expression/E0D73BE9", "B", IntToText(gv_inGameStatsGoalieAllow[auto0C117BA3_var]));
            TextExpressionSetToken("Param/Expression/E0D73BE9", "C", TextTimeFormat(StringToText("<min2/>:<sec2/>"), gf_Returntimeinnet(auto0C117BA3_var)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextExpressionAssemble("Param/Expression/608E29A8") + TextExpressionAssemble("Param/Expression/E0D73BE9")), PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        if ((gv_uIPeriodStats.lv_bestPosessionTime[auto0C117BA3_var] == true)) {
            lv_glowxoffset = 77;
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        lv_sttemp = 0;
        lv_sttemp2 = gv_inGameStatsPossesionTime[auto0C117BA3_var];
        while ((lv_sttemp2 >= 60)) {
            lv_sttemp += 1;
            lv_sttemp2 -= 60;
        }
        if ((lv_sttemp2 > 9)) {
            if (((lv_sttemp + lv_sttemp2) == 0)) {
                TextExpressionSetToken("Param/Expression/F34DBC55", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/F34DBC55", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/F34DBC55"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/AD6D9B76", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/AD6D9B76", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/AD6D9B76"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
        }
        else {
            if (((lv_sttemp + lv_sttemp2) == 0)) {
                TextExpressionSetToken("Param/Expression/8717D0AF", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/8717D0AF", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/8717D0AF"), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/07B64E00", "A", IntToText(lv_sttemp));
                TextExpressionSetToken("Param/Expression/07B64E00", "B", IntToText(lv_sttemp2));
                libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), TextExpressionAssemble("Param/Expression/07B64E00"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
        }
        if ((gv_uIPeriodStats.lv_bestPosessionTime[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart += lv_xoffset;
        lv_sttemp = gf_GetTotalPlayerPoints(auto0C117BA3_var);
        if ((gv_uIPeriodStats.lv_bestTotalPoints[auto0C117BA3_var] == true)) {
            if ((lv_sttemp > 9)) {
                lv_glowxoffset = 85;
            }
            else {
                lv_glowxoffset = 93;
            }
            libNtve_gf_CreateDialogItemImage(lv_statDialog, 70, 70, c_anchorTop, (lv_xstart - lv_glowxoffset), (lv_yoffset - 58), StringToText(""), "Assets\\Textures\\genericglow64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_glowytransparency);
        }

        libNtve_gf_CreateDialogItemLabel(lv_statDialog, 200, 50, c_anchorTop, lv_xstart, (lv_yoffset - lv_stattextverticaloffset), IntToText(lv_sttemp), ColorWithAlpha(0,0,0,0), false, 2.0);
        if ((gv_uIPeriodStats.lv_bestTotalPoints[auto0C117BA3_var] == true)) {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_graytext, PlayerGroupAll());
        }
        lv_xstart = -670;
        lv_yoffset += 45;
        lv_rowcount += 1;
        if ((lv_rowcount == 3)) {
            lv_rowcount = 1;
        }

    }
    if ((lp_intermission == true)) {
        gv_uIPeriodStats.lv_timesshownAKAperiod += 1;
    }

    return true;
}

void gf_CalculateBestScores () {
    // Variable Declarations
    int lv_tempint1;
    int lv_tempint2;

    // Automatic Variable Declarations
    playergroup auto52B41E94_g;
    int auto52B41E94_var;
    const int auto61F6A4EC_ae = 15;
    int auto61F6A4EC_var;
    playergroup auto7ECAED8D_g;
    int auto7ECAED8D_var;
    const int auto7DB6AA71_ae = 15;
    int auto7DB6AA71_var;
    playergroup auto9AC0C00A_g;
    int auto9AC0C00A_var;
    const int autoBBA66174_ae = 15;
    int autoBBA66174_var;
    playergroup auto829D9B6E_g;
    int auto829D9B6E_var;
    const int auto131BDEB2_ae = 15;
    int auto131BDEB2_var;
    playergroup auto8C06E4AB_g;
    int auto8C06E4AB_var;
    const int autoD5CF9581_ae = 15;
    int autoD5CF9581_var;
    playergroup auto2AB95179_g;
    int auto2AB95179_var;
    const int auto44C1DC53_ae = 15;
    int auto44C1DC53_var;
    playergroup autoAB361242_g;
    int autoAB361242_var;
    const int auto2F392DE7_ae = 15;
    int auto2F392DE7_var;
    playergroup auto703B83F5_g;
    int auto703B83F5_var;
    const int auto15B99F17_ae = 15;
    int auto15B99F17_var;
    playergroup autoB9672785_g;
    int autoB9672785_var;
    const int auto97C2EE84_ae = 15;
    int auto97C2EE84_var;

    // Variable Initialization

    // Implementation
    auto52B41E94_g = PlayerGroupActive();
    auto52B41E94_var = -1;
    while (true) {
        auto52B41E94_var = PlayerGroupNextPlayer(auto52B41E94_g, auto52B41E94_var);
        if (auto52B41E94_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto52B41E94_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto52B41E94_var) == true))) {
            gv_uIPeriodStats.lv_bestST[auto52B41E94_var] = true;
            lv_tempint1 = (gv_inGameStatsSteals[auto52B41E94_var] - gv_inGameStatsTurnovers[auto52B41E94_var]);
            auto61F6A4EC_var = 1;
            for ( ; auto61F6A4EC_var <= auto61F6A4EC_ae; auto61F6A4EC_var += 1 ) {
                lv_tempint2 = (gv_inGameStatsSteals[auto61F6A4EC_var] - gv_inGameStatsTurnovers[auto61F6A4EC_var]);
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestST[auto52B41E94_var] = false;
                    break;
                }

            }
        }

    }
    auto7ECAED8D_g = PlayerGroupActive();
    auto7ECAED8D_var = -1;
    while (true) {
        auto7ECAED8D_var = PlayerGroupNextPlayer(auto7ECAED8D_g, auto7ECAED8D_var);
        if (auto7ECAED8D_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto7ECAED8D_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto7ECAED8D_var) == true))) {
            gv_uIPeriodStats.lv_bestGoals[auto7ECAED8D_var] = true;
            lv_tempint1 = gv_inGameStatsGoals[auto7ECAED8D_var];
            auto7DB6AA71_var = 1;
            for ( ; auto7DB6AA71_var <= auto7DB6AA71_ae; auto7DB6AA71_var += 1 ) {
                lv_tempint2 = gv_inGameStatsGoals[auto7DB6AA71_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestGoals[auto7ECAED8D_var] = false;
                    break;
                }

            }
        }

    }
    auto9AC0C00A_g = PlayerGroupActive();
    auto9AC0C00A_var = -1;
    while (true) {
        auto9AC0C00A_var = PlayerGroupNextPlayer(auto9AC0C00A_g, auto9AC0C00A_var);
        if (auto9AC0C00A_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto9AC0C00A_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto9AC0C00A_var) == true))) {
            gv_uIPeriodStats.lv_bestAssists[auto9AC0C00A_var] = true;
            lv_tempint1 = gv_inGameStatsAssists[auto9AC0C00A_var];
            autoBBA66174_var = 1;
            for ( ; autoBBA66174_var <= autoBBA66174_ae; autoBBA66174_var += 1 ) {
                lv_tempint2 = gv_inGameStatsAssists[autoBBA66174_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestAssists[auto9AC0C00A_var] = false;
                    break;
                }

            }
        }

    }
    auto829D9B6E_g = PlayerGroupActive();
    auto829D9B6E_var = -1;
    while (true) {
        auto829D9B6E_var = PlayerGroupNextPlayer(auto829D9B6E_g, auto829D9B6E_var);
        if (auto829D9B6E_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto829D9B6E_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto829D9B6E_var) == true))) {
            gv_uIPeriodStats.lv_bestPickups[auto829D9B6E_var] = true;
            lv_tempint1 = gv_inGameStatsBlocks[auto829D9B6E_var];
            auto131BDEB2_var = 1;
            for ( ; auto131BDEB2_var <= auto131BDEB2_ae; auto131BDEB2_var += 1 ) {
                lv_tempint2 = gv_inGameStatsBlocks[auto131BDEB2_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestPickups[auto829D9B6E_var] = false;
                    break;
                }

            }
        }

    }
    auto8C06E4AB_g = PlayerGroupActive();
    auto8C06E4AB_var = -1;
    while (true) {
        auto8C06E4AB_var = PlayerGroupNextPlayer(auto8C06E4AB_g, auto8C06E4AB_var);
        if (auto8C06E4AB_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto8C06E4AB_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto8C06E4AB_var) == true))) {
            gv_uIPeriodStats.lv_bestPasses[auto8C06E4AB_var] = true;
            lv_tempint1 = gv_inGameStatsPasses[auto8C06E4AB_var];
            autoD5CF9581_var = 1;
            for ( ; autoD5CF9581_var <= autoD5CF9581_ae; autoD5CF9581_var += 1 ) {
                lv_tempint2 = gv_inGameStatsPasses[autoD5CF9581_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestPasses[auto8C06E4AB_var] = false;
                    break;
                }

            }
        }

    }
    auto2AB95179_g = PlayerGroupActive();
    auto2AB95179_var = -1;
    while (true) {
        auto2AB95179_var = PlayerGroupNextPlayer(auto2AB95179_g, auto2AB95179_var);
        if (auto2AB95179_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto2AB95179_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto2AB95179_var) == true))) {
            gv_uIPeriodStats.lv_bestPassesRevd[auto2AB95179_var] = true;
            lv_tempint1 = gv_inGameStatsPassedTo[auto2AB95179_var];
            auto44C1DC53_var = 1;
            for ( ; auto44C1DC53_var <= auto44C1DC53_ae; auto44C1DC53_var += 1 ) {
                lv_tempint2 = gv_inGameStatsPassedTo[auto44C1DC53_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestPassesRevd[auto2AB95179_var] = false;
                    break;
                }

            }
        }

    }
    autoAB361242_g = PlayerGroupActive();
    autoAB361242_var = -1;
    while (true) {
        autoAB361242_var = PlayerGroupNextPlayer(autoAB361242_g, autoAB361242_var);
        if (autoAB361242_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoAB361242_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], autoAB361242_var) == true))) {
            lv_tempint1 = (gv_inGameStatsGoalieBlock[autoAB361242_var]+gv_inGameStatsGoalieAllow[autoAB361242_var]);
            if ((lv_tempint1 != 0)) {
                gv_uIPeriodStats.lv_bestSave[autoAB361242_var] = true;
                lv_tempint1 = ((gv_inGameStatsGoalieBlock[autoAB361242_var]*100)/(gv_inGameStatsGoalieBlock[autoAB361242_var]+gv_inGameStatsGoalieAllow[autoAB361242_var]));
                auto2F392DE7_var = 1;
                for ( ; auto2F392DE7_var <= auto2F392DE7_ae; auto2F392DE7_var += 1 ) {
                    lv_tempint2 = (gv_inGameStatsGoalieBlock[auto2F392DE7_var]+gv_inGameStatsGoalieAllow[auto2F392DE7_var]);
                    if ((lv_tempint2 != 0)) {
                        lv_tempint2 = ((gv_inGameStatsGoalieBlock[auto2F392DE7_var]*100)/(gv_inGameStatsGoalieBlock[auto2F392DE7_var]+gv_inGameStatsGoalieAllow[auto2F392DE7_var]));
                    }

                    if ((lv_tempint2 > lv_tempint1)) {
                        gv_uIPeriodStats.lv_bestSave[autoAB361242_var] = false;
                        break;
                    }

                }
            }
            else {
                gv_uIPeriodStats.lv_bestPosessionTime[autoAB361242_var] = false;
            }
        }

    }
    auto703B83F5_g = PlayerGroupActive();
    auto703B83F5_var = -1;
    while (true) {
        auto703B83F5_var = PlayerGroupNextPlayer(auto703B83F5_g, auto703B83F5_var);
        if (auto703B83F5_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto703B83F5_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto703B83F5_var) == true))) {
            gv_uIPeriodStats.lv_bestPosessionTime[auto703B83F5_var] = true;
            lv_tempint1 = gv_inGameStatsPossesionTime[auto703B83F5_var];
            auto15B99F17_var = 1;
            for ( ; auto15B99F17_var <= auto15B99F17_ae; auto15B99F17_var += 1 ) {
                lv_tempint2 = gv_inGameStatsPossesionTime[auto15B99F17_var];
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestPosessionTime[auto703B83F5_var] = false;
                    break;
                }

            }
        }

    }
    autoB9672785_g = PlayerGroupActive();
    autoB9672785_var = -1;
    while (true) {
        autoB9672785_var = PlayerGroupNextPlayer(autoB9672785_g, autoB9672785_var);
        if (autoB9672785_var < 0) { break; }
        if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoB9672785_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], autoB9672785_var) == true))) {
            gv_uIPeriodStats.lv_bestTotalPoints[autoB9672785_var] = true;
            lv_tempint1 = gf_GetTotalPlayerPoints(autoB9672785_var);
            auto97C2EE84_var = 1;
            for ( ; auto97C2EE84_var <= auto97C2EE84_ae; auto97C2EE84_var += 1 ) {
                lv_tempint2 = gf_GetTotalPlayerPoints(auto97C2EE84_var);
                if (((lv_tempint2 > lv_tempint1) || (lv_tempint1 <= 0))) {
                    gv_uIPeriodStats.lv_bestTotalPoints[autoB9672785_var] = false;
                    break;
                }

            }
        }

    }
}

void gf_ClearBestScores () {
    // Automatic Variable Declarations
    const int auto75B131BC_ae = 15;
    int auto75B131BC_var;

    // Implementation
    auto75B131BC_var = 1;
    for ( ; auto75B131BC_var <= auto75B131BC_ae; auto75B131BC_var += 1 ) {
        gv_uIPeriodStats.lv_bestAssists[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestGoals[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestPasses[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestPassesRevd[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestPickups[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestPosessionTime[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestST[auto75B131BC_var] = false;
        gv_uIPeriodStats.lv_bestTotalPoints[auto75B131BC_var] = false;
    }
}

trigger auto_gf_SpinDialogItem2_Trigger = null;
int auto_gf_SpinDialogItem2_lp_dialogitem;
int auto_gf_SpinDialogItem2_lp_angle;
fixed auto_gf_SpinDialogItem2_lp_duration;

void gf_SpinDialogItem2 (int lp_dialogitem, int lp_angle, fixed lp_duration) {
    auto_gf_SpinDialogItem2_lp_dialogitem = lp_dialogitem;
    auto_gf_SpinDialogItem2_lp_angle = lp_angle;
    auto_gf_SpinDialogItem2_lp_duration = lp_duration;

    if (auto_gf_SpinDialogItem2_Trigger == null) {
        auto_gf_SpinDialogItem2_Trigger = TriggerCreate("auto_gf_SpinDialogItem2_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinDialogItem2_Trigger, false, false);
}

bool auto_gf_SpinDialogItem2_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_SpinDialogItem2_lp_dialogitem;
    int lp_angle = auto_gf_SpinDialogItem2_lp_angle;
    fixed lp_duration = auto_gf_SpinDialogItem2_lp_duration;

    // Variable Declarations
    int lv_angle;
    fixed lv_elapsed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_elapsed < lp_duration)) {
        libNtve_gf_SetDialogItemRotation(lp_dialogitem, lv_angle, PlayerGroupAll());
        lv_angle += lp_angle;
        lv_elapsed += 0.0625;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_SpinDialogItem3_Trigger = null;
int auto_gf_SpinDialogItem3_lp_dialogitem;
int auto_gf_SpinDialogItem3_lp_yoffset;
fixed auto_gf_SpinDialogItem3_lp_duration;

void gf_SpinDialogItem3 (int lp_dialogitem, int lp_yoffset, fixed lp_duration) {
    auto_gf_SpinDialogItem3_lp_dialogitem = lp_dialogitem;
    auto_gf_SpinDialogItem3_lp_yoffset = lp_yoffset;
    auto_gf_SpinDialogItem3_lp_duration = lp_duration;

    if (auto_gf_SpinDialogItem3_Trigger == null) {
        auto_gf_SpinDialogItem3_Trigger = TriggerCreate("auto_gf_SpinDialogItem3_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpinDialogItem3_Trigger, false, false);
}

bool auto_gf_SpinDialogItem3_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialogitem = auto_gf_SpinDialogItem3_lp_dialogitem;
    int lp_yoffset = auto_gf_SpinDialogItem3_lp_yoffset;
    fixed lp_duration = auto_gf_SpinDialogItem3_lp_duration;

    // Variable Declarations
    int lv_currenty;
    int lv_currentx;
    fixed lv_elapsed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currenty = DialogControlGetOffsetY(lp_dialogitem, 1);
    lv_currentx = DialogControlGetOffsetX(lp_dialogitem, 1);

    // Implementation
    while ((lv_elapsed < lp_duration) && (lp_dialogitem != c_invalidDialogControlId)) {
        DialogControlSetPosition(lp_dialogitem, PlayerGroupAll(), c_anchorCenter, lv_currentx, lv_currenty);
        lv_elapsed += 1.0;
        lv_currenty += lp_yoffset;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

int gf_GetTotalPlayerPoints (int lp_player) {
    // Variable Declarations
    int lv_points;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_points = (gv_inGameStatsSteals[lp_player]-gv_inGameStatsTurnovers[lp_player]+(gv_inGameStatsGoals[lp_player]*10)+(gv_inGameStatsAssists[lp_player]*7)+gv_inGameStatsBlocks[lp_player]+(gv_inGameStatsPasses[lp_player]*2)+(gv_inGameStatsGoalieBlock[lp_player]*3));
    if ((lv_points < 0)) {
        lv_points = 0;
    }

    return lv_points;
}

trigger auto_gf_GenerateHeatmap_Trigger = null;

void gf_GenerateHeatmap () {
    if (auto_gf_GenerateHeatmap_Trigger == null) {
        auto_gf_GenerateHeatmap_Trigger = TriggerCreate("auto_gf_GenerateHeatmap_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenerateHeatmap_Trigger, false, false);
}

bool auto_gf_GenerateHeatmap_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    int auto8E88266A_ae;
    const int auto8E88266A_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1000, 468, c_anchorCenter, 0, 80, true);
    gv_heatmapVars.lv_heatmapDialogContainer = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 468, c_anchorTop, 0, 0, StringToText(""), "heatmapbg-final.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 70.0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    auto8E88266A_ae = gv_heatmapVars.lv_totalShots;
    lv_enumint = 1;
    for ( ; ( (auto8E88266A_ai >= 0 && lv_enumint <= auto8E88266A_ae) || (auto8E88266A_ai < 0 && lv_enumint >= auto8E88266A_ae) ) ; lv_enumint += auto8E88266A_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_heatmapVars.lv_heatmapDialogContainer, 24, 24, c_anchorBottomLeft, FixedToInt((((PointGetX(gv_heatmapVars.lv_shotPoint[lv_enumint])-57.67)*1000)/140.7)), FixedToInt((((PointGetY(gv_heatmapVars.lv_shotPoint[lv_enumint])-78.3)*467.87)/65.83)), StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), (FixedToInt(gv_heatmapVars.lv_shotAngle[lv_enumint]) * -1), PlayerGroupAll());
        if ((gv_heatmapVars.lv_shotTeam[lv_enumint] == 1) && (gv_heatmapVars.lv_shotScored[lv_enumint] == false)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "team1shot.dds", PlayerGroupAll());
            gv_heatmapVars.lv_plotsTeam1Shots[lv_enumint] = DialogControlLastCreated();
            gv_heatmapVars.lv_plotsNotGoals[lv_enumint] = DialogControlLastCreated();
        }
        else {
            if ((gv_heatmapVars.lv_shotTeam[lv_enumint] == 1) && (gv_heatmapVars.lv_shotScored[lv_enumint] == true)) {
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "team1shot-goal.dds", PlayerGroupAll());
                gv_heatmapVars.lv_plotsTeam1Shots[lv_enumint] = DialogControlLastCreated();
                gv_heatmapVars.lv_plotsGoals[lv_enumint] = DialogControlLastCreated();
            }
            else {
                if ((gv_heatmapVars.lv_shotTeam[lv_enumint] == 2) && (gv_heatmapVars.lv_shotScored[lv_enumint] == false)) {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "team2shot.dds", PlayerGroupAll());
                    gv_heatmapVars.lv_plotsTeam2Shots[lv_enumint] = DialogControlLastCreated();
                    gv_heatmapVars.lv_plotsNotGoals[lv_enumint] = DialogControlLastCreated();
                }
                else {
                    if ((gv_heatmapVars.lv_shotTeam[lv_enumint] == 2) && (gv_heatmapVars.lv_shotScored[lv_enumint] == true)) {
                        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "team2shot-goal.dds", PlayerGroupAll());
                        gv_heatmapVars.lv_plotsTeam2Shots[lv_enumint] = DialogControlLastCreated();
                        gv_heatmapVars.lv_plotsGoals[lv_enumint] = DialogControlLastCreated();
                    }

                }
            }
        }
        TextExpressionSetToken("Param/Expression/8B53DCEC", "A", PlayerName(gv_heatmapVars.lv_shotPlayer[lv_enumint]));
        TextExpressionSetToken("Param/Expression/8B53DCEC", "B", IntToText(gv_heatmapVars.lv_shotPeriod[lv_enumint]));
        TextExpressionSetToken("Param/Expression/8B53DCEC", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_heatmapVars.lv_shotTime[lv_enumint])));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/8B53DCEC"), PlayerGroupAll());
        if ((gv_heatmapVars.lv_shotOneTimer[lv_enumint] == true) && (gv_heatmapVars.lv_shotScored[lv_enumint] == false)) {
            TextExpressionSetToken("Param/Expression/38439E3C", "A", PlayerName(gv_heatmapVars.lv_shotPlayer[lv_enumint]));
            TextExpressionSetToken("Param/Expression/38439E3C", "B", IntToText(gv_heatmapVars.lv_shotPeriod[lv_enumint]));
            TextExpressionSetToken("Param/Expression/38439E3C", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_heatmapVars.lv_shotTime[lv_enumint])));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/38439E3C"), PlayerGroupAll());
        }
        else {
            if ((gv_heatmapVars.lv_shotOneTimer[lv_enumint] == false) && (gv_heatmapVars.lv_shotScored[lv_enumint] == true)) {
                TextExpressionSetToken("Param/Expression/05BD5A69", "A", PlayerName(gv_heatmapVars.lv_shotPlayer[lv_enumint]));
                TextExpressionSetToken("Param/Expression/05BD5A69", "B", IntToText(gv_heatmapVars.lv_shotPeriod[lv_enumint]));
                TextExpressionSetToken("Param/Expression/05BD5A69", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_heatmapVars.lv_shotTime[lv_enumint])));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/05BD5A69"), PlayerGroupAll());
            }
            else {
                if ((gv_heatmapVars.lv_shotOneTimer[lv_enumint] == true) && (gv_heatmapVars.lv_shotScored[lv_enumint] == true)) {
                    TextExpressionSetToken("Param/Expression/65391DCC", "A", PlayerName(gv_heatmapVars.lv_shotPlayer[lv_enumint]));
                    TextExpressionSetToken("Param/Expression/65391DCC", "B", IntToText(gv_heatmapVars.lv_shotPeriod[lv_enumint]));
                    TextExpressionSetToken("Param/Expression/65391DCC", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(gv_heatmapVars.lv_shotTime[lv_enumint])));
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/65391DCC"), PlayerGroupAll());
                }

            }
        }
        if ((gv_heatmapVars.lv_shotPeriod[lv_enumint] == 1)) {
            gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint] = DialogControlLastCreated();
        }
        else {
            if ((gv_heatmapVars.lv_shotPeriod[lv_enumint] == 2)) {
                gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint] = DialogControlLastCreated();
            }
            else {
                if ((gv_heatmapVars.lv_shotPeriod[lv_enumint] == 3)) {
                    gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint] = DialogControlLastCreated();
                }
                else {
                    if ((gv_heatmapVars.lv_shotPeriod[lv_enumint] == 4)) {
                        gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint] = DialogControlLastCreated();
                    }

                }
            }
        }
    }
    return true;
}

trigger auto_gf_FilterPlots_Trigger = null;
int auto_gf_FilterPlots_lp_player;
int auto_gf_FilterPlots_lp_team1red2blue3both;
int auto_gf_FilterPlots_lp_period;
bool auto_gf_FilterPlots_lp_onlyGoals;

void gf_FilterPlots (int lp_player, int lp_team1red2blue3both, int lp_period, bool lp_onlyGoals) {
    auto_gf_FilterPlots_lp_player = lp_player;
    auto_gf_FilterPlots_lp_team1red2blue3both = lp_team1red2blue3both;
    auto_gf_FilterPlots_lp_period = lp_period;
    auto_gf_FilterPlots_lp_onlyGoals = lp_onlyGoals;

    if (auto_gf_FilterPlots_Trigger == null) {
        auto_gf_FilterPlots_Trigger = TriggerCreate("auto_gf_FilterPlots_TriggerFunc");
    }

    TriggerExecute(auto_gf_FilterPlots_Trigger, false, false);
}

bool auto_gf_FilterPlots_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_FilterPlots_lp_player;
    int lp_team1red2blue3both = auto_gf_FilterPlots_lp_team1red2blue3both;
    int lp_period = auto_gf_FilterPlots_lp_period;
    bool lp_onlyGoals = auto_gf_FilterPlots_lp_onlyGoals;

    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    int autoC9756858_ae;
    const int autoC9756858_ai = 1;
    int autoB6B310C7_ae;
    const int autoB6B310C7_ai = 1;
    int autoFB1619BF_ae;
    const int autoFB1619BF_ai = 1;
    int autoFC385533_ae;
    const int autoFC385533_ai = 1;
    int auto41DDDB69_ae;
    const int auto41DDDB69_ai = 1;
    int autoF2D96556_ae;
    const int autoF2D96556_ai = 1;
    int auto4FFE349B_ae;
    const int auto4FFE349B_ai = 1;
    int autoD84B1CDE_ae;
    const int autoD84B1CDE_ai = 1;

    // Variable Initialization

    // Implementation
    autoC9756858_ae = gv_heatmapVars.lv_totalShots;
    lv_enumint = 1;
    for ( ; ( (autoC9756858_ai >= 0 && lv_enumint <= autoC9756858_ae) || (autoC9756858_ai < 0 && lv_enumint >= autoC9756858_ae) ) ; lv_enumint += autoC9756858_ai ) {
        if ((gv_heatmapVars.lv_plotsNotGoals[lv_enumint] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_heatmapVars.lv_plotsNotGoals[lv_enumint], PlayerGroupSingle(lp_player), true);
        }

        if ((gv_heatmapVars.lv_plotsGoals[lv_enumint] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_heatmapVars.lv_plotsGoals[lv_enumint], PlayerGroupSingle(lp_player), true);
        }

    }
    if ((lp_team1red2blue3both == 1)) {
        autoFB1619BF_ae = gv_heatmapVars.lv_totalShots;
        lv_enumint = 1;
        for ( ; ( (autoFB1619BF_ai >= 0 && lv_enumint <= autoFB1619BF_ae) || (autoFB1619BF_ai < 0 && lv_enumint >= autoFB1619BF_ae) ) ; lv_enumint += autoFB1619BF_ai ) {
            if ((gv_heatmapVars.lv_plotsTeam2Shots[lv_enumint] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_heatmapVars.lv_plotsTeam2Shots[lv_enumint], PlayerGroupSingle(lp_player), false);
            }

        }
    }
    else {
        if ((lp_team1red2blue3both == 2)) {
            autoB6B310C7_ae = gv_heatmapVars.lv_totalShots;
            lv_enumint = 1;
            for ( ; ( (autoB6B310C7_ai >= 0 && lv_enumint <= autoB6B310C7_ae) || (autoB6B310C7_ai < 0 && lv_enumint >= autoB6B310C7_ae) ) ; lv_enumint += autoB6B310C7_ai ) {
                if ((gv_heatmapVars.lv_plotsTeam1Shots[lv_enumint] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_heatmapVars.lv_plotsTeam1Shots[lv_enumint], PlayerGroupSingle(lp_player), false);
                }

            }
        }

    }
    if ((lp_period == 1)) {
        auto4FFE349B_ae = gv_heatmapVars.lv_totalShots;
        lv_enumint = 1;
        for ( ; ( (auto4FFE349B_ai >= 0 && lv_enumint <= auto4FFE349B_ae) || (auto4FFE349B_ai < 0 && lv_enumint >= auto4FFE349B_ae) ) ; lv_enumint += auto4FFE349B_ai ) {
            if ((gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
            }

            if ((gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
            }

            if ((gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
            }

        }
    }
    else {
        if ((lp_period == 2)) {
            autoF2D96556_ae = gv_heatmapVars.lv_totalShots;
            lv_enumint = 1;
            for ( ; ( (autoF2D96556_ai >= 0 && lv_enumint <= autoF2D96556_ae) || (autoF2D96556_ai < 0 && lv_enumint >= autoF2D96556_ae) ) ; lv_enumint += autoF2D96556_ai ) {
                if ((gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                }

                if ((gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                }

                if ((gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                }

            }
        }
        else {
            if ((lp_period == 3)) {
                auto41DDDB69_ae = gv_heatmapVars.lv_totalShots;
                lv_enumint = 1;
                for ( ; ( (auto41DDDB69_ai >= 0 && lv_enumint <= auto41DDDB69_ae) || (auto41DDDB69_ai < 0 && lv_enumint >= auto41DDDB69_ae) ) ; lv_enumint += auto41DDDB69_ai ) {
                    if ((gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint] != c_invalidDialogControlId)) {
                        DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                    }

                    if ((gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint] != c_invalidDialogControlId)) {
                        DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                    }

                    if ((gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint] != c_invalidDialogControlId)) {
                        DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod4Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                    }

                }
            }
            else {
                if ((lp_period == 4)) {
                    autoFC385533_ae = gv_heatmapVars.lv_totalShots;
                    lv_enumint = 1;
                    for ( ; ( (autoFC385533_ai >= 0 && lv_enumint <= autoFC385533_ae) || (autoFC385533_ai < 0 && lv_enumint >= autoFC385533_ae) ) ; lv_enumint += autoFC385533_ai ) {
                        if ((gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint] != c_invalidDialogControlId)) {
                            DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod1Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                        }

                        if ((gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint] != c_invalidDialogControlId)) {
                            DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod2Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                        }

                        if ((gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint] != c_invalidDialogControlId)) {
                            DialogControlSetVisible(gv_heatmapVars.lv_plotsPeriod3Plots[lv_enumint], PlayerGroupSingle(lp_player), false);
                        }

                    }
                }

            }
        }
    }
    if ((lp_onlyGoals == true)) {
        autoD84B1CDE_ae = gv_heatmapVars.lv_totalShots;
        lv_enumint = 1;
        for ( ; ( (autoD84B1CDE_ai >= 0 && lv_enumint <= autoD84B1CDE_ae) || (autoD84B1CDE_ai < 0 && lv_enumint >= autoD84B1CDE_ae) ) ; lv_enumint += autoD84B1CDE_ai ) {
            if ((gv_heatmapVars.lv_plotsNotGoals[lv_enumint] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_heatmapVars.lv_plotsNotGoals[lv_enumint], PlayerGroupSingle(lp_player), false);
            }

        }
    }

    return true;
}

trigger auto_gf_VisualStatTimer_Trigger = null;
int auto_gf_VisualStatTimer_lp_timetodisplay;

void gf_VisualStatTimer (int lp_timetodisplay) {
    auto_gf_VisualStatTimer_lp_timetodisplay = lp_timetodisplay;

    if (auto_gf_VisualStatTimer_Trigger == null) {
        auto_gf_VisualStatTimer_Trigger = TriggerCreate("auto_gf_VisualStatTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_VisualStatTimer_Trigger, false, false);
}

bool auto_gf_VisualStatTimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_timetodisplay = auto_gf_VisualStatTimer_lp_timetodisplay;

    // Variable Declarations
    fixed lv_timeElapsed;
    fixed lv_totalTimeDuration;
    int lv_barstartwidth;
    int lv_barincrement;
    int lv_barwidth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barstartwidth = 200;

    // Implementation
    lv_totalTimeDuration = (IntToFixed(lp_timetodisplay) * 16.0);
    lv_totalTimeDuration -= 16.0;
    DialogCreate(204, 4, c_anchorBottomRight, 300, 49, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_uIPeriodStats.lv_visualStatTimer = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 9999);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_visualStatTimer, 200, 4, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
    gv_uIPeriodStats.lv_visualStatTimerBarBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_visualStatTimer, 200, 4, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_visualStatTimerBarValue = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(29.41, 74.90, 99.61), PlayerGroupAll());
    while (((lv_timeElapsed * 16.0) < lv_totalTimeDuration)) {
        lv_barwidth = FixedToInt((((lv_totalTimeDuration - (lv_timeElapsed * 16.0)) / lv_totalTimeDuration) * 200.0));
        if ((lv_barwidth > 200)) {
            lv_barwidth = 200;
        }
        else {
            if ((lv_barwidth < 1)) {
                lv_barwidth = 1;
            }

        }
        DialogControlSetSize(gv_uIPeriodStats.lv_visualStatTimerBarValue, PlayerGroupAll(), lv_barwidth, 4);
        libNtve_gf_SetDialogItemTooltip(gv_uIPeriodStats.lv_visualStatTimerBarBG, IntToText(FixedToInt(((lv_totalTimeDuration - (lv_timeElapsed * 16.0)) / 16.0))), PlayerGroupAll());
        lv_timeElapsed += 0.0625;
        Wait(0.0625, c_timeGame);
    }
    DialogDestroy(gv_uIPeriodStats.lv_visualStatTimer);
    return true;
}

trigger auto_gf_PeriodStatsCasterCam_Trigger = null;

void gf_PeriodStatsCasterCam () {
    if (auto_gf_PeriodStatsCasterCam_Trigger == null) {
        auto_gf_PeriodStatsCasterCam_Trigger = TriggerCreate("auto_gf_PeriodStatsCasterCam_TriggerFunc");
    }

    TriggerExecute(auto_gf_PeriodStatsCasterCam_Trigger, false, false);
}

bool auto_gf_PeriodStatsCasterCam_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto34C5A4F8_g;
    int auto34C5A4F8_var;
    playergroup auto8D5DFC99_g;
    int auto8D5DFC99_var;
    playergroup auto0C1F882C_g;
    int auto0C1F882C_var;
    playergroup autoEB67B8EF_g;
    int autoEB67B8EF_var;
    playergroup auto2D05FF56_g;
    int auto2D05FF56_var;
    playergroup auto3FBB2DCA_g;
    int auto3FBB2DCA_var;
    playergroup auto04CE8184_g;
    int auto04CE8184_var;
    playergroup auto751C93A2_g;
    int auto751C93A2_var;

    // Implementation
    if ((GameAttributeGameValue("2") == "0002") && (PlayerGroupCount(GameAttributePlayersForTeam(3)) > 0)) {
        Wait(10.0, c_timeGame);
        if ((gv_testteam3ui == true)) {
            auto0C1F882C_g = PlayerGroupAll();
            auto0C1F882C_var = -1;
            while (true) {
                auto0C1F882C_var = PlayerGroupNextPlayer(auto0C1F882C_g, auto0C1F882C_var);
                if (auto0C1F882C_var < 0) { break; }
                gf_StopPuckCam(auto0C1F882C_var, true);
            }
        }
        else {
            auto34C5A4F8_g = GameAttributePlayersForTeam(3);
            auto34C5A4F8_var = -1;
            while (true) {
                auto34C5A4F8_var = PlayerGroupNextPlayer(auto34C5A4F8_g, auto34C5A4F8_var);
                if (auto34C5A4F8_var < 0) { break; }
                gf_StopPuckCam(auto34C5A4F8_var, true);
            }
            auto8D5DFC99_g = PlayerGroupActive();
            auto8D5DFC99_var = -1;
            while (true) {
                auto8D5DFC99_var = PlayerGroupNextPlayer(auto8D5DFC99_g, auto8D5DFC99_var);
                if (auto8D5DFC99_var < 0) { break; }
                if ((gv_team3UI.lv_limitedAccess[auto8D5DFC99_var] == true)) {
                    gf_StopPuckCam(auto8D5DFC99_var, true);
                }

            }
        }
        autoEB67B8EF_g = PlayerGroupAll();
        autoEB67B8EF_var = -1;
        while (true) {
            autoEB67B8EF_var = PlayerGroupNextPlayer(autoEB67B8EF_g, autoEB67B8EF_var);
            if (autoEB67B8EF_var < 0) { break; }
            CameraSave(autoEB67B8EF_var);
            CameraApplyInfo(autoEB67B8EF_var, CameraInfoFromId(237841212), 0.0, -1, 10.0, true);
        }
        Wait(10.0, c_timeGame);
        while (!((gv_uIPeriodStats.lv_arestatsbeingdisplayed == false))) {
            Wait(0.0625, c_timeGame);
        }
        if ((gv_testteam3ui == true)) {
            auto04CE8184_g = PlayerGroupAll();
            auto04CE8184_var = -1;
            while (true) {
                auto04CE8184_var = PlayerGroupNextPlayer(auto04CE8184_g, auto04CE8184_var);
                if (auto04CE8184_var < 0) { break; }
                gf_StartPuckCam(auto04CE8184_var);
            }
        }
        else {
            auto2D05FF56_g = GameAttributePlayersForTeam(3);
            auto2D05FF56_var = -1;
            while (true) {
                auto2D05FF56_var = PlayerGroupNextPlayer(auto2D05FF56_g, auto2D05FF56_var);
                if (auto2D05FF56_var < 0) { break; }
                gf_StartPuckCam(auto2D05FF56_var);
            }
            auto3FBB2DCA_g = PlayerGroupActive();
            auto3FBB2DCA_var = -1;
            while (true) {
                auto3FBB2DCA_var = PlayerGroupNextPlayer(auto3FBB2DCA_g, auto3FBB2DCA_var);
                if (auto3FBB2DCA_var < 0) { break; }
                if ((gv_team3UI.lv_limitedAccess[auto3FBB2DCA_var] == true)) {
                    gf_StartPuckCam(auto3FBB2DCA_var);
                }

            }
        }
        auto751C93A2_g = PlayerGroupAll();
        auto751C93A2_var = -1;
        while (true) {
            auto751C93A2_var = PlayerGroupNextPlayer(auto751C93A2_g, auto751C93A2_var);
            if (auto751C93A2_var < 0) { break; }
            CameraRestore(auto751C93A2_var, 0.0, -1, 10.0);
        }
    }

    return true;
}

string gf_CSVRows (int lp_player) {
    // Variable Declarations
    string lv_string;
    string lv_tempNAME;
    int lv_tempST;
    int lv_tempG;
    int lv_tempA;
    int lv_tempPU;
    int lv_tempPass;
    int lv_tempPR;
    fixed lv_tempPOSS;
    int lv_tempSA;
    int lv_tempSV;
    int lv_tempTended;

    // Automatic Variable Declarations
    playergroup auto8F72C871_g;
    int auto8F72C871_var;
    playergroup auto780DFBCE_g;
    int auto780DFBCE_var;

    // Variable Initialization
    lv_string = "";
    lv_tempNAME = "";

    // Implementation
    auto8F72C871_g = gv_actualPlayerzonTeam[1];
    auto8F72C871_var = -1;
    while (true) {
        auto8F72C871_var = PlayerGroupNextPlayer(auto8F72C871_g, auto8F72C871_var);
        if (auto8F72C871_var < 0) { break; }
        lv_tempST = (gv_inGameStatsSteals[auto8F72C871_var] - gv_inGameStatsTurnovers[auto8F72C871_var]);
        lv_tempG = gv_inGameStatsGoals[auto8F72C871_var];
        lv_tempA = gv_inGameStatsAssists[auto8F72C871_var];
        lv_tempPU = gv_inGameStatsBlocks[auto8F72C871_var];
        lv_tempPass = gv_inGameStatsPasses[auto8F72C871_var];
        lv_tempPR = gv_inGameStatsPassedTo[auto8F72C871_var];
        lv_tempPOSS = (gv_inGameStatsPossesionTime[auto8F72C871_var] / 60.0);
        lv_tempSA = (gv_inGameStatsGoalieBlock[auto8F72C871_var] + gv_inGameStatsGoalieAllow[auto8F72C871_var]);
        lv_tempSV = gv_inGameStatsGoalieBlock[auto8F72C871_var];
        lv_tempTended = gf_Returntimeinnet(auto8F72C871_var);
        if ((lp_player == auto8F72C871_var)) {
            lv_string = (lv_string + "ME,");
        }
        else {
            if ((lv_string != "")) {
                lv_string = (lv_string + ",");
            }

        }
        lv_string = (lv_string + (IntToString(lv_tempST) + "," + IntToString(lv_tempG) + "," + IntToString(lv_tempA) + "," + IntToString(lv_tempPU) + "," + IntToString(lv_tempPass) + "," + IntToString(lv_tempPR) + "," + FixedToString(lv_tempPOSS, 2) + "," + IntToString(lv_tempSA) + "," + IntToString(lv_tempSV) + "," + IntToString(lv_tempTended) + "\\n"));
    }
    auto780DFBCE_g = gv_actualPlayerzonTeam[2];
    auto780DFBCE_var = -1;
    while (true) {
        auto780DFBCE_var = PlayerGroupNextPlayer(auto780DFBCE_g, auto780DFBCE_var);
        if (auto780DFBCE_var < 0) { break; }
        lv_tempST = (gv_inGameStatsSteals[auto780DFBCE_var] - gv_inGameStatsTurnovers[auto780DFBCE_var]);
        lv_tempG = gv_inGameStatsGoals[auto780DFBCE_var];
        lv_tempA = gv_inGameStatsAssists[auto780DFBCE_var];
        lv_tempPU = gv_inGameStatsBlocks[auto780DFBCE_var];
        lv_tempPass = gv_inGameStatsPasses[auto780DFBCE_var];
        lv_tempPR = gv_inGameStatsPassedTo[auto780DFBCE_var];
        lv_tempPOSS = (gv_inGameStatsPossesionTime[auto780DFBCE_var] / 60.0);
        lv_tempSA = (gv_inGameStatsGoalieBlock[auto780DFBCE_var] + gv_inGameStatsGoalieAllow[auto780DFBCE_var]);
        lv_tempSV = gv_inGameStatsGoalieBlock[auto780DFBCE_var];
        lv_tempTended = gf_Returntimeinnet(auto780DFBCE_var);
        if ((lp_player == auto780DFBCE_var)) {
            lv_string = (lv_string + "ME,");
        }
        else {
            if ((lv_string != "")) {
                lv_string = (lv_string + ",");
            }

        }
        lv_string = (lv_string + (IntToString(lv_tempST) + "," + IntToString(lv_tempG) + "," + IntToString(lv_tempA) + "," + IntToString(lv_tempPU) + "," + IntToString(lv_tempPass) + "," + IntToString(lv_tempPR) + "," + FixedToString(lv_tempPOSS, 2) + "," + IntToString(lv_tempSA) + "," + IntToString(lv_tempSV) + "," + IntToString(lv_tempTended) + "\\n"));
    }
    return lv_string;
}

trigger auto_gf_CreateStatExports_Trigger = null;
int auto_gf_CreateStatExports_lp_dialog;

void gf_CreateStatExports (int lp_dialog) {
    auto_gf_CreateStatExports_lp_dialog = lp_dialog;

    if (auto_gf_CreateStatExports_Trigger == null) {
        auto_gf_CreateStatExports_Trigger = TriggerCreate("auto_gf_CreateStatExports_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateStatExports_Trigger, false, false);
}

bool auto_gf_CreateStatExports_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_gf_CreateStatExports_lp_dialog;

    // Variable Declarations
    int lv_textbox;
    string lv_output;
    text lv_test;
    int lv_editbox;
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup autoDAC7048E_g;

    // Variable Initialization
    lv_textbox = c_invalidDialogControlId;
    lv_output = "";
    lv_editbox = c_invalidDialogControlId;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, 100, 100, c_anchorTop, -450, 100, StringToText(""), "csv.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 1000, 100, c_anchorTop, 130, 130, StringExternal("Param/Value/F9F2731C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(lp_dialog, c_triggerControlTypeEditBox);
    lv_editbox = DialogControlLastCreated();
    DialogControlSetSize(lv_editbox, PlayerGroupAll(), 1000, 70);
    DialogControlSetPosition(lv_editbox, PlayerGroupAll(), c_anchorTop, 0, 250);
    autoDAC7048E_g = PlayerGroupAll();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoDAC7048E_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        lv_output = gf_CSVRows(lv_enumplayer);
        libNtve_gf_SetDialogItemEditorValue(lv_editbox, lv_output, PlayerGroupSingle(lv_enumplayer));
    }
    return true;
}

trigger auto_gf_AntiCheatRecorder_Trigger = null;

void gf_AntiCheatRecorder () {
    if (auto_gf_AntiCheatRecorder_Trigger == null) {
        auto_gf_AntiCheatRecorder_Trigger = TriggerCreate("auto_gf_AntiCheatRecorder_TriggerFunc");
    }

    TriggerExecute(auto_gf_AntiCheatRecorder_Trigger, false, false);
}

bool auto_gf_AntiCheatRecorder_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_loop;
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup autoA1A25636_g;

    // Variable Initialization
    lv_loop = true;

    // Implementation
    DialogCreate(400, 50, c_anchorTopLeft, 0, 0, true);
    gv_antiCheat.lv_cheatDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 40, c_anchorTopLeft, 10, 10, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    gv_antiCheat.lv_cheatDialogBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 280, 40, c_anchorTopLeft, 60, 20, StringExternal("Param/Value/285D1E4F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_antiCheat.lv_cheatDialogText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopLeft, 14, 14, StringToText(""), "Assets\\Textures\\tutorialmouseleftbuttondown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_antiCheat.lv_cheatDialogIMG = DialogControlLastCreated();
    while ((lv_loop == true)) {
        autoA1A25636_g = PlayerGroupActive();
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(autoA1A25636_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((((gv_antiCheat.lv_leftClickDown[lv_enumplayer][1] > gv_antiCheat.lv_actionLimit) && (gv_antiCheat.lv_leftClickDown[lv_enumplayer][2] > gv_antiCheat.lv_actionLimit)) || (gv_antiCheat.lv_leftClickDown[lv_enumplayer][2] > 40))) {
                gf_CheatDialogDisplayOffense(lv_enumplayer, true);
            }

            if ((((gv_antiCheat.lv_rightClickDown[lv_enumplayer][1] > gv_antiCheat.lv_actionLimit) && (gv_antiCheat.lv_rightClickDown[lv_enumplayer][2] > gv_antiCheat.lv_actionLimit)) || (gv_antiCheat.lv_rightClickDown[lv_enumplayer][2] > 40))) {
                gf_CheatDialogDisplayOffense(lv_enumplayer, false);
            }

            if (((gv_antiCheat.lv_leftClickSpread[lv_enumplayer] > 1) || (gv_antiCheat.lv_leftClickSpread[lv_enumplayer] < -1))) {
                gf_CheatDialogDisplayOffense(lv_enumplayer, true);
            }

            gv_antiCheat.lv_leftClickDown[lv_enumplayer][1] = gv_antiCheat.lv_leftClickDown[lv_enumplayer][2];
            gv_antiCheat.lv_rightClickDown[lv_enumplayer][1] = gv_antiCheat.lv_rightClickDown[lv_enumplayer][2];
            gv_antiCheat.lv_leftClickDown[lv_enumplayer][2] = 0;
            gv_antiCheat.lv_rightClickDown[lv_enumplayer][2] = 0;
            gv_antiCheat.lv_leftClickSpread[lv_enumplayer] = 0;
        }
        Wait(1.0, c_timeReal);
    }
    return true;
}

trigger auto_gf_CheatDialogDisplayOffense_Trigger = null;
int auto_gf_CheatDialogDisplayOffense_lp_player;
bool auto_gf_CheatDialogDisplayOffense_lp_leftClick;

void gf_CheatDialogDisplayOffense (int lp_player, bool lp_leftClick) {
    auto_gf_CheatDialogDisplayOffense_lp_player = lp_player;
    auto_gf_CheatDialogDisplayOffense_lp_leftClick = lp_leftClick;

    if (auto_gf_CheatDialogDisplayOffense_Trigger == null) {
        auto_gf_CheatDialogDisplayOffense_Trigger = TriggerCreate("auto_gf_CheatDialogDisplayOffense_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheatDialogDisplayOffense_Trigger, false, false);
}

bool auto_gf_CheatDialogDisplayOffense_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CheatDialogDisplayOffense_lp_player;
    bool lp_leftClick = auto_gf_CheatDialogDisplayOffense_lp_leftClick;

    // Variable Declarations
    int lv_totaloffenseswhenthistriggers;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_antiCheat.lv_totalOffenses += 1;
    lv_totaloffenseswhenthistriggers = gv_antiCheat.lv_totalOffenses;
    TextExpressionSetToken("Param/Expression/0294B7BA", "A", PlayerName(lp_player));
    libNtve_gf_SetDialogItemText(gv_antiCheat.lv_cheatDialogText, TextExpressionAssemble("Param/Expression/0294B7BA"), PlayerGroupAll());
    if ((lp_leftClick == true)) {
        libNtve_gf_SetDialogItemImage(gv_antiCheat.lv_cheatDialogIMG, "Assets\\Textures\\tutorialmouseleftbuttondown.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_antiCheat.lv_cheatDialogIMG, "Assets\\Textures\\tutorialmouserightbuttondown.dds", PlayerGroupAll());
    }
    DialogSetVisible(gv_antiCheat.lv_cheatDialog, PlayerGroupAll(), true);
    Wait(12.0, c_timeGame);
    if ((lv_totaloffenseswhenthistriggers == gv_antiCheat.lv_totalOffenses)) {
        DialogSetVisible(gv_antiCheat.lv_cheatDialog, PlayerGroupAll(), false);
    }

    return true;
}

trigger auto_gf_SetGoalLighting_Trigger = null;
int auto_gf_SetGoalLighting_lp_goal;
int auto_gf_SetGoalLighting_lp_event;

void gf_SetGoalLighting (int lp_goal, int lp_event) {
    auto_gf_SetGoalLighting_lp_goal = lp_goal;
    auto_gf_SetGoalLighting_lp_event = lp_event;

    if (auto_gf_SetGoalLighting_Trigger == null) {
        auto_gf_SetGoalLighting_Trigger = TriggerCreate("auto_gf_SetGoalLighting_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetGoalLighting_Trigger, false, false);
}

bool auto_gf_SetGoalLighting_TriggerFunc (bool testConds, bool runActions) {
    int lp_goal = auto_gf_SetGoalLighting_lp_goal;
    int lp_event = auto_gf_SetGoalLighting_lp_event;

    // Variable Declarations
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_event == ge_GameplayEvent_GoalieHold) || (lp_event == ge_GameplayEvent_PeriodEnd)) && (lp_goal == ge_GoalSide_LeftGoal)) {
        ActorSend(gv_goalLightingVars.lv_leftgoallights[1], "ModelSwap LandingLights 1");
        ActorSend(gv_goalLightingVars.lv_leftgoallights[2], "ModelSwap LandingLights 1");
        ActorSend(gv_goalLightingVars.lv_leftgoallights[3], "ModelSwap LandingLights 1");
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[1], true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[2], true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[3], true);
        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), libNtve_gf_SetTeamColor(Color(0.00, 82.35, 0.00), Color(0.00, 82.35, 0.00)));
    }
    else {
        if (((lp_event == ge_GameplayEvent_GoalieHold) || (lp_event == ge_GameplayEvent_PeriodEnd)) && (lp_goal == ge_GoalSide_RightGoal)) {
            ActorSend(gv_goalLightingVars.lv_rightgoallights[1], "ModelSwap LandingLights 1");
            ActorSend(gv_goalLightingVars.lv_rightgoallights[2], "ModelSwap LandingLights 1");
            ActorSend(gv_goalLightingVars.lv_rightgoallights[3], "ModelSwap LandingLights 1");
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[1], true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[2], true);
            gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[3], true);
            ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), libNtve_gf_SetTeamColor(Color(0.00, 82.35, 0.00), Color(0.00, 82.35, 0.00)));
        }
        else {
            if ((lp_event == ge_GameplayEvent_GoalScored) && (lp_goal == ge_GoalSide_RightGoal)) {
                ActorSend(gv_goalLightingVars.lv_rightgoallights[1], "ModelSwap LandingLights 0");
                ActorSend(gv_goalLightingVars.lv_rightgoallights[2], "ModelSwap LandingLights 0");
                ActorSend(gv_goalLightingVars.lv_rightgoallights[3], "ModelSwap LandingLights 0");
                gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[1], true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[2], true);
                gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[3], true);
                ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
            }
            else {
                if ((lp_event == ge_GameplayEvent_GoalScored) && (lp_goal == ge_GoalSide_LeftGoal)) {
                    ActorSend(gv_goalLightingVars.lv_leftgoallights[1], "ModelSwap LandingLights 0");
                    ActorSend(gv_goalLightingVars.lv_leftgoallights[2], "ModelSwap LandingLights 0");
                    ActorSend(gv_goalLightingVars.lv_leftgoallights[3], "ModelSwap LandingLights 0");
                    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[1], true);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[2], true);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[3], true);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), libNtve_gf_SetTeamColor(Color(100.00, 0.00, 0.00), Color(100.00, 0.00, 0.00)));
                }
                else {
                    if (((lp_goal == ge_GoalSide_LeftGoal) || (lp_goal == ge_GoalSide_RightGoal) || (lp_goal == ge_GoalSide_BothGoals)) && (lp_event == ge_GameplayEvent_FaceoffStartReverttonormalstate)) {
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[1], false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[2], false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[3], false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[1], false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[2], false);
                        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[3], false);
                        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(130)), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                        ActorSend(libNtve_gf_MainActorofUnit(UnitFromId(52)), libNtve_gf_SetTeamColor(Color(0.00, 0.00, 0.00), Color(0.00, 0.00, 0.00)));
                    }

                }
            }
        }
    }
    return true;
}

trigger auto_gf_Initandhidegoallighting_Trigger = null;

void gf_Initandhidegoallighting () {
    if (auto_gf_Initandhidegoallighting_Trigger == null) {
        auto_gf_Initandhidegoallighting_Trigger = TriggerCreate("auto_gf_Initandhidegoallighting_TriggerFunc");
    }

    TriggerExecute(auto_gf_Initandhidegoallighting_Trigger, false, false);
}

bool auto_gf_Initandhidegoallighting_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_goalLightingVars.lv_leftgoallights[1] = ActorFromDoodad(DoodadFromId(10));
    gv_goalLightingVars.lv_leftgoallights[2] = ActorFromDoodad(DoodadFromId(129));
    gv_goalLightingVars.lv_leftgoallights[3] = ActorFromDoodad(DoodadFromId(8));
    gv_goalLightingVars.lv_rightgoallights[1] = ActorFromDoodad(DoodadFromId(13));
    gv_goalLightingVars.lv_rightgoallights[2] = ActorFromDoodad(DoodadFromId(131));
    gv_goalLightingVars.lv_rightgoallights[3] = ActorFromDoodad(DoodadFromId(12));
    gv_goalLightingVars.lv_leftGoal = UnitFromId(130);
    gv_goalLightingVars.lv_rightGoal = UnitFromId(52);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[1], false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[2], false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_leftgoallights[3], false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[1], false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[2], false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_goalLightingVars.lv_rightgoallights[3], false);
    return true;
}

trigger auto_gf_CreateCollision_Trigger = null;
unit auto_gf_CreateCollision_lp_collidingUnit;
unit auto_gf_CreateCollision_lp_victimUnit;

void gf_CreateCollision (unit lp_collidingUnit, unit lp_victimUnit) {
    auto_gf_CreateCollision_lp_collidingUnit = lp_collidingUnit;
    auto_gf_CreateCollision_lp_victimUnit = lp_victimUnit;

    if (auto_gf_CreateCollision_Trigger == null) {
        auto_gf_CreateCollision_Trigger = TriggerCreate("auto_gf_CreateCollision_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateCollision_Trigger, false, false);
}

bool auto_gf_CreateCollision_TriggerFunc (bool testConds, bool runActions) {
    unit lp_collidingUnit = auto_gf_CreateCollision_lp_collidingUnit;
    unit lp_victimUnit = auto_gf_CreateCollision_lp_victimUnit;

    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetOwner(lp_collidingUnit) == gv_Players[2]) || (UnitGetOwner(lp_collidingUnit) == gv_Players[6]))) {
        gf_ApplyForcePolar(lp_victimUnit, libNtve_gf_ArithmeticRealClamp(gv_skaterVelocity[UnitGetOwner(lp_collidingUnit)], 0.7, 3.0), AngleBetweenPoints(UnitGetPosition(lp_collidingUnit), UnitGetPosition(lp_victimUnit)));
    }
    else {
        gf_ApplyForcePolar(lp_victimUnit, libNtve_gf_ArithmeticRealClamp(gv_skaterVelocity[UnitGetOwner(lp_collidingUnit)], 0.4, 2.0), AngleBetweenPoints(UnitGetPosition(lp_collidingUnit), UnitGetPosition(lp_victimUnit)));
    }
    if (((UnitGetOwner(lp_victimUnit) == gv_Players[2]) || (UnitGetOwner(lp_victimUnit) == gv_Players[6]))) {
        gf_ApplyForcePolar(lp_collidingUnit, libNtve_gf_ArithmeticRealClamp((gv_skaterVelocity[UnitGetOwner(lp_victimUnit)] - 0.4), 0.1, 1.0), AngleBetweenPoints(UnitGetPosition(lp_victimUnit), UnitGetPosition(lp_collidingUnit)));
    }
    else {
        gf_ApplyForcePolar(lp_collidingUnit, libNtve_gf_ArithmeticRealClamp((gv_skaterVelocity[UnitGetOwner(lp_victimUnit)] - 0.3), 0.2, 1.5), AngleBetweenPoints(UnitGetPosition(lp_victimUnit), UnitGetPosition(lp_collidingUnit)));
    }
    UnitSetCustomValue(lp_victimUnit, 19, IntToFixed(UnitGetOwner(lp_collidingUnit)));
    SoundPlayAtPointForPlayer(SoundLink("ZealotImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_collidingUnit), 1.0, (gv_skaterVelocity[UnitGetOwner(lp_collidingUnit)] * 25.0), 0.0);
    if ((gv_skaterVelocity[UnitGetOwner(lp_collidingUnit)] > 0.85)) {
        SoundPlayAtPointForPlayer(SoundLink("CrowdGaspGoalieBlock", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_collidingUnit), 1.0, (gv_skaterVelocity[UnitGetOwner(lp_collidingUnit)] * 25.0), 0.0);
    }

    gf_Resetcollisionpossiblities(lp_victimUnit, UnitGetOwner(lp_collidingUnit));
    return true;
}

trigger auto_gf_Resetcollisionpossiblities_Trigger = null;
unit auto_gf_Resetcollisionpossiblities_lp_unit;
int auto_gf_Resetcollisionpossiblities_lp_collidingplayernumber;

void gf_Resetcollisionpossiblities (unit lp_unit, int lp_collidingplayernumber) {
    auto_gf_Resetcollisionpossiblities_lp_unit = lp_unit;
    auto_gf_Resetcollisionpossiblities_lp_collidingplayernumber = lp_collidingplayernumber;

    if (auto_gf_Resetcollisionpossiblities_Trigger == null) {
        auto_gf_Resetcollisionpossiblities_Trigger = TriggerCreate("auto_gf_Resetcollisionpossiblities_TriggerFunc");
    }

    TriggerExecute(auto_gf_Resetcollisionpossiblities_Trigger, false, false);
}

bool auto_gf_Resetcollisionpossiblities_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Resetcollisionpossiblities_lp_unit;
    int lp_collidingplayernumber = auto_gf_Resetcollisionpossiblities_lp_collidingplayernumber;

    // Automatic Variable Declarations
    // Implementation
    Wait(2.0, c_timeGame);
    if ((UnitGetCustomValue(lp_unit, 19) == lp_collidingplayernumber)) {
        UnitSetCustomValue(lp_unit, 19, 0.0);
    }

    return true;
}

void gf_Collision2 (int lp_Object1) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_incrementsogdelay == false) && (gv_rEDLINE_MODE == false)) {
        if ((lp_Object1 == 1)) {
            gv_sOG1 += 1;
            TextExpressionSetToken("Param/Expression/E4260DD5", "A", IntToText(gv_sOG1));
            libNtve_gf_SetDialogItemText(gv_shotsOnGoal1, TextExpressionAssemble("Param/Expression/E4260DD5"), PlayerGroupAll());
        }
        else {
            gv_sOG2 += 1;
            TextExpressionSetToken("Param/Expression/959746CC", "A", IntToText(gv_sOG2));
            libNtve_gf_SetDialogItemText(gv_shotsOnGoal2, TextExpressionAssemble("Param/Expression/959746CC"), PlayerGroupAll());
        }
        gv_incrementsogdelay = false;
    }

}

trigger auto_gf_MeterRemove_Trigger = null;
bool auto_gf_MeterRemove_lp_hadPossession;

void gf_MeterRemove (bool lp_hadPossession) {
    auto_gf_MeterRemove_lp_hadPossession = lp_hadPossession;

    if (auto_gf_MeterRemove_Trigger == null) {
        auto_gf_MeterRemove_Trigger = TriggerCreate("auto_gf_MeterRemove_TriggerFunc");
    }

    TriggerExecute(auto_gf_MeterRemove_Trigger, false, false);
}

bool auto_gf_MeterRemove_TriggerFunc (bool testConds, bool runActions) {
    bool lp_hadPossession = auto_gf_MeterRemove_lp_hadPossession;

    // Automatic Variable Declarations
    // Implementation
    gv_meters[EventPlayer()] += 1;
    if ((lp_hadPossession == true)) {
        gv_ShotCount2[EventPlayer()] = true;
        Wait(2.0, c_timeGame);
        gv_ShotCount2[EventPlayer()] = false;
    }

    Wait(0.0, c_timeReal);
    gv_meters[EventPlayer()] -= 1;
    if ((gv_ShotCount2[EventPlayer()] == false) && (gv_meters[EventPlayer()] <= 0)) {
        DialogSetVisible(gv_PowerBarDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetSize(gv_PowerBarImage[EventPlayer()], PlayerGroupAll(), 1, 22);
        libNtve_gf_SetDialogItemDesaturationColor(gv_PowerBarImage[EventPlayer()], Color(0.00, 75.69, 0.00), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_FastFire_Trigger = null;

void gf_FastFire () {
    if (auto_gf_FastFire_Trigger == null) {
        auto_gf_FastFire_Trigger = TriggerCreate("auto_gf_FastFire_TriggerFunc");
    }

    TriggerExecute(auto_gf_FastFire_Trigger, false, false);
}

bool auto_gf_FastFire_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_fire;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_AttachActorToUnit(gv_pUCK, "FireMedium", "Ref_Head");
    lv_fire = libNtve_gf_ActorLastCreated();
    ActorSend(lv_fire, libNtve_gf_SetOpacity(0.0, gv_puckMagnitude));
    Wait(gv_puckMagnitude, c_timeGame);
    ActorSend(lv_fire, "Destroy");
    return true;
}

bool gf_CheckPotentialSOGLeftNet () {
    // Variable Declarations
    fixed lv_dx;
    fixed lv_dy;
    point lv_ptTopPost;
    point lv_ptBottomPost;
    fixed lv_topPostAngle;
    fixed lv_bottomPostAngle;
    fixed lv_puckAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((ModI(gv_Period, 2) == 1) && (gf_ShooterIsTeam1() == true)) {
        return false;
    }
    else {
        if ((ModI(gv_Period, 2) == 0) && (gf_ShooterIsTeam2() == true)) {
            return false;
        }

    }
    if ((PointGetX(UnitGetPosition(gv_pUCK)) < (PointGetX(RegionGetCenter(RegionFromId(16))) + libNtve_gf_WidthOfRegion(RegionFromId(16))))) {
        return false;
    }

    lv_dx = UnitGetCustomValue(gv_pUCK, 0);
    lv_dy = UnitGetCustomValue(gv_pUCK, 1);
    lv_ptTopPost = PointWithOffsetPolar(RegionGetCenter(RegionFromId(16)), (libNtve_gf_WidthOfRegion(RegionFromId(16)) / 2.0), AngleBetweenPoints(RegionGetCenter(RegionFromId(16)), RegionGetCenter(RegionFromId(5))));
    lv_ptBottomPost = PointWithOffsetPolar(RegionGetCenter(RegionFromId(5)), (libNtve_gf_WidthOfRegion(RegionFromId(5)) / 2.0), AngleBetweenPoints(RegionGetCenter(RegionFromId(5)), RegionGetCenter(RegionFromId(16))));
    lv_topPostAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_ptTopPost);
    lv_bottomPostAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_ptBottomPost);
    lv_puckAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), lv_dx, lv_dy));
    if ((lv_topPostAngle > 0.0) && (lv_bottomPostAngle < 0.0)) {
        if (((lv_puckAngle > lv_topPostAngle) || (lv_puckAngle < lv_bottomPostAngle))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if ((((lv_puckAngle >= lv_topPostAngle) && (lv_puckAngle <= lv_bottomPostAngle)) || ((lv_puckAngle >= lv_bottomPostAngle) && (lv_puckAngle <= lv_topPostAngle)))) {
            return true;
        }

    }
    return false;
}

bool gf_CheckPotentialSOGRightNet () {
    // Variable Declarations
    region lv_topPost;
    region lv_bottomPost;
    fixed lv_dx;
    fixed lv_dy;
    point lv_ptTopPost;
    point lv_ptBottomPost;
    fixed lv_topPostAngle;
    fixed lv_bottomPostAngle;
    fixed lv_puckAngle;
    bool lv_team2ShootingLeft;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((ModI(gv_Period, 2) == 1) && (gf_ShooterIsTeam2() == true)) {
        return false;
    }
    else {
        if ((ModI(gv_Period, 2) == 0) && (gf_ShooterIsTeam1() == true)) {
            return false;
        }

    }
    if ((PointGetX(UnitGetPosition(gv_pUCK)) > (PointGetX(RegionGetCenter(RegionFromId(6))) - libNtve_gf_WidthOfRegion(RegionFromId(6))))) {
        return false;
    }

    lv_dx = UnitGetCustomValue(gv_pUCK, 0);
    lv_dy = UnitGetCustomValue(gv_pUCK, 1);
    lv_ptTopPost = PointWithOffsetPolar(RegionGetCenter(RegionFromId(6)), (libNtve_gf_WidthOfRegion(RegionFromId(6)) / 2.0), AngleBetweenPoints(RegionGetCenter(RegionFromId(6)), RegionGetCenter(RegionFromId(7))));
    lv_ptBottomPost = PointWithOffsetPolar(RegionGetCenter(RegionFromId(7)), (libNtve_gf_WidthOfRegion(RegionFromId(7)) / 2.0), AngleBetweenPoints(RegionGetCenter(RegionFromId(7)), RegionGetCenter(RegionFromId(6))));
    lv_topPostAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_ptTopPost);
    lv_bottomPostAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_ptBottomPost);
    lv_puckAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), lv_dx, lv_dy));
    if ((((lv_puckAngle >= lv_topPostAngle) && (lv_puckAngle <= lv_bottomPostAngle)) || ((lv_puckAngle >= lv_bottomPostAngle) && (lv_puckAngle <= lv_topPostAngle)))) {
        return true;
    }

    return false;
}

bool gf_CheckPotentialSOG () {
    // Variable Declarations
    bool lv_potentialSOG;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_potentialSOG = gf_CheckPotentialSOGLeftNet();
    if ((lv_potentialSOG == false)) {
        lv_potentialSOG = gf_CheckPotentialSOGRightNet();
    }

    return lv_potentialSOG;
}

bool gf_ShooterIsTeam1 () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
        return true;
    }
    else {
        return false;
    }
    return false;
}

bool gf_ShooterIsTeam2 () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) {
        return true;
    }
    else {
        return false;
    }
    return false;
}

trigger auto_gf_FullchargeAnimation_Trigger = null;

void gf_FullchargeAnimation () {
    if (auto_gf_FullchargeAnimation_Trigger == null) {
        auto_gf_FullchargeAnimation_Trigger = TriggerCreate("auto_gf_FullchargeAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_FullchargeAnimation_Trigger, false, false);
}

bool auto_gf_FullchargeAnimation_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_flame;
    actor lv_heat;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlayOnUnitForPlayer(SoundLink("HockeyPowershot", -1), c_maxPlayers, PlayerGroupAll(), gv_pUCK, 3.0, 35.0, 0.0);
    libNtve_gf_AttachModelToUnit(gv_pUCK, "ProtossFireMedium", "Ref_Origin");
    lv_flame = libNtve_gf_ActorLastCreated();
    ActorSend(lv_flame, "SetScale 0.700000");
    libNtve_gf_AttachModelToUnit(gv_pUCK, "KarassPlasmaSurgeImpact", "Ref_Origin");
    lv_heat = libNtve_gf_ActorLastCreated();
    ActorSend(lv_heat, "SetScale 0.500000");
    ActorSend(libNtve_gf_MainActorofUnit(gv_pUCK), "SetTintColor 255,255,0 1.000000");
    Wait(1.5, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(gv_pUCK), "ClearTintColor 1.000000");
    ActorSend(lv_heat, "Destroy");
    ActorSend(lv_flame, "Destroy");
    return true;
}

trigger auto_gf_TintActorWithPlayerColor_Trigger = null;
int auto_gf_TintActorWithPlayerColor_lp_player;
actor auto_gf_TintActorWithPlayerColor_lp_actor;

void gf_TintActorWithPlayerColor (int lp_player, actor lp_actor) {
    auto_gf_TintActorWithPlayerColor_lp_player = lp_player;
    auto_gf_TintActorWithPlayerColor_lp_actor = lp_actor;

    if (auto_gf_TintActorWithPlayerColor_Trigger == null) {
        auto_gf_TintActorWithPlayerColor_Trigger = TriggerCreate("auto_gf_TintActorWithPlayerColor_TriggerFunc");
    }

    TriggerExecute(auto_gf_TintActorWithPlayerColor_Trigger, false, false);
}

bool auto_gf_TintActorWithPlayerColor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_TintActorWithPlayerColor_lp_player;
    actor lp_actor = auto_gf_TintActorWithPlayerColor_lp_actor;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_boostcolor[lp_player] == 1)) {
        ActorSend(lp_actor, "SetTintColor {0,0,255 2.000000}");
    }

    if ((gv_boostcolor[lp_player] == 2)) {
        ActorSend(lp_actor, "SetTintColor {255,0,0 2.000000}");
    }

    if (((PlayerHandle(lp_player) == gv_hANDLE_ENTROPY) || (PlayerHandle(lp_player) == gv_hANDLE_ENTROPYEU))) {
        ActorSend(lp_actor, "SetTintColor {255,255,255 10.000000}");
    }

    if (((PlayerHandle(lp_player) == gv_hANDLE_SQUIRTLE) || (PlayerHandle(lp_player) == gv_hANDLE_DANTE) || (PlayerHandle(lp_player) == gv_hANDLE_DANTEEU))) {
        ActorSend(lp_actor, "SetTintColor {0,128,0 2.000000}");
    }

    if (((PlayerHandle(lp_player) == gv_hANDLE_EWOK) || (PlayerHandle(lp_player) == gv_hANDLE_EWOKEU))) {
        ActorSend(lp_actor, "SetTintColor {128,64,0 2.000000}");
    }

    if ((gv_altgoalie[lp_player] == true) && ((PlayerHandle(lp_player) == gv_hANDLE_NGLOOGIK) || (PlayerHandle(lp_player) == gv_hANDLE_NGLOOGIKEU) || (gv_testskins == true))) {
        ActorSend(lp_actor, "SetTintColor {0,0,0 2.000000}");
    }

    return true;
}

trigger auto_gf_Checkanimationgoalie_Trigger = null;
unit auto_gf_Checkanimationgoalie_lp_unit;

void gf_Checkanimationgoalie (unit lp_unit) {
    auto_gf_Checkanimationgoalie_lp_unit = lp_unit;

    if (auto_gf_Checkanimationgoalie_Trigger == null) {
        auto_gf_Checkanimationgoalie_Trigger = TriggerCreate("auto_gf_Checkanimationgoalie_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkanimationgoalie_Trigger, false, false);
}

bool auto_gf_Checkanimationgoalie_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Checkanimationgoalie_lp_unit;

    // Variable Declarations
    int lv_playernumb;
    unit lv_enumunit;
    actor lv_actorsnow;
    actor lv_actorInit;
    actor lv_actorFlametrail;
    actor lv_actorFlametrail2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playernumb = UnitGetOwner(lp_unit);
    libNtve_gf_AttachModelToUnit(lp_unit, "SpellInitiate", "Ref_Center");
    lv_actorInit = libNtve_gf_ActorLastCreated();
    gf_TintActorWithPlayerColor(lv_playernumb, libNtve_gf_ActorLastCreated());
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.500000 0.600000");
    libNtve_gf_AttachModelToUnit(lp_unit, "SpellInitiate2", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.600000");
    lv_actorFlametrail = libNtve_gf_ActorLastCreated();
    gf_TintActorWithPlayerColor(lv_playernumb, libNtve_gf_ActorLastCreated());
    libNtve_gf_AttachModelToUnit(lp_unit, "ProtossFireMedium", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    lv_actorFlametrail2 = libNtve_gf_ActorLastCreated();
    gf_TintActorWithPlayerColor(lv_playernumb, libNtve_gf_ActorLastCreated());
    Wait(1.0, c_timeGame);
    ActorSend(lv_actorFlametrail, "Destroy");
    ActorSend(lv_actorFlametrail2, "Destroy");
    Wait(2.0, c_timeGame);
    ActorSend(lv_actorInit, "Destroy Immediate");
    return true;
}

trigger auto_gf_Checkanimationskater_Trigger = null;
unit auto_gf_Checkanimationskater_lp_unit;

void gf_Checkanimationskater (unit lp_unit) {
    auto_gf_Checkanimationskater_lp_unit = lp_unit;

    if (auto_gf_Checkanimationskater_Trigger == null) {
        auto_gf_Checkanimationskater_Trigger = TriggerCreate("auto_gf_Checkanimationskater_TriggerFunc");
    }

    TriggerExecute(auto_gf_Checkanimationskater_Trigger, false, false);
}

bool auto_gf_Checkanimationskater_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Checkanimationskater_lp_unit;

    // Variable Declarations
    int lv_enumint;
    int lv_playernumb;
    unit lv_enumunit;
    actor lv_actorsnow;
    actor lv_actorInit;
    actor lv_actorFlametrail;
    actor lv_actorFlametrail2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_playernumb = UnitGetOwner(lp_unit);
    libNtve_gf_AttachModelToUnit(lp_unit, "SpellInitiate", "Ref_Center");
    lv_actorInit = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 5.500000 0.600000");
    libNtve_gf_AttachModelToUnit(lp_unit, "SpellInitiate2", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.600000");
    lv_actorFlametrail = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lp_unit, "ProtossFireMedium2", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    lv_actorFlametrail2 = libNtve_gf_ActorLastCreated();
    gf_TintActorWithPlayerColor(lv_playernumb, libNtve_gf_ActorLastCreated());
    Wait(1.0, c_timeGame);
    ActorSend(lv_actorFlametrail, "Destroy");
    ActorSend(lv_actorFlametrail2, "Destroy");
    Wait(2.0, c_timeGame);
    ActorSend(lv_actorInit, "Destroy Immediate");
    return true;
}

trigger auto_gf_CheckingCollisionGoalie_Trigger = null;
unit auto_gf_CheckingCollisionGoalie_lp_unit;

void gf_CheckingCollisionGoalie (unit lp_unit) {
    auto_gf_CheckingCollisionGoalie_lp_unit = lp_unit;

    if (auto_gf_CheckingCollisionGoalie_Trigger == null) {
        auto_gf_CheckingCollisionGoalie_Trigger = TriggerCreate("auto_gf_CheckingCollisionGoalie_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckingCollisionGoalie_Trigger, false, false);
}

bool auto_gf_CheckingCollisionGoalie_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CheckingCollisionGoalie_lp_unit;

    // Variable Declarations
    int lv_playernumb;
    unit lv_enumunit;

    // Automatic Variable Declarations
    const int auto30BC3D3D_n = 16;
    int auto30BC3D3D_i;
    unitgroup autoD093F5D2_g;
    int autoD093F5D2_u;

    // Variable Initialization

    // Implementation
    for (auto30BC3D3D_i = 1; auto30BC3D3D_i <= auto30BC3D3D_n; auto30BC3D3D_i += 1) {
        autoD093F5D2_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), 2.4), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD093F5D2_u = UnitGroupCount(autoD093F5D2_g, c_unitCountAll);
        for (;; autoD093F5D2_u -= 1) {
            lv_enumunit = UnitGroupUnitFromEnd(autoD093F5D2_g, autoD093F5D2_u);
            if (lv_enumunit == null) { break; }
            if (((lv_enumunit == gv_Skaters[1]) || (lv_enumunit == gv_Skaters[2]) || (lv_enumunit == gv_Skaters[3]) || (lv_enumunit == gv_Skaters[4]) || (lv_enumunit == gv_Skaters[5]) || (lv_enumunit == gv_Skaters[6]) || (lv_enumunit == gv_Skaters[7]) || (lv_enumunit == gv_Skaters[8]) || (lv_enumunit == gv_Skaters[9]) || (lv_enumunit == gv_Skaters[10]) || (lv_enumunit == gv_Skaters[11]) || (lv_enumunit == gv_Skaters[12]) || (lv_enumunit == gv_Skaters[13]) || (lv_enumunit == gv_Skaters[14]) || (lv_enumunit == gv_Skaters[15])) && (lv_enumunit != lp_unit)) {
                if ((UnitGetCustomValue(lv_enumunit, 19) != UnitGetOwner(lp_unit))) {
                    gf_CreateCollision(lp_unit, lv_enumunit);
                }

            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_CheckingCollisionSkater_Trigger = null;
unit auto_gf_CheckingCollisionSkater_lp_unit;

void gf_CheckingCollisionSkater (unit lp_unit) {
    auto_gf_CheckingCollisionSkater_lp_unit = lp_unit;

    if (auto_gf_CheckingCollisionSkater_Trigger == null) {
        auto_gf_CheckingCollisionSkater_Trigger = TriggerCreate("auto_gf_CheckingCollisionSkater_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckingCollisionSkater_Trigger, false, false);
}

bool auto_gf_CheckingCollisionSkater_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CheckingCollisionSkater_lp_unit;

    // Variable Declarations
    int lv_playernumb;
    unit lv_enumunit;

    // Automatic Variable Declarations
    const int auto5EC4BC6B_n = 10;
    int auto5EC4BC6B_i;
    unitgroup auto543659D7_g;
    int auto543659D7_u;

    // Variable Initialization

    // Implementation
    for (auto5EC4BC6B_i = 1; auto5EC4BC6B_i <= auto5EC4BC6B_n; auto5EC4BC6B_i += 1) {
        auto543659D7_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_unit), 1.6), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto543659D7_u = UnitGroupCount(auto543659D7_g, c_unitCountAll);
        for (;; auto543659D7_u -= 1) {
            lv_enumunit = UnitGroupUnitFromEnd(auto543659D7_g, auto543659D7_u);
            if (lv_enumunit == null) { break; }
            if (((lv_enumunit == gv_Skaters[1]) || (lv_enumunit == gv_Skaters[2]) || (lv_enumunit == gv_Skaters[3]) || (lv_enumunit == gv_Skaters[4]) || (lv_enumunit == gv_Skaters[5]) || (lv_enumunit == gv_Skaters[6]) || (lv_enumunit == gv_Skaters[7]) || (lv_enumunit == gv_Skaters[8]) || (lv_enumunit == gv_Skaters[9]) || (lv_enumunit == gv_Skaters[10]) || (lv_enumunit == gv_Skaters[11]) || (lv_enumunit == gv_Skaters[12]) || (lv_enumunit == gv_Skaters[13]) || (lv_enumunit == gv_Skaters[14]) || (lv_enumunit == gv_Skaters[15])) && (lv_enumunit != lp_unit)) {
                if ((UnitGetCustomValue(lv_enumunit, 19) != UnitGetOwner(lp_unit))) {
                    gf_CreateCollision(lp_unit, lv_enumunit);
                }

            }

        }
        libNtve_gf_CreateModelAtPoint("PhoenixAirSplashAttackImpact", UnitGetPosition(lp_unit));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_BoostStealAnimation_Trigger = null;
unit auto_gf_BoostStealAnimation_lp_unit;
unit auto_gf_BoostStealAnimation_lp_stick;

void gf_BoostStealAnimation (unit lp_unit, unit lp_stick) {
    auto_gf_BoostStealAnimation_lp_unit = lp_unit;
    auto_gf_BoostStealAnimation_lp_stick = lp_stick;

    if (auto_gf_BoostStealAnimation_Trigger == null) {
        auto_gf_BoostStealAnimation_Trigger = TriggerCreate("auto_gf_BoostStealAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_BoostStealAnimation_Trigger, false, false);
}

bool auto_gf_BoostStealAnimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_BoostStealAnimation_lp_unit;
    unit lp_stick = auto_gf_BoostStealAnimation_lp_stick;

    // Variable Declarations
    actor lv_actor1;
    actor lv_actor2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_AttachActorToUnit(lp_stick, "ShapeHockeyStick", "Ref_Origin");
    lv_actor2 = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.100000");
    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], UnitGetOwner(lp_unit)) == true)) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,128,128 10.000000}");
    }
    else {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {128,255,255 10.000000}");
    }
    ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.700000");
    while (!((gv_isCheckingInProgress[UnitGetOwner(lp_unit)] == false))) {
        Wait(0.0625, c_timeGame);
    }
    ActorSend(lv_actor2, "Destroy Immediate");
    return true;
}

trigger auto_gf_Definewhocantblockonetimer_Trigger = null;
int auto_gf_Definewhocantblockonetimer_lp_shootingPlayer;
fixed auto_gf_Definewhocantblockonetimer_lp_angle;

void gf_Definewhocantblockonetimer (int lp_shootingPlayer, fixed lp_angle) {
    auto_gf_Definewhocantblockonetimer_lp_shootingPlayer = lp_shootingPlayer;
    auto_gf_Definewhocantblockonetimer_lp_angle = lp_angle;

    if (auto_gf_Definewhocantblockonetimer_Trigger == null) {
        auto_gf_Definewhocantblockonetimer_Trigger = TriggerCreate("auto_gf_Definewhocantblockonetimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Definewhocantblockonetimer_Trigger, false, false);
}

bool auto_gf_Definewhocantblockonetimer_TriggerFunc (bool testConds, bool runActions) {
    int lp_shootingPlayer = auto_gf_Definewhocantblockonetimer_lp_shootingPlayer;
    fixed lp_angle = auto_gf_Definewhocantblockonetimer_lp_angle;

    // Variable Declarations
    int lv_enumplayer;
    point lv_theoreticalpointforward;
    point lv_theoreticalpointbackward;

    // Automatic Variable Declarations
    playergroup auto4594F164_g;
    playergroup autoCACBD7D7_g;
    const int auto5075595A_ae = 15;
    const int auto5075595A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_theoreticalpointforward = PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_shootingPlayer]), 1.0, lp_angle);
    lv_theoreticalpointbackward = PointWithOffsetPolar(UnitGetPosition(gv_Skaters[lp_shootingPlayer]), 1.0, (lp_angle - 180.0));
    auto4594F164_g = gv_actualPlayerzonTeam[1];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto4594F164_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), UnitGetPosition(gv_Skaters[lp_shootingPlayer])) < 10.0) && (lv_enumplayer != UnitGetOwner(gv_Skaters[gv_Players[2]])) && (lv_enumplayer != UnitGetOwner(gv_Skaters[gv_Players[6]])) && (lv_enumplayer != gv_ShootingPlayer) && (DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), lv_theoreticalpointbackward) < DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), lv_theoreticalpointforward))) {
            gv_cannotblockonetimer[lv_enumplayer] = true;
        }

    }
    autoCACBD7D7_g = gv_actualPlayerzonTeam[2];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoCACBD7D7_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), UnitGetPosition(gv_Skaters[lp_shootingPlayer])) < 10.0) && (lv_enumplayer != UnitGetOwner(gv_Skaters[gv_Players[2]])) && (lv_enumplayer != UnitGetOwner(gv_Skaters[gv_Players[6]])) && (lv_enumplayer != gv_ShootingPlayer) && (DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), lv_theoreticalpointbackward) < DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_enumplayer]), lv_theoreticalpointforward))) {
            gv_cannotblockonetimer[lv_enumplayer] = true;
        }

    }
    Wait(0.125, c_timeGame);
    lv_enumplayer = 1;
    for ( ; ( (auto5075595A_ai >= 0 && lv_enumplayer <= auto5075595A_ae) || (auto5075595A_ai < 0 && lv_enumplayer >= auto5075595A_ae) ) ; lv_enumplayer += auto5075595A_ai ) {
        gv_cannotblockonetimer[lv_enumplayer] = false;
    }
    return true;
}

void gf_CancelOneTimer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_oneTiming[lp_player] == true)) {
        gv_oneTiming[lp_player] = false;
        UnitBehaviorRemove(gv_Skaters[lp_player], "OneNEWTiming", 1);
    }

}

trigger auto_gf_CreateBadgeTextTag_Trigger = null;
unit auto_gf_CreateBadgeTextTag_lp_unit;
int auto_gf_CreateBadgeTextTag_lp_player;
string auto_gf_CreateBadgeTextTag_lp_image;

void gf_CreateBadgeTextTag (unit lp_unit, int lp_player, string lp_image) {
    auto_gf_CreateBadgeTextTag_lp_unit = lp_unit;
    auto_gf_CreateBadgeTextTag_lp_player = lp_player;
    auto_gf_CreateBadgeTextTag_lp_image = lp_image;

    if (auto_gf_CreateBadgeTextTag_Trigger == null) {
        auto_gf_CreateBadgeTextTag_Trigger = TriggerCreate("auto_gf_CreateBadgeTextTag_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateBadgeTextTag_Trigger, false, false);
}

bool auto_gf_CreateBadgeTextTag_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateBadgeTextTag_lp_unit;
    int lp_player = auto_gf_CreateBadgeTextTag_lp_player;
    string lp_image = auto_gf_CreateBadgeTextTag_lp_image;

    // Variable Declarations
    int lv_textTagtoDestroy;
    int lv_dialogtoDestroy;
    fixed lv_locreal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textTagtoDestroy = c_textTagNone;
    lv_dialogtoDestroy = c_invalidDialogId;

    // Implementation
    TextTagCreate(StringExternal("Param/Value/66C495FA"), 28, PointFromId(2), 5.0, true, false, PlayerGroupAll());
    lv_textTagtoDestroy = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 5.0);
    DialogCreate(50, 50, c_anchorCenter, 0, 0, false);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_dialogtoDestroy = DialogLastCreated();
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, "Ref_Center", -25, -85);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 0, 0, StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    if (((lp_player == gv_Players[1]) || (lp_player == gv_Players[5]))) {
        if ((gv_stats_Faceoffs[lp_player] > 0)) {
            lv_locreal = ((IntToFixed(gv_stats_FaceoffWins[lp_player])/IntToFixed(gv_stats_Faceoffs[lp_player]))*100);
        }
        else {
            lv_locreal = 100.0;
        }
        TextExpressionSetToken("Param/Expression/0C51724F", "A", FixedToText(lv_locreal, 1));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 0, 0, TextExpressionAssemble("Param/Expression/0C51724F"), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }

    if (((lp_player == gv_Players[2]) || (lp_player == gv_Players[6]))) {
        if ((gv_stats_OverallGoalieBlocks[lp_player] > 0)) {
            lv_locreal = (((IntToFixed(gv_stats_OverallGoalieBlocks[lp_player]))/(IntToFixed(gv_stats_OverallGoalieBlocks[lp_player])+IntToFixed(gv_stats_OverallGoalieLets[lp_player])))*100);
        }
        else {
            lv_locreal = 100.0;
        }
        TextExpressionSetToken("Param/Expression/6FD5C85D", "A", FixedToText(lv_locreal, 1));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 0, 0, TextExpressionAssemble("Param/Expression/6FD5C85D"), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }

    Wait(6.0, c_timeGame);
    TextTagDestroy(lv_textTagtoDestroy);
    DialogDestroy(lv_dialogtoDestroy);
    return true;
}

fixed gf_FaceoffTimer (fixed lp_X1, fixed lp_X2, fixed lp_Y1, fixed lp_Y2) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_X1*lp_X2)+(lp_Y1*lp_Y2));
}

void gf_CheckResetFaceoffTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((((ModI(gv_Period, 2) == 1) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))) || ((ModI(gv_Period, 2) == 0) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))))) {
        gv_FaceoffHoldTimer[1] = 0;
    }

    if ((((ModI(gv_Period, 2) == 0) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))) || ((ModI(gv_Period, 2) == 1) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))))) {
        gv_FaceoffHoldTimer[2] = 0;
    }

}

trigger auto_gf_FaceoffBotDrop_Trigger = null;
point auto_gf_FaceoffBotDrop_lp_location;
bool auto_gf_FaceoffBotDrop_lp_waitforscoreboard;

void gf_FaceoffBotDrop (point lp_location, bool lp_waitforscoreboard) {
    auto_gf_FaceoffBotDrop_lp_location = lp_location;
    auto_gf_FaceoffBotDrop_lp_waitforscoreboard = lp_waitforscoreboard;

    if (auto_gf_FaceoffBotDrop_Trigger == null) {
        auto_gf_FaceoffBotDrop_Trigger = TriggerCreate("auto_gf_FaceoffBotDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_FaceoffBotDrop_Trigger, false, false);
}

bool auto_gf_FaceoffBotDrop_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_FaceoffBotDrop_lp_location;
    bool lp_waitforscoreboard = auto_gf_FaceoffBotDrop_lp_waitforscoreboard;

    // Variable Declarations
    unit lv_blimp;
    actor lv_beam;
    int lv_scoreboardwaittime;
    int lv_scoreboardwaitduration;
    actor lv_glow;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("2") == "0002")) {
        lv_scoreboardwaitduration = 70;
    }
    else {
        lv_scoreboardwaitduration = 28;
    }
    TriggerStop(gt_InitiatePullGoalie);
    gv_pullingGoalie[1] = false;
    gv_pullingGoalie[2] = false;
    DialogControlSetVisible(gv_cancelGoalieButton, PlayerGroupActive(), false);
    DialogControlSetVisible(gv_pullingGoalieLabel, PlayerGroupActive(), false);
    DialogSetVisible(gv_pullGoalieDialog, PlayerGroupActive(), false);
    while (!((gv_gameispaused == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((gv_cancelallbotdrops == false)) {
        DialogSetVisible(gv_puckMarker, PlayerGroupAll(), false);
        UnitSetHeight(gv_pUCK, 12.0, 0.0);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), false);
        if ((lp_waitforscoreboard == true)) {
            while ((lv_scoreboardwaittime <= lv_scoreboardwaitduration)) {
                if ((gv_gameispaused == false)) {
                    if ((gv_cancelallbotdrops == false)) {
                        lv_scoreboardwaittime += 1;
                        Wait(1.0, c_timeGame);
                    }
                    else {
                        lv_scoreboardwaittime += 50;
                    }
                }
                else {
                    Wait(0.0625, c_timeGame);
                }
            }
        }

    }

    while (!((gv_gameispaused == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((gv_cancelallbotdrops == false)) {
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp2", 0, 0, lp_location);
        if ((GameAttributeGameValue("7") == "0010")) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap ZHPLPuckdropper");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 3.000000");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap PointDefenseDrone");
        }
        lv_blimp = UnitLastCreated();
        UnitSetHeight(lv_blimp, 30.0, 0.0);
        UnitSetHeight(lv_blimp, 12.0, 2.0);
        while (!((gv_gameispaused == false))) {
            Wait(0.0625, c_timeGame);
        }
        Wait(2.0, c_timeGame);
    }

    if ((gv_cancelallbotdrops == false)) {
        SoundPlay(SoundLink("ColonistShip_Unload", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Artifact_EnergyNova", -1), PlayerGroupAll(), 200.0, 0.0);
        UnitSetHeight(gv_pUCK, 0.0, 2.5);
        libNtve_gf_AttachActorToUnit(gv_pUCK, "MineralCrystalGlow", "Ref_Chest");
        lv_glow = libNtve_gf_ActorLastCreated();
        ActorSend(lv_glow, "SetTintColor {0,255,255 10.000000}");
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), true);
        ActorSend(libNtve_gf_MainActorofUnit(gv_pUCK), "SetTintColor {0,255,255 10.000000}");
        ActorSend(libNtve_gf_MainActorofUnit(gv_pUCK), "ClearTintColor 2.000000");
        DialogSetVisible(gv_puckMarker, PlayerGroupAll(), true);
        libNtve_gf_CreateModelAtPoint("HiveMindEmulatorBeam", lp_location);
        lv_beam = libNtve_gf_ActorLastCreated();
        ActorSend(lv_beam, "SetScale 4.000000,1.500000,4.000000");
        ActorSend(lv_beam, "HostSiteOpsSet ::Host SOpPointUpWorld");
        while (!((gv_gameispaused == false))) {
            Wait(0.0625, c_timeGame);
        }
        Wait(2.5, c_timeGame);
    }

    if ((gv_cancelallbotdrops == false)) {
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        ActorSend(lv_beam, "Destroy");
        ActorSend(lv_glow, "Destroy");
        UnitSetHeight(lv_blimp, 50.0, 2.0);
        while (!((gv_gameispaused == false))) {
            Wait(0.0625, c_timeGame);
        }
        Wait(2.0, c_timeGame);
        UnitRemove(lv_blimp);
    }

    if ((gv_cancelallbotdrops == true)) {
        if ((lv_beam != null)) {
            ActorSend(lv_beam, "Destroy");
        }

        if ((lv_glow != null)) {
            ActorSend(lv_glow, "Destroy");
        }

        if ((UnitIsAlive(lv_blimp) == true)) {
            UnitRemove(lv_blimp);
        }

        DialogSetVisible(gv_puckMarker, PlayerGroupAll(), true);
        UnitSetHeight(gv_pUCK, 0.0, 0.0);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), true);
        ActorSend(libNtve_gf_MainActorofUnit(gv_pUCK), "ClearTintColor");
    }

    return true;
}

trigger auto_gf_FaceoffBotCancel_Trigger = null;

void gf_FaceoffBotCancel () {
    if (auto_gf_FaceoffBotCancel_Trigger == null) {
        auto_gf_FaceoffBotCancel_Trigger = TriggerCreate("auto_gf_FaceoffBotCancel_TriggerFunc");
    }

    TriggerExecute(auto_gf_FaceoffBotCancel_Trigger, false, false);
}

bool auto_gf_FaceoffBotCancel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_cancelallbotdrops = true;
    while (!((gv_gameispaused == false))) {
        Wait(0.0625, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    gv_cancelallbotdrops = false;
    return true;
}

trigger auto_gf_RandomizeFaceoffHoldLocations_Trigger = null;

void gf_RandomizeFaceoffHoldLocations () {
    if (auto_gf_RandomizeFaceoffHoldLocations_Trigger == null) {
        auto_gf_RandomizeFaceoffHoldLocations_Trigger = TriggerCreate("auto_gf_RandomizeFaceoffHoldLocations_TriggerFunc");
    }

    TriggerExecute(auto_gf_RandomizeFaceoffHoldLocations_Trigger, false, false);
}

bool auto_gf_RandomizeFaceoffHoldLocations_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_variation;
    point lv_fOLMiddlePoint;
    point lv_fOL2;
    point lv_fOL3;
    point lv_fOL4;
    point lv_fOL6;
    point lv_fOL7;
    point lv_fOL8;
    point lv_fORMiddlePoint;
    point lv_fOR2;
    point lv_fOR3;
    point lv_fOR4;
    point lv_fOR6;
    point lv_fOR7;
    point lv_fOR8;
    fixed lv_fOROffset;
    fixed lv_fOLOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fOLMiddlePoint = Point(93.0, 132.0);
    lv_fOL2 = Point(89.0, 132.0);
    lv_fOL3 = Point(83.0, 123.0);
    lv_fOL4 = Point(83.0, 141.0);
    lv_fOL6 = Point(97.0, 132.0);
    lv_fOL7 = Point(103.0, 123.0);
    lv_fOL8 = Point(103.0, 141.0);
    lv_fORMiddlePoint = Point(163.0, 91.0);
    lv_fOR2 = Point(159.0, 91.0);
    lv_fOR3 = Point(153.0, 100.0);
    lv_fOR4 = Point(153.0, 82.0);
    lv_fOR6 = Point(167.0, 91.0);
    lv_fOR7 = Point(173.0, 100.0);
    lv_fOR8 = Point(173.0, 82.0);
    lv_fOROffset = 41.0;
    lv_fOLOffset = -41.0;

    // Implementation
    lv_variation = RandomInt(1, 2);
    if ((lv_variation == 1)) {
        PointSet(PointFromId(3), PointWithOffset(lv_fOLMiddlePoint, 0.0, lv_fOLOffset));
        PointSet(PointFromId(114), PointWithOffset(lv_fOL2, 0.0, lv_fOLOffset));
        PointSet(PointFromId(117), PointWithOffset(lv_fOL3, 0.0, lv_fOLOffset));
        PointSet(PointFromId(119), PointWithOffset(lv_fOL4, 0.0, lv_fOLOffset));
        PointSet(PointFromId(116), PointWithOffset(lv_fOL6, 0.0, lv_fOLOffset));
        PointSet(PointFromId(120), PointWithOffset(lv_fOL7, 0.0, lv_fOLOffset));
        PointSet(PointFromId(121), PointWithOffset(lv_fOL8, 0.0, lv_fOLOffset));
        PointSet(PointFromId(113), PointWithOffset(lv_fORMiddlePoint, 0.0, lv_fOROffset));
        PointSet(PointFromId(122), PointWithOffset(lv_fOR2, 0.0, lv_fOROffset));
        PointSet(PointFromId(124), PointWithOffset(lv_fOR3, 0.0, lv_fOROffset));
        PointSet(PointFromId(127), PointWithOffset(lv_fOR4, 0.0, lv_fOROffset));
        PointSet(PointFromId(123), PointWithOffset(lv_fOR6, 0.0, lv_fOROffset));
        PointSet(PointFromId(125), PointWithOffset(lv_fOR7, 0.0, lv_fOROffset));
        PointSet(PointFromId(126), PointWithOffset(lv_fOR8, 0.0, lv_fOROffset));
    }
    else {
        PointSet(PointFromId(3), lv_fOLMiddlePoint);
        PointSet(PointFromId(114), lv_fOL2);
        PointSet(PointFromId(117), lv_fOL3);
        PointSet(PointFromId(119), lv_fOL4);
        PointSet(PointFromId(116), lv_fOL6);
        PointSet(PointFromId(120), lv_fOL7);
        PointSet(PointFromId(121), lv_fOL8);
        PointSet(PointFromId(113), lv_fORMiddlePoint);
        PointSet(PointFromId(122), lv_fOR2);
        PointSet(PointFromId(124), lv_fOR3);
        PointSet(PointFromId(127), lv_fOR4);
        PointSet(PointFromId(123), lv_fOR6);
        PointSet(PointFromId(125), lv_fOR7);
        PointSet(PointFromId(126), lv_fOR8);
    }
    return true;
}

void gf_IncrementGoalieQueue (bool lp_team1, bool lp_team2) {
    // Variable Declarations
    int lv_enumint;

    // Automatic Variable Declarations
    const int autoF351B574_ae = 15;
    int autoF351B574_var;
    const int auto3F44645F_ae = 15;
    int auto3F44645F_var;

    // Variable Initialization

    // Implementation
    if ((lp_team1 == true)) {
        autoF351B574_var = 1;
        for ( ; autoF351B574_var <= autoF351B574_ae; autoF351B574_var += 1 ) {
            if ((PlayerStatus(autoF351B574_var) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoF351B574_var) == true) && (gv_benchPlayers[1] != autoF351B574_var) && (gv_benchPlayers[2] != autoF351B574_var) && (gv_benchPlayers[3] != autoF351B574_var) && (gv_benchPlayers[4] != autoF351B574_var) && (gv_benchPlayers[5] != autoF351B574_var)) {
                lv_enumint += 1;
                gv_goaliePositionQueue.lv_totalGoalieSlotsT1 = lv_enumint;
                gv_goaliePositionQueue.lv_goaliePositionQueueT1[lv_enumint] = autoF351B574_var;
            }

        }
        gv_goaliePositionQueue.lv_currentlySelectedSlot1 += 1;
        if ((gv_goaliePositionQueue.lv_currentlySelectedSlot1 > gv_goaliePositionQueue.lv_totalGoalieSlotsT1)) {
            gv_goaliePositionQueue.lv_currentlySelectedSlot1 = 1;
        }

        gv_goaliePositionQueue.lv_currentlySelectedGoalieT1 = gv_goaliePositionQueue.lv_goaliePositionQueueT1[gv_goaliePositionQueue.lv_currentlySelectedSlot1];
        gf_ShowGoalieQueueUI(1);
    }

    lv_enumint = 0;
    if ((lp_team2 == true)) {
        auto3F44645F_var = 1;
        for ( ; auto3F44645F_var <= auto3F44645F_ae; auto3F44645F_var += 1 ) {
            if ((PlayerStatus(auto3F44645F_var) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto3F44645F_var) == true) && (gv_benchPlayers[1] != auto3F44645F_var) && (gv_benchPlayers[2] != auto3F44645F_var) && (gv_benchPlayers[3] != auto3F44645F_var) && (gv_benchPlayers[4] != auto3F44645F_var) && (gv_benchPlayers[5] != auto3F44645F_var)) {
                lv_enumint += 1;
                gv_goaliePositionQueue.lv_totalGoalieSlotsT2 = lv_enumint;
                gv_goaliePositionQueue.lv_goaliePositionQueueT2[lv_enumint] = auto3F44645F_var;
            }

        }
        gv_goaliePositionQueue.lv_currentlySelectedSlot2 += 1;
        if ((gv_goaliePositionQueue.lv_currentlySelectedSlot2 > gv_goaliePositionQueue.lv_totalGoalieSlotsT2)) {
            gv_goaliePositionQueue.lv_currentlySelectedSlot2 = 1;
        }

        gv_goaliePositionQueue.lv_currentlySelectedGoalieT2 = gv_goaliePositionQueue.lv_goaliePositionQueueT2[gv_goaliePositionQueue.lv_currentlySelectedSlot2];
        gf_ShowGoalieQueueUI(2);
    }

}

trigger auto_gf_ShowGoalieQueueUI_Trigger = null;
int auto_gf_ShowGoalieQueueUI_lp_team;

void gf_ShowGoalieQueueUI (int lp_team) {
    auto_gf_ShowGoalieQueueUI_lp_team = lp_team;

    if (auto_gf_ShowGoalieQueueUI_Trigger == null) {
        auto_gf_ShowGoalieQueueUI_Trigger = TriggerCreate("auto_gf_ShowGoalieQueueUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowGoalieQueueUI_Trigger, false, false);
}

bool auto_gf_ShowGoalieQueueUI_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_ShowGoalieQueueUI_lp_team;

    // Variable Declarations
    int lv_queueUI;
    int lv_yoffset;

    // Automatic Variable Declarations
    int auto4BBF713D_ae;
    int auto4BBF713D_var;
    int auto4761EDB6_ae;
    int auto4761EDB6_var;

    // Variable Initialization
    lv_queueUI = c_invalidDialogId;

    // Implementation
    if ((lp_team == 1)) {
        DialogCreate(400, 700, c_anchorTopRight, 15, 15, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        lv_queueUI = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), gv_actualPlayerzonTeam[1], true);
        DialogSetVisible(DialogLastCreated(), gv_actualPlayerzonTeam[2], false);
        libNtve_gf_CreateDialogItemLabel(lv_queueUI, 400, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/23CA5EAE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        lv_yoffset = 50;
        auto4761EDB6_ae = gv_goaliePositionQueue.lv_totalGoalieSlotsT1;
        auto4761EDB6_var = 1;
        for ( ; auto4761EDB6_var <= auto4761EDB6_ae; auto4761EDB6_var += 1 ) {
            libNtve_gf_CreateDialogItemImage(lv_queueUI, 400, 30, c_anchorTopLeft, 0, lv_yoffset, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            if ((gv_goaliePositionQueue.lv_currentlySelectedSlot1 == auto4761EDB6_var)) {
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 50.20, 0.00), PlayerGroupAll());
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
            }
            else {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
            }
            libNtve_gf_CreateDialogItemLabel(lv_queueUI, 400, 30, c_anchorTopLeft, 15, (lv_yoffset + 5), PlayerName(gv_goaliePositionQueue.lv_goaliePositionQueueT1[auto4761EDB6_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_yoffset += 32;
        }
        Wait(6.0, c_timeGame);
        DialogDestroy(lv_queueUI);
    }
    else {
        if ((lp_team == 2)) {
            DialogCreate(400, 700, c_anchorTopRight, 15, 15, true);
            DialogSetImageVisible(DialogLastCreated(), false);
            lv_queueUI = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), gv_actualPlayerzonTeam[1], false);
            DialogSetVisible(DialogLastCreated(), gv_actualPlayerzonTeam[2], true);
            libNtve_gf_CreateDialogItemLabel(lv_queueUI, 400, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/AA9644E0"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
            lv_yoffset = 50;
            auto4BBF713D_ae = gv_goaliePositionQueue.lv_totalGoalieSlotsT2;
            auto4BBF713D_var = 1;
            for ( ; auto4BBF713D_var <= auto4BBF713D_ae; auto4BBF713D_var += 1 ) {
                libNtve_gf_CreateDialogItemImage(lv_queueUI, 400, 30, c_anchorTopLeft, 0, lv_yoffset, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                if ((gv_goaliePositionQueue.lv_currentlySelectedSlot2 == auto4BBF713D_var)) {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 50.20, 0.00), PlayerGroupAll());
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
                }
                else {
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
                }
                libNtve_gf_CreateDialogItemLabel(lv_queueUI, 400, 30, c_anchorTopLeft, 15, (lv_yoffset + 5), PlayerName(gv_goaliePositionQueue.lv_goaliePositionQueueT2[auto4BBF713D_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_yoffset += 32;
            }
            Wait(6.0, c_timeGame);
            DialogDestroy(lv_queueUI);
        }

    }
    return true;
}

void gf_SetCooldownsandChargesforUnit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((((gv_Players[2] == lp_player) && (gv_pullGoalie[1] == false)) || ((gv_Players[6] == lp_player) && (gv_pullGoalie[2] == false)))) {
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "10");
        CatalogFieldValueSet(c_gameCatalogAbil, "RemoteShield", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "12");
        CatalogFieldValueSet(c_gameCatalogAbil, "RemoteShield", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, "12");
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], lp_player) == false)) {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(lp_player), true);
        }
    }
    else {
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "7");
        CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, "8");
    }
}

trigger auto_gf_RotateShootout_Trigger = null;
bool auto_gf_RotateShootout_lp_scored;

void gf_RotateShootout (bool lp_scored) {
    auto_gf_RotateShootout_lp_scored = lp_scored;

    if (auto_gf_RotateShootout_Trigger == null) {
        auto_gf_RotateShootout_Trigger = TriggerCreate("auto_gf_RotateShootout_TriggerFunc");
    }

    TriggerExecute(auto_gf_RotateShootout_Trigger, false, false);
}

bool auto_gf_RotateShootout_TriggerFunc (bool testConds, bool runActions) {
    bool lp_scored = auto_gf_RotateShootout_lp_scored;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_rotateShootout == false)) {
        gv_rotateShootout = true;
        if ((lp_scored == false)) {
            SoundPlay(SoundLink("UI_LoadingFinished", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        gv_ShootoutShooting = false;
        if ((gv_shootoutRounds > 0)) {
            if (((gv_shootoutCheckScore1 != gv_shootoutScore[1]) || (gv_shootoutCheckScore2 != gv_shootoutScore[2]))) {
                if ((ModI(gv_shootout, 2) == 1)) {
                    libNtve_gf_CreateDialogItemImage(gv_shootoutDialog, 75, 75, c_anchorTop, (gv_leftXStart+(75*((gv_shootout-1)/2))), 45, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    libNtve_gf_CreateDialogItemImage(gv_shootoutDialog, 75, 75, c_anchorTop, (gv_rightXStart+(75*((gv_shootout-1)/2))), 45, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
            }
            else {
                if ((ModI(gv_shootout, 2) == 1)) {
                    libNtve_gf_CreateDialogItemImage(gv_shootoutDialog, 75, 75, c_anchorTop, (gv_leftXStart+(75*((gv_shootout-1)/2))), 45, StringToText(""), "Assets\\Textures\\ui-editoricon-scripteditor_showerrors.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    libNtve_gf_CreateDialogItemImage(gv_shootoutDialog, 75, 75, c_anchorTop, (gv_rightXStart+(75*((gv_shootout-1)/2))), 45, StringToText(""), "Assets\\Textures\\ui-editoricon-scripteditor_showerrors.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
            }
        }
        else {
            if (((gv_shootoutCheckScore1 != gv_shootoutScore[1]) || (gv_shootoutCheckScore2 != gv_shootoutScore[2]))) {
                if ((ModI(gv_shootout, 2) == 1)) {
                    DialogControlSetVisible(gv_adv, PlayerGroupAll(), true);
                    DialogControlSetPosition(gv_adv, PlayerGroupAll(), c_anchorTop, -175, 50);
                }
                else {
                    DialogControlSetVisible(gv_adv, PlayerGroupAll(), false);
                }
            }
            else {
                if ((ModI(gv_shootout, 2) == 1)) {
                    DialogControlSetVisible(gv_adv, PlayerGroupAll(), true);
                    DialogControlSetPosition(gv_adv, PlayerGroupAll(), c_anchorTop, 175, 45);
                }
                else {
                    DialogControlSetVisible(gv_adv, PlayerGroupAll(), true);
                    DialogControlSetVisible(gv_adv, PlayerGroupAll(), false);
                }
            }
        }
        gv_shootoutRounds -= 1;
        gf_CheckShootoutConditions();
        if ((gv_gameOver == true)) {
            return true;
        }

        gv_ShootoutShooting2 = false;
        if ((lp_scored == false)) {
            Wait(5.0, c_timeGame);
        }

        SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerExecute(gt_RandomizeUnitsShootout, true, false);
        gv_rotateShootout = false;
    }

    return true;
}

void gf_CheckShootoutConditions () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_shootoutRounds <= 0) && (ModI(gv_shootout, 2) == 0))) {
        if ((gv_shootoutScore[1] == gv_shootoutScore[2])) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/21EED17E"));
        }
        else {
            if ((gv_shootoutScore[1] > gv_shootoutScore[2])) {
                gv_TeamScores[1] += 1;
            }
            else {
                gv_TeamScores[2] += 1;
            }
            TextExpressionSetToken("Param/Expression/084F8D97", "A", IntToText(gv_TeamScores[1]));
            libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/084F8D97"), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/0A34FCBF", "A", IntToText(gv_TeamScores[2]));
            libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/0A34FCBF"), PlayerGroupAll());
            Wait(2.0, c_timeReal);
            gf_SetPlayers();
            gv_uIPeriodStats.lv_showindefinitely = true;
            TriggerExecute(gt_PeriodStats, true, false);
            TriggerExecute(gt_GameEnd, true, true);
        }
    }

}

trigger auto_gf_CheckIfRebounded_Trigger = null;

void gf_CheckIfRebounded () {
    if (auto_gf_CheckIfRebounded_Trigger == null) {
        auto_gf_CheckIfRebounded_Trigger = TriggerCreate("auto_gf_CheckIfRebounded_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckIfRebounded_Trigger, false, false);
}

bool auto_gf_CheckIfRebounded_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA2161401_ae = 64;
    const int autoA2161401_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_checkingRebound == false)) {
        gv_checkingRebound = true;
        lv_i = 1;
        for ( ; ( (autoA2161401_ai >= 0 && lv_i <= autoA2161401_ae) || (autoA2161401_ai < 0 && lv_i >= autoA2161401_ae) ) ; lv_i += autoA2161401_ai ) {
            Wait(0.0, c_timeGame);
            if (((gv_rotateShootout == true) || (gv_shootoutGoal == true))) {
                gv_checkingRebound = false;
                return true;
            }

        }
        gv_checkingRebound = false;
        if ((gv_Possession == -1) && (((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(13)) == false) && ((gv_Players[2] != 0) || (gv_Players[5] != 0))) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(14)) == false) && ((gv_Players[1] != 0) || (gv_Players[6] != 0))))) {
            gf_RotateShootout(false);
        }

    }

    return true;
}

trigger auto_gf_CheckBeginShootoutClock_Trigger = null;

void gf_CheckBeginShootoutClock () {
    if (auto_gf_CheckBeginShootoutClock_Trigger == null) {
        auto_gf_CheckBeginShootoutClock_Trigger = TriggerCreate("auto_gf_CheckBeginShootoutClock_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckBeginShootoutClock_Trigger, false, false);
}

bool auto_gf_CheckBeginShootoutClock_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoEC29CC37_ae = 160;
    const int autoEC29CC37_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoEC29CC37_ai >= 0 && lv_i <= autoEC29CC37_ae) || (autoEC29CC37_ai < 0 && lv_i >= autoEC29CC37_ae) ) ; lv_i += autoEC29CC37_ai ) {
        if ((((gv_Players[1] != 0) && (gv_Possession == gv_Players[1])) || ((gv_Players[5] != 0) && (gv_Possession == gv_Players[5])))) {
            gv_ShootouttimerCount = true;
        }

        Wait(0.0, c_timeGame);
        if ((gv_ShootouttimerCount == true)) {
            TimerStart(gv_Timer, gv_shootoutSecondsAllowed, false, c_timeReal);
            TriggerExecute(gt_UpdateTime, true, false);
            TriggerEnable(gt_ShooutoutTimer, true);
            return true;
        }

    }
    if ((gv_ShootouttimerCount == false)) {
        gv_ShootouttimerCount = true;
        TimerStart(gv_Timer, gv_shootoutSecondsAllowed, false, c_timeReal);
        TriggerExecute(gt_UpdateTime, true, false);
        TriggerEnable(gt_ShooutoutTimer, true);
    }

    return true;
}

trigger auto_gf_FadeSound_Trigger = null;
sound auto_gf_FadeSound_lp_sound;

void gf_FadeSound (sound lp_sound) {
    auto_gf_FadeSound_lp_sound = lp_sound;

    if (auto_gf_FadeSound_Trigger == null) {
        auto_gf_FadeSound_Trigger = TriggerCreate("auto_gf_FadeSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_FadeSound_Trigger, false, false);
}

bool auto_gf_FadeSound_TriggerFunc (bool testConds, bool runActions) {
    sound lp_sound = auto_gf_FadeSound_lp_sound;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto965AD247_ae = 100;
    const int auto965AD247_ai = 1;

    // Variable Initialization
    lv_i = 100;

    // Implementation
    Wait(3.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto965AD247_ai >= 0 && lv_i <= auto965AD247_ae) || (auto965AD247_ai < 0 && lv_i >= auto965AD247_ae) ) ; lv_i += auto965AD247_ai ) {
        Wait(0.0, c_timeGame);
        if ((gv_gameOver == false)) {
            SoundSetVolume(lp_sound, (100 - lv_i));
        }
        else {
            SoundSetVolume(lp_sound, 100.0);
        }
    }
    return true;
}

void gf_SetPlayers () {
    // Variable Declarations
    int lv_temp;

    // Automatic Variable Declarations
    const int autoD259E17C_ae = 8;
    int autoD259E17C_var;
    playergroup auto4CFEEF87_g;
    int auto4CFEEF87_var;
    playergroup autoCE44DA7F_g;
    int autoCE44DA7F_var;

    // Variable Initialization

    // Implementation
    autoD259E17C_var = 1;
    for ( ; autoD259E17C_var <= autoD259E17C_ae; autoD259E17C_var += 1 ) {
        gv_Players[autoD259E17C_var] = 0;
    }
    auto4CFEEF87_g = gv_actualPlayerzonTeam[1];
    auto4CFEEF87_var = -1;
    while (true) {
        auto4CFEEF87_var = PlayerGroupNextPlayer(auto4CFEEF87_g, auto4CFEEF87_var);
        if (auto4CFEEF87_var < 0) { break; }
        lv_temp += 1;
        gv_Players[lv_temp] = auto4CFEEF87_var;
    }
    lv_temp = 4;
    autoCE44DA7F_g = gv_actualPlayerzonTeam[2];
    autoCE44DA7F_var = -1;
    while (true) {
        autoCE44DA7F_var = PlayerGroupNextPlayer(autoCE44DA7F_g, autoCE44DA7F_var);
        if (autoCE44DA7F_var < 0) { break; }
        lv_temp += 1;
        gv_Players[lv_temp] = autoCE44DA7F_var;
    }
}

trigger auto_gf_SetGrayname_Trigger = null;
int auto_gf_SetGrayname_lp_player;

void gf_SetGrayname (int lp_player) {
    auto_gf_SetGrayname_lp_player = lp_player;

    if (auto_gf_SetGrayname_Trigger == null) {
        auto_gf_SetGrayname_Trigger = TriggerCreate("auto_gf_SetGrayname_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetGrayname_Trigger, false, false);
}

bool auto_gf_SetGrayname_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SetGrayname_lp_player;

    // Automatic Variable Declarations
    // Implementation
    gv_grayName[lp_player] = true;
    return true;
}

trigger auto_gf_ForfeitValidate_Trigger = null;

void gf_ForfeitValidate () {
    if (auto_gf_ForfeitValidate_Trigger == null) {
        auto_gf_ForfeitValidate_Trigger = TriggerCreate("auto_gf_ForfeitValidate_TriggerFunc");
    }

    TriggerExecute(auto_gf_ForfeitValidate_Trigger, false, false);
}

bool auto_gf_ForfeitValidate_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerChecked;
    int lv_LocInt1;
    int lv_LocInt2;
    fixed lv_locReal;
    fixed lv_locReal2;

    // Automatic Variable Declarations
    playergroup auto176B4354_g;
    playergroup auto3E005B07_g;
    const int auto45E296A5_ae = 8;
    int auto45E296A5_var;
    playergroup autoDD893884_g;
    int autoDD893884_var;
    playergroup auto48DC46C4_g;
    int auto48DC46C4_var;
    const int autoA656708A_ae = 8;
    int autoA656708A_var;
    playergroup auto6BF13A47_g;
    int auto6BF13A47_var;
    playergroup autoFE1BA739_g;
    int autoFE1BA739_var;
    playergroup autoF50C1B4F_g;
    int autoF50C1B4F_var;
    playergroup auto8FBCDC00_g;
    int auto8FBCDC00_var;
    const int auto2B16960A_ae = 8;
    int auto2B16960A_var;
    playergroup autoF9CC2EE0_g;
    int autoF9CC2EE0_var;
    playergroup auto023AB1F5_g;
    int auto023AB1F5_var;
    const int autoCD140A39_ae = 4;
    int autoCD140A39_var;
    playergroup auto6FB1E799_g;
    int auto6FB1E799_var;
    playergroup autoD04E046C_g;
    int autoD04E046C_var;
    playergroup autoFE3037A3_g;
    int autoFE3037A3_var;
    playergroup autoE77BF8F0_g;
    int autoE77BF8F0_var;

    // Variable Initialization
    lv_LocInt1 = 1;
    lv_LocInt2 = 5;

    // Implementation
    if ((gv_rEDLINE_MODE == false)) {
        gv_activePlayersOnT1 = PlayerGroupEmpty();
        gv_activePlayersOnT2 = PlayerGroupEmpty();
        auto176B4354_g = gv_actualPlayerzonTeam[1];
        lv_playerChecked = -1;
        while (true) {
            lv_playerChecked = PlayerGroupNextPlayer(auto176B4354_g, lv_playerChecked);
            if (lv_playerChecked < 0) { break; }
            if ((PlayerStatus(lv_playerChecked) == c_playerStatusActive)) {
                PlayerGroupAdd(gv_activePlayersOnT1, lv_playerChecked);
            }

        }
        auto3E005B07_g = gv_actualPlayerzonTeam[2];
        lv_playerChecked = -1;
        while (true) {
            lv_playerChecked = PlayerGroupNextPlayer(auto3E005B07_g, lv_playerChecked);
            if (lv_playerChecked < 0) { break; }
            if ((PlayerStatus(lv_playerChecked) == c_playerStatusActive)) {
                PlayerGroupAdd(gv_activePlayersOnT2, lv_playerChecked);
            }

        }
        if ((PlayerGroupCount(gv_activePlayersOnT1) == 0) && (gv_tESTING == false) && (gv_gameOver == false)) {
            gv_gameOver = true;
            if ((gv_Shootout == true)) {
                gf_SetPlayers();
            }

            gv_uIPeriodStats.lv_showindefinitely = true;
            gv_uIPeriodStats.lv_winningteamred1blue2 = 2;
            TriggerExecute(gt_PeriodStats, true, false);
            TextExpressionSetToken("Param/Expression/DDF8CD88", "A", PlayerName(gv_Players[5]));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/DDF8CD88"));
            SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
            if ((gv_Shootout == true)) {
                auto45E296A5_var = 1;
                for ( ; auto45E296A5_var <= auto45E296A5_ae; auto45E296A5_var += 1 ) {
                    gv_Players[auto45E296A5_var] = 0;
                }
                autoDD893884_g = gv_actualPlayerzonTeam[1];
                autoDD893884_var = -1;
                while (true) {
                    autoDD893884_var = PlayerGroupNextPlayer(autoDD893884_g, autoDD893884_var);
                    if (autoDD893884_var < 0) { break; }
                    gv_Players[lv_LocInt1] = autoDD893884_var;
                    lv_LocInt1 += 1;
                }
                auto48DC46C4_g = gv_actualPlayerzonTeam[2];
                auto48DC46C4_var = -1;
                while (true) {
                    auto48DC46C4_var = PlayerGroupNextPlayer(auto48DC46C4_g, auto48DC46C4_var);
                    if (auto48DC46C4_var < 0) { break; }
                    gv_Players[lv_LocInt2] = auto48DC46C4_var;
                    lv_LocInt2 += 1;
                }
            }

            if ((gv_statsOK == true)) {
                if ((gv_ranked == true)) {
                    autoA656708A_var = 5;
                    for ( ; autoA656708A_var <= autoA656708A_ae; autoA656708A_var += 1 ) {
                        gv_stats_GamesWon[gv_Players[autoA656708A_var]] += 1;
                        gv_playerTotalPoints[gv_Players[autoA656708A_var]] = gf_GetTotalPlayerPoints(gv_Players[autoA656708A_var]);
                        gv_stats_Points[gv_Players[autoA656708A_var]] += gv_playerTotalPoints[gv_Players[autoA656708A_var]];
                        gf_SaveBank(gv_Players[autoA656708A_var]);
                    }
                    lv_locReal = 0.0;
                    auto6BF13A47_g = gv_actualPlayerzonTeam[1];
                    auto6BF13A47_var = -1;
                    while (true) {
                        auto6BF13A47_var = PlayerGroupNextPlayer(auto6BF13A47_g, auto6BF13A47_var);
                        if (auto6BF13A47_var < 0) { break; }
                        lv_locReal = (lv_locReal+IntToFixed(gv_playerTotalPoints[auto6BF13A47_var]));
                    }
                    autoFE1BA739_g = gv_actualPlayerzonTeam[1];
                    autoFE1BA739_var = -1;
                    while (true) {
                        autoFE1BA739_var = PlayerGroupNextPlayer(autoFE1BA739_g, autoFE1BA739_var);
                        if (autoFE1BA739_var < 0) { break; }
                        lv_locReal2 = 0.0;
                        if ((lv_locReal != 0.0)) {
                            lv_locReal2 = (IntToFixed(gv_playerTotalPoints[autoFE1BA739_var]) / lv_locReal);
                            lv_locReal2 = (lv_locReal2*1.5);
                        }

                        gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
                        if ((gv_eloDifference1 > 1600.0)) {
                            gv_eloDifference1 = 1600.0;
                        }

                        BankValueSetFromFixed(gv_Banks[autoFE1BA739_var], "stats", "elo2", (gv_eloOLD[autoFE1BA739_var]-(((1000.0 / gv_team2ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                        gv_eloChange[autoFE1BA739_var] = (-(((1000.0 / gv_team2ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                        BankSave(gv_Banks[autoFE1BA739_var]);
                    }
                    lv_locReal = 0.0;
                    autoF50C1B4F_g = gv_actualPlayerzonTeam[2];
                    autoF50C1B4F_var = -1;
                    while (true) {
                        autoF50C1B4F_var = PlayerGroupNextPlayer(autoF50C1B4F_g, autoF50C1B4F_var);
                        if (autoF50C1B4F_var < 0) { break; }
                        lv_locReal = (lv_locReal+gv_playerTotalPoints[autoF50C1B4F_var]);
                    }
                    auto8FBCDC00_g = gv_actualPlayerzonTeam[2];
                    auto8FBCDC00_var = -1;
                    while (true) {
                        auto8FBCDC00_var = PlayerGroupNextPlayer(auto8FBCDC00_g, auto8FBCDC00_var);
                        if (auto8FBCDC00_var < 0) { break; }
                        lv_locReal2 = 0.0;
                        if ((lv_locReal != 0.0)) {
                            lv_locReal2 = (1-(gv_playerTotalPoints[auto8FBCDC00_var] / lv_locReal));
                            lv_locReal2 = (lv_locReal2 / 3.0);
                        }

                        gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
                        if ((gv_eloDifference1 > 1600.0)) {
                            gv_eloDifference1 = 1600.0;
                        }

                        BankValueSetFromFixed(gv_Banks[auto8FBCDC00_var], "stats", "elo2", (gv_eloOLD[auto8FBCDC00_var]-(((1000.0 / gv_team2ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                        gv_eloChange[auto8FBCDC00_var] = (-(((1000.0 / gv_team2ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                        BankSave(gv_Banks[auto8FBCDC00_var]);
                    }
                }

            }

        }

        if ((PlayerGroupCount(gv_activePlayersOnT2) == 0) && (gv_tESTING == false) && (gv_gameOver == false)) {
            gv_gameOver = true;
            if ((gv_Shootout == true)) {
                gf_SetPlayers();
            }

            gv_uIPeriodStats.lv_showindefinitely = true;
            gv_uIPeriodStats.lv_winningteamred1blue2 = 1;
            TriggerExecute(gt_PeriodStats, true, false);
            TextExpressionSetToken("Param/Expression/D414AD2E", "A", PlayerName(gv_Players[1]));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/D414AD2E"));
            SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
            if ((gv_Shootout == true)) {
                auto2B16960A_var = 1;
                for ( ; auto2B16960A_var <= auto2B16960A_ae; auto2B16960A_var += 1 ) {
                    gv_Players[auto2B16960A_var] = 0;
                }
                autoF9CC2EE0_g = gv_actualPlayerzonTeam[1];
                autoF9CC2EE0_var = -1;
                while (true) {
                    autoF9CC2EE0_var = PlayerGroupNextPlayer(autoF9CC2EE0_g, autoF9CC2EE0_var);
                    if (autoF9CC2EE0_var < 0) { break; }
                    gv_Players[lv_LocInt1] = autoF9CC2EE0_var;
                    lv_LocInt1 += 1;
                }
                auto023AB1F5_g = gv_actualPlayerzonTeam[2];
                auto023AB1F5_var = -1;
                while (true) {
                    auto023AB1F5_var = PlayerGroupNextPlayer(auto023AB1F5_g, auto023AB1F5_var);
                    if (auto023AB1F5_var < 0) { break; }
                    gv_Players[lv_LocInt2] = auto023AB1F5_var;
                    lv_LocInt2 += 1;
                }
            }

            if ((gv_statsOK == true)) {
                if ((gv_ranked == true)) {
                    autoCD140A39_var = 1;
                    for ( ; autoCD140A39_var <= autoCD140A39_ae; autoCD140A39_var += 1 ) {
                        gv_stats_GamesWon[gv_Players[autoCD140A39_var]] += 1;
                        gv_playerTotalPoints[gv_Players[autoCD140A39_var]] = gf_GetTotalPlayerPoints(gv_Players[autoCD140A39_var]);
                        gv_stats_Points[gv_Players[autoCD140A39_var]] += gv_playerTotalPoints[gv_Players[autoCD140A39_var]];
                        gf_SaveBank(gv_Players[autoCD140A39_var]);
                    }
                    lv_locReal = 0.0;
                    auto6FB1E799_g = gv_actualPlayerzonTeam[1];
                    auto6FB1E799_var = -1;
                    while (true) {
                        auto6FB1E799_var = PlayerGroupNextPlayer(auto6FB1E799_g, auto6FB1E799_var);
                        if (auto6FB1E799_var < 0) { break; }
                        lv_locReal = (lv_locReal+IntToFixed(gv_playerTotalPoints[auto6FB1E799_var]));
                    }
                    autoD04E046C_g = gv_actualPlayerzonTeam[1];
                    autoD04E046C_var = -1;
                    while (true) {
                        autoD04E046C_var = PlayerGroupNextPlayer(autoD04E046C_g, autoD04E046C_var);
                        if (autoD04E046C_var < 0) { break; }
                        lv_locReal2 = 0.0;
                        if ((lv_locReal != 0.0)) {
                            lv_locReal2 = (IntToFixed(gv_playerTotalPoints[autoD04E046C_var]) / lv_locReal);
                            lv_locReal2 = (lv_locReal2*1.5);
                        }

                        gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
                        if ((gv_eloDifference1 > 1600.0)) {
                            gv_eloDifference1 = 1600.0;
                        }

                        BankValueSetFromFixed(gv_Banks[autoD04E046C_var], "stats", "elo2", (gv_eloOLD[autoD04E046C_var]+(((1000.0 / gv_team1ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                        gv_eloChange[autoD04E046C_var] = ((((1000.0 / gv_team1ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                        BankSave(gv_Banks[autoD04E046C_var]);
                    }
                    lv_locReal = 0.0;
                    autoFE3037A3_g = gv_actualPlayerzonTeam[2];
                    autoFE3037A3_var = -1;
                    while (true) {
                        autoFE3037A3_var = PlayerGroupNextPlayer(autoFE3037A3_g, autoFE3037A3_var);
                        if (autoFE3037A3_var < 0) { break; }
                        lv_locReal = (lv_locReal+gv_playerTotalPoints[autoFE3037A3_var]);
                    }
                    autoE77BF8F0_g = gv_actualPlayerzonTeam[2];
                    autoE77BF8F0_var = -1;
                    while (true) {
                        autoE77BF8F0_var = PlayerGroupNextPlayer(autoE77BF8F0_g, autoE77BF8F0_var);
                        if (autoE77BF8F0_var < 0) { break; }
                        lv_locReal2 = 0.0;
                        if ((lv_locReal != 0.0)) {
                            lv_locReal2 = (1-(gv_playerTotalPoints[autoE77BF8F0_var] / lv_locReal));
                            lv_locReal2 = (lv_locReal2 / 3.0);
                        }

                        gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
                        if ((gv_eloDifference1 > 1600.0)) {
                            gv_eloDifference1 = 1600.0;
                        }

                        BankValueSetFromFixed(gv_Banks[autoE77BF8F0_var], "stats", "elo2", (gv_eloOLD[autoE77BF8F0_var]-(((1000.0 / gv_team1ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                        gv_eloChange[autoE77BF8F0_var] = (-(((1000.0 / gv_team1ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                        BankSave(gv_Banks[autoE77BF8F0_var]);
                    }
                }

            }

        }

    }

    return true;
}

trigger auto_gf_Removeleaveranimation_Trigger = null;
int auto_gf_Removeleaveranimation_lp_skaternumber;

void gf_Removeleaveranimation (int lp_skaternumber) {
    auto_gf_Removeleaveranimation_lp_skaternumber = lp_skaternumber;

    if (auto_gf_Removeleaveranimation_Trigger == null) {
        auto_gf_Removeleaveranimation_Trigger = TriggerCreate("auto_gf_Removeleaveranimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_Removeleaveranimation_Trigger, false, false);
}

bool auto_gf_Removeleaveranimation_TriggerFunc (bool testConds, bool runActions) {
    int lp_skaternumber = auto_gf_Removeleaveranimation_lp_skaternumber;

    // Variable Declarations
    unit lv_skaterunit;
    unit lv_stickunit;
    unit lv_blimp;
    point lv_evacpoint;
    actor lv_beam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_Skaters[lp_skaternumber]) == true)) {
        lv_skaterunit = gv_Skaters[lp_skaternumber];
        lv_stickunit = gv_Sticks[lp_skaternumber];
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        UnitSetState(lv_skaterunit, c_unitStateHighlightable, false);
        UnitSetState(lv_skaterunit, c_unitStateTargetable, false);
        UnitSetState(lv_skaterunit, c_unitStateSelectable, false);
        UnitSetState(lv_stickunit, c_unitStateHighlightable, false);
        UnitSetState(lv_stickunit, c_unitStateTargetable, false);
        UnitSetState(lv_stickunit, c_unitStateSelectable, false);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        UnitIssueOrder(lv_skaterunit, Order(AbilityCommand("SlideStop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_skaterunit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_skaterunit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitAbilityEnable(lv_skaterunit, "move", false);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        Wait(1.0, c_timeGame);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        lv_evacpoint = UnitGetPosition(lv_skaterunit);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blimp2", 0, 0, PointFromId(6));
        lv_blimp = UnitLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_evacpoint), c_orderQueueReplace);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        SoundPlay(SoundLink("SS_TerraTronBeamChargeUp", -1), PlayerGroupAll(), 200.0, 0.0);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        UnitSetHeight(lv_skaterunit, 11.0, 3.0);
        UnitSetHeight(lv_stickunit, 11.0, 3.0);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        libNtve_gf_CreateModelAtPoint("MedivacHealBeamUpgrade", lv_evacpoint);
        lv_beam = libNtve_gf_ActorLastCreated();
        ActorSend(lv_beam, "SetScale 4.000000,1.500000,4.000000");
        ActorSend(lv_beam, "HostSiteOpsSet ::Host SOpPointUpWorld");
        ActorSend(lv_beam, "SetTintColor {0,221,0 2.000000}");
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        Wait(3.0, c_timeGame);
    }

    if ((UnitIsAlive(lv_blimp) == true)) {
        UnitSetHeight(lv_blimp, 50.0, 5.0);
    }

    if ((lv_beam != null)) {
        ActorSend(lv_beam, "Destroy");
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        SoundPlay(SoundLink("ColonistShip_Load", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundPlay(SoundLink("Mothership_Movement", -1), PlayerGroupAll(), 200.0, 0.0);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lv_skaterunit), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(lv_stickunit), false);
        TextTagShow(gv_TextTags[UnitGetOwner(gv_Skaters[lp_skaternumber])], PlayerGroupAll(), false);
    }

    if ((UnitIsAlive(lv_skaterunit) == true)) {
        Wait(5.0, c_timeGame);
    }

    if ((UnitIsAlive(lv_blimp) == true)) {
        UnitRemove(lv_blimp);
    }

    return true;
}

void gf_SeperateUnits (unit lp_Unit1, unit lp_Unit2) {
    // Variable Declarations

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_PuckBounceBool == false)) {
        if ((UnitGetType(lp_Unit2) == "DestructibleWallStraightVertical")) {
            UnitSetCustomValue(lp_Unit1, 0, (.85*AbsF(UnitGetCustomValue(lp_Unit1, 0))));
            gv_PuckBounceBool = true;
            if ((lp_Unit1 == gv_pUCK)) {
                PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
                SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(lp_Unit1, 0), UnitGetCustomValue(lp_Unit1, 1), UnitGetCustomValue(lp_Unit1, 2))*40), 0.0);
            }

        }

        if ((UnitGetType(lp_Unit2) == "DestructibleWallVerticalLF")) {
            UnitSetCustomValue(lp_Unit1, 0, (-.85*AbsF(UnitGetCustomValue(lp_Unit1, 0))));
            gv_PuckBounceBool = true;
            if ((lp_Unit1 == gv_pUCK)) {
                PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
                SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(lp_Unit1, 0), UnitGetCustomValue(lp_Unit1, 1), UnitGetCustomValue(lp_Unit1, 2))*40), 0.0);
            }

        }

    }

    if ((gv_PuckBounceBool2 == false)) {
        if ((UnitGetType(lp_Unit2) == "DestructibleWallStraightHorizontal")) {
            UnitSetCustomValue(lp_Unit1, 1, (-.85*AbsF(UnitGetCustomValue(lp_Unit1, 1))));
            gv_PuckBounceBool2 = true;
            if ((lp_Unit1 == gv_pUCK)) {
                PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
                SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(lp_Unit1, 0), UnitGetCustomValue(lp_Unit1, 1), UnitGetCustomValue(lp_Unit1, 2))*40), 0.0);
            }

        }

        if ((UnitGetType(lp_Unit2) == "DestructibleWallStraightHorizontalBF")) {
            UnitSetCustomValue(lp_Unit1, 1, (.85*AbsF(UnitGetCustomValue(lp_Unit1, 1))));
            gv_PuckBounceBool2 = true;
            if ((lp_Unit1 == gv_pUCK)) {
                PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
                SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(lp_Unit1, 0), UnitGetCustomValue(lp_Unit1, 1), UnitGetCustomValue(lp_Unit1, 2))*40), 0.0);
            }

        }

    }

}

void gf_CollideBounce (unit lp_Object1, unit lp_Object2) {
    // Variable Declarations
    fixed lv_ImpulseX;
    fixed lv_ImpulseY;
    fixed lv_NormalX;
    fixed lv_NormalY;
    fixed lv_localmag;
    fixed lv_VelocityDiffX;
    fixed lv_VelocityDiffY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_NormalX = (PointGetX(UnitGetPosition(lp_Object2))-PointGetX(UnitGetPosition(lp_Object1)));
    lv_NormalY = (PointGetY(UnitGetPosition(lp_Object2))-PointGetY(UnitGetPosition(lp_Object1)));
    lv_localmag = gf_VectorMagnitude(lv_NormalX, lv_NormalY, 1.0);
    lv_VelocityDiffX = (UnitGetCustomValue(lp_Object1, 0)-UnitGetCustomValue(lp_Object2, 0));
    lv_VelocityDiffY = (UnitGetCustomValue(lp_Object1, 1)-UnitGetCustomValue(lp_Object2, 1));

    // Implementation
    gf_SeperateUnits(lp_Object1, lp_Object2);
}

trigger auto_gf_CheckIfCanPossess_Trigger = null;
int auto_gf_CheckIfCanPossess_lp_player;
bool auto_gf_CheckIfCanPossess_lp_oneTimer;

void gf_CheckIfCanPossess (int lp_player, bool lp_oneTimer) {
    auto_gf_CheckIfCanPossess_lp_player = lp_player;
    auto_gf_CheckIfCanPossess_lp_oneTimer = lp_oneTimer;

    if (auto_gf_CheckIfCanPossess_Trigger == null) {
        auto_gf_CheckIfCanPossess_Trigger = TriggerCreate("auto_gf_CheckIfCanPossess_TriggerFunc");
    }

    TriggerExecute(auto_gf_CheckIfCanPossess_Trigger, false, false);
}

bool auto_gf_CheckIfCanPossess_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CheckIfCanPossess_lp_player;
    bool lp_oneTimer = auto_gf_CheckIfCanPossess_lp_oneTimer;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto74EF23DC_ae = 17;
    const int auto74EF23DC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto74EF23DC_ai >= 0 && lv_i <= auto74EF23DC_ae) || (auto74EF23DC_ai < 0 && lv_i >= auto74EF23DC_ae) ) ; lv_i += auto74EF23DC_ai ) {
        Wait(0.0, c_timeGame);
        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionCircle(UnitGetPosition(gv_Skaters[lp_player]), 0.95)) == true) && (gv_puckMagnitude <= 1.0) && (lp_oneTimer == false)) {
            gv_Shoot[lp_player] = false;
        }

        if ((gv_Shoot[lp_player] == false)) {
            return true;
        }

    }
    gv_Shoot[lp_player] = false;
    return true;
}

bool gf_PuckWillScore (fixed lp_x, fixed lp_y, int lp_netred1blue2) {
    // Variable Declarations
    fixed lv_m;
    fixed lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_m = (UnitGetCustomValue(gv_pUCK, 1) / UnitGetCustomValue(gv_pUCK, 0));

    // Implementation
    lv_b = (lp_y-(lv_m*lp_x));
    if ((((lp_netred1blue2 == 1) && (((lv_m * 77.0) + lv_b) >= 108.0) && (((lv_m * 77.0) + lv_b) <= 118.0)) || ((lp_netred1blue2 == 2) && (((lv_m * 179.3) + lv_b) >= 106.0) && (((lv_m * 179.3) + lv_b) <= 116.0)))) {
        return true;
    }
    else {
        return false;
    }
}

fixed gf_CalculateBounceAngleMovingCircleOnPost (unit lp_movingCircle, fixed lp_movingCircleVelocityAngle, region lp_stationaryObjectRegion, string lp_stationaryObjectShape) {
    // Variable Declarations
    fixed lv_bisectionAngle;
    fixed lv_bisectedAngleOfVelocity;
    fixed lv_resultantAngleOfVelocity;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_stationaryObjectShape == "circle")) {
        lv_bisectionAngle = AngleBetweenPoints(UnitGetPosition(lp_movingCircle), RegionGetCenter(lp_stationaryObjectRegion));
    }
    else {
        if ((lp_stationaryObjectShape == "horizantalrect")) {
            lv_bisectionAngle = ((FloorI((AngleBetweenPoints(UnitGetPosition(lp_movingCircle), RegionGetCenter(lp_stationaryObjectRegion)) / 180.0)) * 180.0) + 90.0);
        }
        else {
            if ((lp_stationaryObjectShape == "verticalrect")) {
                lv_bisectionAngle = (FloorI(((AngleBetweenPoints(UnitGetPosition(lp_movingCircle), RegionGetCenter(lp_stationaryObjectRegion)) + 90.0) / 180.0)) * 180.0);
            }
            else {
                if ((lp_stationaryObjectShape == "curvedboards")) {
                    lv_bisectionAngle = AngleBetweenPoints(UnitGetPosition(lp_movingCircle), RegionGetCenter(lp_stationaryObjectRegion));
                    lv_bisectedAngleOfVelocity = (lv_bisectionAngle + (lv_bisectionAngle - (lp_movingCircleVelocityAngle * 1.0)));
                    lv_resultantAngleOfVelocity = (lv_bisectedAngleOfVelocity + 180.0);
                    return lv_resultantAngleOfVelocity;
                }

            }
        }
    }
    lv_bisectedAngleOfVelocity = (lv_bisectionAngle + (lv_bisectionAngle - lp_movingCircleVelocityAngle));
    lv_resultantAngleOfVelocity = (lv_bisectedAngleOfVelocity + 180.0);
    return lv_resultantAngleOfVelocity;
}

void gf_BoardsBounce (unit lp_movingCircle, string lp_stationaryObjectShape) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_stationaryObjectShape == "horizantalrect")) {
        UnitSetCustomValue(lp_movingCircle, 1, ((-1.0 * UnitGetCustomValue(lp_movingCircle, 1)) * gv_bOARDS_ELASTICITY_FACTOR));
        if ((AbsF(UnitGetCustomValue(lp_movingCircle, 1)) < 0.1)) {
            if ((UnitGetCustomValue(lp_movingCircle, 1) < 0.0)) {
                if (((UnitBehaviorEnabled(lp_movingCircle, "SlideStop") == true) || ((UnitGetOwner(lp_movingCircle) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(lp_movingCircle) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                    UnitSetCustomValue(lp_movingCircle, 1, (-1.0 * 0.25));
                }
                else {
                    UnitSetCustomValue(lp_movingCircle, 1, (-1.0 * 0.15));
                }
            }
            else {
                if (((UnitBehaviorEnabled(lp_movingCircle, "SlideStop") == true) || ((UnitGetOwner(lp_movingCircle) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(lp_movingCircle) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                    UnitSetCustomValue(lp_movingCircle, 1, 0.25);
                }
                else {
                    UnitSetCustomValue(lp_movingCircle, 1, 0.1);
                }
            }
        }

    }
    else {
        if ((lp_stationaryObjectShape == "verticalrect")) {
            UnitSetCustomValue(lp_movingCircle, 0, ((-1.0 * UnitGetCustomValue(lp_movingCircle, 0)) * gv_bOARDS_ELASTICITY_FACTOR));
            if ((AbsF(UnitGetCustomValue(lp_movingCircle, 0)) < 0.1)) {
                if ((UnitGetCustomValue(lp_movingCircle, 0) < 0.0)) {
                    if (((UnitBehaviorEnabled(lp_movingCircle, "SlideStop") == true) || ((UnitGetOwner(lp_movingCircle) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(lp_movingCircle) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                        UnitSetCustomValue(lp_movingCircle, 0, (-1.0 * 0.25));
                    }
                    else {
                        UnitSetCustomValue(lp_movingCircle, 0, (-1.0 * 0.1));
                    }
                }
                else {
                    if (((UnitBehaviorEnabled(lp_movingCircle, "SlideStop") == true) || ((UnitGetOwner(lp_movingCircle) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(lp_movingCircle) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                        UnitSetCustomValue(lp_movingCircle, 0, 0.25);
                    }
                    else {
                        UnitSetCustomValue(lp_movingCircle, 0, 0.1);
                    }
                }
            }

        }

    }
}

fixed gf_ConvertOffsetToPolarOffsetMagnitutude (fixed lp_Object1, fixed lp_Object2) {
    // Automatic Variable Declarations
    // Implementation
    return SquareRoot((Pow(lp_Object1, 2.0) + Pow(lp_Object2, 2.0)));
}

fixed gf_ConvertOffsetToPolarOffsetAngle (fixed lp_Object1, fixed lp_Object2) {
    // Variable Declarations
    fixed lv_alpha;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_alpha = ATan2(AbsF(lp_Object2), AbsF(lp_Object1));
    if ((lp_Object1 >= 0.0) && (lp_Object2 >= 0.0)) {
        return lv_alpha;
    }
    else {
        if ((lp_Object1 < 0.0) && (lp_Object2 >= 0.0)) {
            return (180.0 - lv_alpha);
        }
        else {
            if ((lp_Object1 < 0.0) && (lp_Object2 < 0.0)) {
                return (180.0 + lv_alpha);
            }
            else {
                if ((lp_Object1 >= 0.0) && (lp_Object2 < 0.0)) {
                    return (360.0 - lv_alpha);
                }

            }
        }
    }
    return 0.0;
}

void gf_Collision (unit lp_Object1, unit lp_Object2) {
    // Automatic Variable Declarations
    // Implementation
    gf_CollideBounce(lp_Object1, lp_Object2);
}

fixed gf_VectorMagnitude (fixed lp_VectorX, fixed lp_VectorY, fixed lp_VectorZ) {
    // Automatic Variable Declarations
    // Implementation
    return SquareRoot((Pow(lp_VectorX, 2.0)+Pow(lp_VectorY, 2.0)+Pow(lp_VectorZ, 2.0)));
}

fixed gf_VectorMagnitude2 (fixed lp_VectorX, fixed lp_VectorY, fixed lp_VectorZ) {
    // Automatic Variable Declarations
    // Implementation
    return (Pow(lp_VectorX, 2.0)+Pow(lp_VectorY, 2.0)+Pow(lp_VectorZ, 2.0));
}

void gf_ApplyForceCartesian (unit lp_Victim, fixed lp_ForceX, fixed lp_ForceY) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_Victim, 0, (UnitGetCustomValue(lp_Victim, 0)+lp_ForceX/UnitGetCustomValue(lp_Victim, 4)));
    UnitSetCustomValue(lp_Victim, 1, (UnitGetCustomValue(lp_Victim, 1)+lp_ForceY/UnitGetCustomValue(lp_Victim, 4)));
}

void gf_ApplyForcePolar (unit lp_Victim, fixed lp_Force, fixed lp_Angle) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_Victim, 0, (UnitGetCustomValue(lp_Victim, 0)+(lp_Force/UnitGetCustomValue(lp_Victim, 4))*Cos(lp_Angle)));
    UnitSetCustomValue(lp_Victim, 1, (UnitGetCustomValue(lp_Victim, 1)+(lp_Force/UnitGetCustomValue(lp_Victim, 4))*Sin(lp_Angle)));
}

void gf_ApplyForcePolarNoMomentum (unit lp_Victim, fixed lp_Force, fixed lp_Angle) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_Victim, 0, ((lp_Force/UnitGetCustomValue(lp_Victim, 4))*Cos(lp_Angle)));
    UnitSetCustomValue(lp_Victim, 1, ((lp_Force/UnitGetCustomValue(lp_Victim, 4))*Sin(lp_Angle)));
}

void gf_CancelWrap () {
    // Automatic Variable Declarations
    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_NotWrapping;
}

point gf_ReturnIntersectingPoint (point lp_endPoint, point lp_startPoint, region lp_curvedRegion) {
    // Variable Declarations
    fixed lv_incrementalDistance;
    fixed lv_angle;
    int lv_int;
    bool lv_found;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_incrementalDistance = (DistanceBetweenPoints(lp_startPoint, lp_endPoint) / 10.0);
    lv_angle = AngleBetweenPoints(lp_startPoint, lp_endPoint);
    while ((lv_int < 11)) {
        if ((RegionContainsPoint(lp_curvedRegion, PointWithOffsetPolar(lp_startPoint, (lv_int * lv_incrementalDistance), lv_angle)) == true)) {
            return PointWithOffsetPolar(lp_startPoint, (lv_int * lv_incrementalDistance), lv_angle);
            break;
        }

        lv_int += 1;
    }
    return lp_endPoint;
}

point gf_WrapPointTopLeftClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.82;
    lv_circley = 125.06;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_TopLeftClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle += (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle > 10.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (lv_x - PointGetX(UnitGetPosition(gv_pUCK))));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_WrapPointTopLeftCounterClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.82;
    lv_circley = 125.06;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_TopLeftCounterClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle -= (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle > 200.0) && (lv_angle < 270.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, 0.05);
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_ReturnTheoreticalPointTopLeft (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.82;
    lv_circley = 125.06;
    lv_radius = 18.87;

    // Implementation
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    if ((lp_rotateClockwise == true)) {
        lv_angle -= ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    else {
        lv_angle += ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    return lv_finalpoint;
}

int gf_CheckWrappingConditionsTopLeft (point lp_interpolationPoint) {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_circlex;
    fixed lv_circley;
    int lv_finaloutput;
    point lv_proximityPointClockwise;
    point lv_proximityPointCounterClockwise;
    bool lv_puckshouldwrapclockwise;
    point lv_theoreticalBouncePoint;
    point lv_proximityPointPuckBackoneStep;
    fixed lv_theoreticalBounceangle;
    fixed lv_theoreticalPuckAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.82;
    lv_circley = 125.06;

    // Implementation
    if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
        lv_theoreticalBouncePoint = PointWithOffsetPolar(lp_interpolationPoint, gv_puckMagnitude, AngleBetweenPoints(lp_interpolationPoint, PointReflect(UnitGetPosition(gv_pUCK), lp_interpolationPoint, AngleBetweenPoints(lp_interpolationPoint, Point(lv_circlex, lv_circley)))));
        lv_theoreticalBounceangle = AngleBetweenPoints(lp_interpolationPoint, lv_theoreticalBouncePoint);
        lv_theoreticalPuckAngle = gv_puckAngle;
        if ((lv_theoreticalBounceangle < 0.0)) {
            lv_theoreticalBounceangle += 360.0;
        }

        if ((lv_theoreticalPuckAngle < 0.0)) {
            lv_theoreticalPuckAngle += 360.0;
        }

        if ((AbsF((lv_theoreticalPuckAngle - lv_theoreticalBounceangle)) < gv_puckWrapping.lv_maxWrapAngle)) {
            lv_proximityPointClockwise = gf_ReturnTheoreticalPointTopLeft(0.5, lp_interpolationPoint, true);
            lv_proximityPointCounterClockwise = gf_ReturnTheoreticalPointTopLeft(0.5, lp_interpolationPoint, false);
            lv_proximityPointPuckBackoneStep = PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 1.0, (gv_puckAngle - 180.0));
            if ((DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointClockwise) < DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointCounterClockwise))) {
                lv_puckshouldwrapclockwise = false;
            }
            else {
                lv_puckshouldwrapclockwise = true;
            }
            if ((lv_puckshouldwrapclockwise == true)) {
                lv_finaloutput = ge_WrappingDirection_TopLeftClockwise;
            }
            else {
                if ((lv_puckshouldwrapclockwise == false)) {
                    lv_finaloutput = ge_WrappingDirection_TopLeftCounterClockwise;
                }

            }
        }
        else {
            lv_finaloutput = ge_WrappingDirection_NotWrapping;
        }
    }
    else {
        lv_finaloutput = gv_puckWrapping.lv_puckisWrapping;
    }
    return lv_finaloutput;
}

point gf_WrapPointBottomLeftClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.75;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_BottomLeftClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle += (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle > -90.5) && (lv_angle < 0.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, 0.05);
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_WrapPointBottomLeftCounterClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.75;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_BottomLeftCounterClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle -= (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle < 170.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (lv_x - PointGetX(UnitGetPosition(gv_pUCK))));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_ReturnTheoreticalPointBottomLeft (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.75;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    if ((lp_rotateClockwise == true)) {
        lv_angle -= ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    else {
        lv_angle += ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    return lv_finalpoint;
}

int gf_CheckWrappingConditionsBottomLeft (point lp_interpolationPoint) {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_circlex;
    fixed lv_circley;
    int lv_finaloutput;
    point lv_proximityPointClockwise;
    point lv_proximityPointCounterClockwise;
    bool lv_puckshouldwrapclockwise;
    point lv_theoreticalBouncePoint;
    point lv_proximityPointPuckBackoneStep;
    fixed lv_theoreticalBounceangle;
    fixed lv_theoreticalPuckAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 76.75;
    lv_circley = 97.95;

    // Implementation
    if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
        lv_theoreticalBouncePoint = PointWithOffsetPolar(lp_interpolationPoint, gv_puckMagnitude, AngleBetweenPoints(lp_interpolationPoint, PointReflect(UnitGetPosition(gv_pUCK), lp_interpolationPoint, AngleBetweenPoints(lp_interpolationPoint, Point(lv_circlex, lv_circley)))));
        lv_theoreticalBounceangle = AngleBetweenPoints(lp_interpolationPoint, lv_theoreticalBouncePoint);
        lv_theoreticalPuckAngle = gv_puckAngle;
        if ((lv_theoreticalBounceangle < 0.0)) {
            lv_theoreticalBounceangle += 360.0;
        }

        if ((lv_theoreticalPuckAngle < 0.0)) {
            lv_theoreticalPuckAngle += 360.0;
        }

        if ((AbsF((lv_theoreticalPuckAngle - lv_theoreticalBounceangle)) < gv_puckWrapping.lv_maxWrapAngle)) {
            lv_proximityPointClockwise = gf_ReturnTheoreticalPointBottomLeft(0.5, lp_interpolationPoint, true);
            lv_proximityPointCounterClockwise = gf_ReturnTheoreticalPointBottomLeft(0.5, lp_interpolationPoint, false);
            lv_proximityPointPuckBackoneStep = PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 1.0, (gv_puckAngle - 180.0));
            if ((DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointClockwise) < DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointCounterClockwise))) {
                lv_puckshouldwrapclockwise = false;
            }
            else {
                lv_puckshouldwrapclockwise = true;
            }
            if ((lv_puckshouldwrapclockwise == true)) {
                lv_finaloutput = ge_WrappingDirection_BottomLeftClockwise;
            }
            else {
                if ((lv_puckshouldwrapclockwise == false)) {
                    lv_finaloutput = ge_WrappingDirection_BottomLeftCounterClockwise;
                }

            }
        }
        else {
            lv_finaloutput = ge_WrappingDirection_NotWrapping;
        }
    }
    else {
        lv_finaloutput = gv_puckWrapping.lv_puckisWrapping;
    }
    return lv_finaloutput;
}

point gf_WrapPointBottomRightClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.16;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_BottomRightClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle += (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle > 190.0) && (lv_angle < 250.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (lv_x - PointGetX(UnitGetPosition(gv_pUCK))));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_WrapPointBottomRightCounterClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.16;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_BottomRightCounterClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle -= (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle < 89.5) && (lv_angle > 0.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (0.05 * -1.0));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_ReturnTheoreticalPointBottomRight (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.16;
    lv_circley = 97.95;
    lv_radius = 18.87;

    // Implementation
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    if ((lp_rotateClockwise == true)) {
        lv_angle -= ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    else {
        lv_angle += ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    return lv_finalpoint;
}

int gf_CheckWrappingConditionsBottomRight (point lp_interpolationPoint) {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_circlex;
    fixed lv_circley;
    int lv_finaloutput;
    point lv_proximityPointClockwise;
    point lv_proximityPointCounterClockwise;
    bool lv_puckshouldwrapclockwise;
    point lv_theoreticalBouncePoint;
    point lv_proximityPointPuckBackoneStep;
    fixed lv_theoreticalBounceangle;
    fixed lv_theoreticalPuckAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.16;
    lv_circley = 97.95;

    // Implementation
    if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
        lv_theoreticalBouncePoint = PointWithOffsetPolar(lp_interpolationPoint, gv_puckMagnitude, AngleBetweenPoints(lp_interpolationPoint, PointReflect(UnitGetPosition(gv_pUCK), lp_interpolationPoint, AngleBetweenPoints(lp_interpolationPoint, Point(lv_circlex, lv_circley)))));
        lv_theoreticalBounceangle = AngleBetweenPoints(lp_interpolationPoint, lv_theoreticalBouncePoint);
        lv_theoreticalPuckAngle = gv_puckAngle;
        if ((lv_theoreticalBounceangle < 0.0)) {
            lv_theoreticalBounceangle += 360.0;
        }

        if ((lv_theoreticalPuckAngle < 0.0)) {
            lv_theoreticalPuckAngle += 360.0;
        }

        if ((AbsF((lv_theoreticalPuckAngle - lv_theoreticalBounceangle)) < gv_puckWrapping.lv_maxWrapAngle)) {
            lv_proximityPointClockwise = gf_ReturnTheoreticalPointBottomRight(0.5, lp_interpolationPoint, true);
            lv_proximityPointCounterClockwise = gf_ReturnTheoreticalPointBottomRight(0.5, lp_interpolationPoint, false);
            lv_proximityPointPuckBackoneStep = PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 1.0, (gv_puckAngle - 180.0));
            if ((DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointClockwise) < DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointCounterClockwise))) {
                lv_puckshouldwrapclockwise = false;
            }
            else {
                lv_puckshouldwrapclockwise = true;
            }
            if ((lv_puckshouldwrapclockwise == true)) {
                lv_finaloutput = ge_WrappingDirection_BottomRightClockwise;
            }
            else {
                if ((lv_puckshouldwrapclockwise == false)) {
                    lv_finaloutput = ge_WrappingDirection_BottomRightCounterClockwise;
                }

            }
        }
        else {
            lv_finaloutput = ge_WrappingDirection_NotWrapping;
        }
    }
    else {
        lv_finaloutput = gv_puckWrapping.lv_puckisWrapping;
    }
    return lv_finaloutput;
}

point gf_WrapPointTopRightClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.15;
    lv_circley = 125.07;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_TopRightClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle += (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle > 90.5)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (0.05 * -1.0));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_WrapPointTopRightCounterClockwise (fixed lp_speed, point lp_startposition) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.15;
    lv_circley = 125.07;
    lv_radius = 18.87;

    // Implementation
    gv_puckWrapping.lv_puckisWrapping = ge_WrappingDirection_TopRightCounterClockwise;
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_angle -= (lp_speed * 3.14);
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    if ((lv_angle < -10.0)) {
        gf_CancelWrap();
        UnitSetCustomValue(gv_pUCK, 0, (lv_x - PointGetX(UnitGetPosition(gv_pUCK))));
        UnitSetCustomValue(gv_pUCK, 1, (lv_y - PointGetY(UnitGetPosition(gv_pUCK))));
    }

    return lv_finalpoint;
}

point gf_ReturnTheoreticalPointTopRight (fixed lp_speed, point lp_startposition, bool lp_rotateClockwise) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_circlex;
    fixed lv_circley;
    fixed lv_radius;
    fixed lv_angle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.15;
    lv_circley = 125.07;
    lv_radius = 18.87;

    // Implementation
    lv_angle = AngleBetweenPoints(Point(lv_circlex, lv_circley), lp_startposition);
    if ((lp_rotateClockwise == true)) {
        lv_angle -= ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    else {
        lv_angle += ACos((1.0 - (((lp_speed / lv_radius) * (lp_speed / lv_radius)) / 2.0)));
    }
    lv_angle += 90.0;
    lv_angle -= ((lv_angle - 180.0) * 2.0);
    lv_angle -= 180.0;
    lv_x = (lv_circlex + (Sin(lv_angle) * lv_radius));
    lv_y = (lv_circley + (Cos(lv_angle) * lv_radius));
    lv_finalpoint = Point(lv_x, lv_y);
    return lv_finalpoint;
}

int gf_CheckWrappingConditionsTopRight (point lp_interpolationPoint) {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_circlex;
    fixed lv_circley;
    int lv_finaloutput;
    point lv_proximityPointClockwise;
    point lv_proximityPointCounterClockwise;
    bool lv_puckshouldwrapclockwise;
    point lv_theoreticalBouncePoint;
    point lv_proximityPointPuckBackoneStep;
    fixed lv_theoreticalBounceangle;
    fixed lv_theoreticalPuckAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_circlex = 179.15;
    lv_circley = 125.07;

    // Implementation
    if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
        lv_theoreticalBouncePoint = PointWithOffsetPolar(lp_interpolationPoint, gv_puckMagnitude, AngleBetweenPoints(lp_interpolationPoint, PointReflect(UnitGetPosition(gv_pUCK), lp_interpolationPoint, AngleBetweenPoints(lp_interpolationPoint, Point(lv_circlex, lv_circley)))));
        lv_theoreticalBounceangle = AngleBetweenPoints(lp_interpolationPoint, lv_theoreticalBouncePoint);
        lv_theoreticalPuckAngle = gv_puckAngle;
        if ((lv_theoreticalBounceangle < 0.0)) {
            lv_theoreticalBounceangle += 360.0;
        }

        if ((lv_theoreticalPuckAngle < 0.0)) {
            lv_theoreticalPuckAngle += 360.0;
        }

        if ((lv_theoreticalPuckAngle < 20.0) && (lv_theoreticalPuckAngle >= 0.0) && (lv_theoreticalBounceangle > 300.0)) {
            lv_theoreticalPuckAngle += 360.0;
        }

        if ((AbsF((lv_theoreticalPuckAngle - lv_theoreticalBounceangle)) < gv_puckWrapping.lv_maxWrapAngle)) {
            lv_proximityPointClockwise = gf_ReturnTheoreticalPointTopRight(0.5, lp_interpolationPoint, true);
            lv_proximityPointCounterClockwise = gf_ReturnTheoreticalPointTopRight(0.5, lp_interpolationPoint, false);
            lv_proximityPointPuckBackoneStep = PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 1.0, (gv_puckAngle - 180.0));
            if ((DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointClockwise) < DistanceBetweenPoints(lv_proximityPointPuckBackoneStep, lv_proximityPointCounterClockwise))) {
                lv_puckshouldwrapclockwise = false;
            }
            else {
                lv_puckshouldwrapclockwise = true;
            }
            if ((lv_puckshouldwrapclockwise == true)) {
                lv_finaloutput = ge_WrappingDirection_TopRightClockwise;
            }
            else {
                if ((lv_puckshouldwrapclockwise == false)) {
                    lv_finaloutput = ge_WrappingDirection_TopRightCounterClockwise;
                }

            }
        }
        else {
            lv_finaloutput = ge_WrappingDirection_NotWrapping;
        }
    }
    else {
        lv_finaloutput = gv_puckWrapping.lv_puckisWrapping;
    }
    return lv_finaloutput;
}

point gf_CheckSkaterCollision (unit lp_unit) {
    // Variable Declarations
    point lv_playerPos;
    point lv_tempPos;
    fixed lv_playerX;
    fixed lv_playerY;
    fixed lv_dx;
    fixed lv_dy;
    int lv_i;
    fixed lv_dx_step;
    fixed lv_dy_step;
    fixed lv_circleForce;
    region lv_collidedZone;
    region lv_approachZone;
    fixed lv_wallAngleMultiplier;
    int lv_necessarySteps;
    fixed lv_angleoftravel;
    point lv_previouspoint;
    point lv_futurepoint;
    point lv_theoreticalbouncepoint;
    fixed lv_currentspeed;
    bool lv_forceunitouttopleft;
    bool lv_forceunitoutbotleft;
    bool lv_forceunitoutbotright;
    bool lv_forceunitouttopright;

    // Automatic Variable Declarations
    int auto615C26D1_ae;
    const int auto615C26D1_ai = 1;

    // Variable Initialization

    // Implementation
    lv_dx = UnitGetCustomValue(lp_unit, 0);
    lv_dy = UnitGetCustomValue(lp_unit, 1);
    lv_playerPos = PointWithOffset(UnitGetPosition(lp_unit), lv_dx, lv_dy);
    lv_playerX = PointGetX(lv_playerPos);
    lv_playerY = PointGetY(lv_playerPos);
    if ((lv_dx == 0.0) && (lv_dy == 0.0)) {
        lv_necessarySteps = 1;
    }
    else {
        lv_necessarySteps = 10;
    }
    if ((lv_dx < 0.0)) {
        lv_dx_step = ((lv_dx * 0.1) * -1.0);
    }
    else {
        lv_dx_step = (lv_dx * -0.1);
    }
    if ((lv_dy < 0.0)) {
        lv_dy_step = ((lv_dy * 0.1) * -1.0);
    }
    else {
        lv_dy_step = (lv_dy * -0.1);
    }
    auto615C26D1_ae = lv_necessarySteps;
    lv_i = 1;
    for ( ; ( (auto615C26D1_ai >= 0 && lv_i <= auto615C26D1_ae) || (auto615C26D1_ai < 0 && lv_i >= auto615C26D1_ae) ) ; lv_i += auto615C26D1_ai ) {
        if ((RegionContainsPoint(RegionFromId(68), lv_playerPos) == true) && (gv_roundedRinkEnabled == true)) {
            lv_collidedZone = RegionFromId(68);
            if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(68)) == true) && (RegionContainsPoint(RegionFromId(68), lv_playerPos) == true)) {
                lv_forceunitouttopleft = true;
            }

        }
        else {
            if ((RegionContainsPoint(RegionFromId(69), lv_playerPos) == true) && (gv_roundedRinkEnabled == true)) {
                lv_collidedZone = RegionFromId(69);
                if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(69)) == true) && (RegionContainsPoint(RegionFromId(69), lv_playerPos) == true)) {
                    lv_forceunitoutbotleft = true;
                }

            }
            else {
                if ((RegionContainsPoint(RegionFromId(70), lv_playerPos) == true) && (gv_roundedRinkEnabled == true)) {
                    lv_collidedZone = RegionFromId(70);
                    if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(70)) == true) && (RegionContainsPoint(RegionFromId(70), lv_playerPos) == true)) {
                        lv_forceunitoutbotright = true;
                    }

                }
                else {
                    if ((RegionContainsPoint(RegionFromId(71), lv_playerPos) == true) && (gv_roundedRinkEnabled == true)) {
                        lv_collidedZone = RegionFromId(71);
                        if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(71)) == true) && (RegionContainsPoint(RegionFromId(71), lv_playerPos) == true)) {
                            lv_forceunitouttopright = true;
                        }

                    }

                }
            }
        }
        if ((lv_collidedZone == null) && (lv_dy > 0.0) && (lv_playerY > gv_rINK_CENTER_Y)) {
            if ((RegionContainsPoint(RegionFromId(26), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(26);
            }

        }

        if ((lv_collidedZone == null) && (lv_dy < 0.0) && (lv_playerY < gv_rINK_CENTER_Y)) {
            if ((RegionContainsPoint(RegionFromId(28), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(28);
            }

        }

        if ((lv_collidedZone == null) && (lv_dx < 0.0) && (lv_playerX < gv_rINK_CENTER_X)) {
            if ((RegionContainsPoint(RegionFromId(25), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(25);
            }

        }

        if ((lv_collidedZone == null) && (lv_dx > 0.0) && (lv_playerX > gv_rINK_CENTER_X)) {
            if ((RegionContainsPoint(RegionFromId(27), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(27);
            }

        }

        if ((lv_collidedZone == null) && (UnitGetOwner(lp_unit) != gv_Players[2]) && (gv_goalieBlocking[gv_Players[2]] == true)) {
            if ((RegionContainsPoint(RegionFromId(22), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(22);
            }

        }

        if ((lv_collidedZone == null) && (UnitGetOwner(lp_unit) != gv_Players[6]) && (gv_goalieBlocking[gv_Players[6]] == true)) {
            if ((RegionContainsPoint(RegionFromId(23), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(23);
            }

        }

        if ((lv_collidedZone == null)) {
            if ((RegionContainsPoint(RegionFromId(85), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(85);
            }

        }

        if ((lv_collidedZone == null)) {
            if ((RegionContainsPoint(RegionFromId(86), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(86);
            }

        }

        if ((lv_collidedZone == null) && (lv_playerX < gv_rINK_CENTER_X)) {
            if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true)) && ((UnitGetOwner(lp_unit) != gv_Players[2]) || ((UnitGetOwner(lp_unit) == gv_Players[2]) && (gv_pullGoalie[1] == true))) && (RegionContainsPoint(RegionFromId(13), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(13);
                if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(49)) == true)) {
                    lv_approachZone = RegionFromId(49);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(52)) == true)) {
                        lv_approachZone = RegionFromId(52);
                    }

                }
            }

            if (((ModI(gv_Period, 2) != 1) && (gv_Shootout == false)) && ((UnitGetOwner(lp_unit) != gv_Players[6]) || ((UnitGetOwner(lp_unit) == gv_Players[6]) && (gv_pullGoalie[2] == true))) && (RegionContainsPoint(RegionFromId(13), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(13);
                if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(49)) == true)) {
                    lv_approachZone = RegionFromId(49);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(52)) == true)) {
                        lv_approachZone = RegionFromId(52);
                    }

                }
            }

            if ((lv_collidedZone == null) && (RegionContainsPoint(RegionFromId(45), lv_playerPos) == true)) {
                if ((RegionContainsPoint(RegionFromId(47), lv_playerPos) == true)) {
                    lv_collidedZone = RegionFromId(47);
                }
                else {
                    if ((RegionContainsPoint(RegionFromId(48), lv_playerPos) == true)) {
                        lv_collidedZone = RegionFromId(48);
                    }
                    else {
                        if ((RegionContainsPoint(RegionFromId(17), lv_playerPos) == true)) {
                            lv_collidedZone = RegionFromId(17);
                        }
                        else {
                            if ((RegionContainsPoint(RegionFromId(39), lv_playerPos) == true)) {
                                lv_collidedZone = RegionFromId(39);
                            }
                            else {
                                if ((RegionContainsPoint(RegionFromId(24), lv_playerPos) == true)) {
                                    lv_collidedZone = RegionFromId(24);
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(16), lv_playerPos) == true)) {
                                        lv_collidedZone = RegionFromId(16);
                                    }
                                    else {
                                        if ((RegionContainsPoint(RegionFromId(5), lv_playerPos) == true)) {
                                            lv_collidedZone = RegionFromId(5);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        if ((lv_collidedZone == null) && (lv_playerX > gv_rINK_CENTER_X)) {
            if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true)) && ((UnitGetOwner(lp_unit) != gv_Players[6]) || ((UnitGetOwner(lp_unit) == gv_Players[6]) && (gv_pullGoalie[2] == true))) && (RegionContainsPoint(RegionFromId(14), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(14);
                if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(53)) == true)) {
                    lv_approachZone = RegionFromId(53);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(54)) == true)) {
                        lv_approachZone = RegionFromId(54);
                    }

                }
            }

            if (((ModI(gv_Period, 2) != 1) && (gv_Shootout == false)) && ((UnitGetOwner(lp_unit) != gv_Players[2]) || ((UnitGetOwner(lp_unit) == gv_Players[2]) && (gv_pullGoalie[1] == true))) && (RegionContainsPoint(RegionFromId(14), lv_playerPos) == true)) {
                lv_collidedZone = RegionFromId(14);
                if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(53)) == true)) {
                    lv_approachZone = RegionFromId(53);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(lp_unit, RegionFromId(54)) == true)) {
                        lv_approachZone = RegionFromId(54);
                    }

                }
            }

            if ((lv_collidedZone == null) && (RegionContainsPoint(RegionFromId(46), lv_playerPos) == true)) {
                if ((RegionContainsPoint(RegionFromId(55), lv_playerPos) == true)) {
                    lv_collidedZone = RegionFromId(55);
                }
                else {
                    if ((RegionContainsPoint(RegionFromId(50), lv_playerPos) == true)) {
                        lv_collidedZone = RegionFromId(50);
                    }
                    else {
                        if ((RegionContainsPoint(RegionFromId(19), lv_playerPos) == true)) {
                            lv_collidedZone = RegionFromId(19);
                        }
                        else {
                            if ((RegionContainsPoint(RegionFromId(37), lv_playerPos) == true)) {
                                lv_collidedZone = RegionFromId(37);
                            }
                            else {
                                if ((RegionContainsPoint(RegionFromId(38), lv_playerPos) == true)) {
                                    lv_collidedZone = RegionFromId(38);
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(6), lv_playerPos) == true)) {
                                        lv_collidedZone = RegionFromId(6);
                                    }
                                    else {
                                        if ((RegionContainsPoint(RegionFromId(7), lv_playerPos) == true)) {
                                            lv_collidedZone = RegionFromId(7);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        if ((RegionContainsPoint(RegionFromId(26), UnitGetPosition(lp_unit)) == true) && (RegionContainsPoint(RegionFromId(26), lv_playerPos) == true) && (lv_collidedZone == null)) {
            lv_collidedZone = RegionFromId(26);
        }
        else {
            if ((RegionContainsPoint(RegionFromId(28), UnitGetPosition(lp_unit)) == true) && (RegionContainsPoint(RegionFromId(28), lv_playerPos) == true) && (lv_collidedZone == null)) {
                lv_collidedZone = RegionFromId(28);
            }
            else {
                if ((RegionContainsPoint(RegionFromId(25), UnitGetPosition(lp_unit)) == true) && (RegionContainsPoint(RegionFromId(25), lv_playerPos) == true) && (lv_collidedZone == null)) {
                    lv_collidedZone = RegionFromId(25);
                }
                else {
                    if ((RegionContainsPoint(RegionFromId(27), UnitGetPosition(lp_unit)) == true) && (RegionContainsPoint(RegionFromId(27), lv_playerPos) == true) && (lv_collidedZone == null)) {
                        lv_collidedZone = RegionFromId(27);
                    }

                }
            }
        }
        if ((lv_collidedZone == null)) {
            break;
        }

        lv_playerPos = PointWithOffset(lv_playerPos, lv_dx_step, lv_dy_step);
    }
    if ((lv_collidedZone != null)) {
        if ((lv_collidedZone == RegionFromId(68))) {
            lv_futurepoint = PointWithOffset(UnitGetPosition(lp_unit), lv_dx, lv_dy);
            lv_angleoftravel = AngleBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
            lv_currentspeed = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
            lv_previouspoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, (lv_angleoftravel - 180.0));
            lv_futurepoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, AngleBetweenPoints(UnitGetPosition(lp_unit), PointReflect(lv_previouspoint, UnitGetPosition(lp_unit), AngleBetweenPoints(UnitGetPosition(lp_unit), Point(78.62, 123.22)))));
            lv_playerPos = lv_futurepoint;
            UnitSetCustomValue(lp_unit, 0, (PointGetX(lv_futurepoint) - PointGetX(UnitGetPosition(lp_unit))));
            UnitSetCustomValue(lp_unit, 1, (PointGetY(lv_futurepoint) - PointGetY(UnitGetPosition(lp_unit))));
            if ((lv_forceunitouttopleft == true)) {
                gf_ApplyForcePolar(lp_unit, 0.1, AngleBetweenPoints(UnitGetPosition(lp_unit), Point(78.62, 123.22)));
            }

        }
        else {
            if ((lv_collidedZone == RegionFromId(69))) {
                lv_futurepoint = PointWithOffset(UnitGetPosition(lp_unit), lv_dx, lv_dy);
                lv_angleoftravel = AngleBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                lv_currentspeed = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                lv_previouspoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, (lv_angleoftravel - 180.0));
                lv_futurepoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, AngleBetweenPoints(UnitGetPosition(lp_unit), PointReflect(lv_previouspoint, UnitGetPosition(lp_unit), AngleBetweenPoints(UnitGetPosition(lp_unit), Point(78.01, 98.66)))));
                lv_playerPos = lv_futurepoint;
                UnitSetCustomValue(lp_unit, 0, (PointGetX(lv_futurepoint) - PointGetX(UnitGetPosition(lp_unit))));
                UnitSetCustomValue(lp_unit, 1, (PointGetY(lv_futurepoint) - PointGetY(UnitGetPosition(lp_unit))));
                if ((lv_forceunitoutbotleft == true)) {
                    gf_ApplyForcePolar(lp_unit, 0.1, AngleBetweenPoints(UnitGetPosition(lp_unit), Point(78.01, 98.66)));
                }

            }
            else {
                if ((lv_collidedZone == RegionFromId(70))) {
                    lv_futurepoint = PointWithOffset(UnitGetPosition(lp_unit), lv_dx, lv_dy);
                    lv_angleoftravel = AngleBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                    lv_currentspeed = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                    lv_previouspoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, (lv_angleoftravel - 180.0));
                    lv_futurepoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, AngleBetweenPoints(UnitGetPosition(lp_unit), PointReflect(lv_previouspoint, UnitGetPosition(lp_unit), AngleBetweenPoints(UnitGetPosition(lp_unit), Point(177.94, 98.68)))));
                    lv_playerPos = lv_futurepoint;
                    UnitSetCustomValue(lp_unit, 0, (PointGetX(lv_futurepoint) - PointGetX(UnitGetPosition(lp_unit))));
                    UnitSetCustomValue(lp_unit, 1, (PointGetY(lv_futurepoint) - PointGetY(UnitGetPosition(lp_unit))));
                    if ((lv_forceunitoutbotright == true)) {
                        gf_ApplyForcePolar(lp_unit, 0.1, AngleBetweenPoints(UnitGetPosition(lp_unit), Point(177.94, 98.68)));
                    }

                }
                else {
                    if ((lv_collidedZone == RegionFromId(71))) {
                        lv_futurepoint = PointWithOffset(UnitGetPosition(lp_unit), lv_dx, lv_dy);
                        lv_angleoftravel = AngleBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                        lv_currentspeed = DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_futurepoint);
                        lv_previouspoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, (lv_angleoftravel - 180.0));
                        lv_futurepoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_currentspeed, AngleBetweenPoints(UnitGetPosition(lp_unit), PointReflect(lv_previouspoint, UnitGetPosition(lp_unit), AngleBetweenPoints(UnitGetPosition(lp_unit), Point(177.92, 124.24)))));
                        lv_playerPos = lv_futurepoint;
                        UnitSetCustomValue(lp_unit, 0, (PointGetX(lv_futurepoint) - PointGetX(UnitGetPosition(lp_unit))));
                        UnitSetCustomValue(lp_unit, 1, (PointGetY(lv_futurepoint) - PointGetY(UnitGetPosition(lp_unit))));
                        if ((lv_forceunitouttopright == true)) {
                            gf_ApplyForcePolar(lp_unit, 0.1, AngleBetweenPoints(UnitGetPosition(lp_unit), Point(177.92, 124.24)));
                        }

                    }
                    else {
                        if (((lv_collidedZone == RegionFromId(28)) || (lv_collidedZone == RegionFromId(26)) || (lv_collidedZone == RegionFromId(47)) || (lv_collidedZone == RegionFromId(48)) || (lv_collidedZone == RegionFromId(50)) || (lv_collidedZone == RegionFromId(55)))) {
                            lv_wallAngleMultiplier = AbsF(Sin(UnitGetFacing(lp_unit)));
                            gf_BoardsBounce(lp_unit, "horizantalrect");
                        }
                        else {
                            if (((lv_collidedZone == RegionFromId(25)) || (lv_collidedZone == RegionFromId(27)) || (lv_collidedZone == RegionFromId(17)) || (lv_collidedZone == RegionFromId(19)))) {
                                lv_wallAngleMultiplier = AbsF(Sin(UnitGetFacing(lp_unit)));
                                gf_BoardsBounce(lp_unit, "verticalrect");
                            }
                            else {
                                if (((lv_collidedZone == RegionFromId(39)) || (lv_collidedZone == RegionFromId(24)) || (lv_collidedZone == RegionFromId(38)) || (lv_collidedZone == RegionFromId(37)) || (lv_collidedZone == RegionFromId(13)) || (lv_collidedZone == RegionFromId(14)) || (lv_collidedZone == RegionFromId(16)) || (lv_collidedZone == RegionFromId(5)) || (lv_collidedZone == RegionFromId(6)) || (lv_collidedZone == RegionFromId(7)) || (lv_collidedZone == RegionFromId(22)) || (lv_collidedZone == RegionFromId(23)) || (lv_collidedZone == RegionFromId(85)) || (lv_collidedZone == RegionFromId(86)))) {
                                    lv_circleForce = gf_ConvertOffsetToPolarOffsetMagnitutude(lv_dx, lv_dy);
                                    if ((lv_approachZone == null)) {
                                        gf_ApplyForcePolarNoMomentum(lp_unit, lv_circleForce, gf_CalculateBounceAngleMovingCircleOnPost(lp_unit, gf_ConvertOffsetToPolarOffsetAngle(lv_dx, lv_dy), lv_collidedZone, "circle"));
                                    }
                                    else {
                                        lv_wallAngleMultiplier = AbsF(Sin(UnitGetFacing(lp_unit)));
                                        gf_BoardsBounce(lp_unit, "horizantalrect");
                                    }
                                    if ((DistanceBetweenPoints(RegionGetCenter(lv_collidedZone), UnitGetPosition(lp_unit)) < (libNtve_gf_HeightOfRegion(lv_collidedZone) / 2.0))) {
                                        if ((lv_approachZone != null)) {
                                            lv_tempPos = PointWithOffsetPolar(UnitGetPosition(lp_unit), 0.5, AngleBetweenPoints(RegionGetCenter(lv_collidedZone), UnitGetPosition(lp_unit)));
                                        }
                                        else {
                                            lv_tempPos = PointWithOffsetPolar(RegionGetCenter(lv_collidedZone), ((libNtve_gf_HeightOfRegion(lv_collidedZone) / 2.0) + 0.05), AngleBetweenPoints(RegionGetCenter(lv_collidedZone), UnitGetPosition(lp_unit)));
                                        }
                                        if (((lv_collidedZone == RegionFromId(22)) || (lv_collidedZone == RegionFromId(23)) || (lv_collidedZone == RegionFromId(85)) || (lv_collidedZone == RegionFromId(86)))) {
                                            if ((RegionContainsPoint(RegionFromId(25), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(28), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(27), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(26), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(17), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(39), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(47), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(24), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(48), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(19), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(55), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(37), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(50), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(38), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(16), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(5), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(6), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(7), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(69), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(70), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(68), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(71), lv_tempPos) == false) && ((UnitGetOwner(lp_unit) == gv_Players[2]) || ((RegionContainsPoint(RegionFromId(3), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(13), lv_tempPos) == false) && (UnitGetOwner(lp_unit) != gv_Players[2]))) && ((UnitGetOwner(lp_unit) == gv_Players[6]) || ((RegionContainsPoint(RegionFromId(4), lv_tempPos) == false) && (RegionContainsPoint(RegionFromId(14), lv_tempPos) == false) && (UnitGetOwner(lp_unit) != gv_Players[6])))) {
                                                lv_playerPos = lv_tempPos;
                                            }
                                            else {
                                                UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 0.0);
                                            }
                                        }
                                        else {
                                            lv_playerPos = lv_tempPos;
                                        }
                                    }

                                }

                            }
                        }
                    }
                }
            }
        }
        if (((lv_collidedZone == RegionFromId(28)) || (lv_collidedZone == RegionFromId(25)) || (lv_collidedZone == RegionFromId(27)) || (lv_collidedZone == RegionFromId(26)) || (lv_collidedZone == RegionFromId(39)) || (lv_collidedZone == RegionFromId(24)) || (lv_collidedZone == RegionFromId(47)) || (lv_collidedZone == RegionFromId(17)) || (lv_collidedZone == RegionFromId(48)) || (lv_collidedZone == RegionFromId(38)) || (lv_collidedZone == RegionFromId(37)) || (lv_collidedZone == RegionFromId(50)) || (lv_collidedZone == RegionFromId(55)) || (lv_collidedZone == RegionFromId(19)) || (lv_collidedZone == RegionFromId(68)) || (lv_collidedZone == RegionFromId(69)) || (lv_collidedZone == RegionFromId(70)) || (lv_collidedZone == RegionFromId(71)))) {
            if ((lv_wallAngleMultiplier < 0.2)) {
                lv_wallAngleMultiplier = 0.2;
            }

            SoundPlayOnUnit(SoundLink("BoardBodyHit", -1), PlayerGroupAll(), lp_unit, 2.0, (gf_VectorMagnitude2(lv_dx, lv_dy, UnitGetCustomValue(lp_unit, 2))*160*lv_wallAngleMultiplier), 0.0);
        }

    }

    return lv_playerPos;
}

point gf_CheckPuckCollision (point lp_startPoint, int lp_recursionDepth, int lp_steps) {
    // Variable Declarations
    point lv_puckPoint;
    fixed lv_puckX;
    fixed lv_puckY;
    fixed lv_xVelocity;
    fixed lv_yVelocity;
    fixed lv_xStep;
    fixed lv_yStep;
    int lv_i;
    region lv_collidedZone;
    fixed lv_xModifier;
    fixed lv_yModifier;
    fixed lv_xMultiplier;
    fixed lv_yMultiplier;
    int lv_finalwrapoutput;

    // Automatic Variable Declarations
    int autoB1FB7404_ae;
    const int autoB1FB7404_ai = 1;
    int autoB750BF31_ae;
    const int autoB750BF31_ai = 1;

    // Variable Initialization

    // Implementation
    lv_puckPoint = lp_startPoint;
    lv_puckX = PointGetX(lv_puckPoint);
    lv_puckY = PointGetY(lv_puckPoint);
    lv_xVelocity = UnitGetCustomValue(gv_pUCK, 0);
    lv_yVelocity = UnitGetCustomValue(gv_pUCK, 1);
    lv_xStep = lv_xVelocity;
    lv_yStep = lv_yVelocity;
    if ((lv_xStep < 0)) {
        lv_xModifier = 0.1;
        lv_xMultiplier = 1.0;
    }
    else {
        lv_xModifier = -0.1;
        lv_xMultiplier = -1.0;
    }
    if ((lv_yStep < 0)) {
        lv_yModifier = 0.1;
        lv_yMultiplier = 1.0;
    }
    else {
        lv_yModifier = -0.1;
        lv_yMultiplier = -1.0;
    }
    autoB1FB7404_ae = (lp_recursionDepth + 1);
    lv_i = 1;
    for ( ; ( (autoB1FB7404_ai >= 0 && lv_i <= autoB1FB7404_ae) || (autoB1FB7404_ai < 0 && lv_i >= autoB1FB7404_ae) ) ; lv_i += autoB1FB7404_ai ) {
        lv_xStep = ((lv_xStep * lv_xModifier) * lv_xMultiplier);
        lv_yStep = ((lv_yStep * lv_yModifier) * lv_yMultiplier);
    }
    if (((lv_xStep != 0.0) || (lv_yStep != 0.0))) {
        autoB750BF31_ae = lp_steps;
        lv_i = 1;
        for ( ; ( (autoB750BF31_ai >= 0 && lv_i <= autoB750BF31_ae) || (autoB750BF31_ai < 0 && lv_i >= autoB750BF31_ae) ) ; lv_i += autoB750BF31_ai ) {
            lv_puckPoint = PointWithOffset(lv_puckPoint, lv_xStep, lv_yStep);
            if ((lp_recursionDepth == 0)) {
                gv_interpolationPoints[lv_i] = lv_puckPoint;
                gv_numOfRelevantIPs = lv_i;
            }

            if (((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(60)) == false) || (gv_goalieBlocking[gv_Players[2]] == true) || (gv_goalieBlocking[gv_Players[6]] == true) || (UnitGroupCount(UnitGroup("RemoteForceField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
                if ((gv_roundedRinkEnabled == true) && ((RegionContainsPoint(RegionFromId(31), lv_puckPoint) == true) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_TopLeftClockwise) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_TopLeftCounterClockwise))) {
                    lv_collidedZone = RegionFromId(31);
                }
                else {
                    if ((gv_roundedRinkEnabled == true) && ((RegionContainsPoint(RegionFromId(65), lv_puckPoint) == true) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_BottomLeftClockwise) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_BottomLeftCounterClockwise))) {
                        lv_collidedZone = RegionFromId(65);
                    }
                    else {
                        if ((gv_roundedRinkEnabled == true) && ((RegionContainsPoint(RegionFromId(66), lv_puckPoint) == true) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_BottomRightClockwise) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_BottomRightCounterClockwise))) {
                            lv_collidedZone = RegionFromId(66);
                        }
                        else {
                            if ((gv_roundedRinkEnabled == true) && ((RegionContainsPoint(RegionFromId(67), lv_puckPoint) == true) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_TopRightClockwise) || (gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_TopRightCounterClockwise))) {
                                lv_collidedZone = RegionFromId(67);
                            }

                        }
                    }
                }
                if ((lv_collidedZone == null) && (lv_xStep > 0.0) && (lv_puckX > gv_rINK_CENTER_X)) {
                    if ((RegionContainsPoint(RegionFromId(2), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(2);
                    }

                }

                if ((lv_collidedZone == null) && (lv_xStep < 0.0) && (lv_puckX < gv_rINK_CENTER_X)) {
                    if ((RegionContainsPoint(RegionFromId(12), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(12);
                    }

                }

                if ((lv_collidedZone == null) && (lv_yStep < 0.0) && (lv_puckY < gv_rINK_CENTER_Y)) {
                    if ((RegionContainsPoint(RegionFromId(11), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(11);
                    }

                }

                if ((lv_collidedZone == null) && (lv_yStep > 0.0) && (lv_puckY > gv_rINK_CENTER_Y)) {
                    if ((RegionContainsPoint(RegionFromId(1), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(1);
                    }

                }

                if ((lv_collidedZone == null) && (gv_goalieBlocking[gv_Players[2]] == true)) {
                    if ((RegionContainsPoint(RegionFromId(22), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(22);
                    }

                }

                if ((lv_collidedZone == null) && (gv_goalieBlocking[gv_Players[6]] == true)) {
                    if ((RegionContainsPoint(RegionFromId(23), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(23);
                    }

                }

                if ((lv_collidedZone == null)) {
                    if ((RegionContainsPoint(RegionFromId(85), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(85);
                    }

                }

                if ((lv_collidedZone == null)) {
                    if ((RegionContainsPoint(RegionFromId(86), lv_puckPoint) == true)) {
                        lv_collidedZone = RegionFromId(86);
                    }

                }

                if ((lv_collidedZone == null) && (lv_puckX < gv_rINK_CENTER_X)) {
                    if ((RegionContainsPoint(RegionFromId(45), lv_puckPoint) == true)) {
                        if ((RegionContainsPoint(RegionFromId(47), lv_puckPoint) == true)) {
                            lv_collidedZone = RegionFromId(47);
                        }
                        else {
                            if ((RegionContainsPoint(RegionFromId(48), lv_puckPoint) == true)) {
                                lv_collidedZone = RegionFromId(48);
                            }
                            else {
                                if ((RegionContainsPoint(RegionFromId(17), lv_puckPoint) == true)) {
                                    lv_collidedZone = RegionFromId(17);
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(16), lv_puckPoint) == true)) {
                                        lv_collidedZone = RegionFromId(16);
                                    }
                                    else {
                                        if ((RegionContainsPoint(RegionFromId(5), lv_puckPoint) == true)) {
                                            lv_collidedZone = RegionFromId(5);
                                        }
                                        else {
                                            if ((RegionContainsPoint(RegionFromId(24), lv_puckPoint) == true)) {
                                                lv_collidedZone = RegionFromId(24);
                                            }
                                            else {
                                                if ((RegionContainsPoint(RegionFromId(39), lv_puckPoint) == true)) {
                                                    lv_collidedZone = RegionFromId(39);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                if ((lv_collidedZone == null) && (lv_puckX > gv_rINK_CENTER_X)) {
                    if ((RegionContainsPoint(RegionFromId(46), lv_puckPoint) == true)) {
                        if ((RegionContainsPoint(RegionFromId(51), lv_puckPoint) == true)) {
                            lv_collidedZone = RegionFromId(51);
                        }
                        else {
                            if ((RegionContainsPoint(RegionFromId(50), lv_puckPoint) == true)) {
                                lv_collidedZone = RegionFromId(50);
                            }
                            else {
                                if ((RegionContainsPoint(RegionFromId(19), lv_puckPoint) == true)) {
                                    lv_collidedZone = RegionFromId(19);
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(6), lv_puckPoint) == true)) {
                                        lv_collidedZone = RegionFromId(6);
                                    }
                                    else {
                                        if ((RegionContainsPoint(RegionFromId(7), lv_puckPoint) == true)) {
                                            lv_collidedZone = RegionFromId(7);
                                        }
                                        else {
                                            if ((RegionContainsPoint(RegionFromId(38), lv_puckPoint) == true)) {
                                                lv_collidedZone = RegionFromId(38);
                                            }
                                            else {
                                                if ((RegionContainsPoint(RegionFromId(37), lv_puckPoint) == true)) {
                                                    lv_collidedZone = RegionFromId(37);
                                                }
                                                else {
                                                    if ((RegionContainsPoint(RegionFromId(37), lv_puckPoint) == true)) {
                                                        lv_collidedZone = RegionFromId(37);
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }

                if ((lv_collidedZone != null)) {
                    if ((lp_recursionDepth < 2) && (lv_collidedZone != null) && (lv_collidedZone != RegionFromId(65)) && (lv_collidedZone != RegionFromId(66)) && (lv_collidedZone != RegionFromId(31)) && (lv_collidedZone != RegionFromId(67))) {
                        lv_puckPoint = PointWithOffset(lv_puckPoint, (lv_xStep * -1.0), (lv_yStep * -1.0));
                        lv_puckPoint = gf_CheckPuckCollision(lv_puckPoint, (lp_recursionDepth + 1), 11);
                    }
                    else {
                        gv_Shoot[gv_ShootingPlayer] = false;
                        if ((lv_collidedZone == RegionFromId(31))) {
                            if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
                                SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                                lv_puckPoint = gf_ReturnIntersectingPoint(lv_puckPoint, PointWithOffset(lv_puckPoint, (lv_xStep * -1.0), (lv_yStep * -1.0)), RegionFromId(31));
                            }

                            lv_finalwrapoutput = gf_CheckWrappingConditionsTopLeft(lv_puckPoint);
                            if ((lv_finalwrapoutput == ge_WrappingDirection_TopLeftClockwise)) {
                                lv_puckPoint = gf_WrapPointTopLeftClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                break;
                            }
                            else {
                                if ((lv_finalwrapoutput == ge_WrappingDirection_TopLeftCounterClockwise)) {
                                    lv_puckPoint = gf_WrapPointTopLeftCounterClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                    break;
                                }
                                else {
                                    gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.45), AngleBetweenPoints(lv_puckPoint, PointReflect(UnitGetPosition(gv_pUCK), lv_puckPoint, AngleBetweenPoints(lv_puckPoint, Point(76.82, 125.06)))));
                                    break;
                                }
                            }
                        }
                        else {
                            if ((lv_collidedZone == RegionFromId(65))) {
                                if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
                                    SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                                }

                                lv_puckPoint = gf_ReturnIntersectingPoint(lv_puckPoint, PointWithOffset(lv_puckPoint, (lv_xStep * -1.0), (lv_yStep * -1.0)), RegionFromId(65));
                                lv_finalwrapoutput = gf_CheckWrappingConditionsBottomLeft(lv_puckPoint);
                                if ((lv_finalwrapoutput == ge_WrappingDirection_BottomLeftClockwise)) {
                                    lv_puckPoint = gf_WrapPointBottomLeftClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                    break;
                                }
                                else {
                                    if ((lv_finalwrapoutput == ge_WrappingDirection_BottomLeftCounterClockwise)) {
                                        lv_puckPoint = gf_WrapPointBottomLeftCounterClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                        break;
                                    }
                                    else {
                                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.45), AngleBetweenPoints(lv_puckPoint, PointReflect(UnitGetPosition(gv_pUCK), lv_puckPoint, AngleBetweenPoints(lv_puckPoint, Point(76.75, 97.95)))));
                                        break;
                                    }
                                }
                            }
                            else {
                                if ((lv_collidedZone == RegionFromId(66))) {
                                    if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
                                        SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                                    }

                                    lv_puckPoint = gf_ReturnIntersectingPoint(lv_puckPoint, PointWithOffset(lv_puckPoint, (lv_xStep * -1.0), (lv_yStep * -1.0)), RegionFromId(66));
                                    lv_finalwrapoutput = gf_CheckWrappingConditionsBottomRight(lv_puckPoint);
                                    if ((lv_finalwrapoutput == ge_WrappingDirection_BottomRightClockwise)) {
                                        lv_puckPoint = gf_WrapPointBottomRightClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                        break;
                                    }
                                    else {
                                        if ((lv_finalwrapoutput == ge_WrappingDirection_BottomRightCounterClockwise)) {
                                            lv_puckPoint = gf_WrapPointBottomRightCounterClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                            break;
                                        }
                                        else {
                                            gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.45), AngleBetweenPoints(lv_puckPoint, PointReflect(UnitGetPosition(gv_pUCK), lv_puckPoint, AngleBetweenPoints(lv_puckPoint, Point(179.16, 97.95)))));
                                            break;
                                        }
                                    }
                                }
                                else {
                                    if ((lv_collidedZone == RegionFromId(67))) {
                                        if ((gv_puckWrapping.lv_puckisWrapping == ge_WrappingDirection_NotWrapping)) {
                                            SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                                        }

                                        lv_puckPoint = gf_ReturnIntersectingPoint(lv_puckPoint, PointWithOffset(lv_puckPoint, (lv_xStep * -1.0), (lv_yStep * -1.0)), RegionFromId(67));
                                        lv_finalwrapoutput = gf_CheckWrappingConditionsTopRight(lv_puckPoint);
                                        if ((lv_finalwrapoutput == ge_WrappingDirection_TopRightClockwise)) {
                                            lv_puckPoint = gf_WrapPointTopRightClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                            break;
                                        }
                                        else {
                                            if ((lv_finalwrapoutput == ge_WrappingDirection_TopRightCounterClockwise)) {
                                                lv_puckPoint = gf_WrapPointTopRightCounterClockwise(gv_puckMagnitude, UnitGetPosition(gv_pUCK));
                                                break;
                                            }
                                            else {
                                                gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.45), AngleBetweenPoints(lv_puckPoint, PointReflect(UnitGetPosition(gv_pUCK), lv_puckPoint, AngleBetweenPoints(lv_puckPoint, Point(179.15, 125.07)))));
                                                break;
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (((lv_collidedZone == RegionFromId(12)) || (lv_collidedZone == RegionFromId(2)))) {
                            SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                            gf_BoardsBounce(gv_pUCK, "verticalrect");
                            break;
                        }

                        if (((lv_collidedZone == RegionFromId(1)) || (lv_collidedZone == RegionFromId(11)))) {
                            SoundPlayAtPoint(SoundLink("HockeyBoard", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
                            gf_BoardsBounce(gv_pUCK, "horizantalrect");
                            gv_potentialSOG = gf_CheckPotentialSOG();
                            break;
                        }

                        if (((lv_collidedZone == RegionFromId(47)) || (lv_collidedZone == RegionFromId(48)) || (lv_collidedZone == RegionFromId(51)) || (lv_collidedZone == RegionFromId(50)))) {
                            gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.2), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, lv_collidedZone, "horizantalrect"));
                            break;
                        }

                        if (((lv_collidedZone == RegionFromId(17)) || (lv_collidedZone == RegionFromId(19)))) {
                            gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.1), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, lv_collidedZone, "verticalrect"));
                            break;
                        }

                        gv_potentialUnshot = 0;
                        if ((gv_Shootout == true)) {
                            gf_CheckIfRebounded();
                        }

                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.25), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, lv_collidedZone, "circle"));
                        if ((lv_collidedZone == RegionFromId(22))) {
                            if ((gv_rEDLINE_MODE == true) && (gv_Shootout == false) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(14)) == true)) && ((gv_lasttouchedby == gv_Players[1]) || (gv_lasttouchedby == gv_Players[3]) || (gv_lasttouchedby == gv_Players[5]) || (gv_lasttouchedby == gv_Players[7]))) {
                                gf_RedlineIncrementGoalieSave();
                            }

                            if ((gv_Shootout == false) && (gf_ShooterIsTeam2() == true)) {
                                if ((gv_potentialSOG == true)) {
                                    gf_Collision2(2);
                                    gf_HeatmapLogLastShotasaRealShot();
                                    gv_potentialSOG = false;
                                    gv_doNotIncreaseSOG = true;
                                    gv_inGameStatsGoalieBlock[gv_Players[2]] += 1;
                                    gv_stats_OverallGoalieBlocks[gv_Players[2]] += 1;
                                    gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO")-1500)/50)));
                                    BankValueSetFromFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(gv_Players[2]);
                                    }

                                }

                            }

                            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false)) {
                                gf_ApplySaveGoalieSound(gv_Players[2], true);
                            }
                            else {
                                gf_ApplySaveGoalieSound(gv_Players[2], false);
                            }
                            break;
                        }

                        if ((lv_collidedZone == RegionFromId(23))) {
                            if ((gv_Shootout == false) && (gf_ShooterIsTeam1() == true)) {
                                if ((gv_potentialSOG == true)) {
                                    gf_Collision2(1);
                                    gf_HeatmapLogLastShotasaRealShot();
                                    gv_potentialSOG = false;
                                    gv_doNotIncreaseSOG = true;
                                    gv_inGameStatsGoalieBlock[gv_Players[6]] += 1;
                                    gv_stats_OverallGoalieBlocks[gv_Players[6]] += 1;
                                    gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO")-1500)/50)));
                                    if ((gv_ranked == true)) {
                                        BankValueSetFromFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                        gf_SaveBank(gv_Players[6]);
                                    }

                                }

                            }

                            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false)) {
                                gf_ApplySaveGoalieSound(gv_Players[6], true);
                            }
                            else {
                                gf_ApplySaveGoalieSound(gv_Players[6], false);
                            }
                        }

                    }
                    break;
                }

            }

        }
    }
    else {
        gv_interpolationPoints[1] = lv_puckPoint;
        gv_numOfRelevantIPs = 1;
    }
    return lv_puckPoint;
}

fixed gf_Distance3Dmade2d (unit lp_Unit1, unit lp_Unit2) {
    // Automatic Variable Declarations
    // Implementation
    return ((Pow((PointGetX(UnitGetPosition(lp_Unit1))-PointGetX(UnitGetPosition(lp_Unit2))), 2.0))+(Pow((PointGetY(UnitGetPosition(lp_Unit1))-PointGetY(UnitGetPosition(lp_Unit2))), 2.0)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init
//--------------------------------------------------------------------------------------------------
bool gt_MapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_LocInt1;
    int lv_LocInt2;
    int lv_locInt3;
    int lv_locInt4;
    int lv_locInt5;
    fixed lv_LocReal;
    int lv_pK1;
    int lv_pK2;
    int lv_i;
    playergroup lv_locplayergroup;
    playergroup lv_locplayergroupA;
    playergroup lv_locplayergroupB;
    fixed lv_team1elos;
    fixed lv_team2elos;

    // Automatic Variable Declarations
    playergroup autoEA0D93FC_g;
    int autoEA0D93FC_var;
    unitgroup auto5D752C57_g;
    int auto5D752C57_u;
    unit auto5D752C57_var;
    unitgroup auto41820A4B_g;
    int auto41820A4B_u;
    unit auto41820A4B_var;
    unitgroup auto53E28886_g;
    int auto53E28886_u;
    unit auto53E28886_var;
    playergroup auto8AD4C910_g;
    int auto8AD4C910_var;
    playergroup auto2D719E3E_g;
    int auto2D719E3E_var;
    playergroup autoBFFCEDE2_g;
    int autoBFFCEDE2_var;
    playergroup auto0DA66135_g;
    int auto0DA66135_var;
    playergroup autoC81EC17E_g;
    int autoC81EC17E_var;
    const int auto3A6E4671_ae = 14;
    int auto3A6E4671_var;
    playergroup autoAFF84BA8_g;
    int autoAFF84BA8_var;
    playergroup auto10CCA7A4_g;
    int auto10CCA7A4_var;
    const int autoE5D0F5D4_ae = 15;
    int autoE5D0F5D4_var;
    const int auto1F2F928F_ae = 14;
    int auto1F2F928F_var;
    playergroup auto3A81F91F_g;
    int auto3A81F91F_var;
    playergroup auto338D7694_g;
    int auto338D7694_var;
    playergroup autoEA5636F8_g;
    int autoEA5636F8_var;
    playergroup autoFF03D8A3_g;
    int autoFF03D8A3_var;
    playergroup auto9563249B_g;
    int auto9563249B_var;
    playergroup auto80745CBE_g;
    int auto80745CBE_var;
    playergroup autoF64BD1F8_g;
    int autoF64BD1F8_var;
    playergroup autoF9A685D6_g;
    int autoF9A685D6_var;
    playergroup auto72CE78E9_g;
    int auto72CE78E9_var;
    playergroup autoE6E10435_g;
    int autoE6E10435_var;
    playergroup autoC6306406_g;
    int autoC6306406_var;
    playergroup auto61DE2D6F_g;
    int auto61DE2D6F_var;
    playergroup auto00FEAF2A_g;
    int auto00FEAF2A_var;
    playergroup auto5A5EC18F_g;
    int auto5A5EC18F_var;
    const int auto3957BB08_ae = 4;
    int auto3957BB08_var;
    const int autoD2112ACD_ae = 8;
    int autoD2112ACD_var;
    const int auto6F0F5F9C_ae = 14;
    int auto6F0F5F9C_var;
    const int auto316F0703_ae = 4;
    int auto316F0703_var;
    const int autoBB63B035_ae = 8;
    int autoBB63B035_var;
    playergroup auto68B480E7_g;
    int auto68B480E7_var;
    playergroup auto1EB95801_g;
    int auto1EB95801_var;
    playergroup auto5FF20298_g;
    int auto5FF20298_var;
    playergroup autoDAF214A6_g;
    int autoDAF214A6_var;
    playergroup auto3359CE78_g;
    int auto3359CE78_var;
    playergroup autoD217D5DA_g;
    int autoD217D5DA_var;
    playergroup auto99DA056F_g;
    int auto99DA056F_var;
    playergroup auto3CC81F02_g;
    int auto3CC81F02_var;
    playergroup auto3D52D59C_g;
    int auto3D52D59C_var;
    playergroup auto9A7CE9BE_g;
    int auto9A7CE9BE_var;
    const int auto54B0DD57_ae = 6;
    int auto54B0DD57_var;
    playergroup auto08422AE9_g;
    int auto08422AE9_var;
    const int auto539CDE0D_ae = 6;
    int auto539CDE0D_var;
    playergroup auto50E6A960_g;
    int auto50E6A960_var;
    playergroup auto95EF833C_g;
    int auto95EF833C_var;
    playergroup autoB18FD59B_g;
    int autoB18FD59B_var;
    playergroup autoDA2FE64F_g;
    int autoDA2FE64F_var;
    playergroup autoBF6FBBA8_g;
    int autoBF6FBBA8_var;
    playergroup auto0FAFF5E5_g;
    int auto0FAFF5E5_var;
    playergroup autoD012B8AF_g;
    int autoD012B8AF_var;
    playergroup autoC874F670_g;
    int autoC874F670_var;
    const int auto9EABFAA7_ae = 3;
    int auto9EABFAA7_var;
    playergroup autoA4C6DF43_g;
    int autoA4C6DF43_var;
    playergroup auto0373773B_g;
    int auto0373773B_var;
    playergroup autoF16C992E_g;
    int autoF16C992E_var;
    playergroup autoC3A16846_g;
    int autoC3A16846_var;
    playergroup auto531A4794_g;
    int auto531A4794_var;
    playergroup autoB8DA709B_g;
    int autoB8DA709B_var;
    playergroup auto0CF27661_g;
    int auto0CF27661_var;
    playergroup autoCF85AF62_g;
    int autoCF85AF62_var;

    // Variable Initialization
    lv_LocInt1 = 1;
    lv_LocInt2 = 5;
    lv_pK1 = 1;
    lv_pK2 = 1;
    lv_locplayergroup = PlayerGroupEmpty();
    lv_locplayergroupA = PlayerGroupEmpty();
    lv_locplayergroupB = PlayerGroupEmpty();
    lv_team1elos = 1000.0;
    lv_team2elos = 1000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisableRemoteShields();
    gf_InitPowerplayTimer();
    libLbty_gf_EnableDisablePingPanel(false, PlayerGroupAll());
    gf_AntiCheatRecorder();
    autoEA0D93FC_g = PlayerGroupAll();
    autoEA0D93FC_var = -1;
    while (true) {
        autoEA0D93FC_var = PlayerGroupNextPlayer(autoEA0D93FC_g, autoEA0D93FC_var);
        if (autoEA0D93FC_var < 0) { break; }
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(autoEA0D93FC_var), libNtve_gf_MainActorofUnit(UnitFromId(87)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(autoEA0D93FC_var), libNtve_gf_MainActorofUnit(UnitFromId(86)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(autoEA0D93FC_var), libNtve_gf_MainActorofUnit(UnitFromId(88)), false);
    }
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    if ((GameAttributeGameValue("2") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0ED16435"));
    }
    else {
        if ((GameAttributeGameValue("2") == "0002")) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5F5C2009"));
        }

    }
    gv_redlineMode.lv_goalWallsLeft[1] = ActorFromDoodad(DoodadFromId(39));
    gv_redlineMode.lv_goalWallsLeft[2] = ActorFromDoodad(DoodadFromId(37));
    gv_redlineMode.lv_goalWallsLeft[3] = ActorFromDoodad(DoodadFromId(40));
    gv_redlineMode.lv_goalWallsLeft[4] = ActorFromDoodad(DoodadFromId(41));
    gv_redlineMode.lv_goalWallsRight[1] = ActorFromDoodad(DoodadFromId(48));
    gv_redlineMode.lv_goalWallsRight[2] = ActorFromDoodad(DoodadFromId(46));
    gv_redlineMode.lv_goalWallsRight[3] = ActorFromDoodad(DoodadFromId(44));
    gv_redlineMode.lv_goalWallsRight[4] = ActorFromDoodad(DoodadFromId(42));
    if (((GameAttributeGameValue("2") == "0003") || (gv_testredlinemode == true))) {
        gv_ranked = false;
        gf_RedlineGoalLockIndicators(PlayerGroupAll(), false);
    }
    else {
        libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "RedlineGoalLock");
    }
    gv_centerIcoLogoUnit = UnitFromId(208);
    gf_Initandhidegoallighting();
    gf_Createcasterboothactors();
    if ((GameAttributeGameValue("2") == "0002")) {
        GameSetPauseable(false);
        gf_Checkforleaguepausecapability();
        gf_DetectJersiesonoroff();
        gf_Setcentericelogo();
    }

    gf_Createwallads();
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(137)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(128)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(11)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(UnitFromId(15)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(83)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(161)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(92)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), ActorFromDoodad(DoodadFromId(108)), false);
    gf_Createteam3interface();
    gf_DragonStickInit();
    gf_GoldenStickInit();
    DialogCreate(75, 28, c_anchorBottom, -202, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_uIElements.lv_chargebarDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 38, 28, c_anchorTopLeft, 0, 0, StringToText(""), "boost-charge-progressbar-BG.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 20, c_anchorTopLeft, 4, 4, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 75.69, 0.00), PlayerGroupAll());
    gv_uIElements.lv_chargebarValues[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 38, 28, c_anchorTopLeft, 0, 0, StringToText(""), "boost-charge-progressbar-TOP.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 38, 28, c_anchorTopLeft, 37, 0, StringToText(""), "boost-charge-progressbar-BG.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 20, c_anchorTopLeft, 41, 4, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_uIElements.lv_chargebarValues[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 75.69, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 38, 28, c_anchorTopLeft, 37, 0, StringToText(""), "boost-charge-progressbar-TOP.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    DialogCreate(70, 70, c_anchorTopRight, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_pPDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 65, 65, c_anchorTopRight, 5, 0, StringExternal("Param/Value/DD91F066"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize12", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    auto5D752C57_g = UnitGroup("DesertPlanetSearchlight", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D752C57_u = UnitGroupCount(auto5D752C57_g, c_unitCountAll);
    for (;; auto5D752C57_u -= 1) {
        auto5D752C57_var = UnitGroupUnitFromEnd(auto5D752C57_g, auto5D752C57_u);
        if (auto5D752C57_var == null) { break; }
        UnitSetState(auto5D752C57_var, c_unitStateHighlightable, false);
        UnitSetState(auto5D752C57_var, c_unitStateCursorable, false);
        UnitSetState(auto5D752C57_var, c_unitStateSelectable, false);
        UnitSetState(auto5D752C57_var, c_unitStateTargetable, false);
    }
    auto41820A4B_g = UnitGroup("ShapeHockeyStick2", c_playerAny, RegionFromId(43), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41820A4B_u = UnitGroupCount(auto41820A4B_g, c_unitCountAll);
    for (;; auto41820A4B_u -= 1) {
        auto41820A4B_var = UnitGroupUnitFromEnd(auto41820A4B_g, auto41820A4B_u);
        if (auto41820A4B_var == null) { break; }
        UnitSetState(auto41820A4B_var, c_unitStateHighlightable, false);
        UnitSetState(auto41820A4B_var, c_unitStateCursorable, false);
        UnitSetState(auto41820A4B_var, c_unitStateSelectable, false);
        UnitSetState(auto41820A4B_var, c_unitStateTargetable, false);
    }
    auto53E28886_g = UnitGroup("ShapeHockeyStick2", c_playerAny, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53E28886_u = UnitGroupCount(auto53E28886_g, c_unitCountAll);
    for (;; auto53E28886_u -= 1) {
        auto53E28886_var = UnitGroupUnitFromEnd(auto53E28886_g, auto53E28886_u);
        if (auto53E28886_var == null) { break; }
        UnitSetState(auto53E28886_var, c_unitStateHighlightable, false);
        UnitSetState(auto53E28886_var, c_unitStateCursorable, false);
        UnitSetState(auto53E28886_var, c_unitStateSelectable, false);
        UnitSetState(auto53E28886_var, c_unitStateTargetable, false);
    }
    gv_mouselocationtriggers[1] = gt_StoreMouseLocationsp1;
    gv_mouselocationtriggers[2] = gt_StoreMouseLocationsp2;
    gv_mouselocationtriggers[3] = gt_StoreMouseLocationsp3;
    gv_mouselocationtriggers[4] = gt_StoreMouseLocationsp4;
    gv_mouselocationtriggers[5] = gt_StoreMouseLocationsp5;
    gv_mouselocationtriggers[6] = gt_StoreMouseLocationsp6;
    gv_mouselocationtriggers[7] = gt_StoreMouseLocationsp7;
    gv_mouselocationtriggers[8] = gt_StoreMouseLocationsp8;
    gv_mouselocationtriggers[9] = gt_StoreMouseLocationsp9;
    gv_mouselocationtriggers[10] = gt_StoreMouseLocationsp10;
    gv_mouselocationtriggers[11] = gt_StoreMouseLocationsp11;
    gv_mouselocationtriggers[12] = gt_StoreMouseLocationsp12;
    gv_mouselocationtriggers[13] = gt_StoreMouseLocationsp13;
    gv_mouselocationtriggers[14] = gt_StoreMouseLocationsp14;
    gv_mouselocationtriggers[15] = gt_StoreMouseLocationsp15;
    gv_shotpowertriggers[1] = gt_DecreaseShotPower;
    gv_shotpowertriggers[2] = gt_DecreaseShotPower2;
    gv_shotpowertriggers[3] = gt_DecreaseShotPower5;
    gv_shotpowertriggers[4] = gt_DecreaseShotPower6;
    gv_shotpowertriggers[5] = gt_DecreaseShotPower7;
    gv_shotpowertriggers[6] = gt_DecreaseShotPower8;
    gv_shotpowertriggers[7] = gt_DecreaseShotPower9;
    gv_shotpowertriggers[8] = gt_DecreaseShotPower10;
    gv_shotpowertriggers[9] = gt_DecreaseShotPower11;
    gv_shotpowertriggers[10] = gt_DecreaseShotPower12;
    gv_shotpowertriggers[11] = gt_DecreaseShotPower13;
    gv_shotpowertriggers[12] = gt_DecreaseShotPower14;
    gv_shotpowertriggers[13] = gt_DecreaseShotPower15;
    gv_shotpowertriggers[14] = gt_DecreaseShotPower16;
    gv_shotpowertriggers[15] = gt_DecreaseShotPower17;
    auto8AD4C910_g = PlayerGroupAll();
    auto8AD4C910_var = -1;
    while (true) {
        auto8AD4C910_var = PlayerGroupNextPlayer(auto8AD4C910_g, auto8AD4C910_var);
        if (auto8AD4C910_var < 0) { break; }
        if ((PlayerHandle(auto8AD4C910_var) != "1-S2-1-376340")) {
            PlayerGroupAdd(gv_goalSoundGroup, auto8AD4C910_var);
        }
        else {
            PlayerGroupAdd(gv_goalSoundOptOutGroup, auto8AD4C910_var);
        }
    }
    auto2D719E3E_g = PlayerGroupAll();
    auto2D719E3E_var = -1;
    while (true) {
        auto2D719E3E_var = PlayerGroupNextPlayer(auto2D719E3E_g, auto2D719E3E_var);
        if (auto2D719E3E_var < 0) { break; }
        PlayerOptionOverride(auto2D719E3E_var, "selectuncontrolable", "0");
        PlayerOptionOverride(auto2D719E3E_var, "displayunitstatus", "0");
        UISetFrameVisible(PlayerGroupSingle(auto2D719E3E_var), c_syncFrameTypeTeamResourceButton, false);
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    gv_uIElements.lv_commandPanel = DialogControlLastCreated();
    DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupAll(), c_anchorBottom, 0, -20);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    gv_uIElements.lv_chat = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar");
    gv_uIElements.lv_menubar = DialogControlLastCreated();
    autoBFFCEDE2_g = PlayerGroupAll();
    autoBFFCEDE2_var = -1;
    while (true) {
        autoBFFCEDE2_var = PlayerGroupNextPlayer(autoBFFCEDE2_g, autoBFFCEDE2_var);
        if (autoBFFCEDE2_var < 0) { break; }
        DialogControlSetPosition(gv_uIElements.lv_chat, PlayerGroupSingle(autoBFFCEDE2_var), c_anchorBottomLeft, 8, 35);
    }
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniBlueLarge");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniRedLarge");
    GameSetLighting(gv_dEFAULT_LIGHTING, 5.0);
    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    gf_SetPrize();
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    DialogCreate(35, 35, c_anchorCenter, 0, 0, false);
    gv_puckMarker = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), gv_pUCK, "Ref_Origin", -17, -41);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 0, 0, StringToText(""), "puckarrow2.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_puckMarkerImage = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 100.00, 0.00), PlayerGroupAll());
    gf_InitializeZHLVariables();
    BankLoad("ZealotHockey1", 1);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[1] = BankLastCreated();
    BankLoad("ZealotHockey1", 2);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[2] = BankLastCreated();
    BankLoad("ZealotHockey1", 3);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[3] = BankLastCreated();
    BankLoad("ZealotHockey1", 4);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[4] = BankLastCreated();
    BankLoad("ZealotHockey1", 5);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[5] = BankLastCreated();
    BankLoad("ZealotHockey1", 6);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[6] = BankLastCreated();
    BankLoad("ZealotHockey1", 7);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[7] = BankLastCreated();
    BankLoad("ZealotHockey1", 8);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[8] = BankLastCreated();
    BankLoad("ZealotHockey1", 9);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[9] = BankLastCreated();
    BankLoad("ZealotHockey1", 10);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[10] = BankLastCreated();
    BankLoad("ZealotHockey1", 11);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[11] = BankLastCreated();
    BankLoad("ZealotHockey1", 12);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[12] = BankLastCreated();
    BankLoad("ZealotHockey1", 13);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[13] = BankLastCreated();
    BankLoad("ZealotHockey1", 14);
    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
    gv_Banks[14] = BankLastCreated();
    if ((PlayerGroupCount(GameAttributePlayersForTeam(1)) == PlayerGroupCount(GameAttributePlayersForTeam(2))) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) >= 3) && (GameAttributeGameValue("2") != "0003")) {
        gv_ranked = true;
    }
    else {
        if ((PlayerHandle(1) == "") && (GameAttributeGameValue("2") != "0003")) {
            gv_ranked = true;
        }
        else {
            gv_ranked = false;
        }
    }
    auto0DA66135_g = GameAttributePlayersForTeam(1);
    auto0DA66135_var = -1;
    while (true) {
        auto0DA66135_var = PlayerGroupNextPlayer(auto0DA66135_g, auto0DA66135_var);
        if (auto0DA66135_var < 0) { break; }
        lv_locInt4 = (lv_locInt4+1);
        lv_team1elos = (lv_team1elos+BankValueGetAsFixed(gv_Banks[auto0DA66135_var], "stats", "elo2"));
        gv_boostcolor[auto0DA66135_var] = 2;
    }
    if ((lv_locInt4 != 0)) {
        lv_team1elos = (lv_team1elos/IntToFixed(lv_locInt4));
    }

    gv_team1ELO = lv_team1elos;
    if ((gv_team1ELO == 0.0)) {
        gv_team1ELO = 1.0;
    }

    autoC81EC17E_g = GameAttributePlayersForTeam(2);
    autoC81EC17E_var = -1;
    while (true) {
        autoC81EC17E_var = PlayerGroupNextPlayer(autoC81EC17E_g, autoC81EC17E_var);
        if (autoC81EC17E_var < 0) { break; }
        lv_locInt5 = (lv_locInt5+1);
        lv_team2elos = (lv_team2elos+BankValueGetAsFixed(gv_Banks[autoC81EC17E_var], "stats", "elo2"));
        gv_boostcolor[autoC81EC17E_var] = 1;
    }
    if ((lv_locInt5 != 0)) {
        lv_team2elos = (lv_team2elos/IntToFixed(lv_locInt5));
    }

    gv_team2ELO = lv_team2elos;
    if ((gv_team2ELO == 0.0)) {
        gv_team2ELO = 1.0;
    }

    auto3A6E4671_var = 1;
    for ( ; auto3A6E4671_var <= auto3A6E4671_ae; auto3A6E4671_var += 1 ) {
        if ((BankSectionCount(gv_Banks[auto3A6E4671_var]) > 0) && (BankVerify(gv_Banks[auto3A6E4671_var]) == false)) {
            gf_ClearBank(auto3A6E4671_var);
        }

    }
    autoAFF84BA8_g = GameAttributePlayersForTeam(1);
    autoAFF84BA8_var = -1;
    while (true) {
        autoAFF84BA8_var = PlayerGroupNextPlayer(autoAFF84BA8_g, autoAFF84BA8_var);
        if (autoAFF84BA8_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoAFF84BA8_var], "stats", "elostart3") != true)) {
            BankValueSetFromFixed(gv_Banks[autoAFF84BA8_var], "stats", "elo2", 1000.0);
            BankValueSetFromFlag(gv_Banks[autoAFF84BA8_var], "stats", "elostart3", true);
        }

        if ((BankValueGetAsFixed(gv_Banks[autoAFF84BA8_var], "stats", "elo2") < 1000.0)) {
            BankValueSetFromFixed(gv_Banks[autoAFF84BA8_var], "stats", "elo2", 1000.0);
        }

        gv_eloOLD[autoAFF84BA8_var] = BankValueGetAsFixed(gv_Banks[autoAFF84BA8_var], "stats", "elo2");
        if ((gv_ranked == true)) {
            gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
            if ((gv_eloDifference1 > 1600.0)) {
                gv_eloDifference1 = 1600.0;
            }

            BankValueSetFromFixed(gv_Banks[autoAFF84BA8_var], "stats", "elo2", (gv_eloOLD[autoAFF84BA8_var]-(((1000.0 / gv_team2ELO))*((50-((gv_eloDifference1 / 80.0))+1))*.333)));
            BankSave(gv_Banks[autoAFF84BA8_var]);
        }

    }
    auto10CCA7A4_g = GameAttributePlayersForTeam(2);
    auto10CCA7A4_var = -1;
    while (true) {
        auto10CCA7A4_var = PlayerGroupNextPlayer(auto10CCA7A4_g, auto10CCA7A4_var);
        if (auto10CCA7A4_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto10CCA7A4_var], "stats", "elostart3") != true)) {
            BankValueSetFromFixed(gv_Banks[auto10CCA7A4_var], "stats", "elo2", 1000.0);
            BankValueSetFromFlag(gv_Banks[auto10CCA7A4_var], "stats", "elostart3", true);
        }

        if ((BankValueGetAsFixed(gv_Banks[auto10CCA7A4_var], "stats", "elo2") < 100.0)) {
            BankValueSetFromFixed(gv_Banks[auto10CCA7A4_var], "stats", "elo2", 100.0);
        }

        gv_eloOLD[auto10CCA7A4_var] = BankValueGetAsFixed(gv_Banks[auto10CCA7A4_var], "stats", "elo2");
        if ((gv_ranked == true)) {
            gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
            if ((gv_eloDifference1 > 1600.0)) {
                gv_eloDifference1 = 1600.0;
            }

            BankValueSetFromFixed(gv_Banks[auto10CCA7A4_var], "stats", "elo2", (gv_eloOLD[auto10CCA7A4_var]-(((1000.0 / gv_team1ELO))*((50-((gv_eloDifference1 / 80.0))+1))*.333)));
            BankSave(gv_Banks[auto10CCA7A4_var]);
        }

    }
    autoE5D0F5D4_var = 1;
    for ( ; autoE5D0F5D4_var <= autoE5D0F5D4_ae; autoE5D0F5D4_var += 1 ) {
        if ((BankValueGetAsFlag(gv_Banks[autoE5D0F5D4_var], "Options", "Boost") == true)) {
            gv_options_CursorBoost[autoE5D0F5D4_var] = true;
        }

    }
    gf_InitializePlayerData();
    TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
    TimerPause(TimerLastStarted(), true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto1F2F928F_var = 1;
    for ( ; auto1F2F928F_var <= auto1F2F928F_ae; auto1F2F928F_var += 1 ) {
        gv_playerHandles[auto1F2F928F_var] = PlayerHandle(auto1F2F928F_var);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(1), lv_locplayergroup);
    libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(2), lv_locplayergroup);
    auto3A81F91F_g = lv_locplayergroup;
    auto3A81F91F_var = -1;
    while (true) {
        auto3A81F91F_var = PlayerGroupNextPlayer(auto3A81F91F_g, auto3A81F91F_var);
        if (auto3A81F91F_var < 0) { break; }
        if (((PlayerHandle(auto3A81F91F_var) == "1-S2-1-1457189") || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_SNIPER_EU))) {
            gv_unitSetType[auto3A81F91F_var] = 2;
        }

        if (((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_CREATOR1) || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_LEEROY_EU))) {
            gv_unitSetType[auto3A81F91F_var] = 3;
        }

        if ((PlayerHandle(auto3A81F91F_var) == "1-S2-1-2861047")) {
            gv_unitSetType[auto3A81F91F_var] = 4;
        }

        if (((PlayerHandle(auto3A81F91F_var) == "1-S2-1-986532") || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_MALDURASEU))) {
            gv_unitSetType[auto3A81F91F_var] = 5;
        }

        if ((PlayerHandle(auto3A81F91F_var) == "1-S2-1-1280160")) {
            gv_unitSetType[auto3A81F91F_var] = 6;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_DEATH) && (GameAttributeGameValue("2") != "0002")) {
            gv_unitSetType[auto3A81F91F_var] = 8;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_WILDFIRE)) {
            gv_unitSetType[auto3A81F91F_var] = 9;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_PORNHACK)) {
            gv_unitSetType[auto3A81F91F_var] = 10;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_KHOLIN)) {
            gv_unitSetType[auto3A81F91F_var] = 12;
        }

        if (((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_DOOMRAWRUS_NA) || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_DOOMRAWRUS_EU))) {
            gv_unitSetType[auto3A81F91F_var] = 13;
        }

        if (((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_PINKVOID) || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_PINKVOIDEU))) {
            gv_unitSetType[auto3A81F91F_var] = 14;
        }

        if (((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_THEROBSTR) || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_THEROBSTREU))) {
            gv_unitSetType[auto3A81F91F_var] = 15;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_BRUCE)) {
            gv_unitSetType[auto3A81F91F_var] = 17;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_DAGGIUS)) {
            gv_unitSetType[auto3A81F91F_var] = 19;
        }

        if (((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_ELDERSAGE) || (PlayerHandle(auto3A81F91F_var) == gv_hANDLE_ELDERSAGEEU))) {
            gv_unitSetType[auto3A81F91F_var] = 20;
        }

        if ((PlayerHandle(auto3A81F91F_var) == gv_hANDLE_SNAKEEU)) {
            gv_unitSetType[auto3A81F91F_var] = 21;
        }

    }
    auto338D7694_g = PlayerGroupActive();
    auto338D7694_var = -1;
    while (true) {
        auto338D7694_var = PlayerGroupNextPlayer(auto338D7694_g, auto338D7694_var);
        if (auto338D7694_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto338D7694_var], "Settings", "AltGoalie1") == true)) {
            gv_altgoalie[auto338D7694_var] = true;
        }

        if ((BankValueGetAsFlag(gv_Banks[auto338D7694_var], "Settings", "AltGoalie2") == true)) {
            gv_altgoalie2[auto338D7694_var] = true;
        }

        if ((BankValueGetAsFlag(gv_Banks[auto338D7694_var], "Settings", "AltGoalie3") == true)) {
            gv_altgoalie3[auto338D7694_var] = true;
        }

        if ((BankValueGetAsFlag(gv_Banks[auto338D7694_var], "Settings", "AltGoalie4") == true)) {
            gv_altgoalie4[auto338D7694_var] = true;
        }

        if ((BankValueGetAsInt(gv_Banks[auto338D7694_var], "Shop", "EquippedSkin") > 0) && (PlayerHandle(auto338D7694_var) != gv_hANDLE_CREATOR2) && (PlayerHandle(auto338D7694_var) != gv_hANDLE_CREATOR2EU)) {
            BankValueSetFromInt(gv_Banks[auto338D7694_var], "Shop", "EquippedSkin", 0);
        }

    }
    DialogCreate(800, 800, c_anchorTop, 0, 0, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\blank.dds");
    gv_ScoreDialog = DialogLastCreated();
    gv_uIScoreboardItems.lv_scoreboardDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 48, StringExternal("Param/Value/2B4A88F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_uIScoreboardItems.lv_scoreboardTimer = DialogControlLastCreated();
    gv_timer = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_uIScoreboardItems.lv_scoreboardTimer, "ModCenterSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 20, StringExternal("Param/Value/D0469213"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_uIScoreboardItems.lv_scoreboardPeriodText = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 21, 21, c_anchorTop, -31, 32, StringToText(""), "Assets\\Textures\\button-yellow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIScoreboardItems.lv_scoreboardPeriod1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 21, 21, c_anchorTop, 0, 32, StringToText(""), "Assets\\Textures\\button-black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIScoreboardItems.lv_scoreboardPeriod2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 21, 21, c_anchorTop, 31, 32, StringToText(""), "Assets\\Textures\\button-black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIScoreboardItems.lv_scoreboardPeriod3 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_uIScoreboardItems.lv_scoreboardPeriodText, "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 453, 77, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\scoreboarbg_redleft.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIScoreboardItems.lv_scoreboardBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 64, 64, c_anchorTop, -103, 14, StringExternal("Param/Value/A26AE8A4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    gv_ScoreDialogItem1 = DialogControlLastCreated();
    gv_uIScoreboardItems.lv_scoreboardScore1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 64, 64, c_anchorTop, 110, 14, StringExternal("Param/Value/FDECC0DF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    gv_ScoreDialogItem2 = DialogControlLastCreated();
    gv_uIScoreboardItems.lv_scoreboardScore2 = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore1, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardScore2, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardTimer, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_uIScoreboardItems.lv_scoreboardBG, PlayerGroupAll(), 0.5, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(200, 50, c_anchorBottom, 0, 15, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\blank.dds");
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringExternal("Param/Value/E739241E"), "");
    gf_Createteam3scoreboardlogos();
    gv_benchSwapButton = DialogControlLastCreated();
    gv_benchSwapDialog = DialogLastCreated();
    autoEA5636F8_g = GameAttributePlayersForTeam(1);
    autoEA5636F8_var = -1;
    while (true) {
        autoEA5636F8_var = PlayerGroupNextPlayer(autoEA5636F8_g, autoEA5636F8_var);
        if (autoEA5636F8_var < 0) { break; }
        if ((GameAttributePlayerValue("1", autoEA5636F8_var) == "0001")) {
            PlayerGroupAdd(lv_locplayergroupA, autoEA5636F8_var);
        }

    }
    autoFF03D8A3_g = lv_locplayergroupA;
    autoFF03D8A3_var = -1;
    while (true) {
        autoFF03D8A3_var = PlayerGroupNextPlayer(autoFF03D8A3_g, autoFF03D8A3_var);
        if (autoFF03D8A3_var < 0) { break; }
        if ((lv_LocInt1 < 5)) {
            if ((lv_LocInt1 == 1)) {
                gv_team1Captain = autoFF03D8A3_var;
            }

            gv_Players[lv_LocInt1] = autoFF03D8A3_var;
            PlayerGroupAdd(gv_teamPlayersGroup1, autoFF03D8A3_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt1-4)] = autoFF03D8A3_var;
        }
        lv_LocInt1 += 1;
    }
    PlayerGroupClear(lv_locplayergroupA);
    auto9563249B_g = GameAttributePlayersForTeam(1);
    auto9563249B_var = -1;
    while (true) {
        auto9563249B_var = PlayerGroupNextPlayer(auto9563249B_g, auto9563249B_var);
        if (auto9563249B_var < 0) { break; }
        if ((GameAttributePlayerValue("1", auto9563249B_var) == "0002")) {
            PlayerGroupAdd(lv_locplayergroupA, auto9563249B_var);
        }

    }
    auto80745CBE_g = lv_locplayergroupA;
    auto80745CBE_var = -1;
    while (true) {
        auto80745CBE_var = PlayerGroupNextPlayer(auto80745CBE_g, auto80745CBE_var);
        if (auto80745CBE_var < 0) { break; }
        if ((lv_LocInt1 < 5)) {
            if ((lv_LocInt1 == 1)) {
                gv_team1Captain = auto80745CBE_var;
            }

            gv_Players[lv_LocInt1] = auto80745CBE_var;
            PlayerGroupAdd(gv_teamPlayersGroup1, auto80745CBE_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt1-4)] = auto80745CBE_var;
        }
        lv_LocInt1 += 1;
    }
    PlayerGroupClear(lv_locplayergroupA);
    autoF64BD1F8_g = GameAttributePlayersForTeam(1);
    autoF64BD1F8_var = -1;
    while (true) {
        autoF64BD1F8_var = PlayerGroupNextPlayer(autoF64BD1F8_g, autoF64BD1F8_var);
        if (autoF64BD1F8_var < 0) { break; }
        if ((GameAttributePlayerValue("1", autoF64BD1F8_var) == "0003")) {
            PlayerGroupAdd(lv_locplayergroupA, autoF64BD1F8_var);
        }

    }
    autoF9A685D6_g = lv_locplayergroupA;
    autoF9A685D6_var = -1;
    while (true) {
        autoF9A685D6_var = PlayerGroupNextPlayer(autoF9A685D6_g, autoF9A685D6_var);
        if (autoF9A685D6_var < 0) { break; }
        if ((lv_LocInt1 < 5)) {
            if ((lv_LocInt1 == 1)) {
                gv_team1Captain = autoF9A685D6_var;
            }

            gv_Players[lv_LocInt1] = autoF9A685D6_var;
            PlayerGroupAdd(gv_teamPlayersGroup1, autoF9A685D6_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt1-4)] = autoF9A685D6_var;
        }
        lv_LocInt1 += 1;
    }
    PlayerGroupClear(lv_locplayergroupA);
    auto72CE78E9_g = GameAttributePlayersForTeam(2);
    auto72CE78E9_var = -1;
    while (true) {
        auto72CE78E9_var = PlayerGroupNextPlayer(auto72CE78E9_g, auto72CE78E9_var);
        if (auto72CE78E9_var < 0) { break; }
        if ((GameAttributePlayerValue("1", auto72CE78E9_var) == "0001")) {
            PlayerGroupAdd(lv_locplayergroupB, auto72CE78E9_var);
        }

    }
    autoE6E10435_g = lv_locplayergroupB;
    autoE6E10435_var = -1;
    while (true) {
        autoE6E10435_var = PlayerGroupNextPlayer(autoE6E10435_g, autoE6E10435_var);
        if (autoE6E10435_var < 0) { break; }
        if ((lv_LocInt2 < 9)) {
            if ((lv_LocInt2 == 5)) {
                gv_team2Captain = autoE6E10435_var;
            }

            gv_Players[lv_LocInt2] = autoE6E10435_var;
            PlayerGroupAdd(gv_teamPlayersGroup2, autoE6E10435_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt2-6)] = autoE6E10435_var;
        }
        lv_LocInt2 += 1;
    }
    PlayerGroupClear(lv_locplayergroupB);
    autoC6306406_g = GameAttributePlayersForTeam(2);
    autoC6306406_var = -1;
    while (true) {
        autoC6306406_var = PlayerGroupNextPlayer(autoC6306406_g, autoC6306406_var);
        if (autoC6306406_var < 0) { break; }
        if ((GameAttributePlayerValue("1", autoC6306406_var) == "0002")) {
            PlayerGroupAdd(lv_locplayergroupB, autoC6306406_var);
        }

    }
    auto61DE2D6F_g = lv_locplayergroupB;
    auto61DE2D6F_var = -1;
    while (true) {
        auto61DE2D6F_var = PlayerGroupNextPlayer(auto61DE2D6F_g, auto61DE2D6F_var);
        if (auto61DE2D6F_var < 0) { break; }
        if ((lv_LocInt2 < 9)) {
            if ((lv_LocInt2 == 5)) {
                gv_team2Captain = auto61DE2D6F_var;
            }

            gv_Players[lv_LocInt2] = auto61DE2D6F_var;
            PlayerGroupAdd(gv_teamPlayersGroup2, auto61DE2D6F_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt2-6)] = auto61DE2D6F_var;
        }
        lv_LocInt2 += 1;
    }
    PlayerGroupClear(lv_locplayergroupB);
    auto00FEAF2A_g = GameAttributePlayersForTeam(2);
    auto00FEAF2A_var = -1;
    while (true) {
        auto00FEAF2A_var = PlayerGroupNextPlayer(auto00FEAF2A_g, auto00FEAF2A_var);
        if (auto00FEAF2A_var < 0) { break; }
        if ((GameAttributePlayerValue("1", auto00FEAF2A_var) == "0003")) {
            PlayerGroupAdd(lv_locplayergroupB, auto00FEAF2A_var);
        }

    }
    auto5A5EC18F_g = lv_locplayergroupB;
    auto5A5EC18F_var = -1;
    while (true) {
        auto5A5EC18F_var = PlayerGroupNextPlayer(auto5A5EC18F_g, auto5A5EC18F_var);
        if (auto5A5EC18F_var < 0) { break; }
        if ((lv_LocInt2 < 9)) {
            if ((lv_LocInt2 == 5)) {
                gv_team2Captain = auto5A5EC18F_var;
            }

            gv_Players[lv_LocInt2] = auto5A5EC18F_var;
            PlayerGroupAdd(gv_teamPlayersGroup2, auto5A5EC18F_var);
        }
        else {
            gv_benchPlayers[(lv_LocInt2-6)] = auto5A5EC18F_var;
        }
        lv_LocInt2 += 1;
    }
    PlayerGroupClear(lv_locplayergroupB);
    auto3957BB08_var = 1;
    for ( ; auto3957BB08_var <= auto3957BB08_ae; auto3957BB08_var += 1 ) {
        if ((gv_Players[auto3957BB08_var] != 0)) {
            lv_pK1 = (lv_pK1 * StringToInt(StringSub(PlayerHandle(gv_Players[auto3957BB08_var]), 10, 11)));
        }

    }
    autoD2112ACD_var = 5;
    for ( ; autoD2112ACD_var <= autoD2112ACD_ae; autoD2112ACD_var += 1 ) {
        if ((gv_Players[autoD2112ACD_var] != 0)) {
            lv_pK2 = (lv_pK2 * StringToInt(StringSub(PlayerHandle(gv_Players[autoD2112ACD_var]), 10, 11)));
        }

    }
    gv_public_Key = (lv_pK1 + lv_pK2);
    auto6F0F5F9C_var = 1;
    for ( ; auto6F0F5F9C_var <= auto6F0F5F9C_ae; auto6F0F5F9C_var += 1 ) {
        VisRevealArea(auto6F0F5F9C_var, RegionEntireMap(), 0.0, false);
        DialogCreate(659, 24, c_anchorBottom, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_PowerBarDialog[auto6F0F5F9C_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 659, 24, c_anchorLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1, 20, c_anchorTopLeft, 2, 2, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 75.69, 0.00), PlayerGroupAll());
        gv_PowerBarImage[auto6F0F5F9C_var] = DialogControlLastCreated();
    }
    DialogCreate(800, 200, c_anchorTop, 0, 0, true);
    gv_timerDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 30, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(650, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_StatsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 400, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 300, 75, c_anchorTop, 0, 0, StringToText(""), "hockeyheader.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/F5437E69"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto316F0703_var = 1;
    for ( ; auto316F0703_var <= auto316F0703_ae; auto316F0703_var += 1 ) {
        if ((PlayerStatus(gv_Players[auto316F0703_var]) == c_playerStatusActive)) {
            TextExpressionSetToken("Param/Expression/C13ED784", "A", PlayerName(gv_Players[auto316F0703_var]));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 50, (50+(auto316F0703_var*30)), TextExpressionAssemble("Param/Expression/C13ED784"), ColorWithAlpha(0,0,0,0), false, 2.0);
            TextExpressionSetToken("Param/Expression/45A377F5", "A", IntToText(gv_stats_GamesPlayed[gv_Players[auto316F0703_var]]));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 350, (50+(auto316F0703_var*30)), TextExpressionAssemble("Param/Expression/45A377F5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_stats_GamesPlayed[gv_Players[auto316F0703_var]] == 0)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(auto316F0703_var*30)), StringExternal("Param/Value/58B4646D"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            else {
                lv_LocReal = ((IntToFixed(gv_stats_GamesWon[gv_Players[auto316F0703_var]])/IntToFixed(gv_stats_GamesPlayed[gv_Players[auto316F0703_var]]))*100);
                if ((lv_LocReal <= 100.0)) {
                    TextExpressionSetToken("Param/Expression/00FEC5CD", "A", FixedToText(lv_LocReal, 0));
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(auto316F0703_var*30)), TextExpressionAssemble("Param/Expression/00FEC5CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 550, (50+(auto316F0703_var*30)), IntToText(gv_stats_Points[gv_Players[auto316F0703_var]]), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(auto316F0703_var*30)), TextExpressionAssemble("Param/Expression/91F3DE7B"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 550, (50+(auto316F0703_var*30)), StringExternal("Param/Value/8429AF8F"), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
            }
        }

    }
    autoBB63B035_var = 5;
    for ( ; autoBB63B035_var <= autoBB63B035_ae; autoBB63B035_var += 1 ) {
        if ((PlayerStatus(gv_Players[autoBB63B035_var]) == c_playerStatusActive)) {
            TextExpressionSetToken("Param/Expression/47F98F5E", "A", PlayerName(gv_Players[autoBB63B035_var]));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 50, (50+(autoBB63B035_var*30)), TextExpressionAssemble("Param/Expression/47F98F5E"), ColorWithAlpha(0,0,0,0), false, 2.0);
            TextExpressionSetToken("Param/Expression/C0F76B74", "A", IntToText(gv_stats_GamesPlayed[gv_Players[autoBB63B035_var]]));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 350, (50+(autoBB63B035_var*30)), TextExpressionAssemble("Param/Expression/C0F76B74"), ColorWithAlpha(0,0,0,0), false, 2.0);
            if ((gv_stats_GamesPlayed[gv_Players[autoBB63B035_var]] == 0)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(autoBB63B035_var*30)), StringExternal("Param/Value/79440880"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            else {
                lv_LocReal = ((IntToFixed(gv_stats_GamesWon[gv_Players[autoBB63B035_var]])/IntToFixed(gv_stats_GamesPlayed[gv_Players[autoBB63B035_var]]))*100);
                if ((lv_LocReal <= 100.0)) {
                    TextExpressionSetToken("Param/Expression/BF5EE939", "A", FixedToText(lv_LocReal, 0));
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(autoBB63B035_var*30)), TextExpressionAssemble("Param/Expression/BF5EE939"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 550, (50+(autoBB63B035_var*30)), IntToText(gv_stats_Points[gv_Players[autoBB63B035_var]]), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 460, (50+(autoBB63B035_var*30)), TextExpressionAssemble("Param/Expression/14A9E25F"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 550, (50+(autoBB63B035_var*30)), StringExternal("Param/Value/B969EC49"), ColorWithAlpha(0,0,0,0), false, 2.0);
                }
            }
        }

    }
    gf_CreateAchievmentIcons();
    auto68B480E7_g = lv_locplayergroup;
    auto68B480E7_var = -1;
    while (true) {
        auto68B480E7_var = PlayerGroupNextPlayer(auto68B480E7_g, auto68B480E7_var);
        if (auto68B480E7_var < 0) { break; }
        if ((PlayerStatus(auto68B480E7_var) == c_playerStatusActive)) {
            if ((gv_stats_GamesPlayed[auto68B480E7_var] > 0)) {
                lv_LocReal = BankValueGetAsFixed(gv_Banks[auto68B480E7_var], "stats", "elo2");
            }

            if ((lv_LocReal > 1005.0)) {
                gv_playerRank[auto68B480E7_var] = 1;
                if ((lv_LocReal > 1250.0)) {
                    gv_playerRank[auto68B480E7_var] = 2;
                    if ((lv_LocReal > 1500.0)) {
                        gv_playerRank[auto68B480E7_var] = 3;
                        if ((lv_LocReal > 2000.0)) {
                            gv_playerRank[auto68B480E7_var] = 4;
                            if ((lv_LocReal > 3000.0)) {
                                gv_playerRank[auto68B480E7_var] = 5;
                                if ((lv_LocReal > 4000.0)) {
                                    gv_playerRank[auto68B480E7_var] = 6;
                                }

                            }

                        }

                    }

                }

            }

        }

    }
    auto1EB95801_g = lv_locplayergroup;
    auto1EB95801_var = -1;
    while (true) {
        auto1EB95801_var = PlayerGroupNextPlayer(auto1EB95801_g, auto1EB95801_var);
        if (auto1EB95801_var < 0) { break; }
        if ((BankKeyExists(gv_Banks[auto1EB95801_var], "Stats", "GoalieELO") == false)) {
            BankValueSetFromFixed(gv_Banks[auto1EB95801_var], "Stats", "GoalieELO", 1500);
        }

    }
    auto5FF20298_g = PlayerGroupActive();
    auto5FF20298_var = -1;
    while (true) {
        auto5FF20298_var = PlayerGroupNextPlayer(auto5FF20298_g, auto5FF20298_var);
        if (auto5FF20298_var < 0) { break; }
        if (((PlayerHandle(auto5FF20298_var) == gv_hANDLE_STEALTH) || (PlayerHandle(auto5FF20298_var) == gv_hANDLE_STEALTHEU)) && (BankKeyExists(gv_Banks[auto5FF20298_var], "Settings", "PrizeToggle") == false)) {
            TextExpressionSetToken("Param/Expression/62CC1099", "A", PlayerName(auto5FF20298_var));
            UIDisplayMessage(PlayerGroupSingle(auto5FF20298_var), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/62CC1099"));
            BankValueSetFromInt(gv_Banks[auto5FF20298_var], "Settings", "PrizeToggle", 0);
        }

    }
    DialogCreate(1500, 300, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 25, c_anchorBottomLeft, 430, 25, StringExternal("Param/Value/92C51B41"), ColorWithAlpha(0,0,0,0), true, 2.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_optionsItems[0] = DialogControlLastCreated();
    DialogCreate(1500, 3000, c_anchorTopLeft, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 3000, c_anchorBottomLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    gv_options = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 65, c_anchorTopLeft, 0, 33, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 65, c_anchorTopLeft, 0, 212, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 65, c_anchorTopLeft, 0, 501, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 65, c_anchorTopLeft, 0, 639, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 31, 30, c_anchorTopLeft, 24, 50, StringToText(""), "Intro\\stats assets\\settings-icon-goalie.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 78, 54, StringExternal("Param/Value/530A7093"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 31, 30, c_anchorTopLeft, 24, 229, StringToText(""), "Intro\\stats assets\\settings-icon-interface.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 78, 234, StringExternal("Param/Value/2B3F4A58"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 31, 30, c_anchorTopLeft, 24, 518, StringToText(""), "Intro\\stats assets\\settings-icon-controls.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 78, 523, StringExternal("Param/Value/422F00DB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 31, 30, c_anchorTopLeft, 24, 656, StringToText(""), "Intro\\stats assets\\settings-icon-environment.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 78, 661, StringExternal("Param/Value/04E5E1DD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 80, c_anchorTopLeft, 25, 1000, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(11.76, 27.45, 51.76), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 80, c_anchorTopLeft, 25, 1000, StringExternal("Param/Value/895CDC20"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 80, c_anchorTopLeft, 25, 1000, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_optionsItems[11] = DialogControlLastCreated();
    if ((GameAttributeGameValue("2") == "0001")) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 50, c_anchorTopLeft, 25, 875, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(99.61, 32.55, 0.39), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 25, 875, StringExternal("Param/Value/3EF0E110"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 50, c_anchorTopLeft, 25, 875, StringToText(""), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        gv_voteKickButton = DialogControlLastCreated();
    }

    gf_CheckWatchlist();
    autoDAF214A6_g = lv_locplayergroup;
    autoDAF214A6_var = -1;
    while (true) {
        autoDAF214A6_var = PlayerGroupNextPlayer(autoDAF214A6_g, autoDAF214A6_var);
        if (autoDAF214A6_var < 0) { break; }
        if ((gv_stats_SkaterTime[autoDAF214A6_var] == 0)) {
            gf_Info(autoDAF214A6_var);
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 169, StringExternal("Param/Value/64242EB2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 165, StringExternal("Param/Value/34244658"), false);
    auto3359CE78_g = lv_locplayergroup;
    auto3359CE78_var = -1;
    while (true) {
        auto3359CE78_var = PlayerGroupNextPlayer(auto3359CE78_g, auto3359CE78_var);
        if (auto3359CE78_var < 0) { break; }
        if ((gv_options_OptOutGoalie[auto3359CE78_var] == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto3359CE78_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto3359CE78_var));
        }
    }
    gv_optionsItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 129, StringExternal("Param/Value/338B0FF3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 125, StringExternal("Param/Value/274989DD"), false);
    autoD217D5DA_g = lv_locplayergroup;
    autoD217D5DA_var = -1;
    while (true) {
        autoD217D5DA_var = PlayerGroupNextPlayer(autoD217D5DA_g, autoD217D5DA_var);
        if (autoD217D5DA_var < 0) { break; }
        if ((gv_options_OptInGoalie[autoD217D5DA_var] == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoD217D5DA_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(autoD217D5DA_var));
        }
    }
    gv_optionsItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 250, 129, StringExternal("Param/Value/FF9DCB1C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 215, 125, StringExternal("Param/Value/00831F81"), false);
    auto99DA056F_g = lv_locplayergroup;
    auto99DA056F_var = -1;
    while (true) {
        auto99DA056F_var = PlayerGroupNextPlayer(auto99DA056F_g, auto99DA056F_var);
        if (auto99DA056F_var < 0) { break; }
        if ((gv_options_CursorBoost[auto99DA056F_var] == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto99DA056F_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto99DA056F_var));
        }
    }
    gv_optionsItems[3] = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 734, StringExternal("Param/Value/487D8085"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 730, StringExternal("Param/Value/8EA93A61"), false);
    gv_optionsItems[7] = DialogControlLastCreated();
    auto3CC81F02_g = lv_locplayergroup;
    auto3CC81F02_var = -1;
    while (true) {
        auto3CC81F02_var = PlayerGroupNextPlayer(auto3CC81F02_g, auto3CC81F02_var);
        if (auto3CC81F02_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto3CC81F02_var], "Settings", "Lights") == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto3CC81F02_var));
            gf_HideLightSettingsInit(PlayerGroupSingle(auto3CC81F02_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto3CC81F02_var));
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 814, StringExternal("Param/Value/F1B61EE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 810, StringExternal("Param/Value/912E768E"), false);
    auto3D52D59C_g = lv_locplayergroup;
    auto3D52D59C_var = -1;
    while (true) {
        auto3D52D59C_var = PlayerGroupNextPlayer(auto3D52D59C_g, auto3D52D59C_var);
        if (auto3D52D59C_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto3D52D59C_var], "Settings", "Lighting") == false)) {
            PlayerSetLighting(EventPlayer(), "IceWorldNight", 0.5);
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto3D52D59C_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto3D52D59C_var));
        }
    }
    gv_optionsItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 195, 814, StringExternal("Param/Value/DA60EF8C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 160, 810, StringExternal("Param/Value/E1D3D610"), false);
    auto9A7CE9BE_g = lv_locplayergroup;
    auto9A7CE9BE_var = -1;
    while (true) {
        auto9A7CE9BE_var = PlayerGroupNextPlayer(auto9A7CE9BE_g, auto9A7CE9BE_var);
        if (auto9A7CE9BE_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto9A7CE9BE_var], "Settings", "Lighting") == false)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto9A7CE9BE_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto9A7CE9BE_var));
        }
    }
    gv_optionsItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(78.0, 128.0));
    gv_snowactors[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(128.0, 128.0));
    gv_snowactors[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(175.0, 128.0));
    gv_snowactors[3] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(78.0, 95.0));
    gv_snowactors[4] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(128.0, 95.0));
    gv_snowactors[5] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("Snow", Point(175.0, 95.0));
    gv_snowactors[6] = libNtve_gf_ActorLastCreated();
    auto54B0DD57_var = 1;
    for ( ; auto54B0DD57_var <= auto54B0DD57_ae; auto54B0DD57_var += 1 ) {
        gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), gv_snowactors[auto54B0DD57_var], false);
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 774, StringExternal("Param/Value/107FAF59"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 770, StringExternal("Param/Value/9664AE70"), false);
    auto08422AE9_g = lv_locplayergroup;
    auto08422AE9_var = -1;
    while (true) {
        auto08422AE9_var = PlayerGroupNextPlayer(auto08422AE9_g, auto08422AE9_var);
        if (auto08422AE9_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto08422AE9_var], "Settings", "Snow") == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto08422AE9_var));
            auto539CDE0D_var = 1;
            for ( ; auto539CDE0D_var <= auto539CDE0D_ae; auto539CDE0D_var += 1 ) {
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(auto08422AE9_var), gv_snowactors[auto539CDE0D_var], true);
            }
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto08422AE9_var));
        }
    }
    gv_optionsItems[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 594, StringExternal("Param/Value/A6061993"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 590, StringExternal("Param/Value/56C573E1"), false);
    auto50E6A960_g = lv_locplayergroup;
    auto50E6A960_var = -1;
    while (true) {
        auto50E6A960_var = PlayerGroupNextPlayer(auto50E6A960_g, auto50E6A960_var);
        if (auto50E6A960_var < 0) { break; }
        if ((BankKeyExists(gv_Banks[auto50E6A960_var], "Settings", "Hotkeys") == false)) {
            BankValueSetFromFlag(gv_Banks[auto50E6A960_var], "Settings", "Hotkeys", true);
        }

    }
    auto95EF833C_g = lv_locplayergroup;
    auto95EF833C_var = -1;
    while (true) {
        auto95EF833C_var = PlayerGroupNextPlayer(auto95EF833C_g, auto95EF833C_var);
        if (auto95EF833C_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto95EF833C_var], "Settings", "Hotkeys") == true)) {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto95EF833C_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(auto95EF833C_var));
        }
    }
    gv_optionsItems[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 195, 594, StringExternal("Param/Value/1323B5E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 160, 590, StringExternal("Param/Value/864F5785"), false);
    autoB18FD59B_g = lv_locplayergroup;
    autoB18FD59B_var = -1;
    while (true) {
        autoB18FD59B_var = PlayerGroupNextPlayer(autoB18FD59B_g, autoB18FD59B_var);
        if (autoB18FD59B_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoB18FD59B_var], "Settings", "Hotkeys") == false)) {
            gf_SetAllHotkeys3(EventPlayer(), false);
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[1], StringExternal("Param/Value/B84C8D39"), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[2], StringExternal("Param/Value/C93A0F55"), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[3], StringExternal("Param/Value/F46800A9"), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoB18FD59B_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(autoB18FD59B_var));
        }
    }
    gv_optionsItems[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 25, c_anchorTopLeft, 60, 304, StringExternal("Param/Value/631434FF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 299, StringExternal("Param/Value/C9673A40"), false);
    autoDA2FE64F_g = lv_locplayergroup;
    autoDA2FE64F_var = -1;
    while (true) {
        autoDA2FE64F_var = PlayerGroupNextPlayer(autoDA2FE64F_g, autoDA2FE64F_var);
        if (autoDA2FE64F_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoDA2FE64F_var], "Settings", "uihide") == true)) {
            UISetFrameVisible(PlayerGroupSingle(autoDA2FE64F_var), c_syncFrameTypeAllianceButton, false);
            DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(autoDA2FE64F_var), c_anchorBottom, 0, -9999);
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(autoDA2FE64F_var), c_anchorBottomRight, 0, -9999);
            DialogSetPosition(gv_PowerBarDialog[autoDA2FE64F_var], c_anchorBottom, 0, 150);
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(autoDA2FE64F_var));
        }
        else {
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoDA2FE64F_var));
        }
    }
    gv_optionsItems[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 344, StringExternal("Param/Value/AF1E6D12"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 339, StringExternal("Param/Value/6AECD7D8"), false);
    autoBF6FBBA8_g = lv_locplayergroup;
    autoBF6FBBA8_var = -1;
    while (true) {
        autoBF6FBBA8_var = PlayerGroupNextPlayer(autoBF6FBBA8_g, autoBF6FBBA8_var);
        if (autoBF6FBBA8_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoBF6FBBA8_var], "Settings", "markerhide") == true)) {
            gv_puckMarkerShow[autoBF6FBBA8_var] = false;
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoBF6FBBA8_var));
            DialogControlSetVisible(gv_puckMarkerImage, PlayerGroupSingle(autoBF6FBBA8_var), false);
        }

    }
    gv_optionsItems[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 382, StringExternal("Param/Value/74C37175"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 377, StringExternal("Param/Value/B480E64C"), false);
    auto0FAFF5E5_g = lv_locplayergroup;
    auto0FAFF5E5_var = -1;
    while (true) {
        auto0FAFF5E5_var = PlayerGroupNextPlayer(auto0FAFF5E5_g, auto0FAFF5E5_var);
        if (auto0FAFF5E5_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[auto0FAFF5E5_var], "Settings", "nametaghide") == true)) {
            gv_nameTagShow[auto0FAFF5E5_var] = false;
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(auto0FAFF5E5_var));
        }

    }
    gv_optionsItems[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 420, StringExternal("Param/Value/6015813E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 415, StringExternal("Param/Value/18831317"), false);
    autoD012B8AF_g = lv_locplayergroup;
    autoD012B8AF_var = -1;
    while (true) {
        autoD012B8AF_var = PlayerGroupNextPlayer(autoD012B8AF_g, autoD012B8AF_var);
        if (autoD012B8AF_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoD012B8AF_var], "Settings", "verticalview") == true)) {
            gv_verticalCamera[autoD012B8AF_var] = true;
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoD012B8AF_var));
        }

    }
    gv_optionsItems[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, 458, StringExternal("Param/Value/F6434EAA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorTopLeft, 25, 453, StringExternal("Param/Value/F4F5110F"), false);
    autoC874F670_g = lv_locplayergroup;
    autoC874F670_var = -1;
    while (true) {
        autoC874F670_var = PlayerGroupNextPlayer(autoC874F670_g, autoC874F670_var);
        if (autoC874F670_var < 0) { break; }
        if ((BankValueGetAsFlag(gv_Banks[autoC874F670_var], "Settings", "mirrorview") == true)) {
            gv_mirroredCamera[autoC874F670_var] = true;
            libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(autoC874F670_var));
        }

    }
    gv_optionsItems[15] = DialogControlLastCreated();
    DialogCreate(620, 200, c_anchorBottom, 0, 0, true);
    gv_uIElements.lv_cDDialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIElements.lv_cDDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 190, 20, c_anchorBottomLeft, 10, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGZXCV1234[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 190, 20, c_anchorBottom, 5, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGZXCV1234[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 190, 20, c_anchorBottomRight, 0, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGZXCV1234[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 160, 20, c_anchorBottomLeft, 40, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGDARKZXCV1234[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 160, 20, c_anchorBottom, 20, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGDARKZXCV1234[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 160, 20, c_anchorBottomRight, 0, 10, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBGDARKZXCV1234[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 154, 16, c_anchorBottomLeft, 42, 12, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBARZXCV1234[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 154, 16, c_anchorBottomLeft, 252, 12, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBARZXCV1234[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIElements.lv_cDDialog, 154, 16, c_anchorBottomLeft, 462, 12, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIElements.lv_cDBARZXCV1234[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_uIElements.lv_cDDialog, 60, 20, c_anchorBottomLeft, 18, 8, StringExternal("Param/Value/777B3274"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_uIElements.lv_cDHotkeyZXCV1234[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_uIElements.lv_cDDialog, 60, 20, c_anchorBottom, -52, 8, StringExternal("Param/Value/0D928207"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_uIElements.lv_cDHotkeyZXCV1234[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_uIElements.lv_cDDialog, 60, 20, c_anchorBottomRight, 122, 8, StringExternal("Param/Value/588D5AFB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_uIElements.lv_cDHotkeyZXCV1234[3] = DialogControlLastCreated();
    auto9EABFAA7_var = 1;
    for ( ; auto9EABFAA7_var <= auto9EABFAA7_ae; auto9EABFAA7_var += 1 ) {
        DialogControlFadeTransparency(gv_uIElements.lv_cDBGZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), 0.0, 40.0);
        DialogControlFadeTransparency(gv_uIElements.lv_cDBGDARKZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), 0.0, 40.0);
        libNtve_gf_SetDialogItemDesaturated(gv_uIElements.lv_cDBARZXCV1234[auto9EABFAA7_var], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_uIElements.lv_cDBARZXCV1234[auto9EABFAA7_var], Color(0.00, 75.69, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), false);
        DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[auto9EABFAA7_var], PlayerGroupActive(), false);
    }
    DialogSetVisible(gv_uIElements.lv_cDDialog, PlayerGroupAll(), true);
    DialogCreate(100, 100, c_anchorBottomLeft, 0, 0, true);
    gv_optionsViewController = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 29, 29, c_anchorBottomLeft, 3, 3, StringExternal("Param/Value/B6802067"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_optionVCB = DialogControlLastCreated();
    libNtve_gf_SetDialogItemBorderImage(DialogControlLastCreated(), "", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 29, 29, c_anchorBottomLeft, 3, 3, StringToText(""), "settingscog.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_optionVCI = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    autoA4C6DF43_g = lv_locplayergroup;
    autoA4C6DF43_var = -1;
    while (true) {
        autoA4C6DF43_var = PlayerGroupNextPlayer(autoA4C6DF43_g, autoA4C6DF43_var);
        if (autoA4C6DF43_var < 0) { break; }
        DialogSetVisible(gv_options, PlayerGroupSingle(autoA4C6DF43_var), false);
        libNtve_gf_SetDialogItemImage(gv_optionVCI, "settingscog.dds", PlayerGroupSingle(autoA4C6DF43_var));
        libNtve_gf_SetDialogItemTooltip(gv_optionVCB, StringExternal("Param/Value/91482EB3"), PlayerGroupSingle(autoA4C6DF43_var));
    }
    gf_CreateUIOptionsDialog();
    DialogCreate(1200, 1000, c_anchorCenter, 0, 0, true);
    gv_goalieStatsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_locInt3 = 0;
    auto0373773B_g = lv_locplayergroup;
    auto0373773B_var = -1;
    while (true) {
        auto0373773B_var = PlayerGroupNextPlayer(auto0373773B_g, auto0373773B_var);
        if (auto0373773B_var < 0) { break; }
        if ((gv_stats_Version[auto0373773B_var] < 5) && (gv_ranked == true)) {
            UIDisplayMessage(PlayerGroupSingle(auto0373773B_var), c_messageAreaSubtitle, StringExternal("Param/Value/63E473EA"));
            BankValueSetFromInt(gv_Banks[auto0373773B_var], "Stats", "LegacyGames", gv_stats_GamesPlayed[auto0373773B_var]);
            gv_stats_GamesPlayed[auto0373773B_var] = 0;
            gv_stats_GamesWon[auto0373773B_var] = 0;
            gv_stats_Version[auto0373773B_var] = 5;
            gf_SaveBank(auto0373773B_var);
        }

        if ((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Shots") > 0) && (BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "SkaterTime") > 0) && ((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallGoalieBlocks") + BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallGoalieLets")) > 0) && (BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Turnovers") > 0) && (BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallDefensiveLets") > 0)) {
            gv_offense[auto0373773B_var] = (-5/((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Goals") / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Shots")))+0.0463) + 108);
            if ((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallDefensiveLets") > 0) && ((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "DefensivePoints") / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallDefensiveLets"))) <= 0.135)) {
                gv_defense[auto0373773B_var] = 0.0;
            }
            else {
                gv_defense[auto0373773B_var] = (-115/((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "DefensivePoints") / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallDefensiveLets")))+1)+115);
            }
            gv_goalie[auto0373773B_var] = (((- 450000/(BankValueGetAsFixed(gv_Banks[auto0373773B_var], "Stats", "GoalieELO")+1050))+ 240)*0.75 + (((IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallGoalieBlocks"))/(IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallGoalieBlocks"))+IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "OverallGoalieLets"))))*100)+10)*0.25);
            if ((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "FaceoffWins") > 0)) {
                gv_handling[auto0373773B_var] = (((- 80/((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Steals") / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Turnovers"))) +0.64))+ 125)*0.45 + ((- 5/((IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "SkaterPossessionTime")) / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "SkaterTime"))) +0.0476))+ 105)*0.45 + ((-50/((BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "FaceoffWins") / IntToFixed(BankValueGetAsInt(gv_Banks[auto0373773B_var], "Stats", "Faceoffs")))+0.2))+150)*0.1);
            }

            gv_overall[auto0373773B_var] = ((gv_offense[auto0373773B_var]+gv_defense[auto0373773B_var]+gv_goalie[auto0373773B_var]+gv_handling[auto0373773B_var])/4);
            gf_CreatePlayerStats(auto0373773B_var);
        }

    }
    DialogCreate(800, 400, c_anchorBottomRight, 100, 0, true);
    gv_cmddiag = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 50, c_anchorBottom, 0, 0, StringToText(""), "black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_cmddiagitems[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 9999, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    gv_cmddiagitems[0] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 35, 35, c_anchorBottom, 250, 0, StringToText(""), StringExternal("Param/Value/A2C964B1"), "");
    gv_cmddiagitems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 35, 35, c_anchorBottom, 250, 30, StringToText(""), StringExternal("Param/Value/729AA1B8"), "");
    gv_cmddiagitems[2] = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gf_Setinitialtabstatcharges();
    autoF16C992E_g = GameAttributePlayersForTeam(3);
    autoF16C992E_var = -1;
    while (true) {
        autoF16C992E_var = PlayerGroupNextPlayer(autoF16C992E_g, autoF16C992E_var);
        if (autoF16C992E_var < 0) { break; }
        DialogSetVisible(gv_options, GameAttributePlayersForTeam(3), false);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamPlayersGroup1, gv_actualPlayerzonTeam[1]);
    autoC3A16846_g = gv_teamPlayersGroup1;
    autoC3A16846_var = -1;
    while (true) {
        autoC3A16846_var = PlayerGroupNextPlayer(autoC3A16846_g, autoC3A16846_var);
        if (autoC3A16846_var < 0) { break; }
        gv_shieldcolor[autoC3A16846_var] = 2;
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teamPlayersGroup2, gv_actualPlayerzonTeam[2]);
    auto531A4794_g = gv_teamPlayersGroup2;
    auto531A4794_var = -1;
    while (true) {
        auto531A4794_var = PlayerGroupNextPlayer(auto531A4794_g, auto531A4794_var);
        if (auto531A4794_var < 0) { break; }
        gv_shieldcolor[auto531A4794_var] = 1;
    }
    if ((PlayerStatus(gv_benchPlayers[1]) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_benchPlayers[1]) == false)) {
        PlayerGroupAdd(gv_actualPlayerzonTeam[1], gv_benchPlayers[1]);
    }

    if ((PlayerStatus(gv_benchPlayers[2]) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_benchPlayers[2]) == false)) {
        PlayerGroupAdd(gv_actualPlayerzonTeam[1], gv_benchPlayers[2]);
    }

    if ((PlayerStatus(gv_benchPlayers[3]) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_benchPlayers[3]) == false)) {
        PlayerGroupAdd(gv_actualPlayerzonTeam[2], gv_benchPlayers[3]);
    }

    if ((PlayerStatus(gv_benchPlayers[4]) == c_playerStatusActive) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_benchPlayers[4]) == false)) {
        PlayerGroupAdd(gv_actualPlayerzonTeam[2], gv_benchPlayers[4]);
    }

    gf_Team3UIDetectSavedGames();
    TriggerExecute(gt_UIInitialintro, true, true);
    if ((gv_skipstart == false)) {
        Wait(12.0, c_timeGame);
    }

    gf_Cleanupintrologos();
    DialogSetVisible(gv_StatsDialog, PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/2A2462AF", "A", IntToText(gv_sOG1));
    libNtve_gf_CreateDialogItemLabel(gv_ScoreDialog, 64, 64, c_anchorTop, -103, 42, TextExpressionAssemble("Param/Expression/2A2462AF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_shotsOnGoal1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    if ((gv_rEDLINE_MODE == true)) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    else {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    }
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/83B1A2BB", "A", IntToText(gv_sOG2));
    libNtve_gf_CreateDialogItemLabel(gv_ScoreDialog, 64, 64, c_anchorTop, 110, 42, TextExpressionAssemble("Param/Expression/83B1A2BB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_shotsOnGoal2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    if ((gv_rEDLINE_MODE == true)) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    }
    else {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    }
    DialogCreate(400, 75, c_anchorBottom, 0, 0, true);
    gv_pullGoalieDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottom, 0, -50, StringExternal("Param/Value/6B6BEBDC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_pullingGoalieLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 0, StringToText(""), StringExternal("Param/Value/3483B40F"), "");
    gv_cancelGoalieButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 400, 75, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/B149FC61"), "");
    gv_pullGoalieButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/996E05C2"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gf_InitializeKeyDialog();
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    autoB8DA709B_g = PlayerGroupAll();
    autoB8DA709B_var = -1;
    while (true) {
        autoB8DA709B_var = PlayerGroupNextPlayer(autoB8DA709B_g, autoB8DA709B_var);
        if (autoB8DA709B_var < 0) { break; }
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], autoB8DA709B_var) == true)) {
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(autoB8DA709B_var), c_anchorBottomRight, 0, 0);
        }
        else {
            DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(autoB8DA709B_var), c_anchorBottomRight, 0, -9999);
            UISetFrameVisible(PlayerGroupSingle(autoB8DA709B_var), c_syncFrameTypeAllianceButton, false);
        }
    }
    auto0CF27661_g = GameAttributePlayersForTeam(3);
    auto0CF27661_var = -1;
    while (true) {
        auto0CF27661_var = PlayerGroupNextPlayer(auto0CF27661_g, auto0CF27661_var);
        if (auto0CF27661_var < 0) { break; }
        DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto0CF27661_var), c_anchorBottomRight, 0, -9999);
        DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto0CF27661_var), c_anchorBottom, 0, -9999);
        UISetFrameVisible(PlayerGroupSingle(auto0CF27661_var), c_syncFrameTypeAllianceButton, false);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    autoCF85AF62_g = lv_locplayergroup;
    autoCF85AF62_var = -1;
    while (true) {
        autoCF85AF62_var = PlayerGroupNextPlayer(autoCF85AF62_g, autoCF85AF62_var);
        if (autoCF85AF62_var < 0) { break; }
        if (((PlayerHandle(autoCF85AF62_var) == gv_hANDLE_CREATOR2))) {
            gf_this_map_is_not_supposed_to_be_shared(autoCF85AF62_var);
        }

        if ((BankValueGetAsFlag(gv_Banks[autoCF85AF62_var], "Options", "RewardsOff") == true)) {
            gv_rewardstatusOFF[autoCF85AF62_var] = true;
        }

    }
    if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
    }
    else {
        TriggerExecute(gt_RandomizeUnits, true, false);
        TriggerExecute(gt_UpdateTime, true, false);
        Wait(3.0, c_timeGame);
        gf_ShowScoreboard();
        gf_ShowTeam3UI();
    }
    DialogSetRenderPriority(gv_options, 999);
    DialogSetRenderPriority(gv_optionsViewController, 1000);
    gv_sWITCHLIGHTS[0] = "ZealotHockeyLighting";
    gv_sWITCHLIGHTS[1] = "StarmapSolarSystem";
    gv_sWITCHLIGHTS[2] = "LightingRegion_Space_02";
    gv_sWITCHLIGHTS[3] = "Space01Light";
    gv_sWITCHLIGHTS[4] = "LightingRegion_Zerus_03";
    gv_sWITCHLIGHTS[5] = "ArcadeSkyboxSpaceLightSpecial";
    gv_sWITCHLIGHTS[6] = "CutsceneTerran05Wormhole";
    gv_sWITCHLIGHTS[7] = "ArcadeCityLight";
    gv_sWITCHLIGHTS[8] = "PrisonShip";
    gv_sWITCHLIGHTS[9] = "TTosh01Eruption";
    gv_sWITCHLIGHTS[10] = "ArchonPortrait";
    gf_GoalieShutoutsLogScorePeriodStart(1);
    gf_GoalieShutoutsLogtimeinnetPeriodStart(1);
    gf_InitPowerplayStatusDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInit_Init () {
    gt_MapInit = TriggerCreate("gt_MapInit_Func");
    TriggerAddEventMapInit(gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Changes
//--------------------------------------------------------------------------------------------------
bool gt_Changes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5982133E"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D874C503"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B939F5E6"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B24616A6"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A81FCDFB"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/42C66081"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Changes_Init () {
    gt_Changes = TriggerCreate("gt_Changes_Func");
    TriggerAddEventChatMessage(gt_Changes, c_playerAny, "-changes", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Half Court Timer - Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_HalfCourtTimerTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HalfCourtTimerTimerExpires_Init () {
    gt_HalfCourtTimerTimerExpires = TriggerCreate("gt_HalfCourtTimerTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Half Court Timer - Puck enters right side
//--------------------------------------------------------------------------------------------------
bool gt_HalfCourtTimerPuckentersrightside_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HalfCourtTimerPuckentersrightside_Init () {
    gt_HalfCourtTimerPuckentersrightside = TriggerCreate("gt_HalfCourtTimerPuckentersrightside_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Half Court Timer - Puck enters left side
//--------------------------------------------------------------------------------------------------
bool gt_HalfCourtTimerPuckentersleftside_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HalfCourtTimerPuckentersleftside_Init () {
    gt_HalfCourtTimerPuckentersleftside = TriggerCreate("gt_HalfCourtTimerPuckentersleftside_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn on remote shield
//--------------------------------------------------------------------------------------------------
bool gt_Turnonremoteshield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC9866BC3_g;
    int autoC9866BC3_var;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0001"))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_remoteShieldMode = true;
    autoC9866BC3_g = PlayerGroupAll();
    autoC9866BC3_var = -1;
    while (true) {
        autoC9866BC3_var = PlayerGroupNextPlayer(autoC9866BC3_g, autoC9866BC3_var);
        if (autoC9866BC3_var < 0) { break; }
        TechTreeAbilityAllow(autoC9866BC3_var, AbilityCommand("RemoteShield", 0), true);
    }
    UnitAbilityShow(gv_Skaters[gv_Players[2]], "RemoteShield", true);
    UnitAbilityShow(gv_Skaters[gv_Players[6]], "RemoteShield", true);
    UnitAbilityEnable(gv_Skaters[gv_Players[2]], "RemoteShield", true);
    UnitAbilityEnable(gv_Skaters[gv_Players[6]], "RemoteShield", true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7929314F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Turnonremoteshield_Init () {
    gt_Turnonremoteshield = TriggerCreate("gt_Turnonremoteshield_Func");
    TriggerAddEventChatMessage(gt_Turnonremoteshield, c_playerAny, "-remoteshield", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CD RemoteShield
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCDRemoteShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_remoteShieldMode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateCDRemoteShild(EventPlayer(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCDRemoteShield_Init () {
    gt_UpdateCDRemoteShield = TriggerCreate("gt_UpdateCDRemoteShield_Func");
    TriggerAddEventUnitAbility(gt_UpdateCDRemoteShield, null, AbilityCommand("RemoteShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remote Shield
//--------------------------------------------------------------------------------------------------
bool gt_ForceField2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;
    point lv_oldpoint;
    bool lv_saved;
    int lv_temp;
    fixed lv_loopcount;
    unit lv_unit;
    unit lv_unit2;

    // Automatic Variable Declarations
    unitgroup autoB7B32A10_g;
    int autoB7B32A10_u;
    unit autoB7B32A10_var;
    unitgroup auto24F244C9_g;
    int auto24F244C9_u;
    unit auto24F244C9_var;
    unitgroup auto2237B4DC_g;
    int auto2237B4DC_u;
    unit auto2237B4DC_var;
    unitgroup autoA22D9301_g;
    int autoA22D9301_u;
    unit autoA22D9301_var;
    unitgroup auto0FB9A347_g;
    int auto0FB9A347_u;
    unit auto0FB9A347_var;
    unitgroup auto92A90E82_g;
    int auto92A90E82_u;
    unit auto92A90E82_var;
    unitgroup autoE54C4A1B_g;
    int autoE54C4A1B_u;
    unit autoE54C4A1B_var;
    unitgroup auto0CBF8907_g;
    int auto0CBF8907_u;
    unit auto0CBF8907_var;
    unitgroup autoBC690508_g;
    int autoBC690508_u;
    unit autoBC690508_var;
    unitgroup autoD6D6B606_g;
    int autoD6D6B606_u;
    unit autoD6D6B606_var;
    unitgroup auto5A1BDFA2_g;
    int auto5A1BDFA2_u;
    unit auto5A1BDFA2_var;
    unitgroup autoE695061C_g;
    int autoE695061C_u;
    unit autoE695061C_var;
    const int auto816BBF94_ae = 35;
    int auto816BBF94_var;
    const int auto4F6BC5BA_ae = 44;
    int auto4F6BC5BA_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_remoteShieldMode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
        gf_CreateShieldOutlineAnimation(1, EventUnitTargetPoint());
    }
    else {
        gf_CreateShieldOutlineAnimation(2, EventUnitTargetPoint());
    }
    Wait(0.4, c_timeGame);
    SoundPlayForPlayer(SoundLink("Sentry_ForceFieldLaunchSmall", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RemoteForceField", 0, EventPlayer(), EventUnitTargetPoint());
    lv_unit = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RemoteForceField", 0, EventPlayer(), EventUnitTargetPoint());
    lv_unit2 = UnitLastCreated();
    if ((gv_shieldcolor[EventPlayer()] == 1)) {
        autoE695061C_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoE695061C_u = UnitGroupCount(autoE695061C_g, c_unitCountAll);
        for (;; autoE695061C_u -= 1) {
            autoE695061C_var = UnitGroupUnitFromEnd(autoE695061C_g, autoE695061C_u);
            if (autoE695061C_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoE695061C_var), "SetTintColor {0,0,255 2.000000}");
        }
    }
    else {
        if ((gv_shieldcolor[EventPlayer()] == 2)) {
            auto5A1BDFA2_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            auto5A1BDFA2_u = UnitGroupCount(auto5A1BDFA2_g, c_unitCountAll);
            for (;; auto5A1BDFA2_u -= 1) {
                auto5A1BDFA2_var = UnitGroupUnitFromEnd(auto5A1BDFA2_g, auto5A1BDFA2_u);
                if (auto5A1BDFA2_var == null) { break; }
                ActorSend(libNtve_gf_MainActorofUnit(auto5A1BDFA2_var), "SetTintColor {255,0,0 2.000000}");
            }
        }
        else {
            if ((gv_shieldcolor[EventPlayer()] == 3)) {
                autoD6D6B606_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                autoD6D6B606_u = UnitGroupCount(autoD6D6B606_g, c_unitCountAll);
                for (;; autoD6D6B606_u -= 1) {
                    autoD6D6B606_var = UnitGroupUnitFromEnd(autoD6D6B606_g, autoD6D6B606_u);
                    if (autoD6D6B606_var == null) { break; }
                    ActorSend(libNtve_gf_MainActorofUnit(autoD6D6B606_var), "SetTintColor {255,128,0 2.000000}");
                }
            }
            else {
                if ((gv_shieldcolor[EventPlayer()] == 4)) {
                    autoBC690508_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                    autoBC690508_u = UnitGroupCount(autoBC690508_g, c_unitCountAll);
                    for (;; autoBC690508_u -= 1) {
                        autoBC690508_var = UnitGroupUnitFromEnd(autoBC690508_g, autoBC690508_u);
                        if (autoBC690508_var == null) { break; }
                        ActorSend(libNtve_gf_MainActorofUnit(autoBC690508_var), "SetTintColor {255,255,0 2.000000}");
                    }
                }
                else {
                    if ((gv_shieldcolor[EventPlayer()] == 5)) {
                        auto0CBF8907_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                        auto0CBF8907_u = UnitGroupCount(auto0CBF8907_g, c_unitCountAll);
                        for (;; auto0CBF8907_u -= 1) {
                            auto0CBF8907_var = UnitGroupUnitFromEnd(auto0CBF8907_g, auto0CBF8907_u);
                            if (auto0CBF8907_var == null) { break; }
                            ActorSend(libNtve_gf_MainActorofUnit(auto0CBF8907_var), "SetTintColor {0,255,0 2.000000}");
                        }
                    }
                    else {
                        if ((gv_shieldcolor[EventPlayer()] == 6)) {
                            autoE54C4A1B_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                            autoE54C4A1B_u = UnitGroupCount(autoE54C4A1B_g, c_unitCountAll);
                            for (;; autoE54C4A1B_u -= 1) {
                                autoE54C4A1B_var = UnitGroupUnitFromEnd(autoE54C4A1B_g, autoE54C4A1B_u);
                                if (autoE54C4A1B_var == null) { break; }
                                ActorSend(libNtve_gf_MainActorofUnit(autoE54C4A1B_var), "SetTintColor {0,128,0 2.000000}");
                            }
                        }
                        else {
                            if ((gv_shieldcolor[EventPlayer()] == 7)) {
                                auto92A90E82_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                auto92A90E82_u = UnitGroupCount(auto92A90E82_g, c_unitCountAll);
                                for (;; auto92A90E82_u -= 1) {
                                    auto92A90E82_var = UnitGroupUnitFromEnd(auto92A90E82_g, auto92A90E82_u);
                                    if (auto92A90E82_var == null) { break; }
                                    ActorSend(libNtve_gf_MainActorofUnit(auto92A90E82_var), "SetTintColor {128,0,128 2.000000}");
                                }
                            }
                            else {
                                if ((gv_shieldcolor[EventPlayer()] == 8)) {
                                    auto0FB9A347_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                    auto0FB9A347_u = UnitGroupCount(auto0FB9A347_g, c_unitCountAll);
                                    for (;; auto0FB9A347_u -= 1) {
                                        auto0FB9A347_var = UnitGroupUnitFromEnd(auto0FB9A347_g, auto0FB9A347_u);
                                        if (auto0FB9A347_var == null) { break; }
                                        ActorSend(libNtve_gf_MainActorofUnit(auto0FB9A347_var), "SetTintColor {255,0,128 2.000000}");
                                    }
                                }
                                else {
                                    if ((gv_shieldcolor[EventPlayer()] == 9)) {
                                        autoA22D9301_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                        autoA22D9301_u = UnitGroupCount(autoA22D9301_g, c_unitCountAll);
                                        for (;; autoA22D9301_u -= 1) {
                                            autoA22D9301_var = UnitGroupUnitFromEnd(autoA22D9301_g, autoA22D9301_u);
                                            if (autoA22D9301_var == null) { break; }
                                            ActorSend(libNtve_gf_MainActorofUnit(autoA22D9301_var), "SetTintColor {128,64,0 2.000000}");
                                        }
                                    }
                                    else {
                                        if ((gv_shieldcolor[EventPlayer()] == 10)) {
                                            auto2237B4DC_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                            auto2237B4DC_u = UnitGroupCount(auto2237B4DC_g, c_unitCountAll);
                                            for (;; auto2237B4DC_u -= 1) {
                                                auto2237B4DC_var = UnitGroupUnitFromEnd(auto2237B4DC_g, auto2237B4DC_u);
                                                if (auto2237B4DC_var == null) { break; }
                                                ActorSend(libNtve_gf_MainActorofUnit(auto2237B4DC_var), "SetTintColor {0,0,0 2.000000}");
                                            }
                                        }
                                        else {
                                            if ((gv_shieldcolor[EventPlayer()] == 11)) {
                                                auto24F244C9_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                auto24F244C9_u = UnitGroupCount(auto24F244C9_g, c_unitCountAll);
                                                for (;; auto24F244C9_u -= 1) {
                                                    auto24F244C9_var = UnitGroupUnitFromEnd(auto24F244C9_g, auto24F244C9_u);
                                                    if (auto24F244C9_var == null) { break; }
                                                    ActorSend(libNtve_gf_MainActorofUnit(auto24F244C9_var), "SetTintColor {128,128,128 2.000000}");
                                                }
                                            }
                                            else {
                                                if ((gv_shieldcolor[EventPlayer()] == 12)) {
                                                    autoB7B32A10_g = UnitGroup("RemoteForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                    autoB7B32A10_u = UnitGroupCount(autoB7B32A10_g, c_unitCountAll);
                                                    for (;; autoB7B32A10_u -= 1) {
                                                        autoB7B32A10_var = UnitGroupUnitFromEnd(autoB7B32A10_g, autoB7B32A10_u);
                                                        if (autoB7B32A10_var == null) { break; }
                                                        ActorSend(libNtve_gf_MainActorofUnit(autoB7B32A10_var), "SetTintColor {244,172,4 2.000000}");
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((UnitGetOwner(EventUnit()) == gv_Players[2])) {
        RegionSetCenter(RegionFromId(85), EventUnitTargetPoint());
        auto4F6BC5BA_var = 0;
        for ( ; auto4F6BC5BA_var <= auto4F6BC5BA_ae; auto4F6BC5BA_var += 1 ) {
            if ((gv_Skaters[gv_Players[2]] != null)) {
                Wait(0.0, c_timeReal);
                lv_loopcount += 1.0;
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(85)) == false)) {
                    lv_oldpoint = RegionGetCenter(RegionFromId(85));
                    RegionSetCenter(RegionFromId(85), EventUnitTargetPoint());
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(85)) == true) && (gv_Possession == -1)) {
                        lv_angle = AngleBetweenPoints(lv_oldpoint, RegionGetCenter(RegionFromId(85)));
                        while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(85)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(86)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == false)) {
                            UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.1, lv_angle), false);
                        }
                        gv_puckMagnitude = DistanceBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1)));
                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.25), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, RegionFromId(85), "circle"));
                        UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_pUCK, 0) + (UnitGetCustomValue(gv_Skaters[gv_Players[2]], 0) * 1.2)));
                        UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_pUCK, 1) + (UnitGetCustomValue(gv_Skaters[gv_Players[2]], 1) * 1.2)));
                    }

                }

            }

        }
        RegionSetCenter(RegionFromId(85), PointFromId(332));
        UnitKill(lv_unit);
        UnitKill(lv_unit2);
        SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        RegionSetCenter(RegionFromId(86), EventUnitTargetPoint());
        auto816BBF94_var = 0;
        for ( ; auto816BBF94_var <= auto816BBF94_ae; auto816BBF94_var += 1 ) {
            if ((gv_Skaters[gv_Players[6]] != null)) {
                Wait(0.0, c_timeReal);
                lv_loopcount += 1.0;
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(86)) == false)) {
                    lv_oldpoint = RegionGetCenter(RegionFromId(86));
                    RegionSetCenter(RegionFromId(86), EventUnitTargetPoint());
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(86)) == true) && (gv_Possession == -1)) {
                        lv_angle = AngleBetweenPoints(lv_oldpoint, RegionGetCenter(RegionFromId(86)));
                        while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(86)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(85)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == false)) {
                            UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.1, lv_angle), false);
                        }
                        gv_puckMagnitude = DistanceBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1)));
                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.25), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, RegionFromId(86), "circle"));
                        UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_pUCK, 0) + (UnitGetCustomValue(gv_Skaters[gv_Players[6]], 0) * 1.2)));
                        UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_pUCK, 1) + (UnitGetCustomValue(gv_Skaters[gv_Players[6]], 1) * 1.2)));
                    }

                }

            }

        }
        RegionSetCenter(RegionFromId(86), PointFromId(332));
        UnitKill(lv_unit);
        UnitKill(lv_unit2);
        SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceField2_Init () {
    gt_ForceField2 = TriggerCreate("gt_ForceField2_Func");
    TriggerAddEventUnitAbility(gt_ForceField2, null, AbilityCommand("RemoteShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn on pp
//--------------------------------------------------------------------------------------------------
bool gt_Turnonpp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") == "0001"))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerplay.lv_powerplayMode = true;
    gf_InitPowerplayTimer();
    gf_InitPowerplayStatusDialog();
    UnitAbilityEnable(gv_Skaters[gv_Players[2]], "SkaterWarpIn", false);
    UnitAbilityEnable(gv_Skaters[gv_Players[6]], "SkaterWarpIn", false);
    UnitAbilityShow(gv_Skaters[gv_Players[2]], "SkaterWarpIn", true);
    UnitAbilityShow(gv_Skaters[gv_Players[6]], "SkaterWarpIn", true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E9CB9520"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Turnonpp_Init () {
    gt_Turnonpp = TriggerCreate("gt_Turnonpp_Func");
    TriggerAddEventChatMessage(gt_Turnonpp, c_playerAny, "-powerplay", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team 1 - Skater Warp In Ready
//--------------------------------------------------------------------------------------------------
bool gt_Team1SkaterWarpInReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_powerplay.lv_powerplayMode == true)) {
        if ((UnitIsAlive(gv_Skaters[gv_Players[2]]) == true)) {
            UnitAbilityEnable(gv_Skaters[gv_Players[2]], "SkaterWarpIn", true);
            SoundPlayForPlayer(SoundLink("PowerplayReady", -1), c_maxPlayers, PlayerGroupSingle(gv_Players[2]), 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[2]]), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1SkaterWarpInReady_Init () {
    gt_Team1SkaterWarpInReady = TriggerCreate("gt_Team1SkaterWarpInReady_Func");
    TriggerAddEventTimer(gt_Team1SkaterWarpInReady, gv_powerplay.lv_powerplayTimers[1]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team 2 - Skater Warp In Ready
//--------------------------------------------------------------------------------------------------
bool gt_Team2SkaterWarpInReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_powerplay.lv_powerplayMode == true)) {
        if ((UnitIsAlive(gv_Skaters[gv_Players[6]]) == true)) {
            UnitAbilityEnable(gv_Skaters[gv_Players[6]], "SkaterWarpIn", true);
            SoundPlayForPlayer(SoundLink("PowerplayReady", -1), c_maxPlayers, PlayerGroupSingle(gv_Players[6]), 100.0, 0.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_Players[6]]), c_animNameDefault, "Cover", c_animFlagPlayForever, c_animTimeDefault);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2SkaterWarpInReady_Init () {
    gt_Team2SkaterWarpInReady = TriggerCreate("gt_Team2SkaterWarpInReady_Func");
    TriggerAddEventTimer(gt_Team2SkaterWarpInReady, gv_powerplay.lv_powerplayTimers[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warp In
//--------------------------------------------------------------------------------------------------
bool gt_WarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType1;
    point lv_point;
    actor lv_actor;

    // Automatic Variable Declarations
    const int autoED400BE4_ae = 4;
    int autoED400BE4_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stoppageOfPlay == false) && (gv_FaceoffTimer <= 0) && ((gv_powerplay.lv_powerplayMode == true) || ((gv_powerplay.lv_powerplayMode == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) && (gv_teamHasUsedPullgoaliePowerplay[1] == false) && (gv_powerplayisavailableforteam[1] == true)) || ((gv_powerplay.lv_powerplayMode == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true) && (gv_teamHasUsedPullgoaliePowerplay[2] == false) && (gv_powerplayisavailableforteam[2] == true)))) {
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
            gv_teamHasUsedPullgoaliePowerplay[1] = true;
            if ((gv_powerplay.lv_powerplayMode == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7DA33C06"));
            }

        }
        else {
            gv_teamHasUsedPullgoaliePowerplay[2] = true;
            if ((gv_powerplay.lv_powerplayMode == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ABC0ECE2"));
            }

        }
        lv_player = EventPlayer();
        SoundPlayAtPointForPlayer(SoundLink("RecallSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_Skaters[EventPlayer()]), 2.0, 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[EventPlayer()], "SetTintColor {202,255,255 5.000000} 1.000000");
        Wait(1.2, c_timeGame);
        if ((gv_stoppageOfPlay == false)) {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(EventPlayer()), false);
            lv_point = UnitGetPosition(gv_Skaters[lv_player]);
            libNtve_gf_CreateModelAtPoint("ZealotDeath", UnitGetPosition(gv_Skaters[EventPlayer()]));
            lv_actor = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.200000");
            libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
            gv_powerplay.lv_customvalue0[EventPlayer()] = UnitGetCustomValue(gv_Skaters[EventPlayer()], 0);
            gv_powerplay.lv_customvalue1[EventPlayer()] = UnitGetCustomValue(gv_Skaters[EventPlayer()], 1);
            UnitRemove(gv_Skaters[lv_player]);
            UnitRemove(gv_Sticks[lv_player]);
            TextTagDestroy(gv_TextTags[lv_player]);
            lv_unitType1 = "Zealot";
            if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
                    gv_pullGoalie[1] = true;
                    gf_StartPowerplayLimitTimer(1);
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lv_player) == true)) {
                        gv_pullGoalie[2] = true;
                        gf_StartPowerplayLimitTimer(2);
                    }

                }
                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, lv_point, PointFromId(112));
                gf_SetCooldownsandChargesforUnit(UnitGetOwner(UnitLastCreated()));
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
                    TextExpressionSetToken("Param/Expression/1F6D6DAB", "A", PlayerName(lv_player));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/1F6D6DAB"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    autoED400BE4_var = 1;
                    for ( ; autoED400BE4_var <= autoED400BE4_ae; autoED400BE4_var += 1 ) {
                    }
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lv_player) == true)) {
                        TextExpressionSetToken("Param/Expression/CB89D7A4", "A", PlayerName(lv_player));
                        TextTagCreate(TextExpressionAssemble("Param/Expression/CB89D7A4"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
                        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    }

                }
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                gv_TextTags[lv_player] = TextTagLastCreated();
                gv_Skaters[lv_player] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), lv_player, true);
                UnitSetCustomValue(gv_Skaters[EventPlayer()], 0, gv_powerplay.lv_customvalue0[EventPlayer()]);
                UnitSetCustomValue(gv_Skaters[EventPlayer()], 1, gv_powerplay.lv_customvalue1[EventPlayer()]);
                UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                UnitCreate(1, "ShapeHockeyStick", 0, lv_player, UnitGetPosition(UnitLastCreated()), 270.0);
                gv_Sticks[lv_player] = UnitLastCreated();
                DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(EventPlayer()), false);
            }

            gf_ApplyCustomizations();
            Wait(1.5, c_timeGame);
            ActorSend(lv_actor, "Destroy Immediate");
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarpIn_Init () {
    gt_WarpIn = TriggerCreate("gt_WarpIn_Func");
    TriggerAddEventUnitAbility(gt_WarpIn, null, AbilityCommand("SkaterWarpIn", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recall
//--------------------------------------------------------------------------------------------------
bool gt_Recall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType1;
    point lv_point;
    actor lv_actor;
    actor lv_actor2;
    int lv_originalgoalie;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_pullGoalie[1] == true) || (gv_pullGoalie[2] == true)))) {
            return false;
        }

        if (!((gv_stoppageOfPlay == false))) {
            return false;
        }

        if (!((gv_FaceoffTimer <= 0))) {
            return false;
        }

        if (!((gv_uIPeriodStats.lv_arestatsbeingdisplayed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_powerplay.lv_powerplayMode == true) || ((gv_powerplay.lv_powerplayMode == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) && (gv_teamHasUsedPullgoaliePowerplay[1] == true)) || ((gv_powerplay.lv_powerplayMode == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true) && (gv_teamHasUsedPullgoaliePowerplay[2] == true)))) {
        lv_player = EventPlayer();
        lv_point = UnitGetPosition(gv_Skaters[lv_player]);
        UnitAbilityShow(gv_Skaters[lv_player], "GoalieRecall", false);
        SoundPlayAtPointForPlayer(SoundLink("RecallSound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_Skaters[EventPlayer()]), 2.0, 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(gv_Skaters[EventPlayer()], "SetTintColor {202,255,255 5.000000} 1.000000");
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
            gv_powerplay.lv_powerplayLimitTime[1] = 0.0;
            gv_powerplay.lv_teamisrecalling[1] = true;
        }
        else {
            gv_powerplay.lv_teamisrecalling[2] = true;
            gv_powerplay.lv_powerplayLimitTime[2] = 0.0;
        }
        Wait(0.8, c_timeGame);
        if ((gv_stoppageOfPlay == false)) {
            if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], EventPlayer()) == true)) {
                DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(EventPlayer()), true);
            }

            libNtve_gf_CreateModelAtPoint("ZealotDeath", UnitGetPosition(gv_Skaters[EventPlayer()]));
            lv_actor = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.200000");
            libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
            if ((gv_Possession == EventPlayer())) {
                gv_Possession = -1;
            }

            UnitRemove(gv_Skaters[lv_player]);
            UnitRemove(gv_Sticks[lv_player]);
            TextTagDestroy(gv_TextTags[lv_player]);
            lv_unitType1 = "Immortal";
            if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
                    gv_pullGoalie[1] = false;
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lv_player) == true)) {
                        gv_pullGoalie[2] = false;
                    }

                }
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) && (ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, PointFromId(149), PointFromId(112));
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) && (ModI(gv_Period, 2) == 0)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, PointFromId(150), PointFromId(112));
                    }
                    else {
                        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true) && (ModI(gv_Period, 2) == 1)) {
                            libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, PointFromId(150), PointFromId(112));
                        }
                        else {
                            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true) && (ModI(gv_Period, 2) == 0)) {
                                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, PointFromId(149), PointFromId(112));
                            }

                        }
                    }
                }
                gf_SetCooldownsandChargesforUnit(UnitGetOwner(UnitLastCreated()));
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
                    TextExpressionSetToken("Param/Expression/66C5D4BB", "A", PlayerName(lv_player));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/66C5D4BB"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    gf_ResetPowerplayTimerforTeam(1);
                    gf_UpdateCDRemoteShild(gv_Players[2], gv_Skaters[gv_Players[2]]);
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], lv_player) == true)) {
                        TextExpressionSetToken("Param/Expression/EF5CE2F9", "A", PlayerName(lv_player));
                        TextTagCreate(TextExpressionAssemble("Param/Expression/EF5CE2F9"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
                        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                        gf_ResetPowerplayTimerforTeam(2);
                        gf_UpdateCDRemoteShild(gv_Players[6], gv_Skaters[gv_Players[6]]);
                    }

                }
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                gv_TextTags[lv_player] = TextTagLastCreated();
                gv_Skaters[lv_player] = UnitLastCreated();
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), lv_player, true);
                UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                UnitCreate(1, "ShapeHockeyStick", 0, lv_player, UnitGetPosition(UnitLastCreated()), 270.0);
                UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                gv_Sticks[lv_player] = UnitLastCreated();
                CameraPan(EventPlayer(), UnitGetPosition(gv_Skaters[EventPlayer()]), 0.15, -1, 10.0, false);
            }

            UnitAbilityEnable(gv_Skaters[EventPlayer()], "SkaterWarpIn", false);
            libNtve_gf_CreateModelAtPoint("ZealotDeath", UnitGetPosition(gv_Skaters[EventPlayer()]));
            lv_actor2 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 2.200000");
            libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Death", 0, c_animTimeDefault);
            gf_ApplyCustomizations();
            Wait(1.5, c_timeGame);
            ActorSend(lv_actor, "Destroy Immediate");
            ActorSend(lv_actor2, "Destroy Immediate");
        }

        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], lv_player) == true)) {
            gv_powerplay.lv_teamisrecalling[1] = false;
        }
        else {
            gv_powerplay.lv_teamisrecalling[2] = false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Recall_Init () {
    gt_Recall = TriggerCreate("gt_Recall_Func");
    TriggerAddEventUnitAbility(gt_Recall, null, AbilityCommand("GoalieRecall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period End New
//--------------------------------------------------------------------------------------------------
bool gt_PeriodEnd2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_locInt;
    int lv_locPoints;
    bool lv_locBool;
    int lv_locInt2;
    int lv_locInt3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetPowerplayTimerforTeam(1);
    gf_ResetPowerplayTimerforTeam(2);
    gf_PEResetPlayerWindup();
    if ((gv_Shootout == true)) {
        return true;
    }

    gf_PEDisplayUIandLogGoalieShutouts();
    gf_PEResetVarsandChangeLighting();
    gf_PEWait3secondandupdateperiodcircles();
    gf_PEResetGoalLightingvarsanddirectivemessages();
    if ((gv_Period == 1)) {
        gf_PEActionEndofP1();
    }
    else {
        if ((gv_Period == 2)) {
            gf_PEActionEndofP2();
        }
        else {
            if ((gv_Period == 3) && (gv_TeamScores[1] != gv_TeamScores[2])) {
                gf_PEActionEndofP3NotTied();
            }
            else {
                if ((gv_Period == 3) && (gv_TeamScores[1] == gv_TeamScores[2])) {
                    gf_PEActionEndofP3Tied();
                }
                else {
                    if ((gv_Period >= 4) && (gv_noshootout == false)) {
                        gf_PEActionEndofOTShootoutAllowed();
                    }
                    else {
                        if ((gv_Period >= 4) && (gv_noshootout == false)) {
                            gf_PEActionEndofOTShootoutNOTAllowed();
                        }

                    }
                }
            }
        }
    }
    gv_FreezeUnits = false;
    gf_PEUpdateLightingandScoreboardUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodEnd2_Init () {
    gt_PeriodEnd2 = TriggerCreate("gt_PeriodEnd2_Func");
    TriggerAddEventTimer(gt_PeriodEnd2, gv_Timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rotate
//--------------------------------------------------------------------------------------------------
bool gt_Rotate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_canuserotation == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, (gv_currentRotationAngles[EventPlayer()] + 90.0), 0.25, -1, 10.0);
    gv_currentRotationAngles[EventPlayer()] = (gv_currentRotationAngles[EventPlayer()] + 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rotate_Init () {
    gt_Rotate = TriggerCreate("gt_Rotate_Func");
    TriggerAddEventChatMessage(gt_Rotate, c_playerAny, "-rotate", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show game stats
//--------------------------------------------------------------------------------------------------
bool gt_Showgamestats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIPregameStats.lv_canvasDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Showgamestats_Init () {
    gt_Showgamestats = TriggerCreate("gt_Showgamestats_Func");
    TriggerAddEventKeyPressed(gt_Showgamestats, c_playerAny, c_keyBackSlash, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide game stats
//--------------------------------------------------------------------------------------------------
bool gt_Hidegamestats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIPregameStats.lv_canvasDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hidegamestats_Init () {
    gt_Hidegamestats = TriggerCreate("gt_Hidegamestats_Func");
    TriggerAddEventKeyPressed(gt_Hidegamestats, c_playerAny, c_keyBackSlash, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn contrast on/off
//--------------------------------------------------------------------------------------------------
bool gt_Turncontrastonoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_postcontrastisshowing[EventPlayer()] == true)) {
        gv_postcontrastisshowing[EventPlayer()] = false;
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(137)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(128)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(11)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(15)), false);
    }
    else {
        gv_postcontrastisshowing[EventPlayer()] = true;
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(137)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(128)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(11)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(15)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Turncontrastonoff_Init () {
    gt_Turncontrastonoff = TriggerCreate("gt_Turncontrastonoff_Func");
    TriggerAddEventChatMessage(gt_Turncontrastonoff, c_playerAny, "-post", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn guides on/off
//--------------------------------------------------------------------------------------------------
bool gt_Turnguidesonoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_guidecontrastisshowing[EventPlayer()] == true)) {
        gv_guidecontrastisshowing[EventPlayer()] = false;
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(83)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(161)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(92)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(108)), false);
    }
    else {
        gv_guidecontrastisshowing[EventPlayer()] = true;
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(83)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(161)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(92)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(108)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Turnguidesonoff_Init () {
    gt_Turnguidesonoff = TriggerCreate("gt_Turnguidesonoff_Func");
    TriggerAddEventChatMessage(gt_Turnguidesonoff, c_playerAny, "-guide", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmd 1
//--------------------------------------------------------------------------------------------------
bool gt_cmd1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pressed = 1;
    Wait(3.0, c_timeReal);
    gv_pressed = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmd1_Init () {
    gt_cmd1 = TriggerCreate("gt_cmd1_Func");
    TriggerAddEventKeyPressed(gt_cmd1, c_playerAny, c_key2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmd 2
//--------------------------------------------------------------------------------------------------
bool gt_cmd2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pressed == 1)) {
        gv_pressed += 1;
    }
    else {
        gv_pressed = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmd2_Init () {
    gt_cmd2 = TriggerCreate("gt_cmd2_Func");
    TriggerAddEventKeyPressed(gt_cmd2, c_playerAny, c_key9, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmd 3
//--------------------------------------------------------------------------------------------------
bool gt_cmd3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pressed == 2)) {
        gv_pressed += 1;
    }
    else {
        gv_pressed = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmd3_Init () {
    gt_cmd3 = TriggerCreate("gt_cmd3_Func");
    TriggerAddEventKeyPressed(gt_cmd3, c_playerAny, c_key7, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmd 4
//--------------------------------------------------------------------------------------------------
bool gt_cmd4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pressed == 3)) {
        DialogSetVisible(gv_cmddiag, PlayerGroupSingle(EventPlayer()), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmd4_Init () {
    gt_cmd4 = TriggerCreate("gt_cmd4_Func");
    TriggerAddEventKeyPressed(gt_cmd4, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: alt gs
//--------------------------------------------------------------------------------------------------
bool gt_altgs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_altGoalieSave[EventPlayer()] = StringToInt(StringSub(EventChatMessage(false), 6, (StringLength(EventChatMessage(false))+1)));
    TextExpressionSetToken("Param/Expression/46B3578D", "A", IntToText(gv_altGoalieSave[EventPlayer()]));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/46B3578D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_altgs_Init () {
    gt_altgs = TriggerCreate("gt_altgs_Func");
    TriggerAddEventChatMessage(gt_altgs, c_playerAny, "-ags ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: altgoalie
//--------------------------------------------------------------------------------------------------
bool gt_altgoalie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_altgoalie[EventPlayer()] == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie1", true);
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie2", false);
        gv_altgoalie[EventPlayer()] = true;
        gv_altgoalie2[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5DE87B84"));
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie1", false);
        gv_altgoalie[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/344DDF52"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_altgoalie_Init () {
    gt_altgoalie = TriggerCreate("gt_altgoalie_Func");
    TriggerAddEventChatMessage(gt_altgoalie, c_playerAny, "-alt", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: altgoalie 2
//--------------------------------------------------------------------------------------------------
bool gt_altgoalie2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_altgoalie2[EventPlayer()] == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie2", true);
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie1", false);
        gv_altgoalie2[EventPlayer()] = true;
        gv_altgoalie[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5B66DB16"));
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie2", false);
        gv_altgoalie2[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/482CCD1B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_altgoalie2_Init () {
    gt_altgoalie2 = TriggerCreate("gt_altgoalie2_Func");
    TriggerAddEventChatMessage(gt_altgoalie2, c_playerAny, "-alt2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: altgoalie 3
//--------------------------------------------------------------------------------------------------
bool gt_altgoalie3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_altgoalie3[EventPlayer()] == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie3", true);
        gv_altgoalie3[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2BA1476B"));
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie3", false);
        gv_altgoalie3[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FB44BB1C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_altgoalie3_Init () {
    gt_altgoalie3 = TriggerCreate("gt_altgoalie3_Func");
    TriggerAddEventChatMessage(gt_altgoalie3, c_playerAny, "-alt3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: altgoalie 4
//--------------------------------------------------------------------------------------------------
bool gt_altgoalie4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_altgoalie4[EventPlayer()] == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie4", true);
        gv_altgoalie4[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C16BDF1E"));
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "AltGoalie4", false);
        gv_altgoalie4[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/252457F5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_altgoalie4_Init () {
    gt_altgoalie4 = TriggerCreate("gt_altgoalie4_Func");
    TriggerAddEventChatMessage(gt_altgoalie4, c_playerAny, "-alt4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: isranked
//--------------------------------------------------------------------------------------------------
bool gt_isranked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ranked == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/56AF062A"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/4F6A91FA"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_isranked_Init () {
    gt_isranked = TriggerCreate("gt_isranked_Func");
    TriggerAddEventChatMessage(gt_isranked, c_playerAny, "-isranked", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TextHandles
//--------------------------------------------------------------------------------------------------
bool gt_TextHandles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5E8CC155_g;
    int auto5E8CC155_var;
    playergroup autoB1A15D2D_g;
    int autoB1A15D2D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/8B1877B6"));
    auto5E8CC155_g = gv_actualPlayerzonTeam[1];
    auto5E8CC155_var = -1;
    while (true) {
        auto5E8CC155_var = PlayerGroupNextPlayer(auto5E8CC155_g, auto5E8CC155_var);
        if (auto5E8CC155_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/C5679F0D", "A", PlayerName(auto5E8CC155_var));
        TextExpressionSetToken("Param/Expression/C5679F0D", "C", IntToText(auto5E8CC155_var));
        TextExpressionSetToken("Param/Expression/C5679F0D", "B", StringToText(PlayerHandle(auto5E8CC155_var)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/C5679F0D"));
    }
    autoB1A15D2D_g = gv_actualPlayerzonTeam[2];
    autoB1A15D2D_var = -1;
    while (true) {
        autoB1A15D2D_var = PlayerGroupNextPlayer(autoB1A15D2D_g, autoB1A15D2D_var);
        if (autoB1A15D2D_var < 0) { break; }
        TextExpressionSetToken("Param/Expression/2F9C929A", "A", PlayerName(autoB1A15D2D_var));
        TextExpressionSetToken("Param/Expression/2F9C929A", "C", IntToText(autoB1A15D2D_var));
        TextExpressionSetToken("Param/Expression/2F9C929A", "B", StringToText(PlayerHandle(autoB1A15D2D_var)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/2F9C929A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextHandles_Init () {
    gt_TextHandles = TriggerCreate("gt_TextHandles_Func");
    TriggerAddEventChatMessage(gt_TextHandles, c_playerAny, "-ids", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TextMyHandle
//--------------------------------------------------------------------------------------------------
bool gt_TextMyHandle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/1C0A7CF7", "A", StringToText(PlayerHandle(EventPlayer())));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1C0A7CF7"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextMyHandle_Init () {
    gt_TextMyHandle = TriggerCreate("gt_TextMyHandle_Func");
    TriggerAddEventChatMessage(gt_TextMyHandle, c_playerAny, "-myhandle", true);
    TriggerAddEventChatMessage(gt_TextMyHandle, c_playerAny, "-id", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: rewards
//--------------------------------------------------------------------------------------------------
bool gt_TextMyHandle2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_rewardstatusOFF[EventPlayer()] == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Options", "RewardsOff", true);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1E6C5DD4"));
        gv_rewardstatusOFF[EventPlayer()] = true;
        gv_stormTrooperEnabled[EventPlayer()] = false;
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Options", "RewardsOff", false);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/68237DED"));
        gv_rewardstatusOFF[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextMyHandle2_Init () {
    gt_TextMyHandle2 = TriggerCreate("gt_TextMyHandle2_Func");
    TriggerAddEventChatMessage(gt_TextMyHandle2, c_playerAny, "-rewards", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TextELO
//--------------------------------------------------------------------------------------------------
bool gt_TextMyHandle4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/80D1DB34", "A", FixedToText(gv_eloOLD[EventPlayer()], 0));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/80D1DB34"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextMyHandle4_Init () {
    gt_TextMyHandle4 = TriggerCreate("gt_TextMyHandle4_Func");
    TriggerAddEventChatMessage(gt_TextMyHandle4, c_playerAny, "-elo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stats
//--------------------------------------------------------------------------------------------------
bool gt_TextMyHandle5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/B4960B74") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/63F2FC13"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/A3F22239") + FixedToText(gv_stats_Goals[EventPlayer()], c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/67807AA6") + FixedToText(gv_stats_Assists[EventPlayer()], c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/E7796C58") + FixedToText(gv_stats_Passes[EventPlayer()], c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/C6832C87") + FixedToText(gv_stats_Pickups[EventPlayer()], c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/1CFDF7C8") + FixedToText(((gv_stats_FaceoffWins[EventPlayer()]/(gv_stats_Faceoffs[EventPlayer()]+0.001))*100), 2)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/885F422C") + FixedToText(((gv_stats_Goals[EventPlayer()]/(gv_stats_Shots[EventPlayer()]+0.001))*100), 2)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/4D9E6CF1") + FixedToText((gv_stats_Steals[EventPlayer()] - gv_stats_Turnovers[EventPlayer()]), c_fixedPrecisionAny)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/54A25759") + FixedToText(((-5/(((gv_stats_Goals[EventPlayer()]/(gv_stats_Shots[EventPlayer()]+0.001))*100)/100+0.0463))+108), 0)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/9E3670F1") + FixedToText(((gv_stats_DefensivePoints[EventPlayer()]/(gv_stats_OverallDefensiveLets[EventPlayer()]+0.001))*100), 0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextMyHandle5_Init () {
    gt_TextMyHandle5 = TriggerCreate("gt_TextMyHandle5_Func");
    TriggerAddEventChatMessage(gt_TextMyHandle5, c_playerAny, "-stats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmdentered
//--------------------------------------------------------------------------------------------------
bool gt_cmdentered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_text;
    int lv_i;

    // Automatic Variable Declarations
    const int auto3FBC0C1B_ae = 8;
    const int auto3FBC0C1B_ai = 1;

    // Variable Initialization
    lv_text = "";

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cmddiagitems[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(libNtve_gf_DialogItemEditValue(gv_cmddiagitems[0], EventPlayer()), 1, 5) == "banp ")) {
        lv_text = StringSub(libNtve_gf_DialogItemEditValue(gv_cmddiagitems[0], EventPlayer()), 6, StringLength(libNtve_gf_DialogItemEditValue(gv_cmddiagitems[0], EventPlayer())));
        if ((StringWord(lv_text, 1) == CatalogFieldValueGet(c_gameCatalogUnit, "lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", "Description", c_playerAny))) {
            lv_i = 1;
            for ( ; ( (auto3FBC0C1B_ai >= 0 && lv_i <= auto3FBC0C1B_ae) || (auto3FBC0C1B_ai < 0 && lv_i >= auto3FBC0C1B_ae) ) ; lv_i += auto3FBC0C1B_ai ) {
                if ((gf_EncodePlayerHandle(lv_i) == StringWord(lv_text, 2))) {
                    gf_BanPerma(lv_i);
                }

            }
        }

    }

    libNtve_gf_SetDialogItemEditorValue(gv_cmddiagitems[0], "", PlayerGroupSingle(EventPlayer()));
    lv_text = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmdentered_Init () {
    gt_cmdentered = TriggerCreate("gt_cmdentered_Func");
    TriggerAddEventDialogControl(gt_cmdentered, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cmdclose
//--------------------------------------------------------------------------------------------------
bool gt_cmdclose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cmddiagitems[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_cmddiag, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cmdclose_Init () {
    gt_cmdclose = TriggerCreate("gt_cmdclose_Func");
    TriggerAddEventDialogControl(gt_cmdclose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hidecmdline
//--------------------------------------------------------------------------------------------------
bool gt_hidecmdline_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cmddiagitems[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer()), 1, 5) == "banp ")) {
        DialogControlSetVisible(gv_cmddiagitems[3], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(gv_cmddiagitems[3], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hidecmdline_Init () {
    gt_hidecmdline = TriggerCreate("gt_hidecmdline_Func");
    TriggerAddEventDialogControl(gt_hidecmdline, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: modcmds
//--------------------------------------------------------------------------------------------------
bool gt_modcmds_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    string lv_text;
    string[11] lv_args;
    int lv_i;

    // Automatic Variable Declarations
    const int auto421ABAEF_ae = 10;
    const int auto421ABAEF_ai = 1;

    // Variable Initialization
    lv_text = "";
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_args[init_i] = "";
    }

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cmddiagitems[1]))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHI) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KYLE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_RASPUTIN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ANGLEFIRE)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto421ABAEF_ai >= 0 && lv_i <= auto421ABAEF_ae) || (auto421ABAEF_ai < 0 && lv_i >= auto421ABAEF_ae) ) ; lv_i += auto421ABAEF_ai ) {
        lv_args[lv_i] = StringWord(libNtve_gf_DialogItemEditValue(gv_cmddiagitems[0], EventPlayer()), lv_i);
    }
    if ((lv_args[1] == "score")) {
        gv_TeamScores[1] = StringToInt(lv_args[2]);
        gv_TeamScores[2] = StringToInt(lv_args[3]);
        TextExpressionSetToken("Param/Expression/A3265CE0", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/A3265CE0"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/CD7CE110", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/CD7CE110"), PlayerGroupAll());
    }

    if ((lv_args[1] == "time")) {
        TimerStart(gv_Timer, StringToInt(lv_args[2]), false, c_timeReal);
    }

    libNtve_gf_SetDialogItemEditorValue(gv_cmddiagitems[0], "", PlayerGroupSingle(EventPlayer()));
    lv_text = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_modcmds_Init () {
    gt_modcmds = TriggerCreate("gt_modcmds_Func");
    TriggerAddEventDialogControl(gt_modcmds, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: goaliecam
//--------------------------------------------------------------------------------------------------
bool gt_goaliecam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_goaliecam[EventPlayer()] == false)) {
        gv_goaliecam[EventPlayer()] = true;
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(362), 2.0, -1, 10.0, false);
        CameraSetData(PlayerGroupSingle(EventPlayer()), "Floaty");
    }
    else {
        gv_goaliecam[EventPlayer()] = false;
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(135), 2.0, -1, 10.0, false);
        CameraSetData(PlayerGroupSingle(EventPlayer()), "Floaty");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_goaliecam_Init () {
    gt_goaliecam = TriggerCreate("gt_goaliecam_Func");
    TriggerAddEventChatMessage(gt_goaliecam, c_playerAny, "-gc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: noshootout
//--------------------------------------------------------------------------------------------------
bool gt_noshootout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_noshootout == false)) {
        gv_noshootout = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/32E264CC"));
    }
    else {
        gv_noshootout = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/89105939"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_noshootout_Init () {
    gt_noshootout = TriggerCreate("gt_noshootout_Func");
    TriggerAddEventChatMessage(gt_noshootout, c_playerAny, "-playoffs", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: dunkmode
//--------------------------------------------------------------------------------------------------
bool gt_dunkmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_dunkmode = true;
    RegionSetCenter(RegionFromId(13), PointFromId(669));
    RegionSetCenter(RegionFromId(14), PointFromId(670));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dunkmode_Init () {
    gt_dunkmode = TriggerCreate("gt_dunkmode_Func");
    TriggerAddEventChatMessage(gt_dunkmode, c_playerAny, "-dunkmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: soexcited
//--------------------------------------------------------------------------------------------------
bool gt_soexcited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soExcited[EventPlayer()] == false)) {
        gv_soExcited[EventPlayer()] = true;
    }
    else {
        gv_soExcited[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_soexcited_Init () {
    gt_soexcited = TriggerCreate("gt_soexcited_Func");
    TriggerAddEventChatMessage(gt_soexcited, c_playerAny, "-rickastley", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setpowerplay
//--------------------------------------------------------------------------------------------------
bool gt_setpowerplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soExcited[EventPlayer()] == false)) {
        gv_soExcited[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/604F447F"));
        SoundPlayForPlayer(SoundLink("Barracks_Explode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        gv_soExcited[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setpowerplay_Init () {
    gt_setpowerplay = TriggerCreate("gt_setpowerplay_Func");
    TriggerAddEventChatMessage(gt_setpowerplay, c_playerAny, "-setpowerplay", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: powershot
//--------------------------------------------------------------------------------------------------
bool gt_powershot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powershot = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_powershot_Init () {
    gt_powershot = TriggerCreate("gt_powershot_Func");
    TriggerAddEventChatMessage(gt_powershot, c_playerAny, "-powershot", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nocds
//--------------------------------------------------------------------------------------------------
bool gt_nocds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto0882B3BE_ae = 14;
    int auto0882B3BE_var;

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0882B3BE_var = 1;
    for ( ; auto0882B3BE_var <= auto0882B3BE_ae; auto0882B3BE_var += 1 ) {
        UnitAbilityReset(gv_Skaters[auto0882B3BE_var], AbilityCommand("Check", 0), c_spendLocationAbility);
        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[auto0882B3BE_var]), ".1");
        CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[auto0882B3BE_var]), ".1");
        CatalogFieldValueSet(c_gameCatalogAbil, "SlideStop", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[auto0882B3BE_var]), ".1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nocds_Init () {
    gt_nocds = TriggerCreate("gt_nocds_Func");
    TriggerAddEventChatMessage(gt_nocds, c_playerAny, "-nocds", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setnamesize
//--------------------------------------------------------------------------------------------------
bool gt_setnamesize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagSetFontSize(gv_TextTags[EventPlayer()], StringToInt(StringSub(EventChatMessage(false), 4, StringLength((EventChatMessage(false) + "+1")))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setnamesize_Init () {
    gt_setnamesize = TriggerCreate("gt_setnamesize_Func");
    TriggerAddEventChatMessage(gt_setnamesize, c_playerAny, "-n ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setnameshadow
//--------------------------------------------------------------------------------------------------
bool gt_setnameshadow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nametagshadow == false)) {
        gv_nametagshadow = true;
        TextTagSetTextShadow(gv_TextTags[EventPlayer()], false);
    }
    else {
        gv_nametagshadow = false;
        TextTagSetTextShadow(gv_TextTags[EventPlayer()], true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setnameshadow_Init () {
    gt_setnameshadow = TriggerCreate("gt_setnameshadow_Func");
    TriggerAddEventChatMessage(gt_setnameshadow, c_playerAny, "-s", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setnamecolor
//--------------------------------------------------------------------------------------------------
bool gt_setnamecolor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "blue")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(0.00, 0.00, 100.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "red")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "orange")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(100.00, 50.20, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "yellow")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(100.00, 100.00, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "green")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(0.00, 100.00, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "dark green")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(0.00, 50.20, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "purple")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(50.20, 0.00, 50.20));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "pink")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(100.00, 0.00, 50.20));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "white")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(100.00, 100.00, 100.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "brown")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(50.20, 25.10, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "black")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(0.00, 0.00, 0.00));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "gray")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(50.20, 50.20, 50.20));
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "teal")) {
        TextTagSetColor(gv_TextTags[EventPlayer()], c_textTagColorText, Color(0.00, 100.00, 100.00));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setnamecolor_Init () {
    gt_setnamecolor = TriggerCreate("gt_setnamecolor_Func");
    TriggerAddEventChatMessage(gt_setnamecolor, c_playerAny, "-color ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setskintest
//--------------------------------------------------------------------------------------------------
bool gt_setskintest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_skitest[EventPlayer()] == false)) {
        gv_skitest[EventPlayer()] = true;
    }
    else {
        gv_skitest[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setskintest_Init () {
    gt_setskintest = TriggerCreate("gt_setskintest_Func");
    TriggerAddEventChatMessage(gt_setskintest, c_playerAny, "-skintest", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setboostcolor
//--------------------------------------------------------------------------------------------------
bool gt_setboostcolor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "white")) {
        gv_boostcolor[EventPlayer()] = 0;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "blue")) {
        gv_boostcolor[EventPlayer()] = 1;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "red")) {
        gv_boostcolor[EventPlayer()] = 2;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "orange")) {
        gv_boostcolor[EventPlayer()] = 3;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "yellow")) {
        gv_boostcolor[EventPlayer()] = 4;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "green")) {
        gv_boostcolor[EventPlayer()] = 5;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "dark green")) {
        gv_boostcolor[EventPlayer()] = 6;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "purple")) {
        gv_boostcolor[EventPlayer()] = 7;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "pink")) {
        gv_boostcolor[EventPlayer()] = 8;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "brown")) {
        gv_boostcolor[EventPlayer()] = 9;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "black")) {
        gv_boostcolor[EventPlayer()] = 10;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "gray")) {
        gv_boostcolor[EventPlayer()] = 11;
    }
    else if ((StringSub(EventChatMessage(false), 8, (StringLength(EventChatMessage(false))+1)) == "gold")) {
        gv_boostcolor[EventPlayer()] = 12;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setboostcolor_Init () {
    gt_setboostcolor = TriggerCreate("gt_setboostcolor_Func");
    TriggerAddEventChatMessage(gt_setboostcolor, c_playerAny, "-check ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setshieldcolor
//--------------------------------------------------------------------------------------------------
bool gt_setshieldcolor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (gv_tESTING == false) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "white")) {
        gv_shieldcolor[EventPlayer()] = 0;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "blue")) {
        gv_shieldcolor[EventPlayer()] = 1;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "red")) {
        gv_shieldcolor[EventPlayer()] = 2;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "orange")) {
        gv_shieldcolor[EventPlayer()] = 3;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "yellow")) {
        gv_shieldcolor[EventPlayer()] = 4;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "green")) {
        gv_shieldcolor[EventPlayer()] = 5;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "dark green")) {
        gv_shieldcolor[EventPlayer()] = 6;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "purple")) {
        gv_shieldcolor[EventPlayer()] = 7;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "pink")) {
        gv_shieldcolor[EventPlayer()] = 8;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "brown")) {
        gv_shieldcolor[EventPlayer()] = 9;
    }
    else if ((StringSub(EventChatMessage(false), 9, (StringLength(EventChatMessage(false))+1)) == "gold")) {
        gv_shieldcolor[EventPlayer()] = 12;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setshieldcolor_Init () {
    gt_setshieldcolor = TriggerCreate("gt_setshieldcolor_Func");
    TriggerAddEventChatMessage(gt_setshieldcolor, c_playerAny, "-shield ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: switch
//--------------------------------------------------------------------------------------------------
bool gt_switch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting(gv_sWITCHLIGHTS[StringToInt(StringSub(EventChatMessage(false), 9, StringLength((EventChatMessage(false) + "+1"))))], 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_switch_Init () {
    gt_switch = TriggerCreate("gt_switch_Func");
    TriggerAddEventChatMessage(gt_switch, c_playerAny, "-switch ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kickplayer
//--------------------------------------------------------------------------------------------------
bool gt_kickplayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(StringToInt(StringSub(EventChatMessage(false), 7, (StringLength(EventChatMessage(false))+1))), c_gameOverDefeat, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kickplayer_Init () {
    gt_kickplayer = TriggerCreate("gt_kickplayer_Func");
    TriggerAddEventChatMessage(gt_kickplayer, c_playerAny, "-kick ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resetelo
//--------------------------------------------------------------------------------------------------
bool gt_resetelo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromFixed(gv_Banks[StringToInt(StringSub(EventChatMessage(false), 11, StringLength((EventChatMessage(false) + "+1"))))], "stats", "elo2", 1000.0);
    gf_SaveBank(StringToInt(StringSub(EventChatMessage(false), 11, (StringLength(EventChatMessage(false))+1))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resetelo_Init () {
    gt_resetelo = TriggerCreate("gt_resetelo_Func");
    TriggerAddEventChatMessage(gt_resetelo, c_playerAny, "-resetelo ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: settime
//--------------------------------------------------------------------------------------------------
bool gt_settime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_UpdateTime);
    TimerStart(gv_Timer, (StringToInt(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))) + 1), false, c_timeReal);
    TriggerExecute(gt_UpdateTime, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_settime_Init () {
    gt_settime = TriggerCreate("gt_settime_Func");
    TriggerAddEventChatMessage(gt_settime, c_playerAny, "-t ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setskin
//--------------------------------------------------------------------------------------------------
bool gt_setskin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_skinTest[EventPlayer()] = StringToInt(StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setskin_Init () {
    gt_setskin = TriggerCreate("gt_setskin_Func");
    TriggerAddEventChatMessage(gt_setskin, c_playerAny, "-skin ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setscore
//--------------------------------------------------------------------------------------------------
bool gt_setscore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_TeamScores[1] = StringToInt(StringWord(EventChatMessage(false), 2));
    gv_TeamScores[2] = StringToInt(StringWord(EventChatMessage(false), 3));
    TextExpressionSetToken("Param/Expression/262D2DE0", "A", IntToText(gv_TeamScores[1]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/262D2DE0"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/B3B2A307", "A", IntToText(gv_TeamScores[2]));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/B3B2A307"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setscore_Init () {
    gt_setscore = TriggerCreate("gt_setscore_Func");
    TriggerAddEventChatMessage(gt_setscore, c_playerAny, "-s ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setnogoalsmode
//--------------------------------------------------------------------------------------------------
bool gt_setnogoalsmode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_goalsAllowedFlag;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_goalsAllowedFlag = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((lv_goalsAllowedFlag == 1)) {
        gv_goalsAllowed = true;
    }
    else {
        gv_goalsAllowed = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setnogoalsmode_Init () {
    gt_setnogoalsmode = TriggerCreate("gt_setnogoalsmode_Func");
    TriggerAddEventChatMessage(gt_setnogoalsmode, c_playerAny, "-goalsallowed ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setperiod
//--------------------------------------------------------------------------------------------------
bool gt_setperiod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAB4A5D84_g;
    int autoAB4A5D84_var;

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_Period = StringToInt(StringWord(EventChatMessage(false), 2));
    autoAB4A5D84_g = PlayerGroupAll();
    autoAB4A5D84_var = -1;
    while (true) {
        autoAB4A5D84_var = PlayerGroupNextPlayer(autoAB4A5D84_g, autoAB4A5D84_var);
        if (autoAB4A5D84_var < 0) { break; }
        gf_ShowScoreboard3(autoAB4A5D84_var, true, false);
    }
    gv_Possession = -1;
    gv_NoCount = true;
    gv_stoppageOfPlay = true;
    if ((gv_Period == 1)) {
        libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/663F0A6C"), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), false);
    }
    else {
        if ((gv_Period == 2)) {
            libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/03B9CBD6"), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
            DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), false);
        }
        else {
            if ((gv_Period == 3)) {
                libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/DB317084"), PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), true);
                DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), true);
                DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), true);
                DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), false);
            }
            else {
                if ((gv_Period == 4)) {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/44D4F141"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/0ECDC7D8"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                }
            }
        }
    }
    TimerPause(gv_Timer, true);
    SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
    Wait(5.0, c_timeGame);
    gv_NoCount = false;
    gv_stoppageOfPlay = false;
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    gv_faceoffHoldTrigger = true;
    TriggerExecute(gt_RandomizeUnits, true, true);
    gv_faceoffHoldTrigger = false;
    TriggerExecute(gt_CreateUnits, true, false);
    gv_FaceoffTimer = 7;
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, -103, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, 110, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, 110, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, -103, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setperiod_Init () {
    gt_setperiod = TriggerCreate("gt_setperiod_Func");
    TriggerAddEventChatMessage(gt_setperiod, c_playerAny, "-p ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: testscoareboard
//--------------------------------------------------------------------------------------------------
bool gt_testscoareboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_scoreboardPeriodDialog);
    DialogCreate(150, 50, c_anchorTop, 0, 30, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 40, 0, StringToText(""), "Assets\\Textures\\button-yellow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 65, 0, StringToText(""), "Assets\\Textures\\button-black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 90, 0, StringToText(""), "Assets\\Textures\\button-black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreboardPeriodDialog = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testscoareboard_Init () {
    gt_testscoareboard = TriggerCreate("gt_testscoareboard_Func");
    TriggerAddEventChatMessage(gt_testscoareboard, c_playerAny, "-ts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: testmodelsize
//--------------------------------------------------------------------------------------------------
bool gt_testmodelsize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, 15, PointFromId(112));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", 0, 15, PointWithOffset(PointFromId(112), 0.0, 20.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testmodelsize_Init () {
    gt_testmodelsize = TriggerCreate("gt_testmodelsize_Func");
    TriggerAddEventChatMessage(gt_testmodelsize, c_playerAny, "-ms", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: v10
//--------------------------------------------------------------------------------------------------
bool gt_v10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KURT) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KURTEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHI) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_PINKVOID) || (PlayerHandle(EventPlayer()) == gv_hANDLE_PINKVOIDEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_GUERRILA) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ALERTEYES) || (PlayerHandle(EventPlayer()) == gv_hANDLE_DAGGIUS) || (PlayerHandle(EventPlayer()) == gv_hANDLE_RUSH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_VAPOUR) || (PlayerHandle(EventPlayer()) == gv_hANDLE_VAPOUREU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_RESSLAYER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_RESSLAYEREU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_PROSTER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_PROSTEREU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_BLITZERG)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHandle(EventPlayer()) == gv_hANDLE_DAGGIUS) && ((EventPlayer() == gv_Players[2]) || (EventPlayer() == gv_Players[6]))) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand Unpowered End", c_animFlagNonLooping, c_animTimeDefault);
    }

    if (((PlayerHandle(EventPlayer()) == gv_hANDLE_RESSLAYER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_RESSLAYEREU))) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Walk", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Walk", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Death", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Walk", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Walk", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        Wait(0.0625, c_timeGame);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    }
    else {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_v10_Init () {
    gt_v10 = TriggerCreate("gt_v10_Func");
    TriggerAddEventKeyPressed(gt_v10, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nametag
//--------------------------------------------------------------------------------------------------
bool gt_nametag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (gv_tESTING == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KAIOKEN) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EWOK) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EWOKEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagSetText(gv_TextTags[EventPlayer()], StringToText(StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_nametag_Init () {
    gt_nametag = TriggerCreate("gt_nametag_Func");
    TriggerAddEventChatMessage(gt_nametag, c_playerAny, "-name ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Igloo
//--------------------------------------------------------------------------------------------------
bool gt_Igloo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_PETERDLAI))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_Skaters[EventPlayer()], "ModelSwap Grunt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Igloo_Init () {
    gt_Igloo = TriggerCreate("gt_Igloo_Func");
    TriggerAddEventKeyPressed(gt_Igloo, c_playerAny, c_keyF8, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help
//--------------------------------------------------------------------------------------------------
bool gt_Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D1B438B0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Help_Init () {
    gt_Help = TriggerCreate("gt_Help_Func");
    TriggerAddEventChatMessage(gt_Help, c_playerAny, "-help", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_VoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_command;
    string lv_playerToKickID;
    text lv_playerToKickName;
    string lv_initiatingPlayerID;
    text lv_initiatingPlayerName;
    bool lv_badInput;
    int lv_playerChecked;
    int lv_playersInGame;
    int lv_i;
    int lv_playerToKickINT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_command = "";
    lv_playerToKickID = "";
    lv_initiatingPlayerID = "";
    lv_badInput = true;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_kickPlayerButtons[1]) || (EventDialogControl() == gv_kickPlayerButtons[2]) || (EventDialogControl() == gv_kickPlayerButtons[3]) || (EventDialogControl() == gv_kickPlayerButtons[4]) || (EventDialogControl() == gv_kickPlayerButtons[5]) || (EventDialogControl() == gv_kickPlayerButtons[6]) || (EventDialogControl() == gv_kickPlayerButtons[7]) || (EventDialogControl() == gv_kickPlayerButtons[8])))) {
            return false;
        }

        if (!((gv_vOTE_IN_PROGRESS == false))) {
            return false;
        }

        if (!((gv_pLAYER_HAS_INITIATED_VOTE[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vOTED_NO = 0;
    gv_vOTED_YES = 1;
    lv_initiatingPlayerName = PlayerName(EventPlayer());
    gv_vOTE_PLAYER_INITIATED = PlayerHandle(EventPlayer());
    gv_vOTE_TYPE = gv_vOTE_TYPE_KICK;
    lv_playerToKickID = "none";
    if ((EventDialogControl() == gv_kickPlayerButtons[1]) && (gv_Players[1] != 0)) {
        lv_playerToKickName = PlayerName(gv_Players[1]);
        lv_playerToKickID = PlayerHandle(gv_Players[1]);
    }
    else {
        if ((EventDialogControl() == gv_kickPlayerButtons[2]) && (gv_Players[2] != 0)) {
            lv_playerToKickName = PlayerName(gv_Players[2]);
            lv_playerToKickID = PlayerHandle(gv_Players[2]);
        }
        else {
            if ((EventDialogControl() == gv_kickPlayerButtons[3]) && (gv_Players[3] != 0)) {
                lv_playerToKickName = PlayerName(gv_Players[3]);
                lv_playerToKickID = PlayerHandle(gv_Players[3]);
            }
            else {
                if ((EventDialogControl() == gv_kickPlayerButtons[4]) && (gv_Players[4] != 0)) {
                    lv_playerToKickName = PlayerName(gv_Players[4]);
                    lv_playerToKickID = PlayerHandle(gv_Players[4]);
                }
                else {
                    if ((EventDialogControl() == gv_kickPlayerButtons[5]) && (gv_Players[5] != 0)) {
                        lv_playerToKickName = PlayerName(gv_Players[5]);
                        lv_playerToKickID = PlayerHandle(gv_Players[5]);
                    }
                    else {
                        if ((EventDialogControl() == gv_kickPlayerButtons[6]) && (gv_Players[6] != 0)) {
                            lv_playerToKickName = PlayerName(gv_Players[6]);
                            lv_playerToKickID = PlayerHandle(gv_Players[6]);
                        }
                        else {
                            if ((EventDialogControl() == gv_kickPlayerButtons[7]) && (gv_Players[7] != 0)) {
                                lv_playerToKickName = PlayerName(gv_Players[7]);
                                lv_playerToKickID = PlayerHandle(gv_Players[7]);
                            }
                            else {
                                if ((EventDialogControl() == gv_kickPlayerButtons[8]) && (gv_Players[8] != 0)) {
                                    lv_playerToKickName = PlayerName(gv_Players[8]);
                                    lv_playerToKickID = PlayerHandle(gv_Players[8]);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    if ((lv_playerToKickID != "none") && (gv_vOTE_PLAYER_INITIATED != lv_playerToKickID)) {
        gv_vOTE_IN_PROGRESS = true;
        gf_votestarted();
        gv_pLAYER_HAS_INITIATED_VOTE[EventPlayer()] = true;
        gv_vOTE_PLAYER_AFFECTED = lv_playerToKickID;
        TextExpressionSetToken("Param/Expression/70E4DE79", "A", lv_initiatingPlayerName);
        TextExpressionSetToken("Param/Expression/70E4DE79", "B", lv_playerToKickName);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, TextExpressionAssemble("Param/Expression/70E4DE79"));
        Wait(10.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteKick_Init () {
    gt_VoteKick = TriggerCreate("gt_VoteKick_Func");
    TriggerAddEventDialogControl(gt_VoteKick, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Votekick Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ShowVotekickDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_indexedTriggering;

    // Automatic Variable Declarations
    const int auto589879E8_ae = 8;
    const int auto589879E8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_voteKickButton))) {
            return false;
        }

        if (!((gv_vOTE_IN_PROGRESS == false))) {
            return false;
        }

        if (!((gv_pLAYER_HAS_INITIATED_VOTE[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_initialVote.lv_readytoproceedtopregamestats == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_kickDialogOpenForPlayer[EventPlayer()] == false)) {
        DialogCreate(340, 440, c_anchorLeft, 300, 0, true);
        gv_kickDialog[EventPlayer()] = DialogLastCreated();
        gv_kickDialogOpenForPlayer[EventPlayer()] = true;
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        lv_i = 1;
        for ( ; ( (auto589879E8_ai >= 0 && lv_i <= auto589879E8_ae) || (auto589879E8_ai < 0 && lv_i >= auto589879E8_ae) ) ; lv_i += auto589879E8_ai ) {
            TextExpressionSetToken("Param/Expression/A9E34E79", "A", PlayerName(gv_Players[lv_i]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 260, 40, c_anchorTop, 0, (45 + ((lv_i - 1) * 45)), StringToText(""), TextExpressionAssemble("Param/Expression/A9E34E79"), "");
            gv_kickPlayerButtons[lv_i] = DialogControlLastCreated();
        }
    }
    else {
        DialogDestroy(gv_kickDialog[EventPlayer()]);
        gv_kickDialogOpenForPlayer[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowVotekickDialog_Init () {
    gt_ShowVotekickDialog = TriggerCreate("gt_ShowVotekickDialog_Func");
    TriggerAddEventDialogControl(gt_ShowVotekickDialog, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: vote yes
//--------------------------------------------------------------------------------------------------
bool gt_voteyes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_votingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_vOTE_IN_PROGRESS == true))) {
            return false;
        }

        if (!((gv_vOTE_PLAYER_INITIATED != PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((gv_pLAYER_HAS_VOTED_THIS_ROUND[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_votingPlayer = PlayerName(EventPlayer());
    if (true) {
        TextExpressionSetToken("Param/Expression/E9DC5C83", "A", lv_votingPlayer);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/E9DC5C83"));
        gv_vOTED_YES += 1;
        gv_pLAYER_HAS_VOTED_THIS_ROUND[EventPlayer()] = true;
        if ((gv_vOTED_YES >= gv_vOTES_NEEDED_TO_PASS)) {
            gv_vOTE_IN_PROGRESS = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/BBADA672"));
            TriggerExecute(gt_executevoteorder, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_voteyes_Init () {
    gt_voteyes = TriggerCreate("gt_voteyes_Func");
    TriggerAddEventChatMessage(gt_voteyes, c_playerAny, "-yes", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: vote no
//--------------------------------------------------------------------------------------------------
bool gt_voteno_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_votingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_votingPlayer = "";

    // Conditions
    if (testConds) {
        if (!((gv_vOTE_IN_PROGRESS == true))) {
            return false;
        }

        if (!((gv_vOTE_PLAYER_INITIATED != PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((gv_pLAYER_HAS_VOTED_THIS_ROUND[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_votingPlayer = PlayerHandle(EventPlayer());
    TextExpressionSetToken("Param/Expression/0F67EB87", "A", PlayerName(EventPlayer()));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/0F67EB87"));
    gv_vOTED_NO += 1;
    gv_pLAYER_HAS_VOTED_THIS_ROUND[EventPlayer()] = true;
    if ((gv_vOTED_NO >= gv_vOTES_NEEDED_TO_PASS)) {
        gv_vOTE_IN_PROGRESS = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/E7C545C7"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_voteno_Init () {
    gt_voteno = TriggerCreate("gt_voteno_Func");
    TriggerAddEventChatMessage(gt_voteno, c_playerAny, "-no", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: execute vote order
//--------------------------------------------------------------------------------------------------
bool gt_executevoteorder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto28000DBA_ae = 8;
    const int auto28000DBA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_vOTE_TYPE == gv_vOTE_TYPE_REDLINE)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/DA8B18ED"));
        gv_rEDLINE_MODE = true;
    }

    if ((gv_vOTE_TYPE == gv_vOTE_TYPE_KICK)) {
        lv_i = 1;
        for ( ; ( (auto28000DBA_ai >= 0 && lv_i <= auto28000DBA_ae) || (auto28000DBA_ai < 0 && lv_i >= auto28000DBA_ae) ) ; lv_i += auto28000DBA_ai ) {
            if ((gv_vOTE_PLAYER_AFFECTED == PlayerHandle(gv_Players[lv_i]))) {
                gf_Kick(gv_Players[lv_i]);
                TextExpressionSetToken("Param/Expression/AF6726FB", "A", PlayerName(gv_Players[lv_i]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/AF6726FB"));
                gf_SetGrayname(gv_Players[lv_i]);
                gf_ForfeitValidate();
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_executevoteorder_Init () {
    gt_executevoteorder = TriggerCreate("gt_executevoteorder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: vote timer expired
//--------------------------------------------------------------------------------------------------
bool gt_votetimerexpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_vOTE_IN_PROGRESS == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_vOTE_IN_PROGRESS = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, TextExpressionAssemble("Param/Expression/969824EA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_votetimerexpired_Init () {
    gt_votetimerexpired = TriggerCreate("gt_votetimerexpired_Func");
    TriggerAddEventTimer(gt_votetimerexpired, gv_vOTE_TIMER);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Init
//--------------------------------------------------------------------------------------------------
bool gt_RedlineInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MiddleCircle", c_unitCreateIgnorePlacement, 0, Point(128.0, 111.5));
    gv_redlineMode.lv_middleCircle = libNtve_gf_MainActorofUnit(UnitLastCreated());
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.05));
    libNtve_gf_CreateActorAtPoint("RedlineOOBZone", Point(165.38, 117.17));
    gv_redlineMode.lv_oOBZoneRight = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.05));
    libNtve_gf_CreateActorAtPoint("RedlineOOBZone", Point(90.56, 117.17));
    gv_redlineMode.lv_oOBZoneLeft = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
    libNtve_gf_CreateActorAtPoint("RedlineOOBText", Point(157.1, 111.5));
    gv_redlineMode.lv_oOBTextRight = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(-1.0, 0.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.5));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
    libNtve_gf_CreateActorAtPoint("RedlineOOBText", Point(98.93, 111.5));
    gv_redlineMode.lv_oOBTextLeft = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(1.0, 0.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.5));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 2.000000}");
    libNtve_gf_CreateActorAtPoint("RedlineTakebackLine", Point(127.88, 111.28));
    gv_redlineMode.lv_takebackLine = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,0,0 1.500000}");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.05));
    gf_RedlineCycleRedlineOpacity();
    libNtve_gf_CreateActorAtPoint("RedlineNormalLine", Point(127.88, 111.18));
    gv_redlineMode.lv_normalLine = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.05));
    libNtve_gf_CreateActorAtPoint("RedlineTakebackLine", Point(154.13, 111.12));
    gv_redlineMode.lv_oOBLineRight = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.400000,1.500000,1.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
    libNtve_gf_CreateActorAtPoint("RedlineTakebackLine", Point(176.5, 111.12));
    gv_redlineMode.lv_oOBLineRight2 = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.400000,1.500000,1.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
    libNtve_gf_CreateActorAtPoint("RedlineTakebackLine", Point(101.8, 111.12));
    gv_redlineMode.lv_oOBLineLeft = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.400000,1.500000,1.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
    libNtve_gf_CreateActorAtPoint("RedlineTakebackLine", Point(79.39, 111.12));
    gv_redlineMode.lv_oOBLineLeft2 = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.400000,1.500000,1.500000");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0.0, 1.0, 0, 0, 0, 1.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,255,255 3.000000}");
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), ActorFromDoodad(DoodadFromId(783868145)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), ActorFromDoodad(DoodadFromId(728871873)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), ActorFromDoodad(DoodadFromId(968462071)), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupActive(), libNtve_gf_MainActorofUnit(UnitFromId(208)), false);
    gv_redlineMode.lv_netarea1position = RegionGetCenter(RegionFromId(13));
    gv_redlineMode.lv_netarea2position = RegionGetCenter(RegionFromId(14));
    gv_rEDLINE_MODE = true;
    TimerPause(gv_Timer, true);
    TriggerStop(gt_UpdateTime);
    TriggerStop(gt_UpdateTimer);
    gf_CreateRedlineUI();
    gf_ResetTeams();
    TriggerEnable(gt_Detectshotsongoal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineInit_Init () {
    gt_RedlineInit = TriggerCreate("gt_RedlineInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart CMD
//--------------------------------------------------------------------------------------------------
bool gt_RestartCMD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_totalvotesneeded;
    int lv_totalvotes;
    bool lv_votedYes;

    // Automatic Variable Declarations
    const int auto5D809CC5_ae = 8;
    int auto5D809CC5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_rEDLINE_MODE == true))) {
            return false;
        }

        if (!((gv_redlineMode.lv_redlineTeamSetupisRunning == false))) {
            return false;
        }

        if (!((gv_uIPeriodStats.lv_showindefinitely == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_redlineMode.lv_restartVotes[EventPlayer()] == true) && ((gv_Players[1] == EventPlayer()) || (gv_Players[2] == EventPlayer()) || (gv_Players[3] == EventPlayer()) || (gv_Players[5] == EventPlayer()) || (gv_Players[7] == EventPlayer()))) {
        gv_redlineMode.lv_restartVotes[EventPlayer()] = false;
        TextExpressionSetToken("Param/Expression/CAA14B1E", "A", PlayerName(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CAA14B1E"));
    }
    else {
        if ((gv_redlineMode.lv_restartVotes[EventPlayer()] == false) && ((gv_Players[1] == EventPlayer()) || (gv_Players[2] == EventPlayer()) || (gv_Players[3] == EventPlayer()) || (gv_Players[5] == EventPlayer()) || (gv_Players[7] == EventPlayer()))) {
            gv_redlineMode.lv_restartVotes[EventPlayer()] = true;
            lv_votedYes = true;
        }
        else {
            if ((gv_Players[1] != EventPlayer()) && (gv_Players[2] != EventPlayer()) && (gv_Players[3] != EventPlayer()) && (gv_Players[5] != EventPlayer()) && (gv_Players[7] != EventPlayer())) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/94189020"));
            }

        }
    }
    if ((PlayerStatus(gv_Players[1]) == c_playerStatusActive)) {
        lv_totalvotesneeded += 1;
    }

    if ((PlayerStatus(gv_Players[2]) == c_playerStatusActive)) {
        lv_totalvotesneeded += 1;
    }

    if ((PlayerStatus(gv_Players[3]) == c_playerStatusActive)) {
        lv_totalvotesneeded += 1;
    }

    if ((PlayerStatus(gv_Players[5]) == c_playerStatusActive)) {
        lv_totalvotesneeded += 1;
    }

    if ((PlayerStatus(gv_Players[7]) == c_playerStatusActive)) {
        lv_totalvotesneeded += 1;
    }

    if ((lv_totalvotesneeded == 1)) {
        lv_totalvotesneeded = 1;
    }
    else {
        lv_totalvotesneeded -= 1;
    }
    auto5D809CC5_var = 1;
    for ( ; auto5D809CC5_var <= auto5D809CC5_ae; auto5D809CC5_var += 1 ) {
        if ((((gv_Players[1] == auto5D809CC5_var) && (gv_redlineMode.lv_restartVotes[auto5D809CC5_var] == true)) || ((gv_Players[2] == auto5D809CC5_var) && (gv_redlineMode.lv_restartVotes[auto5D809CC5_var] == true)) || ((gv_Players[3] == auto5D809CC5_var) && (gv_redlineMode.lv_restartVotes[auto5D809CC5_var] == true)) || ((gv_Players[5] == auto5D809CC5_var) && (gv_redlineMode.lv_restartVotes[auto5D809CC5_var] == true)) || ((gv_Players[7] == auto5D809CC5_var) && (gv_redlineMode.lv_restartVotes[auto5D809CC5_var] == true)))) {
            lv_totalvotes += 1;
        }

    }
    if ((lv_totalvotes >= lv_totalvotesneeded)) {
        gf_Waitforproperreset();
    }
    else {
        if ((lv_votedYes == true)) {
            TextExpressionSetToken("Param/Expression/E0EA6EB8", "A", PlayerName(EventPlayer()));
            TextExpressionSetToken("Param/Expression/E0EA6EB8", "B", IntToText((lv_totalvotesneeded - lv_totalvotes)));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E0EA6EB8"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RestartCMD_Init () {
    gt_RestartCMD = TriggerCreate("gt_RestartCMD_Func");
    TriggerAddEventChatMessage(gt_RestartCMD, c_playerAny, "-restart", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Start (For Testing Redline)
//--------------------------------------------------------------------------------------------------
bool gt_ForceStartForTestingRedline_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_testredlinemode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Startcountdown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceStartForTestingRedline_Init () {
    gt_ForceStartForTestingRedline = TriggerCreate("gt_ForceStartForTestingRedline_Func");
    TriggerAddEventChatMessage(gt_ForceStartForTestingRedline, c_playerAny, "start", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test 1
//--------------------------------------------------------------------------------------------------
bool gt_Test1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_testredlinemode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RedlineGivePowerup6GoldenGoal(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Test1_Init () {
    gt_Test1 = TriggerCreate("gt_Test1_Func");
    TriggerAddEventChatMessage(gt_Test1, c_playerAny, "p1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect shots on goal
//--------------------------------------------------------------------------------------------------
bool gt_Detectshotsongoal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!((gv_rEDLINE_MODE == true))) {
            return false;
        }

        if (!((gv_Possession <= 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((EventUnitRegion() == RegionFromId(13)) && (UnitGetCustomValue(gv_pUCK, 0) < 0.0) && (gv_Period == 1)) || ((EventUnitRegion() == RegionFromId(13)) && (UnitGetCustomValue(gv_pUCK, 0) < 0.0) && (gv_Period == 3)) || ((EventUnitRegion() == RegionFromId(14)) && (UnitGetCustomValue(gv_pUCK, 0) > 0.0) && (gv_Period == 2)) || ((EventUnitRegion() == RegionFromId(14)) && (UnitGetCustomValue(gv_pUCK, 0) > 0.0) && (gv_Period == 4)))) {
        if ((gv_lasttouchedby == gv_Players[1])) {
            gv_redlineMode.lv_shotsonGoal[gv_Players[1]] += 1;
            TextExpressionSetToken("Param/Expression/02E0B44E", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[1]] + gv_redlineMode.lv_shotsonGoal[gv_Players[3]])));
            libNtve_gf_SetDialogItemText(gv_shotsOnGoal1, TextExpressionAssemble("Param/Expression/02E0B44E"), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/1908A295", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[5]] + gv_redlineMode.lv_shotsonGoal[gv_Players[7]])));
            libNtve_gf_SetDialogItemText(gv_shotsOnGoal2, TextExpressionAssemble("Param/Expression/1908A295"), PlayerGroupAll());
        }
        else {
            if ((gv_lasttouchedby == gv_Players[3])) {
                gv_redlineMode.lv_shotsonGoal[gv_Players[3]] += 1;
                TextExpressionSetToken("Param/Expression/81F03022", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[1]] + gv_redlineMode.lv_shotsonGoal[gv_Players[3]])));
                libNtve_gf_SetDialogItemText(gv_shotsOnGoal1, TextExpressionAssemble("Param/Expression/81F03022"), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/E8439D88", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[5]] + gv_redlineMode.lv_shotsonGoal[gv_Players[7]])));
                libNtve_gf_SetDialogItemText(gv_shotsOnGoal2, TextExpressionAssemble("Param/Expression/E8439D88"), PlayerGroupAll());
            }
            else {
                if ((gv_lasttouchedby == gv_Players[5])) {
                    gv_redlineMode.lv_shotsonGoal[gv_Players[5]] += 1;
                    TextExpressionSetToken("Param/Expression/11746994", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[1]] + gv_redlineMode.lv_shotsonGoal[gv_Players[3]])));
                    libNtve_gf_SetDialogItemText(gv_shotsOnGoal1, TextExpressionAssemble("Param/Expression/11746994"), PlayerGroupAll());
                    TextExpressionSetToken("Param/Expression/3EB54B44", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[5]] + gv_redlineMode.lv_shotsonGoal[gv_Players[7]])));
                    libNtve_gf_SetDialogItemText(gv_shotsOnGoal2, TextExpressionAssemble("Param/Expression/3EB54B44"), PlayerGroupAll());
                }
                else {
                    if ((gv_lasttouchedby == gv_Players[7])) {
                        gv_redlineMode.lv_shotsonGoal[gv_Players[7]] += 1;
                        TextExpressionSetToken("Param/Expression/92D9A165", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[1]] + gv_redlineMode.lv_shotsonGoal[gv_Players[3]])));
                        libNtve_gf_SetDialogItemText(gv_shotsOnGoal1, TextExpressionAssemble("Param/Expression/92D9A165"), PlayerGroupAll());
                        TextExpressionSetToken("Param/Expression/D9337D33", "A", IntToText((gv_redlineMode.lv_shotsonGoal[gv_Players[5]] + gv_redlineMode.lv_shotsonGoal[gv_Players[7]])));
                        libNtve_gf_SetDialogItemText(gv_shotsOnGoal2, TextExpressionAssemble("Param/Expression/D9337D33"), PlayerGroupAll());
                    }

                }
            }
        }
    }

    gf_RedlineCheckforsaves();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Detectshotsongoal_Init () {
    gt_Detectshotsongoal = TriggerCreate("gt_Detectshotsongoal_Func");
    TriggerEnable(gt_Detectshotsongoal, false);
    TriggerAddEventUnitRegion(gt_Detectshotsongoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_Detectshotsongoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(14), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goalie Enters Left Half
//--------------------------------------------------------------------------------------------------
bool gt_GoalieEntersLeftHalf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_Skaters[gv_Players[2]] == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 2) || (gv_Period == 4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(150), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E861E00F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalieEntersLeftHalf_Init () {
    gt_GoalieEntersLeftHalf = TriggerCreate("gt_GoalieEntersLeftHalf_Func");
    TriggerEnable(gt_GoalieEntersLeftHalf, false);
    TriggerAddEventUnitRegion(gt_GoalieEntersLeftHalf, null, RegionRect(55.23, 74.26, 128.0, 152.05), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goalie Enters Right Half
//--------------------------------------------------------------------------------------------------
bool gt_GoalieEntersRightHalf_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_Skaters[gv_Players[2]] == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 1) || (gv_Period == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(149), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3AD82FE4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalieEntersRightHalf_Init () {
    gt_GoalieEntersRightHalf = TriggerCreate("gt_GoalieEntersRightHalf_Func");
    TriggerEnable(gt_GoalieEntersRightHalf, false);
    TriggerAddEventUnitRegion(gt_GoalieEntersRightHalf, null, RegionRect(128.0, 76.0, 200.67, 151.77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Enters OOB - Left
//--------------------------------------------------------------------------------------------------
bool gt_PuckEntersOOBLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pUCK == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 2) || (gv_Period == 4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_lasttouchedby == gv_Players[1]) || (gv_lasttouchedby == gv_Players[3])) && (gv_redlineMode.lv_offensiveTeam != 0)) {
        gf_RedlineForceFaceoff(2, StringExternal("Param/Value/F4F3514F"));
    }
    else {
        if (((gv_lasttouchedby == gv_Players[5]) || (gv_lasttouchedby == gv_Players[7])) && (gv_redlineMode.lv_offensiveTeam != 0)) {
            gf_RedlineForceFaceoff(1, StringExternal("Param/Value/BFEF655E"));
        }
        else {
            if ((gv_redlineMode.lv_offensiveTeam == 0)) {
                gf_RedlineForceFaceoff(0, StringExternal("Param/Value/43860142"));
            }
            else {
                if ((gv_lasttouchedby == gv_Players[2]) && (gv_redlineMode.lv_whatteamiscurrentlyghosted == 1)) {
                    gf_RedlineForceFaceoff(2, StringExternal("Param/Value/8247D6D7"));
                }
                else {
                    if ((gv_lasttouchedby == gv_Players[2]) && (gv_redlineMode.lv_whatteamiscurrentlyghosted == 2)) {
                        gf_RedlineForceFaceoff(1, StringExternal("Param/Value/486017D3"));
                    }
                    else {
                        gf_RedlineForceFaceoff(0, StringExternal("Param/Value/A8291ACD"));
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PuckEntersOOBLeft_Init () {
    gt_PuckEntersOOBLeft = TriggerCreate("gt_PuckEntersOOBLeft_Func");
    TriggerEnable(gt_PuckEntersOOBLeft, false);
    TriggerAddEventUnitRegion(gt_PuckEntersOOBLeft, null, RegionRect(55.35, 74.11, 101.74, 152.17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Enters OOB - Right
//--------------------------------------------------------------------------------------------------
bool gt_PuckEntersOOBRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pUCK == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 1) || (gv_Period == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_lasttouchedby == gv_Players[1]) || (gv_lasttouchedby == gv_Players[3])) && (gv_redlineMode.lv_offensiveTeam != 0)) {
        gf_RedlineForceFaceoff(2, StringExternal("Param/Value/FCFAAB01"));
    }
    else {
        if (((gv_lasttouchedby == gv_Players[5]) || (gv_lasttouchedby == gv_Players[7])) && (gv_redlineMode.lv_offensiveTeam != 0)) {
            gf_RedlineForceFaceoff(1, StringExternal("Param/Value/66DC3BC8"));
        }
        else {
            if ((gv_redlineMode.lv_offensiveTeam == 0)) {
                gf_RedlineForceFaceoff(0, StringExternal("Param/Value/A19ED3B5"));
            }
            else {
                if ((gv_lasttouchedby == gv_Players[2]) && (gv_redlineMode.lv_whatteamiscurrentlyghosted == 1)) {
                    gf_RedlineForceFaceoff(2, StringExternal("Param/Value/29587C5A"));
                }
                else {
                    if ((gv_lasttouchedby == gv_Players[2]) && (gv_redlineMode.lv_whatteamiscurrentlyghosted == 2)) {
                        gf_RedlineForceFaceoff(1, StringExternal("Param/Value/BCD71E79"));
                    }
                    else {
                        gf_RedlineForceFaceoff(0, StringExternal("Param/Value/09445EDC"));
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PuckEntersOOBRight_Init () {
    gt_PuckEntersOOBRight = TriggerCreate("gt_PuckEntersOOBRight_Func");
    TriggerEnable(gt_PuckEntersOOBRight, false);
    TriggerAddEventUnitRegion(gt_PuckEntersOOBRight, null, RegionRect(154.18, 72.65, 200.54, 152.41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Enters Takeback - Left
//--------------------------------------------------------------------------------------------------
bool gt_PuckEntersTakebackLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pUCK == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 2) || (gv_Period == 4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_canagoalbescored = true;
    if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[3]))) {
        gf_RedlineResetGoalieCDs();
        gf_RedlineSetRoles(1, 2);
        gf_RedlineSetGhosted(0);
    }
    else {
        if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[7]))) {
            gf_RedlineResetGoalieCDs();
            gf_RedlineSetRoles(2, 1);
            gf_RedlineSetGhosted(0);
        }

    }
    if ((gv_redlineMode.lv_timerpauseduntiltakeback == true)) {
        gv_redlineMode.lv_timerpauseduntiltakeback = false;
        if ((TimerIsPaused(gv_Timer) == true) && (gv_stoppageOfPlay == false)) {
            TimerPause(gv_Timer, false);
        }

    }

    gf_RedlineTakebackwaitforpossession(RegionRect(55.23, 74.26, 128.0, 152.05));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PuckEntersTakebackLeft_Init () {
    gt_PuckEntersTakebackLeft = TriggerCreate("gt_PuckEntersTakebackLeft_Func");
    TriggerEnable(gt_PuckEntersTakebackLeft, false);
    TriggerAddEventUnitRegion(gt_PuckEntersTakebackLeft, null, RegionRect(55.23, 74.26, 128.0, 152.05), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Enters Takeback - Right
//--------------------------------------------------------------------------------------------------
bool gt_PuckEntersTakebackRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pUCK == EventUnit()))) {
            return false;
        }

        if (!((gv_Shootout == false))) {
            return false;
        }

        if (!(((gv_Period == 1) || (gv_Period == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_canagoalbescored = true;
    if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[3]))) {
        gf_RedlineResetGoalieCDs();
        gf_RedlineSetRoles(1, 2);
        gf_RedlineSetGhosted(0);
    }
    else {
        if ((gv_redlineMode.lv_searchingforInitialPossession == false) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[7]))) {
            gf_RedlineResetGoalieCDs();
            gf_RedlineSetRoles(2, 1);
            gf_RedlineSetGhosted(0);
        }

    }
    if ((gv_redlineMode.lv_timerpauseduntiltakeback == true)) {
        gv_redlineMode.lv_timerpauseduntiltakeback = false;
        if ((TimerIsPaused(gv_Timer) == true) && (gv_stoppageOfPlay == false)) {
            TimerPause(gv_Timer, false);
        }

    }

    gf_RedlineTakebackwaitforpossession(RegionRect(128.0, 76.0, 200.67, 151.77));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PuckEntersTakebackRight_Init () {
    gt_PuckEntersTakebackRight = TriggerCreate("gt_PuckEntersTakebackRight_Func");
    TriggerEnable(gt_PuckEntersTakebackRight, false);
    TriggerAddEventUnitRegion(gt_PuckEntersTakebackRight, null, RegionRect(128.0, 76.0, 200.67, 151.77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Identify Initial Role (Faceoff)
//--------------------------------------------------------------------------------------------------
bool gt_RedlineIdentifyInitialRoleFaceoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pUCK == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RedlineSetinitialrole();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineIdentifyInitialRoleFaceoff_Init () {
    gt_RedlineIdentifyInitialRoleFaceoff = TriggerCreate("gt_RedlineIdentifyInitialRoleFaceoff_Func");
    TriggerEnable(gt_RedlineIdentifyInitialRoleFaceoff, false);
    TriggerAddEventUnitRegion(gt_RedlineIdentifyInitialRoleFaceoff, null, RegionCircle(Point(128.05, 111.64), 7.5), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select New Slot
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectNewSlot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9EB39EA9_ae = 13;
    int auto9EB39EA9_var;

    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsCanplayersmoveslots == true))) {
            return false;
        }

        if (!(((gv_redlineMode.lv_menuMainselectionSlotsHotspot[1] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[2] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[3] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[4] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[5] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[6] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[7] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[8] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[9] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[10] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[11] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[12] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSlotsHotspot[13] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9EB39EA9_var = 1;
    for ( ; auto9EB39EA9_var <= auto9EB39EA9_ae; auto9EB39EA9_var += 1 ) {
        if ((gv_redlineMode.lv_menuMainselectionSlotsHotspot[auto9EB39EA9_var] == EventDialogControl())) {
            gv_redlineMode.lv_slotsDesiredSlot[EventPlayer()] = auto9EB39EA9_var;
            PlayerGroupAdd(gv_redlineMode.lv_slotsPlayerswaitingtoupdate, EventPlayer());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectNewSlot_Init () {
    gt_RedlineSelectNewSlot = TriggerCreate("gt_RedlineSelectNewSlot_Func");
    TriggerEnable(gt_RedlineSelectNewSlot, false);
    TriggerAddEventDialogControl(gt_RedlineSelectNewSlot, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Press Start
//--------------------------------------------------------------------------------------------------
bool gt_RedlinePressStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_menuBotrightButtonHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_redlineMode.lv_slotsIsPlayerReady[EventPlayer()] == false)) {
        gv_redlineMode.lv_slotsIsPlayerReady[EventPlayer()] = true;
    }
    else {
        gv_redlineMode.lv_slotsIsPlayerReady[EventPlayer()] = false;
        gv_redlineMode.lv_isgamecountdownrunning = false;
    }
    gf_UpdateSlotValues();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlinePressStart_Init () {
    gt_RedlinePressStart = TriggerCreate("gt_RedlinePressStart_Func");
    TriggerEnable(gt_RedlinePressStart, false);
    TriggerAddEventDialogControl(gt_RedlinePressStart, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Period
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectPeriod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA412FCFB_ae = 6;
    int autoA412FCFB_var;

    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!(((gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[1] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[2] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[3] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[4] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[5] == EventDialogControl()) || (gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[6] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RedlinePeriodSetallinactive();
    gv_redlineMode.lv_isgamecountdownrunning = false;
    autoA412FCFB_var = 1;
    for ( ; autoA412FCFB_var <= autoA412FCFB_ae; autoA412FCFB_var += 1 ) {
        if ((gv_redlineMode.lv_menuMainselectionSettingsPeriodLengthHotspot[autoA412FCFB_var] == EventDialogControl())) {
            gf_PeriodSetActive(autoA412FCFB_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectPeriod_Init () {
    gt_RedlineSelectPeriod = TriggerCreate("gt_RedlineSelectPeriod_Func");
    TriggerEnable(gt_RedlineSelectPeriod, false);
    TriggerAddEventDialogControl(gt_RedlineSelectPeriod, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Infinite OT
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectInfiniteOT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!((gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_isgamecountdownrunning = false;
    if ((gv_redlineMode.lv_settingsInfiniteOT == true)) {
        gv_redlineMode.lv_settingsInfiniteOT = false;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[1], PlayerGroupAll(), false);
    }
    else {
        gv_redlineMode.lv_settingsInfiniteOT = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsInfiniteOTCheckbox[1], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectInfiniteOT_Init () {
    gt_RedlineSelectInfiniteOT = TriggerCreate("gt_RedlineSelectInfiniteOT_Func");
    TriggerEnable(gt_RedlineSelectInfiniteOT, false);
    TriggerAddEventDialogControl(gt_RedlineSelectInfiniteOT, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Powerups
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectPowerups_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!((gv_redlineMode.lv_menuMainselectionSettingsPowerupsHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_isgamecountdownrunning = false;
    if ((gv_redlineMode.lv_settingsPowerups == true)) {
        gv_redlineMode.lv_settingsPowerups = false;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[1], PlayerGroupAll(), false);
    }
    else {
        gv_redlineMode.lv_settingsPowerups = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsPowerupsCheckbox[1], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectPowerups_Init () {
    gt_RedlineSelectPowerups = TriggerCreate("gt_RedlineSelectPowerups_Func");
    TriggerEnable(gt_RedlineSelectPowerups, false);
    TriggerAddEventDialogControl(gt_RedlineSelectPowerups, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Freeplay
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectFreeplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!((gv_redlineMode.lv_menuMainselectionSettingsFreeplayHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_isgamecountdownrunning = false;
    if ((gv_redlineMode.lv_settingsFreeplay == true)) {
        gv_redlineMode.lv_settingsFreeplay = false;
        gv_redlineMode.lv_settingsCrease = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseHotspot, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseLabel, PlayerGroupAll(), false);
    }
    else {
        gv_redlineMode.lv_settingsFreeplay = true;
        gv_redlineMode.lv_settingsCrease = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsFreeplayCheckbox[1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseHotspot, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseLabel, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectFreeplay_Init () {
    gt_RedlineSelectFreeplay = TriggerCreate("gt_RedlineSelectFreeplay_Func");
    TriggerEnable(gt_RedlineSelectFreeplay, false);
    TriggerAddEventDialogControl(gt_RedlineSelectFreeplay, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Crease
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectCrease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!((gv_redlineMode.lv_menuMainselectionSettingsCreaseHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_isgamecountdownrunning = false;
    if ((gv_redlineMode.lv_settingsCrease == true)) {
        gv_redlineMode.lv_settingsCrease = false;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[1], PlayerGroupAll(), false);
    }
    else {
        gv_redlineMode.lv_settingsCrease = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCreaseCheckbox[1], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectCrease_Init () {
    gt_RedlineSelectCrease = TriggerCreate("gt_RedlineSelectCrease_Func");
    TriggerEnable(gt_RedlineSelectCrease, false);
    TriggerAddEventDialogControl(gt_RedlineSelectCrease, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redline - Select Checking
//--------------------------------------------------------------------------------------------------
bool gt_RedlineSelectChecking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_redlineMode.lv_slotsWhichplayerisinwhichslot[EventPlayer()] == 9))) {
            return false;
        }

        if (!((gv_redlineMode.lv_menuMainselectionSettingsCheckingHotspot == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_redlineMode.lv_isgamecountdownrunning = false;
    if ((gv_redlineMode.lv_settingsChecking == true)) {
        gv_redlineMode.lv_settingsChecking = false;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[1], PlayerGroupAll(), false);
    }
    else {
        gv_redlineMode.lv_settingsChecking = true;
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_redlineMode.lv_menuMainselectionSettingsCheckingCheckbox[1], PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedlineSelectChecking_Init () {
    gt_RedlineSelectChecking = TriggerCreate("gt_RedlineSelectChecking_Func");
    TriggerEnable(gt_RedlineSelectChecking, false);
    TriggerAddEventDialogControl(gt_RedlineSelectChecking, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle
//--------------------------------------------------------------------------------------------------
bool gt_Jungle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateJungleStadium();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Jungle_Init () {
    gt_Jungle = TriggerCreate("gt_Jungle_Func");
    TriggerAddEventChatMessage(gt_Jungle, c_playerAny, "-jungle", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unpause button
//--------------------------------------------------------------------------------------------------
bool gt_Unpausebutton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pauseresumebutton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnpaseGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unpausebutton_Init () {
    gt_Unpausebutton = TriggerCreate("gt_Unpausebutton_Func");
    TriggerAddEventDialogControl(gt_Unpausebutton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Pause
//--------------------------------------------------------------------------------------------------
bool gt_StartPause_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameispaused == false))) {
            return false;
        }

        if (!((gv_testteam3ui == false))) {
            return false;
        }

        if (!((((gv_canteampausegame[1] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) || ((gv_canteampausegame[2] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
        lv_team = 1;
    }

    if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)) {
        lv_team = 2;
    }

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true)) {
        lv_team = 3;
    }

    if ((lv_team == 1) && (gv_pausetimeremaining[1] > 0)) {
        gf_PauseGame(lv_team);
    }

    if ((lv_team == 1) && (gv_pausetimeremaining[1] <= 0)) {
        UIDisplayMessage(gv_actualPlayerzonTeam[1], c_messageAreaSubtitle, StringExternal("Param/Value/3FA3531E"));
    }

    if ((lv_team == 2) && (gv_pausetimeremaining[2] > 0)) {
        gf_PauseGame(lv_team);
    }

    if ((lv_team == 2) && (gv_pausetimeremaining[2] <= 0)) {
        UIDisplayMessage(gv_actualPlayerzonTeam[2], c_messageAreaSubtitle, StringExternal("Param/Value/9A443E77"));
    }

    if ((lv_team == 3) && (gv_pausetimeremaining[3] > 0)) {
        gf_PauseGame(lv_team);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartPause_Init () {
    gt_StartPause = TriggerCreate("gt_StartPause_Func");
    TriggerAddEventKeyPressed(gt_StartPause, c_playerAny, c_keyP, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check puckfollow
//--------------------------------------------------------------------------------------------------
bool gt_Checkpuckfollow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_puckcambox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, EventPlayer()) == true)) {
        gv_team3UI.lv_storedCamDistance[EventPlayer()] = CameraGetDistance(EventPlayer());
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionFromId(56), false);
        CameraSetData(PlayerGroupSingle(EventPlayer()), "Dflt2");
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(UnitFromId(4)), true, false);
    }
    else {
        CameraFollowUnitGroup(EventPlayer(), UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionPlayableMap(), false);
        CameraSetData(PlayerGroupSingle(EventPlayer()), "Dflt");
        CameraSetValue(EventPlayer(), c_cameraValueDistance, gv_team3UI.lv_storedCamDistance[EventPlayer()], 1.0, -1, 10.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkpuckfollow_Init () {
    gt_Checkpuckfollow = TriggerCreate("gt_Checkpuckfollow_Func");
    TriggerAddEventDialogControl(gt_Checkpuckfollow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puckfollow hotkey
//--------------------------------------------------------------------------------------------------
bool gt_Puckfollowhotkey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_testteam3ui == true) || (gv_team3UI.lv_limitedAccess[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_team3UI.lv_puckcambox, EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemChecked(gv_team3UI.lv_puckcambox, false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemChecked(gv_team3UI.lv_puckcambox, true, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Puckfollowhotkey_Init () {
    gt_Puckfollowhotkey = TriggerCreate("gt_Puckfollowhotkey_Func");
    TriggerEnable(gt_Puckfollowhotkey, false);
    TriggerAddEventKeyPressed(gt_Puckfollowhotkey, c_playerAny, c_keyU, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Showhide hotkey
//--------------------------------------------------------------------------------------------------
bool gt_Showhidehotkey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_testteam3ui == true) || (gv_team3UI.lv_limitedAccess[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_team3Dialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_quickStatScreenDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_team3UI.lv_team3Dialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Showhidehotkey_Init () {
    gt_Showhidehotkey = TriggerCreate("gt_Showhidehotkey_Func");
    TriggerEnable(gt_Showhidehotkey, false);
    TriggerAddEventKeyPressed(gt_Showhidehotkey, c_playerAny, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: APM Show Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_APMShowHotkey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_testteam3ui == true) || (gv_team3UI.lv_limitedAccess[EventPlayer()] == true)))) {
            return false;
        }

        if (!((DialogIsVisible(gv_team3UI.lv_aPMDialogs[EventPlayer()], EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitAPMDialog(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_APMShowHotkey_Init () {
    gt_APMShowHotkey = TriggerCreate("gt_APMShowHotkey_Func");
    TriggerEnable(gt_APMShowHotkey, false);
    TriggerAddEventKeyPressed(gt_APMShowHotkey, c_playerAny, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: APM Hide Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_APMHideHotkey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_testteam3ui == true) || (gv_team3UI.lv_limitedAccess[EventPlayer()] == true)))) {
            return false;
        }

        if (!((DialogIsVisible(gv_team3UI.lv_aPMDialogs[EventPlayer()], EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_HideAPMDialog(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_APMHideHotkey_Init () {
    gt_APMHideHotkey = TriggerCreate("gt_APMHideHotkey_Func");
    TriggerEnable(gt_APMHideHotkey, false);
    TriggerAddEventKeyPressed(gt_APMHideHotkey, c_playerAny, c_keyI, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period UI - Open/Close
//--------------------------------------------------------------------------------------------------
bool gt_PeriodUIOpenClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_panels[1], EventPlayer()) == true)) {
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodUIOpenClose_Init () {
    gt_PeriodUIOpenClose = TriggerCreate("gt_PeriodUIOpenClose_Func");
    TriggerAddEventDialogControl(gt_PeriodUIOpenClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period UI - Execute
//--------------------------------------------------------------------------------------------------
bool gt_PeriodUIExecute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto74A8A23D_g;
    int auto74A8A23D_var;
    playergroup auto09EA541A_g;
    int auto09EA541A_var;
    playergroup auto32783D9F_g;
    int auto32783D9F_var;
    playergroup autoA5EB5BBC_g;
    int autoA5EB5BBC_var;
    playergroup auto413EEDCE_g;
    int auto413EEDCE_var;
    playergroup autoF4D64A50_g;
    int autoF4D64A50_var;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_team3UI.lv_periodselectbuttons[1]) || (EventDialogControl() == gv_team3UI.lv_periodselectbuttons[2]) || (EventDialogControl() == gv_team3UI.lv_periodselectbuttons[3]) || (EventDialogControl() == gv_team3UI.lv_periodselectbuttons[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_team3UI.lv_periodselectbuttons[1] == EventDialogControl())) {
        gv_Period = 1;
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((gv_team3UI.lv_periodselectbuttons[2] == EventDialogControl())) {
            gv_Period = 2;
            DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            if ((gv_team3UI.lv_periodselectbuttons[3] == EventDialogControl())) {
                gv_Period = 3;
                DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
                DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                if ((gv_team3UI.lv_periodselectbuttons[4] == EventDialogControl())) {
                    gv_Period = 4;
                    DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
                }

            }
        }
    }
    gv_Possession = -1;
    gv_NoCount = true;
    gv_stoppageOfPlay = true;
    if ((gv_Period == 1)) {
        libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/56B5C5A7"), PlayerGroupAll());
        gv_uIPeriodStats.lv_timesshownAKAperiod = 1;
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
    }
    else {
        if ((gv_Period == 2)) {
            libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/DAA45FB8"), PlayerGroupAll());
            gv_uIPeriodStats.lv_timesshownAKAperiod = 2;
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-black.dds", PlayerGroupAll());
        }
        else {
            if ((gv_Period == 3)) {
                libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriod1, StringExternal("Param/Value/656E551F"), PlayerGroupAll());
                gv_uIPeriodStats.lv_timesshownAKAperiod = 3;
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod1, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod2, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardPeriod3, "Assets\\Textures\\button-yellow.dds", PlayerGroupAll());
            }
            else {
                if ((gv_Period == 4)) {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/11C6CF63"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                    gv_uIPeriodStats.lv_timesshownAKAperiod = 4;
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_uIScoreboardItems.lv_scoreboardPeriodText, StringExternal("Param/Value/25F3A2BD"), PlayerGroupAll());
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod1, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod2, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriod3, PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_uIScoreboardItems.lv_scoreboardPeriodText, PlayerGroupAll(), true);
                    gv_uIPeriodStats.lv_timesshownAKAperiod = 4;
                }
            }
        }
    }
    TimerPause(gv_Timer, true);
    SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    if ((gv_testteam3ui == true)) {
        auto32783D9F_g = PlayerGroupAll();
        auto32783D9F_var = -1;
        while (true) {
            auto32783D9F_var = PlayerGroupNextPlayer(auto32783D9F_g, auto32783D9F_var);
            if (auto32783D9F_var < 0) { break; }
            gf_StopPuckCam(auto32783D9F_var, true);
        }
    }
    else {
        auto74A8A23D_g = GameAttributePlayersForTeam(3);
        auto74A8A23D_var = -1;
        while (true) {
            auto74A8A23D_var = PlayerGroupNextPlayer(auto74A8A23D_g, auto74A8A23D_var);
            if (auto74A8A23D_var < 0) { break; }
            gf_StopPuckCam(auto74A8A23D_var, true);
        }
        auto09EA541A_g = PlayerGroupActive();
        auto09EA541A_var = -1;
        while (true) {
            auto09EA541A_var = PlayerGroupNextPlayer(auto09EA541A_g, auto09EA541A_var);
            if (auto09EA541A_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[auto09EA541A_var] == true)) {
                gf_StopPuckCam(auto09EA541A_var, true);
            }

        }
    }
    UnitSetPosition(gv_pUCK, PointFromId(2), false);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
    DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
    Wait(5.0, c_timeGame);
    TriggerStop(gt_UpdateTime);
    if ((gv_Period == 4)) {
        TimerStart(gv_Timer, gv_oVERTIME_LENGTH, false, c_timeReal);
    }
    else {
        TimerStart(gv_Timer, gv_PeriodTime, false, c_timeReal);
    }
    TimerPause(gv_Timer, true);
    TriggerExecute(gt_UpdateTime, true, false);
    gv_NoCount = false;
    gv_stoppageOfPlay = false;
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    if ((gv_testteam3ui == true)) {
        autoF4D64A50_g = PlayerGroupAll();
        autoF4D64A50_var = -1;
        while (true) {
            autoF4D64A50_var = PlayerGroupNextPlayer(autoF4D64A50_g, autoF4D64A50_var);
            if (autoF4D64A50_var < 0) { break; }
            gf_StartPuckCam(autoF4D64A50_var);
        }
    }
    else {
        autoA5EB5BBC_g = GameAttributePlayersForTeam(3);
        autoA5EB5BBC_var = -1;
        while (true) {
            autoA5EB5BBC_var = PlayerGroupNextPlayer(autoA5EB5BBC_g, autoA5EB5BBC_var);
            if (autoA5EB5BBC_var < 0) { break; }
            gf_StartPuckCam(autoA5EB5BBC_var);
        }
        auto413EEDCE_g = PlayerGroupActive();
        auto413EEDCE_var = -1;
        while (true) {
            auto413EEDCE_var = PlayerGroupNextPlayer(auto413EEDCE_g, auto413EEDCE_var);
            if (auto413EEDCE_var < 0) { break; }
            if ((gv_team3UI.lv_limitedAccess[auto413EEDCE_var] == true)) {
                gf_StartPuckCam(auto413EEDCE_var);
            }

        }
    }
    gv_faceoffHoldTrigger = true;
    TriggerExecute(gt_RandomizeUnits, true, true);
    gv_faceoffHoldTrigger = false;
    TriggerExecute(gt_CreateUnits, true, false);
    gv_FaceoffTimer = 7;
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, -103, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, 110, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redleft.dds", PlayerGroupAll());
        if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), c_anchorTopLeft, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), c_anchorTopLeft, 60, 100);
        }

        if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), c_anchorTopRight, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), c_anchorTopRight, 60, 100);
        }

    }
    else {
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(43), "LightOmniBlueLarge");
        libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(44), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(43), "LightOmniRedLarge");
        libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(44), "LightOmniBlueLarge");
        DialogControlSetPosition(gv_ScoreDialogItem1, PlayerGroupAll(), c_anchorTop, 110, 14);
        DialogControlSetPosition(gv_ScoreDialogItem2, PlayerGroupAll(), c_anchorTop, -103, 14);
        DialogControlSetPosition(gv_shotsOnGoal1, PlayerGroupAll(), c_anchorTop, 110, 42);
        DialogControlSetPosition(gv_shotsOnGoal2, PlayerGroupAll(), c_anchorTop, -103, 42);
        libNtve_gf_SetDialogItemImage(gv_uIScoreboardItems.lv_scoreboardBG, "Assets\\Textures\\scoreboarbg_redright.dds", PlayerGroupAll());
        if ((gv_team3UI.lv_scoreboardLogosHome != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHome, PlayerGroupAll(), c_anchorTopRight, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosHomeTeamText, PlayerGroupAll(), c_anchorTopRight, 60, 100);
        }

        if ((gv_team3UI.lv_scoreboardLogosAway != c_invalidDialogControlId)) {
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAway, PlayerGroupAll(), c_anchorTopLeft, 60, 5);
            DialogControlSetPosition(gv_team3UI.lv_scoreboardLogosAwayTeamText, PlayerGroupAll(), c_anchorTopLeft, 60, 100);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodUIExecute_Init () {
    gt_PeriodUIExecute = TriggerCreate("gt_PeriodUIExecute_Func");
    TriggerAddEventDialogControl(gt_PeriodUIExecute, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time UI - Open/Close
//--------------------------------------------------------------------------------------------------
bool gt_TimeUIOpenClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_panels[2], EventPlayer()) == true)) {
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeUIOpenClose_Init () {
    gt_TimeUIOpenClose = TriggerCreate("gt_TimeUIOpenClose_Func");
    TriggerAddEventDialogControl(gt_TimeUIOpenClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time UI - Execute
//--------------------------------------------------------------------------------------------------
bool gt_TimeUIExecute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_stringValue;
    int lv_totalSeconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stringValue = "";

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_timeSet))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stringValue = libNtve_gf_DialogItemEditValue(gv_team3UI.lv_timeSecondsTextarea, EventPlayer());
    lv_totalSeconds = StringToInt(lv_stringValue);
    if ((lv_totalSeconds > 0) && (lv_totalSeconds < 1000)) {
        TriggerStop(gt_UpdateTime);
        TimerStart(gv_Timer, lv_totalSeconds, false, c_timeReal);
        if ((gv_FaceoffTimer > 0)) {
            TimerPause(gv_Timer, true);
        }

        TriggerExecute(gt_UpdateTime, true, false);
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D11946DD"));
    }
    libNtve_gf_SetDialogItemEditorValue(gv_team3UI.lv_timeSecondsTextarea, "", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeUIExecute_Init () {
    gt_TimeUIExecute = TriggerCreate("gt_TimeUIExecute_Func");
    TriggerAddEventDialogControl(gt_TimeUIExecute, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score UI - Open/Close
//--------------------------------------------------------------------------------------------------
bool gt_ScoreUIOpenClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[3]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_panels[3], EventPlayer()) == true)) {
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[1], (StringExternal("Param/Value/C1B05A0B") + IntToText(gv_TeamScores[1])), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[2], (StringExternal("Param/Value/6DF33434") + IntToText(gv_TeamScores[2])), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreUIOpenClose_Init () {
    gt_ScoreUIOpenClose = TriggerCreate("gt_ScoreUIOpenClose_Func");
    TriggerAddEventDialogControl(gt_ScoreUIOpenClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score UI - Execute
//--------------------------------------------------------------------------------------------------
bool gt_ScoreUIExecute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_team3UI.lv_teamScoreArrows[1]) || (EventDialogControl() == gv_team3UI.lv_teamScoreArrows[2]) || (EventDialogControl() == gv_team3UI.lv_teamScoreArrows[3]) || (EventDialogControl() == gv_team3UI.lv_teamScoreArrows[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_team3UI.lv_teamScoreArrows[1])) {
        gv_TeamScores[1] += 1;
        TextExpressionSetToken("Param/Expression/BA0AA54D", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/BA0AA54D"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[1], (StringExternal("Param/Value/475C0312") + IntToText(gv_TeamScores[1])), PlayerGroupAll());
    }
    else {
        if ((EventDialogControl() == gv_team3UI.lv_teamScoreArrows[2])) {
            gv_TeamScores[1] -= 1;
            TextExpressionSetToken("Param/Expression/2F169B34", "A", IntToText(gv_TeamScores[1]));
            libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/2F169B34"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[1], (StringExternal("Param/Value/2BD9034E") + IntToText(gv_TeamScores[1])), PlayerGroupAll());
        }
        else {
            if ((EventDialogControl() == gv_team3UI.lv_teamScoreArrows[3])) {
                gv_TeamScores[2] += 1;
                TextExpressionSetToken("Param/Expression/EEA7A872", "A", IntToText(gv_TeamScores[2]));
                libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/EEA7A872"), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[2], (StringExternal("Param/Value/D6BEF577") + IntToText(gv_TeamScores[2])), PlayerGroupAll());
            }
            else {
                if ((EventDialogControl() == gv_team3UI.lv_teamScoreArrows[4])) {
                    gv_TeamScores[2] -= 1;
                    TextExpressionSetToken("Param/Expression/1538FF0D", "A", IntToText(gv_TeamScores[2]));
                    libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/1538FF0D"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_team3UI.lv_teamScoreLabels[2], (StringExternal("Param/Value/FB48B8B2") + IntToText(gv_TeamScores[2])), PlayerGroupAll());
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreUIExecute_Init () {
    gt_ScoreUIExecute = TriggerCreate("gt_ScoreUIExecute_Func");
    TriggerAddEventDialogControl(gt_ScoreUIExecute, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: APM UI - Open/Close Button
//--------------------------------------------------------------------------------------------------
bool gt_APMUIOpenCloseButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[4]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_aPMDialogs[EventPlayer()], EventPlayer()) == false)) {
        gf_InitAPMDialog(EventPlayer());
    }
    else {
        gf_HideAPMDialog(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_APMUIOpenCloseButton_Init () {
    gt_APMUIOpenCloseButton = TriggerCreate("gt_APMUIOpenCloseButton_Func");
    TriggerAddEventDialogControl(gt_APMUIOpenCloseButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remake UI - Open/Close
//--------------------------------------------------------------------------------------------------
bool gt_RemakeUIOpenClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_team3UI.lv_panels[5], EventPlayer()) == true)) {
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemakeUIOpenClose_Init () {
    gt_RemakeUIOpenClose = TriggerCreate("gt_RemakeUIOpenClose_Func");
    TriggerAddEventDialogControl(gt_RemakeUIOpenClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team 3 UI - Pregame Saved Games Dialog Button Click
//--------------------------------------------------------------------------------------------------
bool gt_Team3UIPregameSavedGamesDialogButtonClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_donthideit;
    int lv_enumplayer;
    int lv_enumint;
    int lv_triggeringplayer;
    int lv_triggerinbutton;

    // Automatic Variable Declarations
    playergroup auto5323D1A2_g;
    playergroup autoE7DE5EE6_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5323D1A2_g = PlayerGroupAll();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto5323D1A2_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((EventDialogControl() == gv_team3UI.lv_savegamePregamePromptButtons[lv_enumplayer][1])) {
            lv_triggeringplayer = lv_enumplayer;
            lv_triggerinbutton = 1;
            break;
        }
        else {
            if ((EventDialogControl() == gv_team3UI.lv_savegamePregamePromptButtons[lv_enumplayer][2])) {
                lv_triggeringplayer = lv_enumplayer;
                lv_triggerinbutton = 2;
                break;
            }

        }
    }
    if ((lv_triggerinbutton == 1)) {
        gf_Team3UILoadSavedGame(EventPlayer());
        DialogDestroy(gv_team3UI.lv_savegamePregamePromptDialog[EventPlayer()]);
    }
    else {
        if ((lv_triggerinbutton == 2)) {
            DialogDestroy(gv_team3UI.lv_savegamePregamePromptDialog[EventPlayer()]);
        }

    }
    autoE7DE5EE6_g = PlayerGroupAll();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoE7DE5EE6_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((gv_team3UI.lv_savegamePregamePromptDialog[lv_enumplayer] != c_invalidDialogId)) {
            if ((DialogIsVisible(gv_team3UI.lv_savegamePregamePromptDialog[lv_enumplayer], lv_enumplayer) == true)) {
                lv_donthideit = true;
            }

        }

    }
    if ((lv_donthideit == false)) {
        TriggerEnable(gt_Team3UIPregameSavedGamesDialogButtonClick, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team3UIPregameSavedGamesDialogButtonClick_Init () {
    gt_Team3UIPregameSavedGamesDialogButtonClick = TriggerCreate("gt_Team3UIPregameSavedGamesDialogButtonClick_Func");
    TriggerEnable(gt_Team3UIPregameSavedGamesDialogButtonClick, false);
    TriggerAddEventDialogControl(gt_Team3UIPregameSavedGamesDialogButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remake UI - Execute Save
//--------------------------------------------------------------------------------------------------
bool gt_RemakeUIExecuteSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_remakeDialogButtons[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromFlag(gv_Banks[EventPlayer()], "SavedGame", "HasGameSaved", true);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "Period", gv_Period);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "ScoreOne", gv_TeamScores[1]);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "ScoreTwo", gv_TeamScores[2]);
    BankValueSetFromFixed(gv_Banks[EventPlayer()], "SavedGame", "Time", TimerGetRemaining(gv_Timer));
    BankSave(gv_Banks[EventPlayer()]);
    TextExpressionSetToken("Param/Expression/1B02046B", "A", IntToText(gv_Period));
    TextExpressionSetToken("Param/Expression/1B02046B", "B", IntToText(gv_TeamScores[1]));
    TextExpressionSetToken("Param/Expression/1B02046B", "C", IntToText(gv_TeamScores[2]));
    TextExpressionSetToken("Param/Expression/1B02046B", "D", IntToText(FixedToInt(TimerGetRemaining(gv_Timer))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1B02046B"));
    DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Promote", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemakeUIExecuteSave_Init () {
    gt_RemakeUIExecuteSave = TriggerCreate("gt_RemakeUIExecuteSave_Func");
    TriggerAddEventDialogControl(gt_RemakeUIExecuteSave, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remake UI - Execute Load
//--------------------------------------------------------------------------------------------------
bool gt_RemakeUIExecuteLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_period;
    int[3] lv_score;
    fixed lv_timeleft;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_remakeDialogButtons[2]))) {
            return false;
        }

        if (!((gv_team3UI.lv_savegameHasGameSaved[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameispaused == false)) {
        gf_Team3UILoadSavedGame(EventPlayer());
        DialogSetVisible(gv_team3UI.lv_panels[5], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/720D2F63"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemakeUIExecuteLoad_Init () {
    gt_RemakeUIExecuteLoad = TriggerCreate("gt_RemakeUIExecuteLoad_Func");
    TriggerAddEventDialogControl(gt_RemakeUIExecuteLoad, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Execute
//--------------------------------------------------------------------------------------------------
bool gt_PauseExecute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_team3UI.lv_mainbarbottons[5]))) {
            return false;
        }

        if (!(((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true) || (gv_testteam3ui == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pausetimeremaining[3] <= 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/53E5710C"));
    }
    else {
        gf_PauseGame(3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PauseExecute_Init () {
    gt_PauseExecute = TriggerCreate("gt_PauseExecute_Func");
    TriggerAddEventDialogControl(gt_PauseExecute, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Caster Dance at Table
//--------------------------------------------------------------------------------------------------
bool gt_CasterDanceatTable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(gv_casterUnits[1], 9) == IntToFixed(EventPlayer()))) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_casterUnits[1]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    }
    else {
        if ((UnitGetCustomValue(gv_casterUnits[2], 9) == IntToFixed(EventPlayer()))) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_casterUnits[2]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CasterDanceatTable_Init () {
    gt_CasterDanceatTable = TriggerCreate("gt_CasterDanceatTable_Func");
    TriggerAddEventKeyPressed(gt_CasterDanceatTable, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tiger Attack
//--------------------------------------------------------------------------------------------------
bool gt_TigerAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_enumunit;
    unit lv_enumunit2;
    fixed lv_radius;
    fixed lv_offset;
    unitgroup lv_attackedunits;
    bool lv_goalie;

    // Automatic Variable Declarations
    unitgroup autoC4BE4FA8_g;
    int autoC4BE4FA8_u;
    unitgroup auto380F19FB_g;
    int auto380F19FB_u;

    // Variable Initialization
    lv_attackedunits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true) && (gv_tigerCelebration.lv_tigerTeam == 1) && (gv_tigerCelebration.lv_isrunning == true) && (gv_tigerCelebration.lv_attackCooldown[EventPlayer()] == 0)) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_ShootingPlayer) == true) && (gv_tigerCelebration.lv_tigerTeam == 2) && (gv_tigerCelebration.lv_isrunning == true) && (gv_tigerCelebration.lv_attackCooldown[EventPlayer()] == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("TigerAttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_Skaters[EventPlayer()]), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[EventPlayer()]), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    gf_TigerAttackCooldown(EventPlayer());
    if (((gv_Players[2] == EventPlayer()) || (gv_Players[6] == EventPlayer()))) {
        lv_radius = 5.0;
        lv_offset = 3.0;
    }
    else {
        lv_radius = 3.0;
        lv_offset = 1.5;
    }
    autoC4BE4FA8_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), lv_offset, UnitGetFacing(gv_Skaters[EventPlayer()])), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC4BE4FA8_u = UnitGroupCount(autoC4BE4FA8_g, c_unitCountAll);
    for (;; autoC4BE4FA8_u -= 1) {
        lv_enumunit = UnitGroupUnitFromEnd(autoC4BE4FA8_g, autoC4BE4FA8_u);
        if (lv_enumunit == null) { break; }
        if ((((UnitGetCustomValue(lv_enumunit, 17) == 0.0) && ((gv_tigerCelebration.lv_tigerTeam == 1) && ((gv_Skaters[gv_Players[5]] == lv_enumunit) || (gv_Skaters[gv_Players[6]] == lv_enumunit) || (gv_Skaters[gv_Players[7]] == lv_enumunit) || (gv_Skaters[gv_Players[8]] == lv_enumunit)))) || ((UnitGetCustomValue(lv_enumunit, 17) == 0.0) && ((gv_tigerCelebration.lv_tigerTeam == 2) && ((gv_Skaters[gv_Players[1]] == lv_enumunit) || (gv_Skaters[gv_Players[2]] == lv_enumunit) || (gv_Skaters[gv_Players[3]] == lv_enumunit) || (gv_Skaters[gv_Players[4]] == lv_enumunit)))))) {
            UnitGroupAdd(lv_attackedunits, lv_enumunit);
        }

    }
    if ((UnitGroupCount(lv_attackedunits, c_unitCountAlive) > 0)) {
        auto380F19FB_g = lv_attackedunits;
        auto380F19FB_u = UnitGroupCount(auto380F19FB_g, c_unitCountAll);
        for (;; auto380F19FB_u -= 1) {
            lv_enumunit2 = UnitGroupUnitFromEnd(auto380F19FB_g, auto380F19FB_u);
            if (lv_enumunit2 == null) { break; }
            if (((gv_Players[2] == EventPlayer()) || (gv_Players[6] == EventPlayer()))) {
                gf_TigerAttackGo(lv_enumunit2, AngleBetweenPoints(PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), lv_offset, UnitGetFacing(gv_Skaters[EventPlayer()])), UnitGetPosition(lv_enumunit2)), true);
            }
            else {
                gf_TigerAttackGo(lv_enumunit2, AngleBetweenPoints(PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), lv_offset, UnitGetFacing(gv_Skaters[EventPlayer()])), UnitGetPosition(lv_enumunit2)), false);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TigerAttack_Init () {
    gt_TigerAttack = TriggerCreate("gt_TigerAttack_Func");
    TriggerEnable(gt_TigerAttack, false);
    TriggerAddEventMouseClicked(gt_TigerAttack, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save/Encryiption
//--------------------------------------------------------------------------------------------------
bool gt_SaveEncryiption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_substring;
    int lv_i;
    int lv_security_Key;
    int lv_stage1encrypt;
    int lv_stage2encrypt;

    // Automatic Variable Declarations
    const int auto6FCC7B45_ae = 8;
    int auto6FCC7B45_var;
    const int auto08C12CC9_ae = 8;
    int auto08C12CC9_var;
    const int autoE7D8409A_ae = 8;
    int autoE7D8409A_var;
    int autoACDCDDD6_ae;
    int autoACDCDDD6_var;

    // Variable Initialization
    lv_substring = "";
    lv_i = 1;
    lv_stage2encrypt = 1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_key_Dialog_Items[7]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_save_Key = IntToString(gv_public_Key);
    gf_NextSaveSection();
    gv_save_Key = (gv_save_Key + IntToString((gv_Possession + 1)));
    gv_save_Key = (gv_save_Key + IntToString(gv_Period));
    gv_save_Key = (gv_save_Key + FixedToString((TimerGetRemaining(gv_Timer)*1000), 0));
    gf_NextSaveSection();
    gv_save_Key = (gv_save_Key + gf_AddZeroesBeforeNumber(gv_TeamScores[1], 2));
    gv_save_Key = (gv_save_Key + gf_AddZeroesBeforeNumber(gv_TeamScores[2], 2));
    gv_save_Key = (gv_save_Key + gf_AddZeroesBeforeNumber(gv_sOG1, 2));
    gv_save_Key = (gv_save_Key + gf_AddZeroesBeforeNumber(gv_sOG2, 2));
    gf_NextSaveSection();
    auto6FCC7B45_var = 1;
    for ( ; auto6FCC7B45_var <= auto6FCC7B45_ae; auto6FCC7B45_var += 1 ) {
        if ((gv_Players[auto6FCC7B45_var] != 0)) {
            gv_save_Key = (gv_save_Key + StringSub(gv_playerHandles[auto6FCC7B45_var], 9, 11));
        }
        else {
            gv_save_Key = (gv_save_Key + "000");
        }
        if ((ModI(auto6FCC7B45_var, 2) == 0)) {
            gf_NextSaveSection();
        }

    }
    gf_NextSaveSection();
    auto08C12CC9_var = 1;
    for ( ; auto08C12CC9_var <= auto08C12CC9_ae; auto08C12CC9_var += 1 ) {
        gv_save_Key = (gv_save_Key + gf_AddZeroesBeforeNumber((FixedToInt(ModF((UnitGetFacing(gv_Skaters[gv_Players[auto08C12CC9_var]]) + 360.0), 360.0)) + gv_oFFSET_NUMBER_ANGLE), 3));
        if ((ModI(auto08C12CC9_var, 2) == 0)) {
            gf_NextSaveSection();
        }

    }
    autoE7D8409A_var = 1;
    for ( ; autoE7D8409A_var <= autoE7D8409A_ae; autoE7D8409A_var += 1 ) {
        if ((gv_Players[autoE7D8409A_var] != 0)) {
            gv_save_Key = (gv_save_Key + IntToString(FixedToInt((PointGetX(UnitGetPosition(gv_Skaters[gv_Players[autoE7D8409A_var]])) * 50.0))));
            gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((PointGetY(UnitGetPosition(gv_Skaters[gv_Players[autoE7D8409A_var]])) - 50.0) * 100.0))));
            gf_NextSaveSection();
            gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((UnitGetCustomValue(gv_Skaters[gv_Players[autoE7D8409A_var]], 0)*1000)+IntToFixed(gv_oFFSET_NUMBER_X)))));
            gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((UnitGetCustomValue(gv_Skaters[gv_Players[autoE7D8409A_var]], 1)*1000)+IntToFixed(gv_oFFSET_NUMBER_Y)))));
            gf_NextSaveSection();
        }

    }
    gv_save_Key = (gv_save_Key + IntToString(FixedToInt((PointGetX(UnitGetPosition(gv_pUCK)) * 50.0))));
    gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((PointGetY(UnitGetPosition(gv_pUCK)) - 50.0) * 100.0))));
    gf_NextSaveSection();
    gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((UnitGetCustomValue(gv_pUCK, 0)*1000)+IntToFixed(gv_oFFSET_NUMBER_X)))));
    gv_save_Key = (gv_save_Key + IntToString(FixedToInt(((UnitGetCustomValue(gv_pUCK, 1)*1000)+IntToFixed(gv_oFFSET_NUMBER_Y)))));
    gf_NextSaveSection();
    lv_substring = StringWord(gv_save_Key, 1);
    while ((lv_substring != "")) {
        lv_stage1encrypt = (StringToInt(lv_substring) * 7);
        autoACDCDDD6_ae = StringLength(lv_substring);
        autoACDCDDD6_var = 1;
        for ( ; autoACDCDDD6_var <= autoACDCDDD6_ae; autoACDCDDD6_var += 1 ) {
            if ((StringToInt(StringSub(lv_substring, autoACDCDDD6_var, autoACDCDDD6_var)) != 0)) {
                lv_stage2encrypt *= StringToInt(StringSub(lv_substring, autoACDCDDD6_var, autoACDCDDD6_var));
            }

        }
        lv_security_Key += lv_stage2encrypt;
        lv_stage2encrypt = 1;
        lv_i += 1;
        lv_substring = StringWord(gv_save_Key, lv_i);
    }
    gv_save_Key = (gv_save_Key + IntToString(lv_security_Key));
    libNtve_gf_SetDialogItemEditorValue(gv_key_Dialog_Items[3], gv_save_Key, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveEncryiption_Init () {
    gt_SaveEncryiption = TriggerCreate("gt_SaveEncryiption_Func");
    TriggerAddEventDialogControl(gt_SaveEncryiption, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load/Decryption
//--------------------------------------------------------------------------------------------------
bool gt_LoadDecryption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_key;
    int lv_public_Key_Check;
    string lv_sectionString;
    int lv_i;
    int lv_j;
    int lv_h;
    bool lv_done;
    fixed[10] lv_angles;
    string lv_substring;
    int lv_security_Key;
    int lv_stage1encrypt;
    int lv_stage2encrypt;

    // Automatic Variable Declarations
    int auto4D322B44_ae;
    int auto4D322B44_var;
    const int autoA3B761D4_ae = 8;
    int autoA3B761D4_var;
    const int autoE4C07DDB_ae = 8;
    const int autoE4C07DDB_ai = 1;
    const int autoB9F08C94_ae = 8;
    const int autoB9F08C94_ai = 1;
    const int autoE282DFCF_ae = 8;
    int autoE282DFCF_var;
    const int autoF37D4D54_ae = 8;
    int autoF37D4D54_var;
    const int auto99A90737_ae = 8;
    int auto99A90737_var;

    // Variable Initialization
    lv_key = "";
    lv_sectionString = "";
    lv_i = 4;
    lv_h = 1;
    lv_substring = "";
    lv_stage2encrypt = 1;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_key_Dialog_Items[8]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_key = libNtve_gf_DialogItemEditValue(gv_key_Dialog_Items[4], EventPlayer());
    lv_substring = StringWord(lv_key, 1);
    while ((StringWord(lv_key, (lv_h + 1)) != "")) {
        lv_stage1encrypt = (StringToInt(lv_substring) * 7);
        auto4D322B44_ae = StringLength(lv_substring);
        auto4D322B44_var = 1;
        for ( ; auto4D322B44_var <= auto4D322B44_ae; auto4D322B44_var += 1 ) {
            if ((StringToInt(StringSub(lv_substring, auto4D322B44_var, auto4D322B44_var)) != 0)) {
                lv_stage2encrypt *= StringToInt(StringSub(lv_substring, auto4D322B44_var, auto4D322B44_var));
            }

        }
        lv_security_Key += lv_stage2encrypt;
        lv_stage2encrypt = 1;
        lv_h += 1;
        lv_substring = StringWord(lv_key, lv_h);
    }
    if ((lv_security_Key != StringToInt(StringWord(lv_key, lv_h)))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9F4244E0"));
        return true;
    }

    lv_public_Key_Check = StringToInt(StringWord(lv_key, 1));
    if ((lv_public_Key_Check != gv_public_Key)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/75ED5BE8"));
        return true;
    }

    gv_Possession = (StringToInt(StringSub(StringWord(lv_key, 2), 1, 1)) - 1);
    gv_Period = StringToInt(StringSub(StringWord(lv_key, 2), 2, 2));
    TimerStart(gv_Timer, (StringToInt(StringSub(StringWord(lv_key, 2), 3, StringLength(StringWord(lv_key, 2)))) / 1000.0), false, c_timeReal);
    TimerPause(gv_Timer, true);
    gv_TeamScores[1] = StringToInt(StringSub(StringWord(lv_key, 3), 1, 2));
    gv_TeamScores[2] = StringToInt(StringSub(StringWord(lv_key, 3), 3, 4));
    gv_sOG1 = StringToInt(StringSub(StringWord(lv_key, 3), 5, 6));
    gv_sOG2 = StringToInt(StringSub(StringWord(lv_key, 3), 7, 8));
    autoA3B761D4_var = 1;
    for ( ; autoA3B761D4_var <= autoA3B761D4_ae; autoA3B761D4_var += 1 ) {
        gv_Players[autoA3B761D4_var] = 0;
        if ((ModI(autoA3B761D4_var, 2) == 1) && (StringSub(StringWord(lv_key, lv_i), 1, 3) != "000")) {
            lv_j = 1;
            for ( ; ( (autoE4C07DDB_ai >= 0 && lv_j <= autoE4C07DDB_ae) || (autoE4C07DDB_ai < 0 && lv_j >= autoE4C07DDB_ae) ) ; lv_j += autoE4C07DDB_ai ) {
                if ((StringSub(PlayerHandle(lv_j), 9, 11) == StringSub(StringWord(lv_key, lv_i), 1, 3))) {
                    if ((lv_done == false)) {
                        gv_Players[autoA3B761D4_var] = lv_j;
                        lv_done = true;
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/1B33EA39"));
                        TextExpressionSetToken("Param/Expression/3F8B57E3", "A", PlayerName(gv_Players[autoA3B761D4_var]));
                        TextExpressionSetToken("Param/Expression/3F8B57E3", "B", PlayerName(lv_j));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/3F8B57E3"));
                        break;
                    }
                }

            }
            lv_done = false;
        }

        if ((ModI(autoA3B761D4_var, 2) == 0) && (StringSub(StringWord(lv_key, lv_i), 4, 6) != "000")) {
            lv_j = 1;
            for ( ; ( (autoB9F08C94_ai >= 0 && lv_j <= autoB9F08C94_ae) || (autoB9F08C94_ai < 0 && lv_j >= autoB9F08C94_ae) ) ; lv_j += autoB9F08C94_ai ) {
                if ((StringSub(PlayerHandle(lv_j), 9, 11) == StringSub(StringWord(lv_key, lv_i), 4, 6))) {
                    if ((lv_done == false)) {
                        gv_Players[autoA3B761D4_var] = lv_j;
                        lv_done = true;
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/621DE723"));
                        TextExpressionSetToken("Param/Expression/F298A25A", "A", PlayerName(gv_Players[autoA3B761D4_var]));
                        TextExpressionSetToken("Param/Expression/F298A25A", "B", PlayerName(lv_j));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F298A25A"));
                        break;
                    }
                }

            }
            lv_done = false;
        }

        if ((ModI(autoA3B761D4_var, 2) == 0)) {
            lv_i += 1;
        }

    }
    autoE282DFCF_var = 1;
    for ( ; autoE282DFCF_var <= autoE282DFCF_ae; autoE282DFCF_var += 1 ) {
        if ((ModI(autoE282DFCF_var, 2) == 1)) {
            lv_angles[gv_Players[autoE282DFCF_var]] = (StringToFixed(StringSub(StringWord(lv_key, lv_i), 1, 3))-gv_oFFSET_NUMBER_ANGLE);
        }
        else {
            lv_angles[gv_Players[autoE282DFCF_var]] = (StringToFixed(StringSub(StringWord(lv_key, lv_i), 4, 6))-gv_oFFSET_NUMBER_ANGLE);
            lv_i += 1;
        }
    }
    autoF37D4D54_var = 1;
    for ( ; autoF37D4D54_var <= autoF37D4D54_ae; autoF37D4D54_var += 1 ) {
        if (((PlayerStatus(autoF37D4D54_var) == c_playerStatusActive) || (PlayerStatus(autoF37D4D54_var) == c_playerStatusLeft))) {
            TextTagDestroy(gv_badgeTextTag[autoF37D4D54_var]);
        }

    }
    TriggerExecute(gt_CreateUnits, true, false);
    auto99A90737_var = 1;
    for ( ; auto99A90737_var <= auto99A90737_ae; auto99A90737_var += 1 ) {
        if ((gv_Players[auto99A90737_var] != 0)) {
            UnitSetPosition(gv_Skaters[gv_Players[auto99A90737_var]], Point((StringToFixed(StringSub(StringWord(lv_key, lv_i), 1, 4))/50), ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 5, 8))/100)+50)), false);
            CameraPan(gv_Players[auto99A90737_var], UnitGetPosition(gv_Skaters[gv_Players[auto99A90737_var]]), 0.0, -1, 10.0, false);
            lv_i += 1;
            UnitSetFacing(gv_Skaters[gv_Players[auto99A90737_var]], lv_angles[gv_Players[auto99A90737_var]], 0.0);
            gv_xVel[gv_Players[auto99A90737_var]] = ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 1, 4))-gv_oFFSET_NUMBER_X)/1000);
            gv_yVel[gv_Players[auto99A90737_var]] = ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 5, 8))-gv_oFFSET_NUMBER_Y)/1000);
            UnitSetCustomValue(gv_Skaters[gv_Players[auto99A90737_var]], 0, 0.0);
            UnitSetCustomValue(gv_Skaters[gv_Players[auto99A90737_var]], 1, 0.0);
            UnitSetCustomValue(gv_pUCK, 1, 0.0);
            lv_i += 1;
        }

    }
    UnitSetPosition(gv_pUCK, Point((StringToFixed(StringSub(StringWord(lv_key, lv_i), 1, 4))/50), ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 5, 8))/100)+50)), false);
    lv_i += 1;
    gv_xVel[9] = ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 1, 4))-gv_oFFSET_NUMBER_X)/1000);
    gv_yVel[9] = ((StringToFixed(StringSub(StringWord(lv_key, lv_i), 5, 8))-gv_oFFSET_NUMBER_Y)/1000);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    lv_i += 1;
    gv_loading = true;
    gv_FaceoffTimer = 16;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadDecryption_Init () {
    gt_LoadDecryption = TriggerCreate("gt_LoadDecryption_Func");
    TriggerAddEventDialogControl(gt_LoadDecryption, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key Dialog (Show)
//--------------------------------------------------------------------------------------------------
bool gt_KeyDialogShow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tESTING == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_key_Dialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyDialogShow_Init () {
    gt_KeyDialogShow = TriggerCreate("gt_KeyDialogShow_Func");
    TriggerAddEventChatMessage(gt_KeyDialogShow, c_playerAny, "-save", true);
    TriggerAddEventChatMessage(gt_KeyDialogShow, c_playerAny, "-load", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key Dialog (Close)
//--------------------------------------------------------------------------------------------------
bool gt_KeyDialogClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_key_Dialog_Items[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_key_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyDialogClose_Init () {
    gt_KeyDialogClose = TriggerCreate("gt_KeyDialogClose_Func");
    TriggerAddEventDialogControl(gt_KeyDialogClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key Dialog (Save Tab)
//--------------------------------------------------------------------------------------------------
bool gt_KeyDialogSaveTab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_key_Dialog_Items[1]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_key_Dialog_Items[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[6], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_key_Dialog_Items[5], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_key_Dialog_Items[7], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_key_Dialog_Items[1], StringExternal("Param/Value/F7B9ACEB"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_key_Dialog_Items[2], StringExternal("Param/Value/C65ABDA2"), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyDialogSaveTab_Init () {
    gt_KeyDialogSaveTab = TriggerCreate("gt_KeyDialogSaveTab_Func");
    TriggerAddEventDialogControl(gt_KeyDialogSaveTab, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key Dialog (Load Tab)
//--------------------------------------------------------------------------------------------------
bool gt_KeyDialogLoadTab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_key_Dialog_Items[2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_key_Dialog_Items[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[7], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_key_Dialog_Items[4], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_key_Dialog_Items[6], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_key_Dialog_Items[8], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_key_Dialog_Items[1], StringExternal("Param/Value/278F378F"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_key_Dialog_Items[2], StringExternal("Param/Value/35854228"), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyDialogLoadTab_Init () {
    gt_KeyDialogLoadTab = TriggerCreate("gt_KeyDialogLoadTab_Func");
    TriggerAddEventDialogControl(gt_KeyDialogLoadTab, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prize Toggle
//--------------------------------------------------------------------------------------------------
bool gt_PrizeToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_STEALTH) || (PlayerHandle(EventPlayer()) == gv_hANDLE_STEALTHEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((BankValueGetAsInt(gv_Banks[EventPlayer()], "Settings", "PrizeToggle") == 0)) {
        BankValueSetFromInt(gv_Banks[EventPlayer()], "Settings", "PrizeToggle", 1);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2B604117"));
    }
    else {
        BankValueSetFromInt(gv_Banks[EventPlayer()], "Settings", "PrizeToggle", 0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9E360AFE"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrizeToggle_Init () {
    gt_PrizeToggle = TriggerCreate("gt_PrizeToggle_Func");
    TriggerAddEventKeyPressed(gt_PrizeToggle, c_playerAny, c_keyF1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goal Special
//--------------------------------------------------------------------------------------------------
bool gt_GoalSpecial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_testCelebration;
    int lv_teamGoalMusic;
    string lv_actor;

    // Automatic Variable Declarations
    playergroup auto40A7F537_g;
    int auto40A7F537_var;
    playergroup autoAF2F59BE_g;
    int autoAF2F59BE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto40A7F537_g = PlayerGroupAlliance(c_playerGroupAlly, gv_ShootingPlayer);
    auto40A7F537_var = -1;
    while (true) {
        auto40A7F537_var = PlayerGroupNextPlayer(auto40A7F537_g, auto40A7F537_var);
        if (auto40A7F537_var < 0) { break; }
        if (((PlayerHandle(auto40A7F537_var) == gv_hANDLE_ENTROPY) || (PlayerHandle(auto40A7F537_var) == gv_hANDLE_ENTROPYEU) || (PlayerHandle(auto40A7F537_var) == gv_hANDLE_EWOK) || (PlayerHandle(auto40A7F537_var) == gv_hANDLE_EWOKEU))) {
            UnitAbilityReset(gv_Skaters[auto40A7F537_var], AbilityCommand("Check", 0), c_spendLocationAbility);
            CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[auto40A7F537_var]), ".1");
            CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[auto40A7F537_var]), ".1");
        }

    }
    autoAF2F59BE_g = PlayerGroupAlliance(c_playerGroupEnemy, gv_ShootingPlayer);
    autoAF2F59BE_var = -1;
    while (true) {
        autoAF2F59BE_var = PlayerGroupNextPlayer(autoAF2F59BE_g, autoAF2F59BE_var);
        if (autoAF2F59BE_var < 0) { break; }
        if ((gv_wasgoalowngoal == false) && ((autoAF2F59BE_var == gv_Players[2]) || (autoAF2F59BE_var == gv_Players[6])) && ((PlayerHandle(autoAF2F59BE_var) == gv_hANDLE_ENTROPY) || (PlayerHandle(autoAF2F59BE_var) == gv_hANDLE_ENTROPYEU) || (PlayerHandle(autoAF2F59BE_var) == gv_hANDLE_EWOK) || (PlayerHandle(autoAF2F59BE_var) == gv_hANDLE_EWOKEU))) {
            gf_EntropyCrickets(autoAF2F59BE_var);
        }

    }
    gf_InitBoardThrowing();
    if ((gv_wasgoalowngoal == false)) {
        if ((((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], gv_ShootingPlayer) == true) && (GameAttributeGameValue("3") == "0008")) || ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], gv_ShootingPlayer) == true) && (GameAttributeGameValue("4") == "0008")))) {
            gf_StartTigerCelebration();
            Wait(8.0, c_timeGame);
        }
        else {
            gf_CheckPassiveTeamCelebrations(gv_ShootingPlayer);
            gf_CheckGoalieActions();
            gf_CheckforHatTrick(gv_ShootingPlayer);
            if ((gv_useGoalTestingTrigger == true)) {
                TriggerExecute(gt_GoalTesting, true, true);
            }
            else {
                if ((gv_soExcited[gv_ShootingPlayer] == true)) {
                    SoundPlay(SoundLink("SoExcited", -1), gv_goalSoundGroup, 100.0, 0.0);
                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                    gf_Dance3();
                    Wait(9.0, c_timeGame);
                }
                else {
                    if ((gv_rewardstatusOFF[gv_ShootingPlayer] == true)) {
                        SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                        Wait(3.0, c_timeGame);
                    }
                    else {
                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KAIOKEN)) {
                            SoundPlay(SoundLink("HockeyBostonGoal", -1), gv_goalSoundGroup, 90.0, 0.15);
                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                            gv_bostonSound = SoundLastPlayed();
                            gf_Dance();
                            Wait(8.0, c_timeGame);
                        }
                        else {
                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CAFCA)) {
                                SoundPlay(SoundLink("CafcaHorn", -1), gv_goalSoundGroup, 90.0, 0.15);
                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                Wait(8.0, c_timeGame);
                            }
                            else {
                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_TOWNKRIER) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_TKEU))) {
                                    if (((gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[6]))) {
                                        SoundPlay(SoundLink("TeamHorn12", -1), gv_goalSoundGroup, 100.0, 0.0);
                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                        gf_TKTIger();
                                        Wait(8.0, c_timeGame);
                                    }
                                    else {
                                        SoundPlay(SoundLink("TKHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                        Wait(3.0, c_timeGame);
                                    }
                                }
                                else {
                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DROPLETS)) {
                                        SoundPlay(SoundLink("DropHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                        gf_Dance3();
                                        Wait(6.5, c_timeGame);
                                    }
                                    else {
                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_STEEZYSTEVE)) {
                                            SoundPlay(SoundLink("SteezyHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                            gf_Dance4();
                                            Wait(3.5, c_timeGame);
                                        }
                                        else {
                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_OOTER)) {
                                                SoundPlay(SoundLink("ooterhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                gv_ootersound = SoundLastPlayed();
                                                gf_Dance5();
                                            }
                                            else {
                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BORBORYGMUS)) {
                                                    SoundPlay(SoundLink("BorbHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                    gf_Dance3();
                                                    Wait(3.5, c_timeGame);
                                                }
                                                else {
                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_TURA)) {
                                                        SoundPlay(SoundLink("TuraHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                        gf_Dance6();
                                                        Wait(3.5, c_timeGame);
                                                    }
                                                    else {
                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_WATERMELON)) {
                                                            if ((gv_Period <= 3)) {
                                                                if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 2) == 1)) {
                                                                    SoundPlay(SoundLink("melonhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                }
                                                                else {
                                                                    SoundPlay(SoundLink("melonalthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                }
                                                            }
                                                            else {
                                                                SoundPlay(SoundLink("melon2horn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                            }
                                                            gf_Dance3();
                                                            gf_Watermelons(gv_Skaters[gv_ShootingPlayer]);
                                                            Wait(3.5, c_timeGame);
                                                        }
                                                        else {
                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KRAZYMEN)) {
                                                                if ((gv_Period <= 3)) {
                                                                    SoundPlay(SoundLink("krazymenhorn", -1), gv_goalSoundGroup, 90.0, 0.0);
                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                }
                                                                else {
                                                                    SoundPlay(SoundLink("krazyhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                }
                                                                gf_Dance3();
                                                                Wait(3.5, c_timeGame);
                                                            }
                                                            else {
                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_RUCKLE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LEVI))) {
                                                                    SoundPlay(SoundLink("rucklehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                    gf_Dance3();
                                                                    Wait(3.5, c_timeGame);
                                                                }
                                                                else {
                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BLOODSHOT)) {
                                                                        gf_BloodShot();
                                                                        SoundPlay(SoundLink("bloodhorn", -1), gv_goalSoundGroup, 80.0, 0.0);
                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                        gf_Dance8();
                                                                        Wait(3.5, c_timeGame);
                                                                    }
                                                                    else {
                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KURT) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KURTEU))) {
                                                                            SoundPlay(SoundLink("KurtHorn", -1), gv_goalSoundGroup, 30.0, 0.0);
                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                            Wait(1.5, c_timeGame);
                                                                        }
                                                                        else {
                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_GUERRILA)) {
                                                                                SoundPlay(SoundLink("GuerHorn", -1), gv_goalSoundGroup, 80.0, 0.0);
                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                gf_Guerrila();
                                                                                gf_Dance7();
                                                                                Wait(3.0, c_timeGame);
                                                                            }
                                                                            else {
                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BLUNTANE)) {
                                                                                    SoundPlay(SoundLink("blunthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                    Wait(3.0, c_timeGame);
                                                                                }
                                                                                else {
                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CHERRY)) {
                                                                                        SoundPlay(SoundLink("CherryHorn", -1), gv_goalSoundGroup, 70.0, 0.0);
                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                        gf_Cherry();
                                                                                        Wait(3.0, c_timeGame);
                                                                                    }
                                                                                    else {
                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PROSTER) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PROSTEREU))) {
                                                                                            gf_Dance10();
                                                                                            if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 2) == 1)) {
                                                                                                SoundPlay(SoundLink("prohorn", -1), gv_goalSoundGroup, 70.0, 0.0);
                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                Wait(3.0, c_timeGame);
                                                                                            }
                                                                                            else {
                                                                                                SoundPlay(SoundLink("prosteralthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                Wait(5.0, c_timeGame);
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_GIRLPOWER)) {
                                                                                                SoundPlay(SoundLink("GirlPowerHorn", -1), gv_goalSoundGroup, 150.0, 0.0);
                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                gf_GirlPower();
                                                                                                Wait(8.0, c_timeGame);
                                                                                            }
                                                                                            else {
                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ANGLEFIRE)) {
                                                                                                    SoundPlay(SoundLink("anglehorn", -1), gv_goalSoundGroup, 80.0, 0.0);
                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                    gf_Anglefire();
                                                                                                    Wait(6.5, c_timeGame);
                                                                                                }
                                                                                                else {
                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BRUCE)) {
                                                                                                        if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 2) == 1)) {
                                                                                                            SoundPlay(SoundLink("BruceHorn", -1), gv_goalSoundGroup, 130.0, 0.0);
                                                                                                            SoundPlay(SoundLink("BruceHorn", -1), gv_goalSoundGroup, 130.0, 0.0);
                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                            Wait(3.0, c_timeGame);
                                                                                                        }
                                                                                                        else {
                                                                                                            SoundPlay(SoundLink("brucealthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                            Wait(4.0, c_timeGame);
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ALERTEYES)) {
                                                                                                            SoundPlayForPlayer(SoundLink("AlertEyesHorn", -1), c_maxPlayers, gv_goalSoundGroup, 100.0, 0.0);
                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                            gf_CityPlatformInit(gv_Skaters[gv_ShootingPlayer]);
                                                                                                            Wait(18.0, c_timeGame);
                                                                                                        }
                                                                                                        else {
                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MYSTERY1)) {
                                                                                                                SoundPlay(SoundLink("hannahgoal", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                Wait(4.0, c_timeGame);
                                                                                                            }
                                                                                                            else {
                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DEATH)) {
                                                                                                                    if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 3) == 1)) {
                                                                                                                        SoundPlay(SoundLink("DeathHornOriginal", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                        gf_Death();
                                                                                                                        Wait(12.0, c_timeGame);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 3) == 2)) {
                                                                                                                            SoundPlay(SoundLink("DeathHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                            Wait(10.0, c_timeGame);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            SoundPlay(SoundLink("deathalthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                            gf_SpinShield3(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                            Wait(8.0, c_timeGame);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PERSAMIN)) {
                                                                                                                        SoundPlay(SoundLink("aminhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                        GameSetLighting("MeinhoffCampaignNight", 4.0);
                                                                                                                        Wait(12.0, c_timeGame);
                                                                                                                        gf_Resetlighting();
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CHANCELLOR)) {
                                                                                                                            SoundPlay(SoundLink("ChancellorHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                            Wait(6.0, c_timeGame);
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_themusic)) {
                                                                                                                                if ((gv_isAdeleOn == true)) {
                                                                                                                                    SoundPlayForPlayer(SoundLink("Adele", -1), c_maxPlayers, gv_goalSoundGroup, 120.0, 0.0);
                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                    gf_InitAdele(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                    Wait(19.0, c_timeGame);
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                    gf_ThemusicDance();
                                                                                                                                    Wait(2.5, c_timeGame);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_FOURCADE)) {
                                                                                                                                    SoundPlay(SoundLink("Fourcadehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                    gf_StartBunker(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                    Wait(8.0, c_timeGame);
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CERVANTEZ) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CERVANTEZEU))) {
                                                                                                                                        SoundPlay(SoundLink("CervHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                        gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DAGGIUS)) {
                                                                                                                                            SoundPlay(SoundLink("Daggiushorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                            gf_Daggius();
                                                                                                                                            Wait(5.0, c_timeGame);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LiNGKing) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LiNGKingEU))) {
                                                                                                                                                SoundPlay(SoundLink("lingkinghorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                gf_LingCannonInit(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                Wait(7.0, c_timeGame);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BOANERGES) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BOANERGESEU))) {
                                                                                                                                                    SoundPlay(SoundLink("boanergeshorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                    Wait(6.0, c_timeGame);
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_THEAMERICANR)) {
                                                                                                                                                        SoundPlay(SoundLink("americanrhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                        Wait(6.0, c_timeGame);
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ALOMINUS)) {
                                                                                                                                                            SoundPlay(SoundLink("alominushorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                            Wait(6.0, c_timeGame);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SLIDE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SLIDEEU))) {
                                                                                                                                                                SoundPlay(SoundLink("slidehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                Wait(6.0, c_timeGame);
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_THEROBSTR) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_THEROBSTREU))) {
                                                                                                                                                                    SoundPlay(SoundLink("therobstrhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                    Wait(6.0, c_timeGame);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PINKVOID) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PINKVOIDEU))) {
                                                                                                                                                                        gf_Dance7();
                                                                                                                                                                        SoundPlay(SoundLink("pinkvoidhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                        Wait(6.0, c_timeGame);
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CARLITO)) {
                                                                                                                                                                            SoundPlay(SoundLink("carlitohorn", -1), gv_goalSoundGroup, 200.0, 0.0);
                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                            gf_Carlito();
                                                                                                                                                                            Wait(6.0, c_timeGame);
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CRUSH)) {
                                                                                                                                                                                SoundPlay(SoundLink("UnknownSound", -1), gv_goalSoundGroup, 130.0, 0.0);
                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                Wait(2.0, c_timeGame);
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BLITZERG)) {
                                                                                                                                                                                    SoundPlay(SoundLink("blitzhorn", -1), gv_goalSoundGroup, 110.0, 0.0);
                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                    Wait(4.0, c_timeGame);
                                                                                                                                                                                }
                                                                                                                                                                                else {
                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CREATOR2) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CREATOR2EU))) {
                                                                                                                                                                                        SoundPlay(SoundLink("Reputedhorn", -1), gv_goalSoundGroup, 125.0, 0.0);
                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                        gf_SpinShield3(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_GIGIDAPOPPER)) {
                                                                                                                                                                                            SoundPlay(SoundLink("gjgjhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                            gf_SpinShield5();
                                                                                                                                                                                            Wait(5.0, c_timeGame);
                                                                                                                                                                                        }
                                                                                                                                                                                        else {
                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DANCINGMOOSE))) {
                                                                                                                                                                                                SoundPlay(SoundLink("moosehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                gf_Dance3();
                                                                                                                                                                                                Wait(7.0, c_timeGame);
                                                                                                                                                                                            }
                                                                                                                                                                                            else {
                                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ONEGUN)) {
                                                                                                                                                                                                    SoundPlay(SoundLink("OnegunHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                    gf_Onegun();
                                                                                                                                                                                                    Wait(5.0, c_timeGame);
                                                                                                                                                                                                }
                                                                                                                                                                                                else {
                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JINXEU)) {
                                                                                                                                                                                                        SoundPlay(SoundLink("JinXhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                        gf_Dance3();
                                                                                                                                                                                                        Wait(5.0, c_timeGame);
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else {
                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ART)) {
                                                                                                                                                                                                            SoundPlay(SoundLink("arthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                            gf_Dance12();
                                                                                                                                                                                                            Wait(5.0, c_timeGame);
                                                                                                                                                                                                        }
                                                                                                                                                                                                        else {
                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DALTONEU) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DALTONUS))) {
                                                                                                                                                                                                                SoundPlay(SoundLink("daltonhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                gv_bostonSound = SoundLastPlayed();
                                                                                                                                                                                                                gf_Dance3();
                                                                                                                                                                                                                Wait(8.0, c_timeGame);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else {
                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DUCKHUNTER) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DUCKHUNTEREU))) {
                                                                                                                                                                                                                    SoundPlay(SoundLink("DuckhunterHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                    gf_DuckHunt(gv_ShootingPlayer);
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else {
                                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MALDURASEU)) {
                                                                                                                                                                                                                        SoundPlay(SoundLink("maldurashorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                        gf_Dance3();
                                                                                                                                                                                                                        Wait(4.0, c_timeGame);
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SNIPER) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SNIPER_EU))) {
                                                                                                                                                                                                                            gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                            gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                            SoundPlay(SoundLink("sniperhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                            Wait(7.0, c_timeGame);
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_EMERY)) {
                                                                                                                                                                                                                                gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                SoundPlay(SoundLink("emeryhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                Wait(7.0, c_timeGame);
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_PORNHACK)) {
                                                                                                                                                                                                                                    UnitSetHeight(gv_Skaters[gv_ShootingPlayer], 15.0, 5.0);
                                                                                                                                                                                                                                    UnitSetHeight(gv_Sticks[gv_ShootingPlayer], 13.0, 5.0);
                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                                                                                                                    Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                    SoundPlay(SoundLink("pornhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                    Wait(2.0, c_timeGame);
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_HWCUBSFTW) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_HWCUBSFTW_EU))) {
                                                                                                                                                                                                                                        SoundPlay(SoundLink("hwcubshorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                        Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BULBASAAUR) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BULBASAAUREU))) {
                                                                                                                                                                                                                                            SoundPlay(SoundLink("bulbahorn", -1), gv_goalSoundGroup, 115.0, 0.0);
                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                            Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KRONICKOFFEE))) {
                                                                                                                                                                                                                                                SoundPlay(SoundLink("kronickhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                Wait(6.5, c_timeGame);
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_TUBBY))) {
                                                                                                                                                                                                                                                    SoundPlay(SoundLink("tubbyhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                    Wait(8.0, c_timeGame);
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BACKFISCH) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BACKFISCHEU))) {
                                                                                                                                                                                                                                                        SoundPlay(SoundLink("backfischhorn", -1), gv_goalSoundGroup, 130.0, 0.0);
                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ILVSNTRS) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ILVSNTRSEU))) {
                                                                                                                                                                                                                                                            SoundPlay(SoundLink("ilvsntrshorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                            Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MORPHEOUS)) {
                                                                                                                                                                                                                                                                SoundPlay(SoundLink("morpheoushorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                Wait(8.0, c_timeGame);
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NAVYSEALS) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NAVYSEALSEU))) {
                                                                                                                                                                                                                                                                    if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 2) == 1)) {
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("SealHorn2", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        Wait(5.0, c_timeGame);
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("provyhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BANANAHER) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BANANAHEREU))) {
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("bananaherhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                        Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BLUEDREAM)) {
                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("bluedreamhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                            Wait(2.0, c_timeGame);
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BRUCE_SECONDARY)) {
                                                                                                                                                                                                                                                                                if ((ModI(gv_stats_Goals[gv_ShootingPlayer], 2) == 1)) {
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("bruce2ndaccounthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("bruce2ndAccountAltHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JOkeRNA) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JOkeREU))) {
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("jokerhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                    Wait(2.0, c_timeGame);
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KIMJONGSKILL) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KIMJONGSKILLEU))) {
                                                                                                                                                                                                                                                                                        SoundPlayForPlayer(SoundLink("kimjongskillhorn2", -1), c_maxPlayers, gv_goalSoundGroup, 110.0, 0.0);
                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                        gf_InitKimskill(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                        Wait(10.0, c_timeGame);
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NEXEU)) {
                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("neXhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                            Wait(5.0, c_timeGame);
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_THREE)) {
                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("threehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                Wait(5.0, c_timeGame);
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_VAPOUR) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_VAPOUREU))) {
                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("VapNewHorn", -1), gv_goalSoundGroup, 75.0, 0.0);
                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                    Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_WACK) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_WACKEU))) {
                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("wackhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                        gf_InitBattleships(UnitGetOwner(gv_Skaters[gv_ShootingPlayer]));
                                                                                                                                                                                                                                                                                                        Wait(14.0, c_timeGame);
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SHUSUKE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SHUSUKEEU))) {
                                                                                                                                                                                                                                                                                                            TriggerExecute(gt_ShusukeBlink, true, false);
                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("shusukehorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                            Wait(8.0, c_timeGame);
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ZACHSMACK) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ZACHSMACKEU))) {
                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("zachhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                Wait(2.0, c_timeGame);
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_HTCP)) {
                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("tomhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                    Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CHADGG)) {
                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                        gf_Chad();
                                                                                                                                                                                                                                                                                                                        Wait(10.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_GENERALEU)) {
                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("generalxlhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                            Wait(5.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_YODA) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_YODAEU))) {
                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("YodaBackgroundMusic", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                gf_StartYoda(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                Wait(8.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NSGANDALF) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NSGANDALFEU))) {
                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                    Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CREATOR1) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LEEROY_EU))) {
                                                                                                                                                                                                                                                                                                                                        gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                        gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                        if ((gv_altgoalie3[gv_ShootingPlayer] == true)) {
                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("LeeroyHorn2", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("leeroyhorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JMONEY)) {
                                                                                                                                                                                                                                                                                                                                            gf_JmoneyInit(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                            Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_STUDENT)) {
                                                                                                                                                                                                                                                                                                                                                if ((gv_barrywhiteison == true)) {
                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("studenthorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JunkyEU)) {
                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("JunkyHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                    Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MCDOUDLES) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MCDOUDLESEU))) {
                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("McDoudlesHorn", -1), gv_goalSoundGroup, 100.0, 0.15);
                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DARKANGEL)) {
                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                            gf_ExplodePuck();
                                                                                                                                                                                                                                                                                                                                                            Wait(4.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                            if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SWIFT)) {
                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("SwiftHorn", -1), gv_goalSoundGroup, 100.0, 0.15);
                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                Wait(6.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NOVA)) {
                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NovaNewHorn", -1), gv_goalSoundGroup, 100.0, 0.15);
                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                    Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_BURCHESTER)) {
                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("BurchNewHorn", -1), gv_goalSoundGroup, 100.0, 0.15);
                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                        Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ENTROPY) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ENTROPYEU))) {
                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("EntropyHorn1", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                            UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
                                                                                                                                                                                                                                                                                                                                                                            CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                            CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                            gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                            gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                            Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_TWODEUCE)) && (gv_isAfroModeOn == true) && (gv_currentAfro != null)) {
                                                                                                                                                                                                                                                                                                                                                                                ActorSend(gv_currentAfro, libNtve_gf_SetScale(5.0, 5.0, 5.0, 8.0));
                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DANTE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DANTEEU))) {
                                                                                                                                                                                                                                                                                                                                                                                    gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                    gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                    UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
                                                                                                                                                                                                                                                                                                                                                                                    CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                    CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("DanteHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                    Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_AZULITE)) {
                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("AzuliteHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                        Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LIME) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LIMEEU))) {
                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("LimeHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                            Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_EWOK) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_EWOKEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("EwokHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
                                                                                                                                                                                                                                                                                                                                                                                                CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                                gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                                Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NGLOOGIK) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_NGLOOGIKEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("ngLoOgiKHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                    UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
                                                                                                                                                                                                                                                                                                                                                                                                    CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                    CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                    Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                    if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_HALO)) {
                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("HaloHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                        Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SPITFIRE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SPITFIREEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("SpitfireHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                            Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_UNFORGIVEN) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_UNFORGIVENEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("UnforgivenHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JEROUSEK) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_JEROUSEKEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("JerousekHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                    gf_Jetpack(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                                                    gf_Jetpack2(gv_Skaters[gv_ShootingPlayer]);
                                                                                                                                                                                                                                                                                                                                                                                                                    Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_DUCKSLAYEREU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("DuckslayerHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                        UnitAbilityReset(gv_Skaters[gv_ShootingPlayer], AbilityCommand("Check", 0), c_spendLocationAbility);
                                                                                                                                                                                                                                                                                                                                                                                                                        CatalogFieldValueSet(c_gameCatalogAbil, "Check", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                                        CatalogFieldValueSet(c_gameCatalogAbil, "NewForceField", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(gv_Skaters[gv_ShootingPlayer]), ".1");
                                                                                                                                                                                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                        if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ANGRYTITS) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_ANGRYTITSEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("AngryHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                            Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SUNSHINE) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_SUNSHINEEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("SunshineHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                gf_RedlineCreatepowerupanimation(gv_Skaters[gv_ShootingPlayer], Color(100.00, 50.20, 0.00), 3.0, true);
                                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CRESCENDO) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_CRESCENDOEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("CrescendoHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                    Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LINDHOLM) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_LINDHOLMEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("LindholmHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                        Wait(7.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if ((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_KEVENKEU)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("KevenKHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                            SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                            Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_MOSEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("MosHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (((PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_YEUYEU) || (PlayerHandle(gv_ShootingPlayer) == gv_hANDLE_YEUYEUEU))) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("YeuYeuHorn", -1), gv_goalSoundGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Wait(9.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    lv_teamGoalMusic = gf_Checkteamgoalmusic(gv_ShootingPlayer);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if ((lv_teamGoalMusic != 0)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        gf_PlayTeamGoalMusic(lv_teamGoalMusic);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                        gf_Dance();
                                                                                                                                                                                                                                                                                                                                                                                                                                                        Wait(3.0, c_timeGame);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        SoundPlay(SoundLink("NewGoalHorn", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_OwnGoalAnimation(gv_ShootingPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalSpecial_Init () {
    gt_GoalSpecial = TriggerCreate("gt_GoalSpecial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goal Testing
//--------------------------------------------------------------------------------------------------
bool gt_GoalTesting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("BurchNewHorn", -1), gv_goalSoundGroup, 100.0, 0.15);
    SoundPlay(SoundLink("NewGoalHorn", -1), gv_goalSoundOptOutGroup, 100.0, 0.0);
    Wait(9.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalTesting_Init () {
    gt_GoalTesting = TriggerCreate("gt_GoalTesting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Duck Hunt Kill
//--------------------------------------------------------------------------------------------------
bool gt_DuckHuntKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_duckHuntScore[EventPlayer()] = (gv_duckHuntScore[EventPlayer()]+500);
    TextTagCreate(StringExternal("Param/Value/754F9DD5"), 24, UnitGetPosition(EventPlayerEffectUsedUnitImpact()), 1.0, true, false, PlayerGroupAll());
    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 50.0);
    lv_textTag = TextTagLastCreated();
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckHuntKill_Init () {
    gt_DuckHuntKill = TriggerCreate("gt_DuckHuntKill_Func");
    TriggerAddEventPlayerEffectUsed(gt_DuckHuntKill, c_playerAny, "DuckShootKillUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Duck Hunt Score
//--------------------------------------------------------------------------------------------------
bool gt_DuckHuntScore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/FD5312F3", "A", IntToText(gv_duckHuntScore[gv_duckHuntPlayer]));
    TextTagCreate(TextExpressionAssemble("Param/Expression/FD5312F3"), 24, UnitGetPosition(gv_Skaters[gv_duckHuntPlayer]), 1.0, true, false, PlayerGroupAll());
    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 50.0);
    lv_textTag = TextTagLastCreated();
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_textTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DuckHuntScore_Init () {
    gt_DuckHuntScore = TriggerCreate("gt_DuckHuntScore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Board
//--------------------------------------------------------------------------------------------------
bool gt_PickupBoard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }

        if (!((gv_throwBoards.lv_canthrowboards == true))) {
            return false;
        }

        if (!((gv_throwBoards.lv_isholdingaboard == false))) {
            return false;
        }

        if (!((((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(75)) == true) && (gv_throwBoards.lv_areboardsthrown[1] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(76)) == true) && (gv_throwBoards.lv_areboardsthrown[2] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(77)) == true) && (gv_throwBoards.lv_areboardsthrown[3] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(78)) == true) && (gv_throwBoards.lv_areboardsthrown[4] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(79)) == true) && (gv_throwBoards.lv_areboardsthrown[5] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(80)) == true) && (gv_throwBoards.lv_areboardsthrown[6] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(81)) == true) && (gv_throwBoards.lv_areboardsthrown[7] == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(82)) == true) && (gv_throwBoards.lv_areboardsthrown[8] == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_throwBoards.lv_throwingskater = gv_Skaters[EventPlayer()];
    if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(75)) == true) && (gv_throwBoards.lv_areboardsthrown[1] == false)) {
        gf_PickupBoard(1);
    }
    else {
        if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(76)) == true) && (gv_throwBoards.lv_areboardsthrown[2] == false)) {
            gf_PickupBoard(2);
        }
        else {
            if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(77)) == true) && (gv_throwBoards.lv_areboardsthrown[3] == false)) {
                gf_PickupBoard(3);
            }
            else {
                if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(78)) == true) && (gv_throwBoards.lv_areboardsthrown[4] == false)) {
                    gf_PickupBoard(4);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(79)) == true) && (gv_throwBoards.lv_areboardsthrown[5] == false)) {
                        gf_PickupBoard(5);
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(80)) == true) && (gv_throwBoards.lv_areboardsthrown[6] == false)) {
                            gf_PickupBoard(6);
                        }
                        else {
                            if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(81)) == true) && (gv_throwBoards.lv_areboardsthrown[7] == false)) {
                                gf_PickupBoard(7);
                            }
                            else {
                                if ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(82)) == true) && (gv_throwBoards.lv_areboardsthrown[8] == false)) {
                                    gf_PickupBoard(8);
                                }

                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupBoard_Init () {
    gt_PickupBoard = TriggerCreate("gt_PickupBoard_Func");
    TriggerEnable(gt_PickupBoard, false);
    TriggerAddEventKeyPressed(gt_PickupBoard, c_playerAny, c_keyB, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thow Board
//--------------------------------------------------------------------------------------------------
bool gt_ThowBoard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }

        if (!((gv_throwBoards.lv_canthrowboards == true))) {
            return false;
        }

        if (!((gv_throwBoards.lv_isholdingaboard == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_throwBoards.lv_isholdingaboard = false;
    gf_Throwboardmovement(gv_throwBoards.lv_theboardthatsbeingheld, Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThowBoard_Init () {
    gt_ThowBoard = TriggerCreate("gt_ThowBoard_Func");
    TriggerEnable(gt_ThowBoard, false);
    TriggerAddEventMouseClicked(gt_ThowBoard, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shusuke Blink
//--------------------------------------------------------------------------------------------------
bool gt_ShusukeBlink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    int lv_int1;
    int lv_int2;
    int lv_int3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_int3 < 20)) {
        lv_int1 = RandomInt(20, 35);
        lv_int2 = RandomInt(1, 359);
        lv_point = PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), lv_int1, lv_int2);
        while ((RegionContainsPoint(RegionFromId(59), lv_point) == false)) {
            lv_int1 = RandomInt(5, 10);
            lv_int2 = RandomInt(1, 359);
            lv_point = PointWithOffsetPolar(UnitGetPosition(gv_Skaters[gv_ShootingPlayer]), lv_int1, lv_int2);
        }
        libNtve_gf_CreateActorAtPoint("ZeratulBlinkOut", UnitGetPosition(gv_Skaters[gv_ShootingPlayer]));
        UnitSetPosition(gv_Skaters[gv_ShootingPlayer], lv_point, false);
        libNtve_gf_CreateActorAtPoint("ZeratulBlinkIn", lv_point);
        SoundPlayAtPointForPlayer(SoundLink("Zeratul_Blink", -1), c_maxPlayers, PlayerGroupAll(), lv_point, 25.0, 100.0, 0.0);
        lv_int3 = (lv_int3+1);
        Wait(0.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShusukeBlink_Init () {
    gt_ShusukeBlink = TriggerCreate("gt_ShusukeBlink_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crickets
//--------------------------------------------------------------------------------------------------
bool gt_Crickets_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    UnitKill(gv_entropyStickUnit);
    UnitKill(gv_entropyGoalieUnit);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Crickets", -1), c_maxPlayers, gv_goalSoundGroup, 100.0, 0.0);
    Wait(9.0, c_timeGame);
    UnitRemove(gv_tumbleweedsUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Crickets_Init () {
    gt_Crickets = TriggerCreate("gt_Crickets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kimskill - Fire Missile
//--------------------------------------------------------------------------------------------------
bool gt_KimskillFireMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(gv_kimskill.lv_kimskillUnit) == EventPlayer()))) {
            return false;
        }

        if (!((gv_kimskill.lv_iskimskillrunning == true))) {
            return false;
        }

        if (!((gv_kimskill.lv_shootCD == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_KimskillShootCD();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_kimskill.lv_kimskillUnit), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    SoundPlayForPlayer(SoundLink("KimskillImpactSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_KimskillMissile(Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KimskillFireMissile_Init () {
    gt_KimskillFireMissile = TriggerCreate("gt_KimskillFireMissile_Func");
    TriggerEnable(gt_KimskillFireMissile, false);
    TriggerAddEventMouseClicked(gt_KimskillFireMissile, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adele On/Off
//--------------------------------------------------------------------------------------------------
bool gt_AdeleOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_isAdeleOn == true)) {
        gv_isAdeleOn = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3BC23E69"));
    }
    else {
        gv_isAdeleOn = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9D11A395"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdeleOnOff_Init () {
    gt_AdeleOnOff = TriggerCreate("gt_AdeleOnOff_Func");
    TriggerAddEventChatMessage(gt_AdeleOnOff, c_playerAny, "-adele", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jetpack Ignition
//--------------------------------------------------------------------------------------------------
bool gt_JetpackIgnition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == UnitGetOwner(gv_Skaters[gv_ShootingPlayer])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_jetpackTriggered = 1;
    SoundPlay(SoundLink("Doodad_FlameGeyserStandWorkStart", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundSetVolume(gv_jetpacksound, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JetpackIgnition_Init () {
    gt_JetpackIgnition = TriggerCreate("gt_JetpackIgnition_Func");
    TriggerEnable(gt_JetpackIgnition, false);
    TriggerAddEventKeyPressed(gt_JetpackIgnition, c_playerAny, c_keyB, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jetpack Release
//--------------------------------------------------------------------------------------------------
bool gt_JetpackRelease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == UnitGetOwner(gv_Skaters[gv_ShootingPlayer])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_jetpackTriggered = 0;
    SoundSetVolume(gv_jetpacksound, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JetpackRelease_Init () {
    gt_JetpackRelease = TriggerCreate("gt_JetpackRelease_Func");
    TriggerEnable(gt_JetpackRelease, false);
    TriggerAddEventKeyPressed(gt_JetpackRelease, c_playerAny, c_keyB, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yoda Attack
//--------------------------------------------------------------------------------------------------
bool gt_YodaAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_attacktype;
    region lv_attackimpactzone;
    unitgroup lv_attackedunits;

    // Automatic Variable Declarations
    unitgroup autoA9E7D871_g;
    int autoA9E7D871_u;
    unit autoA9E7D871_var;
    unitgroup autoB2648EC8_g;
    int autoB2648EC8_u;
    unit autoB2648EC8_var;

    // Variable Initialization
    lv_attackedunits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_yodaVars.lv_yodaOwner))) {
            return false;
        }

        if (!((gv_yodaVars.lv_canyodaattack == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Attackcooldown();
    lv_attacktype = RandomInt(1, 2);
    SoundPlay(SoundLink("YodaAttack", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_attackimpactzone = RegionCircle(PointWithOffsetPolar(UnitGetPosition(gv_yodaVars.lv_yoda), 1.5, UnitGetFacing(gv_yodaVars.lv_yoda)), 3.0);
    autoA9E7D871_g = UnitGroup(null, c_playerAny, lv_attackimpactzone, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA9E7D871_u = UnitGroupCount(autoA9E7D871_g, c_unitCountAll);
    for (;; autoA9E7D871_u -= 1) {
        autoA9E7D871_var = UnitGroupUnitFromEnd(autoA9E7D871_g, autoA9E7D871_u);
        if (autoA9E7D871_var == null) { break; }
        if (((gv_Skaters[1] == autoA9E7D871_var) || (gv_Skaters[2] == autoA9E7D871_var) || (gv_Skaters[3] == autoA9E7D871_var) || (gv_Skaters[4] == autoA9E7D871_var) || (gv_Skaters[5] == autoA9E7D871_var) || (gv_Skaters[6] == autoA9E7D871_var) || (gv_Skaters[7] == autoA9E7D871_var) || (gv_Skaters[8] == autoA9E7D871_var) || (autoA9E7D871_var == gv_Skaters[9]) || (autoA9E7D871_var == gv_Skaters[10]) || (autoA9E7D871_var == gv_Skaters[11]) || (autoA9E7D871_var == gv_Skaters[12]) || (autoA9E7D871_var == gv_Skaters[13]) || (autoA9E7D871_var == gv_Skaters[14]) || (autoA9E7D871_var == gv_Skaters[15])) && (gv_yodaVars.lv_yoda != autoA9E7D871_var)) {
            UnitGroupAdd(lv_attackedunits, autoA9E7D871_var);
        }

    }
    autoB2648EC8_g = lv_attackedunits;
    autoB2648EC8_u = UnitGroupCount(autoB2648EC8_g, c_unitCountAll);
    for (;; autoB2648EC8_u -= 1) {
        autoB2648EC8_var = UnitGroupUnitFromEnd(autoB2648EC8_g, autoB2648EC8_u);
        if (autoB2648EC8_var == null) { break; }
        gf_AttackImpact(autoB2648EC8_var, AngleBetweenPoints(UnitGetPosition(gv_yodaVars.lv_yoda), UnitGetPosition(autoB2648EC8_var)));
    }
    if ((lv_attacktype == 1)) {
        ActorSend(gv_yodaVars.lv_lightSabre, "HostSiteOpsSet ::Host");
        libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_yoda, "AnimPlay BSD Attack,01 0 -1.000000 -1.000000 1.000000 AsTimeScale");
        Wait(0.5, c_timeGame);
        ActorSend(gv_yodaVars.lv_lightSabre, "HostSiteOpsSet ::Host SOpPointSouthWorld");
    }
    else {
        if ((lv_attacktype == 2)) {
            ActorSend(gv_yodaVars.lv_lightSabre, "HostSiteOpsSet ::Host");
            libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_yoda, "AnimPlay BSD Attack,02 0 -1.000000 -1.000000 1.000000 AsTimeScale");
            Wait(0.6, c_timeGame);
            ActorSend(gv_yodaVars.lv_lightSabre, "HostSiteOpsSet ::Host SOpPointSouthWorld");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YodaAttack_Init () {
    gt_YodaAttack = TriggerCreate("gt_YodaAttack_Func");
    TriggerEnable(gt_YodaAttack, false);
    TriggerAddEventMouseClicked(gt_YodaAttack, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yoda Fighter select
//--------------------------------------------------------------------------------------------------
bool gt_YodaFighterselect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_yodaVars.lv_yodaOwner))) {
            return false;
        }

        if (!(((EventUnit() == gv_yodaVars.lv_tiefigthers[1]) || (EventUnit() == gv_yodaVars.lv_tiefigthers[2]) || (EventUnit() == gv_yodaVars.lv_tiefigthers[3]) || (EventUnit() == gv_yodaVars.lv_tiefigthers[4])))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroupSelected(EventPlayer()), EventPlayer(), false);
    UnitSelect(gv_yodaVars.lv_yoda, EventPlayer(), true);
    if ((gv_yodaVars.lv_yodaisholdingafighter == false)) {
        Wait(0.1, c_timeGame);
        UnitSetCustomValue(EventUnit(), 1, 1.0);
        gv_yodaVars.lv_yodaisholdingafighter = true;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor {255,0,0 3.000000}");
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YodaFighterselect_Init () {
    gt_YodaFighterselect = TriggerCreate("gt_YodaFighterselect_Func");
    TriggerEnable(gt_YodaFighterselect, false);
    TriggerAddEventUnitSelected(gt_YodaFighterselect, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yoda Fighter Toss
//--------------------------------------------------------------------------------------------------
bool gt_YodaFighterToss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_yodaVars.lv_yodaOwner))) {
            return false;
        }

        if (!((gv_yodaVars.lv_yodaisholdingafighter == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_yodaVars.lv_yodaisholdingafighter = false;
    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[1]) == true) && (UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[1], 1) == 1.0)) {
        libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_tiefigthers[1], "ClearTintColor");
        gf_Tossfigther(gv_yodaVars.lv_tiefigthers[1], Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[2]) == true) && (UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[2], 1) == 1.0)) {
        libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_tiefigthers[2], "ClearTintColor");
        gf_Tossfigther(gv_yodaVars.lv_tiefigthers[2], Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[3]) == true) && (UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[3], 1) == 1.0)) {
        libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_tiefigthers[3], "ClearTintColor");
        gf_Tossfigther(gv_yodaVars.lv_tiefigthers[3], Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    }

    if ((UnitIsAlive(gv_yodaVars.lv_tiefigthers[4]) == true) && (UnitGetCustomValue(gv_yodaVars.lv_tiefigthers[4], 1) == 1.0)) {
        libNtve_gf_SendActorMessageToUnit(gv_yodaVars.lv_tiefigthers[4], "ClearTintColor");
        gf_Tossfigther(gv_yodaVars.lv_tiefigthers[4], Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YodaFighterToss_Init () {
    gt_YodaFighterToss = TriggerCreate("gt_YodaFighterToss_Func");
    TriggerEnable(gt_YodaFighterToss, false);
    TriggerAddEventMouseClicked(gt_YodaFighterToss, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Swarm Units Left
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSwarmUnitsLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_bunkerSwarmVars.lv_swarmUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSwarmUnitsLeft_Init () {
    gt_RemoveSwarmUnitsLeft = TriggerCreate("gt_RemoveSwarmUnitsLeft_Func");
    TriggerEnable(gt_RemoveSwarmUnitsLeft, false);
    TriggerAddEventUnitRegion(gt_RemoveSwarmUnitsLeft, null, RegionRect(55.15, 76.37, 61.38, 146.9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Swarm Units Right
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSwarmUnitsRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_bunkerSwarmVars.lv_swarmUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSwarmUnitsRight_Init () {
    gt_RemoveSwarmUnitsRight = TriggerCreate("gt_RemoveSwarmUnitsRight_Func");
    TriggerEnable(gt_RemoveSwarmUnitsRight, false);
    TriggerAddEventUnitRegion(gt_RemoveSwarmUnitsRight, null, RegionRect(194.9, 77.86, 203.18, 148.37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Bunker
//--------------------------------------------------------------------------------------------------
bool gt_ActivateBunker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_buildpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_bunkerSwarmVars.lv_bunkerOwnerPlayer == EventPlayer()))) {
            return false;
        }

        if (!((gv_bunkerSwarmVars.lv_hasbunkerbeenbuilt == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buildpoint = PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 6.0, UnitGetFacing(gv_Skaters[EventPlayer()]));
    if ((RegionContainsPoint(RegionRect(61.96, 84.73, 193.75, 139.17), lv_buildpoint) == true)) {
        gv_bunkerSwarmVars.lv_hasbunkerbeenbuilt = true;
        gf_BuildBunker(lv_buildpoint);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ABE86101"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateBunker_Init () {
    gt_ActivateBunker = TriggerCreate("gt_ActivateBunker_Func");
    TriggerEnable(gt_ActivateBunker, false);
    TriggerAddEventKeyPressed(gt_ActivateBunker, c_playerAny, c_keyB, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shoot Missile - Main Ship
//--------------------------------------------------------------------------------------------------
bool gt_ShootMissileMainShip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_waterVars.lv_whoismainpirate == EventPlayer()))) {
            return false;
        }

        if (!((gv_waterVars.lv_cooldowns[EventPlayer()] <= 0.0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!((gv_waterVars.lv_alive[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetCDforShip(EventPlayer(), 0.7);
    gf_ShootMissileMainShip(Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShootMissileMainShip_Init () {
    gt_ShootMissileMainShip = TriggerCreate("gt_ShootMissileMainShip_Func");
    TriggerEnable(gt_ShootMissileMainShip, false);
    TriggerAddEventMouseClicked(gt_ShootMissileMainShip, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shoot Missile - Small Ship
//--------------------------------------------------------------------------------------------------
bool gt_ShootMissileSmallShip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_waterVars.lv_whoismainpirate != EventPlayer()))) {
            return false;
        }

        if (!((gv_waterVars.lv_cooldowns[EventPlayer()] <= 0.0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!((gv_waterVars.lv_alive[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResetCDforShip(EventPlayer(), 1.5);
    gf_ShootMissileMainShip(Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShootMissileSmallShip_Init () {
    gt_ShootMissileSmallShip = TriggerCreate("gt_ShootMissileSmallShip_Func");
    TriggerEnable(gt_ShootMissileSmallShip, false);
    TriggerAddEventMouseClicked(gt_ShootMissileSmallShip, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boost Money
//--------------------------------------------------------------------------------------------------
bool gt_BoostMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsed() == "UnknownEffect"))) {
            return false;
        }

        if (!((EventPlayer() == UnitGetOwner(gv_rainVars.lv_jmoneyUnit)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_rainVars.lv_boostisover = false;
    SoundPlayForPlayer(SoundLink("C_UI_Money01", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    gf_BoostMoneyInit(gv_rainVars.lv_jmoneyUnit);
    Wait(1.0, c_timeGame);
    gv_rainVars.lv_boostisover = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BoostMoney_Init () {
    gt_BoostMoney = TriggerCreate("gt_BoostMoney_Func");
    TriggerEnable(gt_BoostMoney, false);
    TriggerAddEventPlayerEffectUsed(gt_BoostMoney, c_playerAny, "UnknownEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Onetimer Money
//--------------------------------------------------------------------------------------------------
bool gt_OnetimerMoney_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == UnitGetOwner(gv_rainVars.lv_jmoneyUnit)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("ColonistShip_ExplosionLarge", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    gf_OnetimerInit(gv_rainVars.lv_jmoneyUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnetimerMoney_Init () {
    gt_OnetimerMoney = TriggerCreate("gt_OnetimerMoney_Func");
    TriggerEnable(gt_OnetimerMoney, false);
    TriggerAddEventPlayerEffectUsed(gt_OnetimerMoney, c_playerAny, "ApplyOneTiming");
}

//--------------------------------------------------------------------------------------------------
// Trigger: City Shoot Missile
//--------------------------------------------------------------------------------------------------
bool gt_CityShootMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)))) {
            return false;
        }

        if (!((gv_cityPlatformVars.lv_cooldowns[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_cityPlatformVars.lv_hasunitfalled[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_cityPlatformVars.lv_unitisindropship[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CityResetCD(EventPlayer());
    gf_CityShootmissile(gv_Skaters[EventPlayer()], AngleBetweenPoints(UnitGetPosition(gv_Skaters[EventPlayer()]), Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CityShootMissile_Init () {
    gt_CityShootMissile = TriggerCreate("gt_CityShootMissile_Func");
    TriggerEnable(gt_CityShootMissile, false);
    TriggerAddEventMouseClicked(gt_CityShootMissile, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BarryToggle
//--------------------------------------------------------------------------------------------------
bool gt_BarryToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_STUDENT))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_barrywhiteison == true)) {
        gv_barrywhiteison = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E6666348"));
    }
    else {
        gv_barrywhiteison = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/876A2E24"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarryToggle_Init () {
    gt_BarryToggle = TriggerCreate("gt_BarryToggle_Func");
    TriggerAddEventChatMessage(gt_BarryToggle, c_playerAny, "-barry", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Lingcannon Mouse
//--------------------------------------------------------------------------------------------------
bool gt_TrackLingcannonMouse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == UnitGetOwner(gv_lingcannon.lv_theMounter)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lingcannon.lv_mousepositionx = EventMouseMovedPosXWorld();
    gv_lingcannon.lv_mousepositiony = EventMouseMovedPosYWorld();
    libNtve_gf_MakeUnitFacePoint(gv_lingcannon.lv_cannon, Point(gv_lingcannon.lv_mousepositionx, gv_lingcannon.lv_mousepositiony), 0.0625);
    libNtve_gf_MakeUnitFacePoint(gv_lingcannon.lv_mounterdummy, Point(gv_lingcannon.lv_mousepositionx, gv_lingcannon.lv_mousepositiony), 0.0625);
    UnitSetPosition(gv_lingcannon.lv_mounterdummy, PointWithOffsetPolar(UnitGetPosition(gv_lingcannon.lv_cannon), 1.0, AngleBetweenPoints(UnitGetPosition(gv_lingcannon.lv_cannon), Point(gv_lingcannon.lv_mousepositionx, gv_lingcannon.lv_mousepositiony))), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackLingcannonMouse_Init () {
    gt_TrackLingcannonMouse = TriggerCreate("gt_TrackLingcannonMouse_Func");
    TriggerEnable(gt_TrackLingcannonMouse, false);
    TriggerAddEventMouseMoved(gt_TrackLingcannonMouse, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Lingcannon
//--------------------------------------------------------------------------------------------------
bool gt_FireLingcannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto387AC6D0_g;
    int auto387AC6D0_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == UnitGetOwner(gv_lingcannon.lv_theMounter)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto387AC6D0_g = PlayerGroupAll();
    auto387AC6D0_var = -1;
    while (true) {
        auto387AC6D0_var = PlayerGroupNextPlayer(auto387AC6D0_g, auto387AC6D0_var);
        if (auto387AC6D0_var < 0) { break; }
        CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 0.4);
    }
    SoundPlayForPlayer(SoundLink("LingcannonFire", -1), c_maxPlayers, PlayerGroupAll(), 50.0, 0.0);
    SoundPlayForPlayer(SoundLink("Zergling_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_Firealing(Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireLingcannon_Init () {
    gt_FireLingcannon = TriggerCreate("gt_FireLingcannon_Func");
    TriggerEnable(gt_FireLingcannon, false);
    TriggerAddEventMouseClicked(gt_FireLingcannon, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Golden Stick
//--------------------------------------------------------------------------------------------------
bool gt_ToggleGoldenStick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_LiNGKing))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_goldenStickEnabled[EventPlayer()] == false)) {
        gv_goldenStickEnabled[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DB4C0918"));
        if ((UnitIsAlive(gv_Skaters[EventPlayer()]) == true) && (gv_goldenStickEnabled[EventPlayer()] == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[EventPlayer()], "ClearTintColor");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[EventPlayer()]), "ModelSwap ZHStick");
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[EventPlayer()]), libNtve_gf_TextureSelectByID("Stick19Golden"));
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[EventPlayer()]), libNtve_gf_TextureSelectByID("Stick19GoldenNormal"));
            ActorSend(libNtve_gf_MainActorofUnit(gv_Sticks[EventPlayer()]), libNtve_gf_SetTintColor(Color(100.00, 93.33, 10.20), 1.5, 0.0));
        }

    }
    else {
        gv_goldenStickEnabled[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/91F10418"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleGoldenStick_Init () {
    gt_ToggleGoldenStick = TriggerCreate("gt_ToggleGoldenStick_Func");
    TriggerAddEventChatMessage(gt_ToggleGoldenStick, c_playerAny, "-gold", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle ninja
//--------------------------------------------------------------------------------------------------
bool gt_Toggleninja_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") != "0002"))) {
            return false;
        }

        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ninja.lv_active == true)) {
        gv_ninja.lv_active = false;
    }
    else {
        gv_ninja.lv_active = true;
        gf_ApplyNinja(EventPlayer(), gv_Skaters[EventPlayer()], gv_Sticks[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Toggleninja_Init () {
    gt_Toggleninja = TriggerCreate("gt_Toggleninja_Func");
    TriggerAddEventChatMessage(gt_Toggleninja, c_playerAny, "-ninja", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Muerte Hat
//--------------------------------------------------------------------------------------------------
bool gt_ToggleMuerteHat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_HALO) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU) || (gv_helmetsOn == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHIEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MAHARISHI) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muerteHatEnabled[EventPlayer()] == false)) {
        gv_muerteHatEnabled[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D782F4F1"));
        gf_ApplyMuerteHatSingle(EventPlayer());
    }
    else {
        gv_muerteHatEnabled[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/66ACF815"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleMuerteHat_Init () {
    gt_ToggleMuerteHat = TriggerCreate("gt_ToggleMuerteHat_Func");
    TriggerAddEventChatMessage(gt_ToggleMuerteHat, c_playerAny, "-muerte", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Dragon Stick
//--------------------------------------------------------------------------------------------------
bool gt_ToggleDragonStick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_THREE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_TWODEUCE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KRAZYMEN) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MEEPOMART) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SLIDE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SLIDEEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MALDURASEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_MALDU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNAKEEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNAKE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SHARP) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SHARPEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_NEXEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_NEX) || (PlayerHandle(EventPlayer()) == gv_hANDLE_KHOLIN)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_dragonStickEnabled[EventPlayer()] == false)) {
        gv_dragonStickEnabled[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6BB27C0F"));
        SoundPlayForPlayer(SoundLink("Event_Exp1_SnowBeastRoar", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 200.0, 0.0);
        if ((UnitIsAlive(gv_Skaters[EventPlayer()]) == true) && (gv_dragonStickEnabled[EventPlayer()] == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[EventPlayer()], "ClearTintColor");
            libNtve_gf_SendActorMessageToUnit(gv_Sticks[EventPlayer()], "ModelSwap DragonStick");
        }

    }
    else {
        gv_dragonStickEnabled[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A7981EC4"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleDragonStick_Init () {
    gt_ToggleDragonStick = TriggerCreate("gt_ToggleDragonStick_Func");
    TriggerAddEventChatMessage(gt_ToggleDragonStick, c_playerAny, "-dragon", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Goku Hair
//--------------------------------------------------------------------------------------------------
bool gt_ToggleGokuHair_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_BURCHESTER)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gokuHairEnabled[EventPlayer()] == false)) {
        gv_gokuHairEnabled[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DB25D32D"));
        if ((UnitIsAlive(gv_Skaters[EventPlayer()]) == true) && (gv_gokuHairEnabled[EventPlayer()] == true) && (gv_Players[2] != EventPlayer()) && (gv_Players[6] != EventPlayer())) {
            libNtve_gf_AttachModelToUnit(gv_Skaters[EventPlayer()], "GokuHair", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.700000,1.700000,2.300000");
        }

    }
    else {
        gv_gokuHairEnabled[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0452BEAD"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleGokuHair_Init () {
    gt_ToggleGokuHair = TriggerCreate("gt_ToggleGokuHair_Func");
    TriggerAddEventChatMessage(gt_ToggleGokuHair, c_playerAny, "-goku", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afro On/Off
//--------------------------------------------------------------------------------------------------
bool gt_AfroOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9B4C0411_g;
    int auto9B4C0411_var;
    const int auto31926DA4_ae = 15;
    int auto31926DA4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_TWODEUCE))) {
        if ((gv_isAfroModeOn == true)) {
            gv_isAfroModeOn = false;
            gv_afrocurrentrequestor = 0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/59CD160D"));
            auto31926DA4_var = 1;
            for ( ; auto31926DA4_var <= auto31926DA4_ae; auto31926DA4_var += 1 ) {
                gv_afrosAllowedtoPlayer[auto31926DA4_var] = false;
            }
        }
        else {
            gv_isAfroModeOn = true;
            gf_ApplyAfro(gv_Skaters[EventPlayer()]);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B71D90F5"));
        }
    }
    else {
        auto9B4C0411_g = PlayerGroupAll();
        auto9B4C0411_var = -1;
        while (true) {
            auto9B4C0411_var = PlayerGroupNextPlayer(auto9B4C0411_g, auto9B4C0411_var);
            if (auto9B4C0411_var < 0) { break; }
            if ((PlayerHandle(auto9B4C0411_var) == gv_hANDLE_TWODEUCE) && (gv_isAfroModeOn == true)) {
                TextExpressionSetToken("Param/Expression/B6BB1B7C", "A", PlayerName(EventPlayer()));
                UIDisplayMessage(PlayerGroupSingle(auto9B4C0411_var), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/B6BB1B7C"));
                gv_afrocurrentrequestor = EventPlayer();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfroOnOff_Init () {
    gt_AfroOnOff = TriggerCreate("gt_AfroOnOff_Func");
    TriggerAddEventChatMessage(gt_AfroOnOff, c_playerAny, "-afro", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afro Allow
//--------------------------------------------------------------------------------------------------
bool gt_AfroAllow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_TWODEUCE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_afrocurrentrequestor != 0)) {
        gv_afrosAllowedtoPlayer[gv_afrocurrentrequestor] = true;
        TextExpressionSetToken("Param/Expression/CA552B49", "A", PlayerName(gv_afrocurrentrequestor));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/CA552B49"));
        if ((UnitIsAlive(gv_Skaters[gv_afrocurrentrequestor]) == true)) {
            gf_ApplyAfro(gv_Skaters[gv_afrocurrentrequestor]);
        }

        gv_afrocurrentrequestor = 0;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3214D457"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AfroAllow_Init () {
    gt_AfroAllow = TriggerCreate("gt_AfroAllow_Func");
    TriggerAddEventChatMessage(gt_AfroAllow, c_playerAny, "-allow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helmets On
//--------------------------------------------------------------------------------------------------
bool gt_HelmetsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EWOK) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EWOKEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_helmetsOn == false)) {
        gv_helmetsOn = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A4CAB124"));
    }
    else {
        gv_helmetsOn = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/34C3522D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelmetsOn_Init () {
    gt_HelmetsOn = TriggerCreate("gt_HelmetsOn_Func");
    TriggerAddEventChatMessage(gt_HelmetsOn, c_playerAny, "-helmets", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Storm Trooper
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStormTrooper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_helmetsOn == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stormTrooperEnabled[EventPlayer()] == false)) {
        gv_stormTrooperEnabled[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E0B1D354"));
        gf_AssignStormTrooperHelmet();
    }
    else {
        gv_stormTrooperEnabled[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FCCBCFA7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStormTrooper_Init () {
    gt_ToggleStormTrooper = TriggerCreate("gt_ToggleStormTrooper_Func");
    TriggerAddEventChatMessage(gt_ToggleStormTrooper, c_playerAny, "-storm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Storm Trooper Team
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStormTrooperTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;

    // Automatic Variable Declarations
    const int autoB20DDAE7_ae = 15;
    int autoB20DDAE7_var;
    playergroup auto6051D6DB_g;
    playergroup autoB3E55540_g;
    playergroup auto5BC258CF_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stormTrooperEnabled[EventPlayer()] == false)) {
        if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
            if ((gv_rEDLINE_MODE == false)) {
                autoB3E55540_g = gv_actualPlayerzonTeam[1];
                lv_enumplayer = -1;
                while (true) {
                    lv_enumplayer = PlayerGroupNextPlayer(autoB3E55540_g, lv_enumplayer);
                    if (lv_enumplayer < 0) { break; }
                    gv_stormTrooperEnabled[lv_enumplayer] = true;
                }
            }
            else {
                auto6051D6DB_g = gv_actualPlayerzonTeam[1];
                lv_enumplayer = -1;
                while (true) {
                    lv_enumplayer = PlayerGroupNextPlayer(auto6051D6DB_g, lv_enumplayer);
                    if (lv_enumplayer < 0) { break; }
                    if ((lv_enumplayer != gv_Players[2])) {
                        gv_stormTrooperEnabled[lv_enumplayer] = true;
                    }

                }
            }
        }
        else {
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)) {
                auto5BC258CF_g = gv_actualPlayerzonTeam[2];
                lv_enumplayer = -1;
                while (true) {
                    lv_enumplayer = PlayerGroupNextPlayer(auto5BC258CF_g, lv_enumplayer);
                    if (lv_enumplayer < 0) { break; }
                    gv_stormTrooperEnabled[lv_enumplayer] = true;
                }
            }

        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/37BA36FC"));
        gf_AssignStormTrooperHelmet();
    }
    else {
        autoB20DDAE7_var = 1;
        for ( ; autoB20DDAE7_var <= autoB20DDAE7_ae; autoB20DDAE7_var += 1 ) {
            gv_stormTrooperEnabled[autoB20DDAE7_var] = false;
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BDA30CB6"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStormTrooperTeam_Init () {
    gt_ToggleStormTrooperTeam = TriggerCreate("gt_ToggleStormTrooperTeam_Func");
    TriggerAddEventChatMessage(gt_ToggleStormTrooperTeam, c_playerAny, "-stormteam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Shop
//--------------------------------------------------------------------------------------------------
bool gt_InitializeShop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_temp;

    // Automatic Variable Declarations
    playergroup auto35DFD647_g;
    int auto35DFD647_var;

    // Variable Initialization
    lv_temp = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto35DFD647_g = PlayerGroupActive();
    auto35DFD647_var = -1;
    while (true) {
        auto35DFD647_var = PlayerGroupNextPlayer(auto35DFD647_g, auto35DFD647_var);
        if (auto35DFD647_var < 0) { break; }
        gv_shopScrollIndex[auto35DFD647_var] = BankValueGetAsInt(gv_Banks[auto35DFD647_var], "Shop", "ScrollIndex");
        DialogCreate(1500, 1000, c_anchorCenter, 0, 0, true);
        gv_shop[auto35DFD647_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        gv_shopDialog[auto35DFD647_var][0] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 850, 850);
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "Zealot", PlayerGroupAll());
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 200, c_anchorCenter, 0, -365, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_shopDialog[auto35DFD647_var][1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 250, StringToText(""), "Assets\\Textures\\fusioncoreooze_diff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 250, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_shopDialog[auto35DFD647_var][2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 300, StringToText(""), StringExternal("Param/Value/0163D86C"), "");
        gv_shopDialog[auto35DFD647_var][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, -150, 300, StringToText(""), StringExternal("Param/Value/A995CDBB"), "");
        gv_shopDialog[auto35DFD647_var][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 150, 300, StringToText(""), StringExternal("Param/Value/71A1EEBA"), "");
        gv_shopDialog[auto35DFD647_var][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 200, c_anchorCenter, 0, -325, StringExternal("Param/Value/46AE9C13"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_shopDialog[auto35DFD647_var][6] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "GlueButton", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 175, 50, c_anchorLeft, 0, -150, StringToText(""), StringExternal("Param/Value/4277410C"), "");
        gv_shopDialog[auto35DFD647_var][7] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorLeft, 200, -150, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_shopDialog[auto35DFD647_var][8] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopRight, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_shopDialog[auto35DFD647_var][9] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 150, c_anchorLeft, 0, -40, StringExternal("Param/Value/DE46373C"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 55, 55, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_multiplayerload_avatarborder_platinum.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_colorSelectionBorder[auto35DFD647_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopRight, 250, 0, StringToText(""), "Assets\\Textures\\btn-tips-richminerals.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorLeft, 0, -285, StringExternal("Param/Value/3A5E2677"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 0, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        DialogControlSetPositionRelative(gv_colorSelectionBorder[auto35DFD647_var], PlayerGroupAll(), c_anchorCenter, DialogControlLastCreated(), c_anchorCenter, 0, 0);
        lv_temp = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 50, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 100, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,66*100/255,100), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 150, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(254*100/255,138*100/255,14*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 200, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(150*100/255,150*100/255,30*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 250, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 300, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(20*100/255,134*100/255,107*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 350, -250, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(229*100/255,91*100/255,176*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 0, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(84*100/255,0,129*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 50, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 100, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(16*100/255,98*100/255,70*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 150, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(78*100/255,42*100/255,4*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 200, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(149*100/255,150*100/255,151*100/255), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorLeft, 250, -200, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        lv_temp = DialogControlLastCreated();
        if ((BankValueGetAsFlag(gv_Banks[auto35DFD647_var], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlLastCreated(), auto35DFD647_var))) == true)) {
            gf_AddPlayerHasColorBorder(auto35DFD647_var, DialogControlLastCreated());
        }

        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 40, c_anchorLeft, 0, 0, StringToText(""), StringToText(""), "");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_objectives_checkmark.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_colorEquippedCheckMark[auto35DFD647_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        gf_UpdateShop(auto35DFD647_var, "init");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeShop_Init () {
    gt_InitializeShop = TriggerCreate("gt_InitializeShop_Func");
    TriggerAddEventMapInit(gt_InitializeShop);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open/Close Shop
//--------------------------------------------------------------------------------------------------
bool gt_OpenCloseShop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tESTING == true))) {
            return false;
        }

        if (!(((gv_permitOpen[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2EU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_shop[EventPlayer()], EventPlayer()) == false)) {
        DialogSetVisible(gv_shop[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        SoundPlay(SoundLink("UI_BriefingUnitSelect", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else {
        DialogSetVisible(gv_shop[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("UI_BnetDropdownClose", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenCloseShop_Init () {
    gt_OpenCloseShop = TriggerCreate("gt_OpenCloseShop_Func");
    TriggerAddEventKeyPressed(gt_OpenCloseShop, c_playerAny, c_keyP, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle PermitOpen
//--------------------------------------------------------------------------------------------------
bool gt_TogglePermitOpen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_tESTING == true))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2EU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = StringToInt(StringSub(EventChatMessage(false), 9, 10));
    if ((gv_permitOpen[lv_player] == false)) {
        gv_permitOpen[lv_player] = true;
        TextExpressionSetToken("Param/Expression/BC177933", "A", PlayerName(lv_player));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/BC177933"));
    }
    else {
        gv_permitOpen[lv_player] = false;
        TextExpressionSetToken("Param/Expression/E5389D88", "A", PlayerName(lv_player));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E5389D88"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TogglePermitOpen_Init () {
    gt_TogglePermitOpen = TriggerCreate("gt_TogglePermitOpen_Func");
    TriggerAddEventChatMessage(gt_TogglePermitOpen, c_playerAny, "-permit ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Skins
//--------------------------------------------------------------------------------------------------
bool gt_InitializeSkins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoEE3B9113_ae;
    const int autoEE3B9113_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_skinName[11] = StringExternal("Param/Value/A459AB57");
    gv_skinPrice[0] = 0;
    gv_skinName[1] = StringExternal("Param/Value/E4036EA9");
    gv_skinName[13] = StringExternal("Param/Value/2857CF5E");
    gv_skinName[17] = StringExternal("Param/Value/229D3B03");
    gv_skinTexture[2][1] = "t1_sm_hml_caustics01";
    gv_skinTexture[2][2] = "Zealot_Emissive";
    gv_skinTexture[2][3] = "Zealot_Normal";
    gv_skinTexture[3][1] = "valhallatable_diffuse2";
    gv_skinTexture[4][1] = "valhallatable_diffuse22";
    gv_skinTexture[5][1] = "zeratul_col";
    gv_skinTexture[6][1] = "xelnagapison_diffuse";
    gv_skinTexture[7][1] = "wireframeterransiegetankmercenarysiegemode";
    gv_skinTexture[8][1] = "darkzealot_diffuse";
    gv_skinTexture[9][1] = "btntipswalloffire";
    gv_skinTexture[10][1] = "radius2_strength";
    gv_skinTexture[11][1] = "rainbow";
    gv_skinTexture[12][1] = "typhon_cliff0_diffuse";
    gv_skinTexture[13][1] = "voidray_diffuse";
    gv_skinTexture[14][1] = "ui_multiplayerload_avatarborder_diamond";
    gv_skinTexture[15][1] = "firestreak2";
    gv_skinTexture[16][1] = "firewall1";
    gv_skinTexture[17][1] = "fireplane1";
    gv_skinTexture[18][1] = "floatingcreepalpha";
    gv_skinTexture[19][1] = "t1_sm_hml_caustics01";
    gv_skinTexture[20][1] = "ui_multiplayerload_avatarborder_diamond";
    gv_skinTexture[21][1] = "t1_sm_hml_caustics01";
    gv_skinTexture[22][1] = "char_lava_cracks_low";
    gv_skinTexture[23][1] = "sm_char_lavatop02_diff";
    gv_skinTexture[24][1] = "redstonelavafall_diffuse";
    gv_skinTexture[25][1] = "redstonelavafall_spec";
    gv_skinName[0] = StringExternal("Param/Value/81C28A33");
    gv_skinTexture[0][1] = "Standard";
    gv_skinInStore[1] = true;
    gv_skinName[1] = StringExternal("Param/Value/64CAD3CB");
    gv_skinTexture[1][1] = "T1001Darkened";
    gv_skinPrice[1] = 1000;
    gv_skinInStore[1] = true;
    gv_skinName[2] = StringExternal("Param/Value/F383A6D2");
    gv_skinTexture[2][1] = "T1002Criminal";
    gv_skinPrice[2] = 1000;
    gv_skinInStore[2] = true;
    gv_skinName[3] = StringExternal("Param/Value/3E612604");
    gv_skinTexture[3][1] = "T1003Wooden";
    gv_skinPrice[3] = 1000;
    gv_skinInStore[3] = true;
    gv_skinName[4] = StringExternal("Param/Value/6BC0FC1E");
    gv_skinTexture[4][1] = "T1004Aquamarine";
    gv_skinPrice[4] = 1000;
    gv_skinInStore[4] = true;
    gv_skinName[5] = StringExternal("Param/Value/AE26334E");
    gv_skinTexture[5][1] = "T1005Bloodstained";
    gv_skinPrice[5] = 1000;
    gv_skinInStore[5] = false;
    gv_skinName[6] = StringExternal("Param/Value/F06B4142");
    gv_skinTexture[6][1] = "T1006Bright";
    gv_skinPrice[6] = 1000;
    gv_skinInStore[6] = false;
    gv_skinName[7] = StringExternal("Param/Value/CB11D550");
    gv_skinTexture[7][1] = "T1007StoneGuardian";
    gv_skinPrice[7] = 1000;
    gv_skinInStore[7] = true;
    gv_skinName[8] = StringExternal("Param/Value/A17808CF");
    gv_skinTexture[8][1] = "T1008Security";
    gv_skinPrice[8] = 1000;
    gv_skinInStore[8] = true;
    gv_skinName[9] = StringExternal("Param/Value/5107EB6A");
    gv_skinTexture[9][1] = "T1009Shattered";
    gv_skinPrice[9] = 2000;
    gv_skinInStore[9] = true;
    gv_skinName[10] = StringExternal("Param/Value/2A84C387");
    gv_skinTexture[10][1] = "T1010Defender";
    gv_skinPrice[10] = 1000;
    gv_skinInStore[10] = true;
    gv_skinName[11] = StringExternal("Param/Value/F14BE6FA");
    gv_skinTexture[11][1] = "T2001Evil";
    gv_skinPrice[11] = 2000;
    gv_skinInStore[11] = true;
    gv_skinName[12] = StringExternal("Param/Value/57EC6FEE");
    gv_skinTexture[12][1] = "T2002Devil";
    gv_skinPrice[12] = 2000;
    gv_skinInStore[12] = true;
    gv_skinName[13] = StringExternal("Param/Value/558EF82A");
    gv_skinTexture[13][1] = "T2003Shining";
    gv_skinPrice[13] = 2000;
    gv_skinInStore[13] = true;
    gv_skinName[14] = StringExternal("Param/Value/F4F7E9DE");
    gv_skinTexture[14][1] = "T1011Metal";
    gv_skinPrice[14] = 1000;
    gv_skinInStore[14] = true;
    gv_skinName[15] = StringExternal("Param/Value/CAFB47CF");
    gv_skinTexture[15][1] = "T1012Camoflauged";
    gv_skinPrice[15] = 2000;
    gv_skinInStore[15] = true;
    gv_skinTexture[16][1] = "T1013Holographic";
    gv_skinName[17] = StringExternal("Param/Value/6046B912");
    gv_skinTexture[17][1] = "T1014Stormtropper";
    gv_skinPrice[17] = 1000;
    gv_skinInStore[17] = true;
    gv_skinName[18] = StringExternal("Param/Value/846B1F2F");
    gv_skinTexture[18][1] = "T1015Assassin";
    gv_skinPrice[18] = 2000;
    gv_skinInStore[18] = false;
    gv_skinName[19] = StringExternal("Param/Value/2913C8F8");
    gv_skinTexture[19][1] = "T1016Mechanical";
    gv_skinPrice[19] = 2000;
    gv_skinInStore[19] = false;
    gv_skinName[20] = StringExternal("Param/Value/10DFB789");
    gv_skinTexture[20][1] = "T3001Laser";
    gv_skinPrice[20] = 3000;
    gv_skinName[30] = StringExternal("Param/Value/E76A8E4E");
    gv_skinTexture[30][1] = "T3004Stormtrooper";
    gv_skinPrice[30] = 2000;
    gv_skinInStore[30] = true;
    gv_skinName[41] = StringExternal("Param/Value/400C6B9F");
    gv_skinTexture[41][1] = "T3005TRON";
    gv_skinPrice[41] = 2000;
    gv_skinInStore[41] = true;
    autoEE3B9113_ae = gv_ofStoreSkins;
    lv_i = 0;
    for ( ; ( (autoEE3B9113_ai >= 0 && lv_i <= autoEE3B9113_ae) || (autoEE3B9113_ai < 0 && lv_i >= autoEE3B9113_ae) ) ; lv_i += autoEE3B9113_ai ) {
        if ((gv_skinInStore[lv_i] == true)) {
            gv_ofAvailableSkins += 1;
            gv_availableSkins[gv_ofAvailableSkins] = lv_i;
        }

    }
    gf_SortByPrice();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeSkins_Init () {
    gt_InitializeSkins = TriggerCreate("gt_InitializeSkins_Func");
    TriggerAddEventMapInit(gt_InitializeSkins);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scroll
//--------------------------------------------------------------------------------------------------
bool gt_Scroll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_shop[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_shopDialog[EventPlayer()][4])) {
        gf_UpdateShop(EventPlayer(), "scrollleft");
    }
    else {
        if ((EventDialogControl() == gv_shopDialog[EventPlayer()][5])) {
            gf_UpdateShop(EventPlayer(), "scrollright");
        }
        else {
            if ((DialogControlGetHeight(EventDialogControl(), EventPlayer()) == 40) && (DialogControlGetWidth(EventDialogControl(), EventPlayer()) == 40)) {
                gv_selectedColorDI[EventPlayer()] = DialogControlGetRelativeControl(EventDialogControl(), EventPlayer());
                gv_selectedColor[EventPlayer()] = libNtve_gf_DialogItemColor(gv_selectedColorDI[EventPlayer()], EventPlayer());
                ActorSend(ActorFromDialogControl(gv_shopDialog[EventPlayer()][0]), libNtve_gf_SetTeamColor(gv_selectedColor[EventPlayer()], gv_selectedColor[EventPlayer()]));
                TextExpressionSetToken("Param/Expression/8769D09A", "A", IntToText(500));
                libNtve_gf_SetDialogItemText(gv_shopDialog[EventPlayer()][8], TextExpressionAssemble("Param/Expression/8769D09A"), PlayerGroupAll());
                libNtve_gf_SetDialogItemColor(gv_shopDialog[EventPlayer()][7], gv_selectedColor[EventPlayer()], PlayerGroupAll());
                DialogControlSetPositionRelative(gv_colorSelectionBorder[EventPlayer()], PlayerGroupAll(), c_anchorCenter, gv_selectedColorDI[EventPlayer()], c_anchorCenter, 0, 0);
            }
            else {
                if ((EventDialogControl() == gv_specialBladeGlow[EventPlayer()])) {
                    libNtve_gf_SendActorMessageToUnit(gv_Skaters[EventPlayer()], "ModelSwap DarkZealot");
                    ActorSend(ActorFromDialogControl(gv_shopDialog[EventPlayer()][0]), "ModelSwap DarkZealot");
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scroll_Init () {
    gt_Scroll = TriggerCreate("gt_Scroll_Func");
    TriggerAddEventDialogControl(gt_Scroll, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy/Equip Skin
//--------------------------------------------------------------------------------------------------
bool gt_BuyEquipSkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_shop[EventPlayer()]))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_shopDialog[EventPlayer()][3]) || (EventDialogControl() == gv_shopDialog[EventPlayer()][7])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_shopDialog[EventPlayer()][3])) {
        if ((BankValueGetAsFlag(gv_Banks[EventPlayer()], "Shop", ("skinz" + IntToString(gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]))) == false)) {
            if ((BankValueGetAsInt(gv_Banks[EventPlayer()], "Shop", "Money") >= gv_skinPrice[gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]])) {
                SoundPlay(SoundLink("Zealot_DeathFX", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                BankValueSetFromInt(gv_Banks[EventPlayer()], "Shop", "Money", (BankValueGetAsInt(gv_Banks[EventPlayer()], "Shop", "Money") - gv_skinPrice[gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]]));
                BankValueSetFromFlag(gv_Banks[EventPlayer()], "Shop", ("skinz" + IntToString(gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]])), true);
                gf_PlayAttackAnimation(ActorFromDialogControl(gv_shopDialog[EventPlayer()][0]));
                TextExpressionSetToken("Param/Expression/4704E87B", "B", gv_skinName[gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]]);
                TextExpressionSetToken("Param/Expression/4704E87B", "A", IntToText(gv_skinPrice[gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]]));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextExpressionAssemble("Param/Expression/4704E87B"));
                gf_UpdateShop(EventPlayer(), "bought");
                SoundPlay(SoundLink("Zealot_Death_NP", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/791819EE"));
            }
        }
        else {
            SoundPlay(SoundLink("ColonistShip_Land", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            BankValueSetFromInt(gv_Banks[EventPlayer()], "Shop", "EquippedSkin", gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]);
            TextExpressionSetToken("Param/Expression/B108370F", "A", gv_skinName[gv_skinShowOrder[gv_shopScrollIndex[EventPlayer()]]]);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextExpressionAssemble("Param/Expression/B108370F"));
            gf_PlayAttackAnimation(ActorFromDialogControl(gv_shopDialog[EventPlayer()][0]));
            gf_UpdateShop(EventPlayer(), "");
        }
    }
    else {
        if ((EventDialogControl() == gv_shopDialog[EventPlayer()][7])) {
            if ((BankValueGetAsFlag(gv_Banks[EventPlayer()], "Shop", libNtve_gf_ConvertColorToString(gv_selectedColor[EventPlayer()])) == false)) {
                if ((BankValueGetAsInt(gv_Banks[EventPlayer()], "Shop", "Money") >= 500)) {
                    SoundPlay(SoundLink("UI_GenericTransitionEnter_Normal", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    BankValueSetFromInt(gv_Banks[EventPlayer()], "Shop", "Money", (BankValueGetAsInt(gv_Banks[EventPlayer()], "Shop", "Money") - 500));
                    BankValueSetFromFlag(gv_Banks[EventPlayer()], "Shop", libNtve_gf_ConvertColorToString(gv_selectedColor[EventPlayer()]), true);
                    gf_AddPlayerHasColorBorder(EventPlayer(), gv_selectedColorDI[EventPlayer()]);
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A5EF7690"));
                    gf_UpdateShop(EventPlayer(), "");
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/FAB580F5"));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/BC690554"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuyEquipSkin_Init () {
    gt_BuyEquipSkin = TriggerCreate("gt_BuyEquipSkin_Func");
    TriggerAddEventDialogControl(gt_BuyEquipSkin, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equip Color
//--------------------------------------------------------------------------------------------------
bool gt_EquipColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_shop[EventPlayer()]))) {
            return false;
        }

        if (!((DialogControlGetHeight(EventDialogControl(), EventPlayer()) == 40))) {
            return false;
        }

        if (!((DialogControlGetWidth(EventDialogControl(), EventPlayer()) == 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((BankValueGetAsFlag(gv_Banks[EventPlayer()], "Shop", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlGetRelativeControl(EventDialogControl(), EventPlayer()), EventPlayer()))) == true)) {
        SoundPlay(SoundLink("UI_TechTreeRaceTab", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogControlSetPositionRelative(gv_colorEquippedCheckMark[EventPlayer()], PlayerGroupAll(), c_anchorCenter, EventDialogControl(), c_anchorCenter, 0, 0);
        DialogControlSetVisible(gv_colorEquippedCheckMark[EventPlayer()], PlayerGroupAll(), true);
        BankValueSetFromString(gv_Banks[EventPlayer()], "Shop", "EquippedColor", libNtve_gf_ConvertColorToString(libNtve_gf_DialogItemColor(DialogControlGetRelativeControl(EventDialogControl(), EventPlayer()), EventPlayer())));
        BankSave(gv_Banks[EventPlayer()]);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CB8E9BB6"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EquipColor_Init () {
    gt_EquipColor = TriggerCreate("gt_EquipColor_Func");
    TriggerAddEventDialogControl(gt_EquipColor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inject
//--------------------------------------------------------------------------------------------------
bool gt_Inject_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto716303EE_ae = 14;
    const int auto716303EE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_tESTING == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto716303EE_ai >= 0 && lv_i <= auto716303EE_ae) || (auto716303EE_ai < 0 && lv_i >= auto716303EE_ae) ) ; lv_i += auto716303EE_ai ) {
        BankValueSetFromInt(gv_Banks[lv_i], "Shop", "Money", (BankValueGetAsInt(gv_Banks[lv_i], "Shop", "Money") + StringToInt(StringSub(EventChatMessage(false), 9, StringLength(EventChatMessage(false))))));
        gf_UpdateShop(lv_i, "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Inject_Init () {
    gt_Inject = TriggerCreate("gt_Inject_Func");
    TriggerAddEventChatMessage(gt_Inject, c_playerAny, "-inject ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set
//--------------------------------------------------------------------------------------------------
bool gt_Set_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tESTING == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromInt(gv_Banks[EventPlayer()], "Shop", "Money", StringToInt(StringSub(EventChatMessage(false), 6, StringLength(EventChatMessage(false)))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Set_Init () {
    gt_Set = TriggerCreate("gt_Set_Func");
    TriggerAddEventChatMessage(gt_Set, c_playerAny, "-set ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Click
//--------------------------------------------------------------------------------------------------
bool gt_VoteClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_initialVote.lv_button[1]) || (EventDialogControl() == gv_initialVote.lv_button[2]) || (EventDialogControl() == gv_initialVote.lv_button[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_initialVote.lv_button[1])) {
        gv_initialVote.lv_playerVotes[EventPlayer()] = 1;
        libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[1], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[2], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[3], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
        gf_DisableModeButton(2, PlayerGroupSingle(EventPlayer()));
        gf_DisableModeButton(3, PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((EventDialogControl() == gv_initialVote.lv_button[2])) {
            gv_initialVote.lv_playerVotes[EventPlayer()] = 2;
            libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[2], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[1], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[3], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
            gf_DisableModeButton(1, PlayerGroupSingle(EventPlayer()));
            gf_DisableModeButton(3, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[2], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((EventDialogControl() == gv_initialVote.lv_button[3])) {
                gv_initialVote.lv_playerVotes[EventPlayer()] = 3;
                libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[3], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[1], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemDesaturationColor(gv_initialVote.lv_buttonBar[2], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
                gf_DisableModeButton(1, PlayerGroupSingle(EventPlayer()));
                gf_DisableModeButton(2, PlayerGroupSingle(EventPlayer()));
            }

        }
    }
    gf_UpdateVoteTotals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteClick_Init () {
    gt_VoteClick = TriggerCreate("gt_VoteClick_Func");
    TriggerEnable(gt_VoteClick, false);
    TriggerAddEventDialogControl(gt_VoteClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Draft Vote Click 1
//--------------------------------------------------------------------------------------------------
bool gt_DraftVoteClick1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_singleDraft.lv_captainOptinVoteButton[1]) || (EventDialogControl() == gv_singleDraft.lv_captainOptinVoteButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_singleDraft.lv_captainOptinVoteButton[1])) {
        if (((gv_stats_GamesPlayed[EventPlayer()] + BankValueGetAsInt(gv_Banks[EventPlayer()], "Stats", "LegacyGames")) < 5)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/545E2E72"));
            gv_singleDraft.lv_captainVoteValues[EventPlayer()] = false;
        }
        else {
            gv_singleDraft.lv_captainVoteValues[EventPlayer()] = true;
        }
        gv_singleDraft.lv_totalplayersvstotalvotes[2] += 1;
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_captainOptinVoteButtonBar[1], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_captainOptinVoteButtonBar[2], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
        gf_DisableCaptainButton(2, PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((EventDialogControl() == gv_singleDraft.lv_captainOptinVoteButton[2])) {
            gv_singleDraft.lv_totalplayersvstotalvotes[2] += 1;
            gv_singleDraft.lv_captainVoteValues[EventPlayer()] = false;
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_captainOptinVoteButtonBar[2], Color(20.78, 44.71, 79.61), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_captainOptinVoteButtonBar[1], Color(82.35, 15.69, 15.29), PlayerGroupSingle(EventPlayer()));
            gf_DisableCaptainButton(1, PlayerGroupSingle(EventPlayer()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DraftVoteClick1_Init () {
    gt_DraftVoteClick1 = TriggerCreate("gt_DraftVoteClick1_Func");
    TriggerEnable(gt_DraftVoteClick1, false);
    TriggerAddEventDialogControl(gt_DraftVoteClick1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Draft Role Click
//--------------------------------------------------------------------------------------------------
bool gt_DraftRoleClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[1]) || (EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[2]) || (EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[3]) || (EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[4]) || (EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[5])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[1], PlayerGroupSingle(EventPlayer()), 0.25, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[2], PlayerGroupSingle(EventPlayer()), 0.25, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[3], PlayerGroupSingle(EventPlayer()), 0.25, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[4], PlayerGroupSingle(EventPlayer()), 0.25, 40.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[5], PlayerGroupSingle(EventPlayer()), 0.25, 40.0);
    if ((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[1])) {
        gv_singleDraft.lv_selectedRole[EventPlayer()] = 1;
        DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[1], PlayerGroupSingle(EventPlayer()), 0.25, 0.0);
    }
    else {
        if ((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[2])) {
            gv_singleDraft.lv_selectedRole[EventPlayer()] = 2;
            DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[2], PlayerGroupSingle(EventPlayer()), 0.25, 0.0);
        }
        else {
            if ((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[3])) {
                gv_singleDraft.lv_selectedRole[EventPlayer()] = 3;
                DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[3], PlayerGroupSingle(EventPlayer()), 0.25, 0.0);
            }
            else {
                if ((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[4])) {
                    gv_singleDraft.lv_selectedRole[EventPlayer()] = 4;
                    DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[4], PlayerGroupSingle(EventPlayer()), 0.25, 0.0);
                }
                else {
                    if ((EventDialogControl() == gv_singleDraft.lv_roleMenuButtonHotspots[5])) {
                        gv_singleDraft.lv_selectedRole[EventPlayer()] = 5;
                        DialogControlFadeTransparency(gv_singleDraft.lv_roleMenuButtonBG[5], PlayerGroupSingle(EventPlayer()), 0.25, 0.0);
                    }

                }
            }
        }
    }
    gf_Updateroleicons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DraftRoleClick_Init () {
    gt_DraftRoleClick = TriggerCreate("gt_DraftRoleClick_Func");
    TriggerEnable(gt_DraftRoleClick, false);
    TriggerAddEventDialogControl(gt_DraftRoleClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick a player Click
//--------------------------------------------------------------------------------------------------
bool gt_PickaplayerClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectedplayer;

    // Automatic Variable Declarations
    const int autoFAEBCCCE_ae = 8;
    int autoFAEBCCCE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_singleDraft.lv_pickButtons[1] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[2] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[3] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[4] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[5] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[6] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[7] == EventDialogControl()) || (gv_singleDraft.lv_pickButtons[8] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAEBCCCE_var = 1;
    for ( ; autoFAEBCCCE_var <= autoFAEBCCCE_ae; autoFAEBCCCE_var += 1 ) {
        if ((gv_singleDraft.lv_pickButtons[autoFAEBCCCE_var] == EventDialogControl())) {
            lv_selectedplayer = autoFAEBCCCE_var;
        }

    }
    gf_Pickaplayer(lv_selectedplayer, EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickaplayerClick_Init () {
    gt_PickaplayerClick = TriggerCreate("gt_PickaplayerClick_Func");
    TriggerEnable(gt_PickaplayerClick, false);
    TriggerAddEventDialogControl(gt_PickaplayerClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Dance
//--------------------------------------------------------------------------------------------------
bool gt_PlatformDance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_singleDraft.lv_zealotPickerUnits[EventPlayer()]) == true)) {
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_singleDraft.lv_zealotPickerUnits[EventPlayer()]), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformDance_Init () {
    gt_PlatformDance = TriggerCreate("gt_PlatformDance_Func");
    TriggerEnable(gt_PlatformDance, false);
    TriggerAddEventKeyPressed(gt_PlatformDance, c_playerAny, c_keyA, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Captain Battle - Attack
//--------------------------------------------------------------------------------------------------
bool gt_CaptainBattleAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_angle;
    point lv_castpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_castpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_angle = AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_castpoint);
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_angle, 0.0625);
    gf_CaptainBattleShootmissile(EventPlayerEffectUsedUnit(c_effectUnitCaster), AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_castpoint));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_animNameDefault, "Attack", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaptainBattleAttack_Init () {
    gt_CaptainBattleAttack = TriggerCreate("gt_CaptainBattleAttack_Func");
    TriggerEnable(gt_CaptainBattleAttack, false);
    TriggerAddEventPlayerEffectUsed(gt_CaptainBattleAttack, c_playerAny, "FreezeTagFreezeBullet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Captain Battle - Burst
//--------------------------------------------------------------------------------------------------
bool gt_CaptainBattleBurst_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_angle;
    point lv_castpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_castpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_angle = AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_castpoint);
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_angle, 0.0625);
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0, lv_angle);
    gf_G15Charge(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaptainBattleBurst_Init () {
    gt_CaptainBattleBurst = TriggerCreate("gt_CaptainBattleBurst_Func");
    TriggerEnable(gt_CaptainBattleBurst, false);
    TriggerAddEventPlayerEffectUsed(gt_CaptainBattleBurst, c_playerAny, "Burst");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Captain Battle - Missile OOB
//--------------------------------------------------------------------------------------------------
bool gt_CaptainBattleMissileOOB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZHPL0122222222242"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CaptainBattlemissileoob(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaptainBattleMissileOOB_Init () {
    gt_CaptainBattleMissileOOB = TriggerCreate("gt_CaptainBattleMissileOOB_Func");
    TriggerEnable(gt_CaptainBattleMissileOOB, false);
    TriggerAddEventUnitRegion(gt_CaptainBattleMissileOOB, null, RegionFromId(73), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Captain Battle - Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_CaptainBattleUnitDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CaptainWarrior"))) {
            return false;
        }

        if (!((gv_singleDraft.lv_canbulletsexist == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(gv_singleDraft.lv_playersStillAlive) == 2)) {
        gv_singleDraft.lv_canbulletsexist = false;
        gf_CaptainBattleEndcaptainbattle();
    }
    else {
        PlayerGroupRemove(gv_singleDraft.lv_playersStillAlive, UnitGetOwner(EventUnit()));
    }
    UnitKill(EventUnit());
    SoundPlayForPlayer(SoundLink("CaptainWarriorDeathSound", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CaptainBattleUnitDeath_Init () {
    gt_CaptainBattleUnitDeath = TriggerCreate("gt_CaptainBattleUnitDeath_Func");
    TriggerEnable(gt_CaptainBattleUnitDeath, false);
    TriggerAddEventUnitRegion(gt_CaptainBattleUnitDeath, null, RegionFromId(74), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platform Easter Egg
//--------------------------------------------------------------------------------------------------
bool gt_PlatformEasterEgg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_isZealotBouncing[EventPlayer()] == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_singleDraft.lv_playerslefttobepicked, EventPlayer()) == true))) {
            return false;
        }

        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == gv_hANDLE_TWODEUCE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_DANTE) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1) || (PlayerHandle(EventPlayer()) == gv_hANDLE_SNIPER) || (PlayerHandle(EventPlayer()) == gv_hANDLE_EMERY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_isZealotBouncing[EventPlayer()] = true;
    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_singleDraft.lv_nonpickedunitplatforms[gv_singleDraft.lv_whichplayerisonwhichnonpickplatform[EventPlayer()]]), c_animNameDefault, "Stand Work Start", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(gv_singleDraft.lv_nonpickedunitplatforms[gv_singleDraft.lv_whichplayerisonwhichnonpickplatform[EventPlayer()]]), c_animNameDefault, 10.0);
    Wait(0.0625, c_timeGame);
    gf_BounceZealot(EventPlayer());
    Wait(0.7, c_timeGame);
    libNtve_gf_SetAnimationTimeScale(ActorFromDoodad(gv_singleDraft.lv_nonpickedunitplatforms[gv_singleDraft.lv_whichplayerisonwhichnonpickplatform[EventPlayer()]]), c_animNameDefault, 1.0);
    libNtve_gf_PlayAnimation(ActorFromDoodad(gv_singleDraft.lv_nonpickedunitplatforms[gv_singleDraft.lv_whichplayerisonwhichnonpickplatform[EventPlayer()]]), c_animNameDefault, "Stand Work End", c_animFlagPlayForever | c_animFlagNonLooping, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatformEasterEgg_Init () {
    gt_PlatformEasterEgg = TriggerCreate("gt_PlatformEasterEgg_Func");
    TriggerEnable(gt_PlatformEasterEgg, false);
    TriggerAddEventKeyPressed(gt_PlatformEasterEgg, c_playerAny, c_keyS, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initiate Pull Goalie
//--------------------------------------------------------------------------------------------------
bool gt_InitiatePullGoalie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_pullGoalieButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == gv_Players[2])) {
        gv_pullingGoalie[1] = true;
    }
    else {
        if ((EventPlayer() == gv_Players[6])) {
            gv_pullingGoalie[2] = true;
        }

    }
    DialogControlSetVisible(gv_pullGoalieButton, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_cancelGoalieButton, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_pullingGoalieLabel, PlayerGroupSingle(EventPlayer()), true);
    if ((AbsF((gv_rINK_TOP_Y - PointGetY(UnitGetPosition(gv_Skaters[EventPlayer()])))) <= AbsF((gv_rINK_BOT_Y - PointGetY(UnitGetPosition(gv_Skaters[EventPlayer()])))))) {
        while ((PointGetY(UnitGetPosition(gv_Skaters[EventPlayer()])) < 141.0) && (RegionContainsPoint(RegionFromId(68), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.0, 90.0)) == false) && (RegionContainsPoint(RegionFromId(71), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.0, 90.0)) == false)) {
            if ((((EventPlayer() == gv_Players[2]) && (gv_pullingGoalie[1] == false)) || ((EventPlayer() == gv_Players[6]) && (gv_pullingGoalie[2] == false)))) {
                break;
            }

            UnitIssueOrder(gv_Skaters[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 100.0, 90.0)), c_orderQueueReplace);
            Wait(0.0, c_timeGame);
        }
        if (((EventPlayer() == gv_Players[2]) && (gv_pullingGoalie[1] == true))) {
            gv_pullingGoalie[1] = false;
            TriggerExecute(gt_PullGoalie, true, false);
        }
        else {
            if (((EventPlayer() == gv_Players[6]) && (gv_pullingGoalie[2] == true))) {
                gv_pullingGoalie[2] = false;
                TriggerExecute(gt_PullGoalie, true, false);
            }

        }
    }
    else {
        while ((PointGetY(UnitGetPosition(gv_Skaters[EventPlayer()])) > 82.0) && (RegionContainsPoint(RegionFromId(69), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.0, 270.0)) == false) && (RegionContainsPoint(RegionFromId(70), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.0, 270.0)) == false)) {
            if ((((EventPlayer() == gv_Players[2]) && (gv_pullingGoalie[1] == false)) || ((EventPlayer() == gv_Players[6]) && (gv_pullingGoalie[2] == false)))) {
                break;
            }

            UnitIssueOrder(gv_Skaters[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Skaters[EventPlayer()]), 50.0, 270.0)), c_orderQueueReplace);
            Wait(0.0, c_timeGame);
        }
        if (((EventPlayer() == gv_Players[2]) && (gv_pullingGoalie[1] == true))) {
            gv_pullingGoalie[1] = false;
            TriggerExecute(gt_PullGoalie, true, false);
        }
        else {
            if (((EventPlayer() == gv_Players[6]) && (gv_pullingGoalie[2] == true))) {
                gv_pullingGoalie[2] = false;
                TriggerExecute(gt_PullGoalie, true, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitiatePullGoalie_Init () {
    gt_InitiatePullGoalie = TriggerCreate("gt_InitiatePullGoalie_Func");
    TriggerAddEventDialogControl(gt_InitiatePullGoalie, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Pull Goalie
//--------------------------------------------------------------------------------------------------
bool gt_CancelPullGoalie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cancelGoalieButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_Skaters[EventPlayer()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    DialogControlSetVisible(gv_pullGoalieButton, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_cancelGoalieButton, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_pullingGoalieLabel, PlayerGroupSingle(EventPlayer()), false);
    if ((EventPlayer() == gv_Players[2])) {
        gv_pullingGoalie[1] = false;
    }
    else {
        if ((EventPlayer() == gv_Players[6])) {
            gv_pullingGoalie[2] = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelPullGoalie_Init () {
    gt_CancelPullGoalie = TriggerCreate("gt_CancelPullGoalie_Func");
    TriggerAddEventDialogControl(gt_CancelPullGoalie, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pull Goalie
//--------------------------------------------------------------------------------------------------
bool gt_PullGoalie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType1;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_cancelGoalieButton, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_pullingGoalieLabel, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_pullGoalieDialog, PlayerGroupAll(), false);
    lv_player = EventPlayer();
    lv_point = UnitGetPosition(gv_Skaters[lv_player]);
    UnitRemove(gv_Skaters[lv_player]);
    UnitRemove(gv_Sticks[lv_player]);
    TextTagDestroy(gv_TextTags[lv_player]);
    lv_unitType1 = "Zealot";
    if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
        if ((lv_player == gv_Players[2])) {
            gv_pullGoalie[1] = true;
        }
        else {
            if ((lv_player == gv_Players[6])) {
                gv_pullGoalie[2] = true;
            }

        }
        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, lv_player, lv_point, PointFromId(112));
        gf_SetCooldownsandChargesforUnit(UnitGetOwner(UnitLastCreated()));
        if ((lv_player == gv_Players[2])) {
            TextExpressionSetToken("Param/Expression/92BB3703", "A", PlayerName(lv_player));
            TextTagCreate(TextExpressionAssemble("Param/Expression/92BB3703"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
        }
        else {
            if ((lv_player == gv_Players[6])) {
                TextExpressionSetToken("Param/Expression/88224D31", "A", PlayerName(lv_player));
                TextTagCreate(TextExpressionAssemble("Param/Expression/88224D31"), 20, PointFromId(7), 3.0, true, false, PlayerGroupAll());
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
            }

        }
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
        gv_TextTags[lv_player] = TextTagLastCreated();
        gv_Skaters[lv_player] = UnitLastCreated();
        UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
        UnitGroupAdd(gv_stufftomove, UnitLastCreated());
        UnitSelect(UnitLastCreated(), lv_player, true);
        UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
        UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
        UnitCreate(1, "ShapeHockeyStick", 0, lv_player, PointFromId(112), 270.0);
        gv_Sticks[lv_player] = UnitLastCreated();
    }

    TextExpressionSetToken("Param/Expression/5D2F2A9D", "A", PlayerName(lv_player));
    TextExpressionSetToken("Param/Expression/5D2F2A9D", "B", FixedToText(TimerGetRemaining(gv_Timer), 1));
    UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_player), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/5D2F2A9D"));
    gf_ApplyCustomizations();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PullGoalie_Init () {
    gt_PullGoalie = TriggerCreate("gt_PullGoalie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckForEnablePullGoalie (PP)
//--------------------------------------------------------------------------------------------------
bool gt_CheckForEnablePullGoaliePP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_Period == 3)) {
        if ((gv_stoppageOfPlay == false) && (gv_Period == 3)) {
            if ((DialogIsVisible(gv_pullGoalieDialog, gv_Players[2]) == false) && (gv_pullGoalie[1] == false) && ((((gv_TeamScores[1] - gv_TeamScores[2]) == -1) && (TimerGetRemaining(gv_Timer) <= 45.0)) || (((gv_TeamScores[1] - gv_TeamScores[2]) == -2) && (TimerGetRemaining(gv_Timer) <= 60.0))) && (gv_teamHasUsedPullgoaliePowerplay[1] == false) && (gv_powerplayisavailableforteam[1] == false)) {
                gf_ApplyForcePolar2(gv_Players[2], 1);
            }
            else {
                if ((DialogIsVisible(gv_pullGoalieDialog, gv_Players[6]) == false) && (gv_pullGoalie[2] == false) && ((((gv_TeamScores[2] - gv_TeamScores[1]) == -1) && (TimerGetRemaining(gv_Timer) <= 45.0)) || (((gv_TeamScores[2] - gv_TeamScores[1]) == -2) && (TimerGetRemaining(gv_Timer) <= 60.0))) && (gv_teamHasUsedPullgoaliePowerplay[2] == false) && (gv_powerplayisavailableforteam[2] == false)) {
                    gf_ApplyForcePolar2(gv_Players[6], 2);
                }

            }
        }

        if ((DialogIsVisible(gv_pullGoalieDialog, gv_Players[2]) == true) && (gv_TeamScores[1] == gv_TeamScores[2])) {
            gf_ApplyForcePolar3(gv_Players[2], 1);
        }
        else {
            if ((DialogIsVisible(gv_pullGoalieDialog, gv_Players[6]) == true) && (gv_TeamScores[1] == gv_TeamScores[2])) {
                gf_ApplyForcePolar3(gv_Players[6], 2);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckForEnablePullGoaliePP_Init () {
    gt_CheckForEnablePullGoaliePP = TriggerCreate("gt_CheckForEnablePullGoaliePP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicPullGoaliePinger
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicPullGoaliePinger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i == 0) && (gv_rEDLINE_MODE == false)) {
        if ((gv_Period == 3) && (TimerGetRemaining(gv_Timer) <= 65.0)) {
            TriggerExecute(gt_CheckForEnablePullGoaliePP, true, false);
            lv_i = 1;
        }

        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicPullGoaliePinger_Init () {
    gt_PeriodicPullGoaliePinger = TriggerCreate("gt_PeriodicPullGoaliePinger_Func");
    TriggerAddEventMapInit(gt_PeriodicPullGoaliePinger);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateTimer
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isrunning;
    text lv_tempText;

    // Automatic Variable Declarations
    unitgroup auto34EB3DA2_g;
    int auto34EB3DA2_u;
    unit auto34EB3DA2_var;
    playergroup auto4573EA2A_g;
    int auto4573EA2A_var;
    const int autoA18442A9_ae = 14;
    int autoA18442A9_var;

    // Variable Initialization
    lv_isrunning = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_isrunning == true)) {
        Wait(1.0, c_timeGame);
        if ((((TimerGetRemaining(gv_Timer) < 10.0) && (gv_Shootout == false)) || ((TimerGetRemaining(gv_Timer) < 5.0) && (gv_Shootout == true) && (gv_ShootoutShooting2 == true))) && (TimerGetRemaining(gv_Timer) > 0.0) && (gv_NoCount == false) && (gv_gameispaused == false)) {
            SoundPlay(SoundLink("UI_BnetCountdownBeep", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_FaceoffTimer <= 0) && (gv_NoCount == false) && (gv_Shootout == false) && (gv_gameispaused == false) && (gv_redlineMode.lv_timerpauseduntiltakeback == false)) {
            TimerPause(gv_Timer, false);
        }

        if ((gv_FaceoffTimer > 0) && (gv_gameOver == false) && (gv_gameispaused == false)) {
            TimerPause(gv_Timer, true);
            if ((gv_FaceoffTimer > 1) && (gv_singleDraft.lv_iscaptainbattlehappening == false)) {
                auto34EB3DA2_g = gv_PlayerUnits;
                auto34EB3DA2_u = UnitGroupCount(auto34EB3DA2_g, c_unitCountAll);
                for (;; auto34EB3DA2_u -= 1) {
                    auto34EB3DA2_var = UnitGroupUnitFromEnd(auto34EB3DA2_g, auto34EB3DA2_u);
                    if (auto34EB3DA2_var == null) { break; }
                    UnitBehaviorAdd(auto34EB3DA2_var, "NoAbilitiesBuff", auto34EB3DA2_var, 1);
                }
            }

            if ((gv_FaceoffTimer < 6)) {
                if ((gv_inGameStatsDialog != c_invalidDialogId)) {
                    DialogSetVisible(gv_inGameStatsDialog, PlayerGroupAll(), false);
                }

                SoundPlay(SoundLink("UI_BnetCountdownBeep", -1), PlayerGroupAll(), 100.0, 0.0);
            }

            if ((gv_FaceoffTimer == 1)) {
                auto4573EA2A_g = PlayerGroupAll();
                auto4573EA2A_var = -1;
                while (true) {
                    auto4573EA2A_var = PlayerGroupNextPlayer(auto4573EA2A_g, auto4573EA2A_var);
                    if (auto4573EA2A_var < 0) { break; }
                    UnitAbilityReset(gv_Skaters[auto4573EA2A_var], AbilityCommand("Check", 0), c_spendLocationAbility);
                    UnitAbilityReset(gv_Skaters[auto4573EA2A_var], AbilityCommand("NewForceField", 0), c_spendLocationAbility);
                    UnitAbilityReset(gv_Skaters[auto4573EA2A_var], AbilityCommand("NewOneTimer", 0), c_spendLocationAbility);
                }
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                gv_potentialUnshot = 0;
                if ((gv_loading == false)) {
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(42)) == true)) {
                        gv_checkFaceoffWinner = true;
                    }

                    if ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[1]], RegionFromId(42)) == true)) {
                        gv_stats_Faceoffs[gv_Players[1]] += 1;
                    }

                    if ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[5]], RegionFromId(42)) == true)) {
                        gv_stats_Faceoffs[gv_Players[5]] += 1;
                    }

                }

                autoA18442A9_var = 1;
                for ( ; autoA18442A9_var <= autoA18442A9_ae; autoA18442A9_var += 1 ) {
                    TextTagDestroy(gv_badgeTextTag[autoA18442A9_var]);
                    if (((PlayerStatus(autoA18442A9_var) == c_playerStatusActive) || (PlayerStatus(autoA18442A9_var) == c_playerStatusLeft))) {
                        TextTagDestroy(gv_badgeTextTag[autoA18442A9_var]);
                    }

                }
                if ((gv_loading == true)) {
                    gf_ResumeVelocity();
                }

                gf_FadeSound(gv_bostonSound);
            }

            if ((gv_FaceoffTimer > 1) && (gv_FaceoffTimer < 14)) {
                if ((gv_loading == false)) {
                    lv_tempText = StringExternal("Param/Value/E699165F");
                    TextExpressionSetToken("Param/Expression/E8FF223F", "A", IntToText((gv_FaceoffTimer-1)));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/E8FF223F"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/4790488A", "A", IntToText((gv_FaceoffTimer-1)));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/4790488A"));
                }
            }

            gv_FaceoffTimer -= 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTimer_Init () {
    gt_UpdateTimer = TriggerCreate("gt_UpdateTimer_Func");
    TriggerAddEventMapInit(gt_UpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Goalie Keypress
//--------------------------------------------------------------------------------------------------
bool gt_ToggleGoalieKeypress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)))) {
            return false;
        }

        if (!((gv_toggleDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_toggleDelay[EventPlayer()] = true;
    if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[1], EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[2], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[1], false, PlayerGroupSingle(EventPlayer()));
        gv_options_OptInGoalie[EventPlayer()] = true;
        gv_options_OptOutGoalie[EventPlayer()] = false;
        gf_GoalieToggleNotification(EventPlayer(), true);
    }
    else {
        if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[2], EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_optionsItems[1], true, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemChecked(gv_optionsItems[2], false, PlayerGroupSingle(EventPlayer()));
            gv_options_OptOutGoalie[EventPlayer()] = true;
            gv_options_OptInGoalie[EventPlayer()] = false;
            gf_GoalieToggleNotification(EventPlayer(), false);
        }
        else {
            if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[2], EventPlayer()) == false) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[1], EventPlayer()) == false)) {
                libNtve_gf_SetDialogItemChecked(gv_optionsItems[1], true, PlayerGroupSingle(EventPlayer()));
                gv_options_OptOutGoalie[EventPlayer()] = true;
                gv_options_OptInGoalie[EventPlayer()] = false;
                gf_GoalieToggleNotification(EventPlayer(), false);
            }

        }
    }
    if ((gv_ranked == true)) {
        gf_SaveBank(EventPlayer());
    }

    Wait(0.5, c_timeReal);
    gv_toggleDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleGoalieKeypress_Init () {
    gt_ToggleGoalieKeypress = TriggerCreate("gt_ToggleGoalieKeypress_Func");
    TriggerAddEventKeyPressed(gt_ToggleGoalieKeypress, c_playerAny, c_keyG, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleOptions
//--------------------------------------------------------------------------------------------------
bool gt_ToggleOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_optionsViewController))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_options, EventPlayer()) == false)) {
        DialogSetVisible(gv_options, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_optionsViewController, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemImage(gv_optionVCI, "settingscog.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(EventDialogControl(), StringExternal("Param/Value/66ACE01B"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetPosition(gv_uIElements.lv_chat, PlayerGroupSingle(EventPlayer()), c_anchorBottomLeft, 430, 35);
    }
    else {
        DialogSetVisible(gv_options, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_optionsViewController, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_optionVCI, "settingscog.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(EventDialogControl(), StringExternal("Param/Value/13F685D3"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetPosition(gv_uIElements.lv_chat, PlayerGroupSingle(EventPlayer()), c_anchorBottomLeft, 8, 35);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleOptions_Init () {
    gt_ToggleOptions = TriggerCreate("gt_ToggleOptions_Func");
    TriggerAddEventDialogControl(gt_ToggleOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Settings Window
//--------------------------------------------------------------------------------------------------
bool gt_CloseSettingsWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[11]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_optionsViewController, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetPosition(gv_uIElements.lv_chat, PlayerGroupSingle(EventPlayer()), c_anchorBottomLeft, 8, 35);
    DialogSetVisible(gv_options, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_optionVCI, "settingscog.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemTooltip(gv_optionVCB, StringExternal("Param/Value/A08FF177"), PlayerGroupSingle(EventPlayer()));
    if ((gv_kickDialogOpenForPlayer[EventPlayer()] == true)) {
        DialogDestroy(gv_kickDialog[EventPlayer()]);
        gv_kickDialogOpenForPlayer[EventPlayer()] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseSettingsWindow_Init () {
    gt_CloseSettingsWindow = TriggerCreate("gt_CloseSettingsWindow_Func");
    TriggerAddEventDialogControl(gt_CloseSettingsWindow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change game lighting
//--------------------------------------------------------------------------------------------------
bool gt_Changegamelighting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_optionsItems[5]) || (EventDialogControl() == gv_optionsItems[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_optionsItems[5]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[5], EventPlayer()) == true)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lighting", true);
        BankSave(gv_Banks[EventPlayer()]);
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[4], false, PlayerGroupSingle(EventPlayer()));
        gf_ShowScoreboard3(EventPlayer(), true, true);
    }
    else {
        if ((EventDialogControl() == gv_optionsItems[5]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[5], EventPlayer()) == false)) {
            if ((gv_ranked == true)) {
                BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lighting", false);
                BankSave(gv_Banks[EventPlayer()]);
            }

            libNtve_gf_SetDialogItemChecked(gv_optionsItems[4], true, PlayerGroupSingle(EventPlayer()));
            gf_ShowScoreboard3(EventPlayer(), true, true);
        }
        else {
            if ((EventDialogControl() == gv_optionsItems[4]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[4], EventPlayer()) == false)) {
                if ((gv_ranked == true)) {
                    BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lighting", true);
                    BankSave(gv_Banks[EventPlayer()]);
                }

                libNtve_gf_SetDialogItemChecked(gv_optionsItems[5], true, PlayerGroupSingle(EventPlayer()));
                gf_ShowScoreboard3(EventPlayer(), true, true);
            }
            else {
                if ((EventDialogControl() == gv_optionsItems[4]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[4], EventPlayer()) == true)) {
                    if ((gv_ranked == true)) {
                        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lighting", false);
                        BankSave(gv_Banks[EventPlayer()]);
                    }

                    libNtve_gf_SetDialogItemChecked(gv_optionsItems[5], false, PlayerGroupSingle(EventPlayer()));
                    gf_ShowScoreboard3(EventPlayer(), true, true);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Changegamelighting_Init () {
    gt_Changegamelighting = TriggerCreate("gt_Changegamelighting_Func");
    TriggerAddEventDialogControl(gt_Changegamelighting, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Show/Hide Snow Settings
//--------------------------------------------------------------------------------------------------
bool gt_ChangeShowHideSnowSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto5286B262_ae = 6;
    int auto5286B262_var;
    const int autoAED51A0C_ae = 6;
    int autoAED51A0C_var;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[6]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Snow", true);
        BankSave(gv_Banks[EventPlayer()]);
        autoAED51A0C_var = 1;
        for ( ; autoAED51A0C_var <= autoAED51A0C_ae; autoAED51A0C_var += 1 ) {
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_snowactors[autoAED51A0C_var], true);
        }
    }
    else {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Snow", false);
            BankSave(gv_Banks[EventPlayer()]);
        }

        auto5286B262_var = 1;
        for ( ; auto5286B262_var <= auto5286B262_ae; auto5286B262_var += 1 ) {
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_snowactors[auto5286B262_var], false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeShowHideSnowSettings_Init () {
    gt_ChangeShowHideSnowSettings = TriggerCreate("gt_ChangeShowHideSnowSettings_Func");
    TriggerAddEventDialogControl(gt_ChangeShowHideSnowSettings, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Show/Hide Light Settings
//--------------------------------------------------------------------------------------------------
bool gt_ChangeShowHideLightSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto80272E3C_ae = 99;
    int auto80272E3C_var;
    const int auto36C1C72D_ae = 99;
    int auto36C1C72D_var;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[7]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lights", true);
            BankSave(gv_Banks[EventPlayer()]);
        }

        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(284)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(291)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(277)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(290)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(293)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(278)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(288)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(276)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(287)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(280)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(297)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(282)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(62)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(63)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(313)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(315)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(316)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(303)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(323)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(305)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(302)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(301)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(307)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(28)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(438)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(309)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(321)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(311)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(281)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(283)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(279)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(188)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(275)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(167)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(274)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(166)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(273)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(158)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(272)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(118)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(271)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(168)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(270)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(164)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(269)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(165)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(169)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(268)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(170)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(267)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(266)), false);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(171)), false);
        auto36C1C72D_var = 1;
        for ( ; auto36C1C72D_var <= auto36C1C72D_ae; auto36C1C72D_var += 1 ) {
            if ((gv_stadiums.lv_stadiumLights[auto36C1C72D_var] != null)) {
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_stadiums.lv_stadiumLights[auto36C1C72D_var], false);
            }

        }
    }
    else {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Lights", false);
            BankSave(gv_Banks[EventPlayer()]);
        }

        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(284)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(291)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(277)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(290)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(293)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(278)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(288)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(276)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(287)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(280)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(297)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(282)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(62)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(63)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(313)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(315)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(316)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(303)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(323)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(305)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(302)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(301)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(307)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(28)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(438)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(309)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(321)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(311)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(281)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(283)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_MainActorofUnit(UnitFromId(279)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(188)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(275)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(167)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(274)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(166)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(273)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(158)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(272)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(118)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(271)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(168)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(270)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(164)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(269)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(165)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(169)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(268)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(170)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(267)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(266)), true);
        gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), ActorFromDoodad(DoodadFromId(171)), true);
        auto80272E3C_var = 1;
        for ( ; auto80272E3C_var <= auto80272E3C_ae; auto80272E3C_var += 1 ) {
            if ((gv_stadiums.lv_stadiumLights[auto80272E3C_var] != null)) {
                gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), gv_stadiums.lv_stadiumLights[auto80272E3C_var], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeShowHideLightSettings_Init () {
    gt_ChangeShowHideLightSettings = TriggerCreate("gt_ChangeShowHideLightSettings_Func");
    TriggerAddEventDialogControl(gt_ChangeShowHideLightSettings, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Hotkey Settings
//--------------------------------------------------------------------------------------------------
bool gt_ChangeHotkeySettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_optionsItems[9]) || (EventDialogControl() == gv_optionsItems[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_optionsItems[9]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[9], EventPlayer()) == true)) {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Hotkeys", true);
            BankSave(gv_Banks[EventPlayer()]);
        }

        gf_SetAllHotkeys3(EventPlayer(), true);
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[8], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[1], StringExternal("Param/Value/9E40CDA1"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[2], StringExternal("Param/Value/ECB4216C"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[3], StringExternal("Param/Value/D6BCD7EB"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((EventDialogControl() == gv_optionsItems[9]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[9], EventPlayer()) == false)) {
            if ((gv_ranked == true)) {
                BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Hotkeys", false);
                BankSave(gv_Banks[EventPlayer()]);
            }

            gf_SetAllHotkeys3(EventPlayer(), false);
            libNtve_gf_SetDialogItemChecked(gv_optionsItems[8], true, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[1], StringExternal("Param/Value/287F1EE3"), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[2], StringExternal("Param/Value/77CF047B"), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[3], StringExternal("Param/Value/D3E52683"), PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((EventDialogControl() == gv_optionsItems[8]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[8], EventPlayer()) == false)) {
                if ((gv_ranked == true)) {
                    BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Hotkeys", true);
                    BankSave(gv_Banks[EventPlayer()]);
                }

                gf_SetAllHotkeys3(EventPlayer(), true);
                libNtve_gf_SetDialogItemChecked(gv_optionsItems[9], true, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[1], StringExternal("Param/Value/75F9ACFA"), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[2], StringExternal("Param/Value/4820BD08"), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[3], StringExternal("Param/Value/95CB910F"), PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((EventDialogControl() == gv_optionsItems[8]) && (libNtve_gf_DialogItemIsChecked(gv_optionsItems[8], EventPlayer()) == true)) {
                    if ((gv_ranked == true)) {
                        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "Hotkeys", false);
                        BankSave(gv_Banks[EventPlayer()]);
                    }

                    gf_SetAllHotkeys3(EventPlayer(), false);
                    libNtve_gf_SetDialogItemChecked(gv_optionsItems[9], false, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[1], StringExternal("Param/Value/B771BA01"), PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[2], StringExternal("Param/Value/6B1FAE1D"), PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_uIElements.lv_cDHotkeyZXCV1234[3], StringExternal("Param/Value/78E8D981"), PlayerGroupSingle(EventPlayer()));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeHotkeySettings_Init () {
    gt_ChangeHotkeySettings = TriggerCreate("gt_ChangeHotkeySettings_Func");
    TriggerAddEventDialogControl(gt_ChangeHotkeySettings, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Buttons
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[10]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "uihide", false);
            BankSave(gv_Banks[EventPlayer()]);
        }

        DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(EventPlayer()), c_anchorBottom, 0, -20);
        DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(EventPlayer()), c_anchorBottomRight, 0, 0);
        DialogSetPosition(gv_PowerBarDialog[EventPlayer()], c_anchorBottom, 0, 200);
        if (((gv_Players[2] == EventPlayer()) || (gv_Players[6] == EventPlayer()))) {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(EventPlayer()), true);
        }

    }
    else {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "uihide", true);
            BankSave(gv_Banks[EventPlayer()]);
        }

        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeAllianceButton, false);
        DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(EventPlayer()), c_anchorBottom, 0, -9999);
        DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(EventPlayer()), c_anchorBottomRight, 0, -9999);
        DialogSetPosition(gv_PowerBarDialog[EventPlayer()], c_anchorBottom, 0, 75);
        if ((gv_uIElements.lv_chargebarIsBeingChanged[EventPlayer()] == false)) {
            DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupSingle(EventPlayer()), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideButtons_Init () {
    gt_ShowHideButtons = TriggerCreate("gt_ShowHideButtons_Func");
    TriggerAddEventDialogControl(gt_ShowHideButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CD Boost
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCDBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cdmax;
    fixed lv_cdcurrent;
    int lv_barwidth;
    int lv_barheight;
    bool lv_doubleboostcd;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barwidth = DialogControlGetWidth(gv_uIElements.lv_cDBARZXCV1234[1], EventPlayer());
    lv_barheight = DialogControlGetHeight(gv_uIElements.lv_cDBARZXCV1234[1], EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateChargeProgress(UnitGetOwner(EventUnit()), EventUnit());
    if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], EventPlayer()) == false)) {
        lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "Check", "GuardianShield");
        lv_cdmax = UnitAbilityGetCooldown(EventUnit(), "Check", "GuardianShield");
        DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[1], PlayerGroupSingle(EventPlayer()), true);
        while ((lv_cdcurrent > 0.1)) {
            lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "Check", "GuardianShield");
            DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[1], PlayerGroupSingle(EventPlayer()), FixedToInt(((lv_cdcurrent / lv_cdmax) * lv_barwidth)), lv_barheight);
            Wait(0.0625, c_timeGame);
        }
        DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[1], PlayerGroupSingle(EventPlayer()), lv_barwidth, lv_barheight);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCDBoost_Init () {
    gt_UpdateCDBoost = TriggerCreate("gt_UpdateCDBoost_Func");
    TriggerAddEventUnitAbility(gt_UpdateCDBoost, null, AbilityCommand("Check", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CD Slidestop
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCDSlidestop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cdmax;
    fixed lv_cdcurrent;
    int lv_barwidth;
    int lv_barheight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barwidth = DialogControlGetWidth(gv_uIElements.lv_cDBARZXCV1234[2], EventPlayer());
    lv_barheight = DialogControlGetHeight(gv_uIElements.lv_cDBARZXCV1234[2], EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "SlideStop", "GuardianShield");
    lv_cdmax = UnitAbilityGetCooldown(EventUnit(), "SlideStop", "GuardianShield");
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    while ((lv_cdcurrent > 0.1)) {
        lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "SlideStop", "GuardianShield");
        DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), FixedToInt(((lv_cdcurrent / lv_cdmax) * lv_barwidth)), lv_barheight);
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), lv_barwidth, lv_barheight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCDSlidestop_Init () {
    gt_UpdateCDSlidestop = TriggerCreate("gt_UpdateCDSlidestop_Func");
    TriggerAddEventUnitAbility(gt_UpdateCDSlidestop, null, AbilityCommand("SlideStop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CD Onetimer
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCDOnetimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cdmax;
    fixed lv_cdcurrent;
    int lv_barwidth;
    int lv_barheight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barwidth = DialogControlGetWidth(gv_uIElements.lv_cDBARZXCV1234[3], EventPlayer());
    lv_barheight = DialogControlGetHeight(gv_uIElements.lv_cDBARZXCV1234[3], EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "NewOneTimer", "Abil/NewOneTimer");
    lv_cdmax = UnitAbilityGetCooldown(EventUnit(), "NewOneTimer", "Abil/NewOneTimer");
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[3], PlayerGroupSingle(EventPlayer()), true);
    while ((lv_cdcurrent > 0.1)) {
        lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "NewOneTimer", "Abil/NewOneTimer");
        DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(EventPlayer()), FixedToInt(((lv_cdcurrent / lv_cdmax) * lv_barwidth)), lv_barheight);
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[3], PlayerGroupSingle(EventPlayer()), lv_barwidth, lv_barheight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCDOnetimer_Init () {
    gt_UpdateCDOnetimer = TriggerCreate("gt_UpdateCDOnetimer_Func");
    TriggerAddEventUnitAbility(gt_UpdateCDOnetimer, null, AbilityCommand("NewOneTimer", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update CD Goalieshield
//--------------------------------------------------------------------------------------------------
bool gt_UpdateCDGoalieshield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cdmax;
    fixed lv_cdcurrent;
    int lv_barwidth;
    int lv_barheight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_barwidth = DialogControlGetWidth(gv_uIElements.lv_cDBARZXCV1234[2], EventPlayer());
    lv_barheight = DialogControlGetHeight(gv_uIElements.lv_cDBARZXCV1234[2], EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "NewForceField", "NewGoalieBlock");
    lv_cdmax = UnitAbilityGetCooldown(EventUnit(), "NewForceField", "NewGoalieBlock");
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[2], PlayerGroupSingle(EventPlayer()), true);
    while ((lv_cdcurrent > 0.1)) {
        lv_cdcurrent = UnitAbilityGetCooldown(EventUnit(), "NewForceField", "NewGoalieBlock");
        DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), FixedToInt(((lv_cdcurrent / lv_cdmax) * lv_barwidth)), lv_barheight);
        Wait(0.0625, c_timeGame);
    }
    DialogControlSetVisible(gv_uIElements.lv_cDBGZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBGDARKZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_uIElements.lv_cDHotkeyZXCV1234[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetSize(gv_uIElements.lv_cDBARZXCV1234[2], PlayerGroupSingle(EventPlayer()), lv_barwidth, lv_barheight);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateCDGoalieshield_Init () {
    gt_UpdateCDGoalieshield = TriggerCreate("gt_UpdateCDGoalieshield_Func");
    TriggerAddEventUnitAbility(gt_UpdateCDGoalieshield, null, AbilityCommand("NewForceField", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Is Checked
//--------------------------------------------------------------------------------------------------
bool gt_GoalieOptIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto040664FB_g;
    int auto040664FB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_optionsItems[1])) {
        gv_options_OptOutGoalie[EventPlayer()] = libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer());
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_optionsItems[2], false, PlayerGroupSingle(EventPlayer()));
            gv_options_OptInGoalie[EventPlayer()] = false;
        }

        if ((gv_ranked == true)) {
            gf_SaveBank(EventPlayer());
        }

    }

    if ((EventDialogControl() == gv_optionsItems[2])) {
        gv_options_OptInGoalie[EventPlayer()] = libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer());
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_optionsItems[1], false, PlayerGroupSingle(EventPlayer()));
            gv_options_OptOutGoalie[EventPlayer()] = false;
        }

        if ((gv_ranked == true)) {
            gf_SaveBank(EventPlayer());
        }

    }

    if ((EventDialogControl() == gv_optionsItems[3])) {
        gv_options_CursorBoost[EventPlayer()] = libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer());
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Options", "Boost", libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()));
        BankSave(gv_Banks[EventPlayer()]);
    }

    if ((EventDialogControl() == gv_watchlist_Dialog_Item)) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
            gv_votekick += 1;
        }
        else {
            gv_votekick -= 1;
        }
        if ((gv_votekick > PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, gv_votekickPlayer)))) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6C6291AB"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0F4BAE53"));
            GameOver(gv_votekickPlayer, c_gameOverDefeat, false, false);
            DialogControlSetVisible(gv_watchlist_Dialog_Item2, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_watchlist_Dialog_Item, PlayerGroupAll(), false);
            gf_ForfeitValidate();
            return true;
        }

        auto040664FB_g = PlayerGroupAlliance(c_playerGroupAlly, gv_votekickPlayer);
        auto040664FB_var = -1;
        while (true) {
            auto040664FB_var = PlayerGroupNextPlayer(auto040664FB_g, auto040664FB_var);
            if (auto040664FB_var < 0) { break; }
            if ((libNtve_gf_DialogItemIsChecked(gv_watchlist_Dialog_Item, auto040664FB_var) == false)) {
                return true;
            }

        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/92B96FA0"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/7F0091A6"));
        GameOver(gv_votekickPlayer, c_gameOverDefeat, true, true);
        DialogControlSetVisible(gv_watchlist_Dialog_Item2, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_watchlist_Dialog_Item, PlayerGroupAll(), false);
        gf_ForfeitValidate();
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalieOptIn_Init () {
    gt_GoalieOptIn = TriggerCreate("gt_GoalieOptIn_Func");
    TriggerAddEventDialogControl(gt_GoalieOptIn, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Marker Show/Hide
//--------------------------------------------------------------------------------------------------
bool gt_PuckMarkerShowHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[12]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "markerhide", true);
            BankSave(gv_Banks[EventPlayer()]);
        }

        DialogControlSetVisible(gv_puckMarkerImage, PlayerGroupSingle(EventPlayer()), false);
        gv_puckMarkerShow[EventPlayer()] = false;
    }
    else {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "markerhide", false);
            BankSave(gv_Banks[EventPlayer()]);
        }

        DialogControlSetVisible(gv_puckMarkerImage, PlayerGroupSingle(EventPlayer()), true);
        gv_puckMarkerShow[EventPlayer()] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PuckMarkerShowHide_Init () {
    gt_PuckMarkerShowHide = TriggerCreate("gt_PuckMarkerShowHide_Func");
    TriggerAddEventDialogControl(gt_PuckMarkerShowHide, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Name Tag Show/Hide
//--------------------------------------------------------------------------------------------------
bool gt_NameTagShowHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[13]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "nametaghide", true);
            BankSave(gv_Banks[EventPlayer()]);
        }

        TextTagShow(gv_TextTags[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        gv_nameTagShow[EventPlayer()] = false;
    }
    else {
        if ((gv_ranked == true)) {
            BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "nametaghide", false);
            BankSave(gv_Banks[EventPlayer()]);
        }

        TextTagShow(gv_TextTags[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        gv_nameTagShow[EventPlayer()] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NameTagShowHide_Init () {
    gt_NameTagShowHide = TriggerCreate("gt_NameTagShowHide_Func");
    TriggerAddEventDialogControl(gt_NameTagShowHide, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vertical Camera
//--------------------------------------------------------------------------------------------------
bool gt_VerticalCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[14]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[15], false, PlayerGroupSingle(EventPlayer()));
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "mirrorview", false);
        BankSave(gv_Banks[EventPlayer()]);
        gv_mirroredCamera[EventPlayer()] = false;
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "verticalview", true);
        BankSave(gv_Banks[EventPlayer()]);
        gv_verticalCamera[EventPlayer()] = true;
        gf_ShowScoreboard3(EventPlayer(), true, false);
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "verticalview", false);
        BankSave(gv_Banks[EventPlayer()]);
        gv_verticalCamera[EventPlayer()] = false;
        gf_ShowScoreboard3(EventPlayer(), true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VerticalCamera_Init () {
    gt_VerticalCamera = TriggerCreate("gt_VerticalCamera_Func");
    TriggerAddEventDialogControl(gt_VerticalCamera, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mirrored Camera
//--------------------------------------------------------------------------------------------------
bool gt_MirroredCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_optionsItems[15]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemChecked(gv_optionsItems[14], false, PlayerGroupSingle(EventPlayer()));
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "verticalview", false);
        BankSave(gv_Banks[EventPlayer()]);
        gv_verticalCamera[EventPlayer()] = false;
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "mirrorview", true);
        BankSave(gv_Banks[EventPlayer()]);
        gv_mirroredCamera[EventPlayer()] = true;
        gf_ShowScoreboard3(EventPlayer(), true, false);
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Settings", "mirrorview", false);
        BankSave(gv_Banks[EventPlayer()]);
        gv_mirroredCamera[EventPlayer()] = false;
        gf_ShowScoreboard3(EventPlayer(), true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MirroredCamera_Init () {
    gt_MirroredCamera = TriggerCreate("gt_MirroredCamera_Func");
    TriggerAddEventDialogControl(gt_MirroredCamera, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adjust Camera Options
//--------------------------------------------------------------------------------------------------
bool gt_AdjustCameraOptions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_options_Camera_Dialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueDistance, libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 1.0, -1, 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdjustCameraOptions_Init () {
    gt_AdjustCameraOptions = TriggerCreate("gt_AdjustCameraOptions_Func");
    TriggerAddEventDialogControl(gt_AdjustCameraOptions, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: run 3k intro
//--------------------------------------------------------------------------------------------------
bool gt_run3kintro_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lgoo1;
    int lv_text1;
    int lv_text2;
    int lv_bg1;
    int lv_tempdialog;
    int lv_blackmaskdialog;
    int lv_blackmask1;
    int lv_blackmask2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lgoo1 = c_invalidDialogControlId;
    lv_text1 = c_invalidDialogControlId;
    lv_text2 = c_invalidDialogControlId;
    lv_bg1 = c_invalidDialogControlId;
    lv_tempdialog = c_invalidDialogId;
    lv_blackmaskdialog = c_invalidDialogId;
    lv_blackmask1 = c_invalidDialogControlId;
    lv_blackmask2 = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Makefuzzies();
    SoundPlayForPlayer(SoundLink("CityPlatformIntense", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2200, 1130, c_anchorBottom, 0, 0, StringToText(""), "3kbg1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlDestroy(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 1832, c_anchorBottom, 0, 0, StringToText(""), "jerseys\\jerseybackup\\3kbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlDestroy(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2200, 1130, c_anchorBottom, 0, 0, StringToText(""), "3kbg2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlDestroy(DialogControlLastCreated());
    gv__3kIntro.lv_logoDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 480, 270, c_anchorCenter, 0, 0, StringToText(""), "basetradetvs.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_lgoo1 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlFadeTransparency(lv_lgoo1, PlayerGroupAll(), 1.5, 100.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 275, c_anchorCenter, 0, 0, StringToText(""), "basetradetvs2.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 100.0);
    Wait(2.0, c_timeGame);
    DialogCreate(3000, 3000, c_anchorBottom, 0, 0, true);
    gv__3kIntro.lv_blackBG = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2500, 2500, c_anchorBottom, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2500, 2500, c_anchorBottom, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 1832, c_anchorBottom, 0, 0, StringToText(""), "jerseys\\jerseybackup\\3kbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_Movebgup(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorBottom, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    DialogDestroy(gv__3kIntro.lv_logoDialog);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    gv__3kIntro.lv_logoDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 200, c_anchorCenter, 0, -25, StringExternal("Param/Value/8B4EA458"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_Moveimageleft3(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52Bold", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    lv_text1 = DialogControlLastCreated();
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 200, c_anchorCenter, 0, 25, StringExternal("Param/Value/27861399"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_Moveimageright(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52Bold", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    lv_text2 = DialogControlLastCreated();
    Wait(0.5, c_timeGame);
    DialogControlFadeTransparency(lv_text1, PlayerGroupAll(), 1.5, 100.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_text2, PlayerGroupAll(), 1.5, 100.0);
    Wait(2.0, c_timeGame);
    DialogCreate(3000, 3000, c_anchorBottom, 0, 0, true);
    lv_tempdialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2200, 1130, c_anchorBottom, 0, 0, StringToText(""), "3kbg1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_bg1 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    gf_Moveimageleft(DialogControlLastCreated());
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateDialogItemLabel(gv__3kIntro.lv_logoDialog, 800, 200, c_anchorCenter, 0, -25, StringExternal("Param/Value/AC23D302"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_Moveimageleft3(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52Bold", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    lv_text1 = DialogControlLastCreated();
    Wait(1.5, c_timeGame);
    DialogDestroy(lv_tempdialog);
    libNtve_gf_CreateDialogItemLabel(gv__3kIntro.lv_logoDialog, 500, 200, c_anchorCenter, 0, 25, StringExternal("Param/Value/977A8AB3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_Moveimageright(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52Bold", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    lv_text2 = DialogControlLastCreated();
    Wait(0.5, c_timeGame);
    DialogControlFadeTransparency(lv_text1, PlayerGroupAll(), 1.5, 100.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_text2, PlayerGroupAll(), 1.5, 100.0);
    Wait(2.0, c_timeGame);
    DialogCreate(3000, 3000, c_anchorBottom, 0, 0, true);
    lv_tempdialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2400, 1350, c_anchorBottom, 0, 0, StringToText(""), "3kbg2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_bg1 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    gf_Moveimageright2(DialogControlLastCreated());
    Wait(4.0, c_timeGame);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateDialogItemImage(gv__3kIntro.lv_logoDialog, 523, 184, c_anchorCenter, 0, 0, StringToText(""), "zh3klogo.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    Wait(4.0, c_timeGame);
    DialogDestroy(lv_tempdialog);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeGame);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_blackmaskdialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 1000);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2500, 2500, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    lv_blackmask1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2500, 2500, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    lv_blackmask2 = DialogControlLastCreated();
    Wait(1.5, c_timeGame);
    gv__3kIntro.lv_stopeverything = true;
    DialogDestroy(lv_tempdialog);
    DialogDestroy(gv__3kIntro.lv_blackBG);
    DialogDestroy(gv__3kIntro.lv_logoDialog);
    DialogDestroy(gv__3kIntro.lv_textdialog);
    DialogControlFadeTransparency(lv_blackmask1, PlayerGroupAll(), 2.0, 100.0);
    DialogControlFadeTransparency(lv_blackmask2, PlayerGroupAll(), 2.0, 100.0);
    gf_Destroyfinaldialog(lv_blackmaskdialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_run3kintro_Init () {
    gt_run3kintro = TriggerCreate("gt_run3kintro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initial intro
//--------------------------------------------------------------------------------------------------
bool gt_UIInitialintro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_skipintro == false)) {
        gf_InitTeamSelection();
        SoundPlay(SoundLink("IntroCrowd", -1), PlayerGroupAll(), 100.0, 0.0);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
        DialogCreate(3500, 3000, c_anchorCenter, 0, 0, true);
        gv_uIIntro.lv_uIIntroMainDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 3500, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIBlackBG = DialogControlLastCreated();
        DialogSetVisible(gv_uIIntro.lv_uIIntroMainDialog, PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 1289, 1080, c_anchorCenter, 800, 0, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIIceBG3 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 1289, 1080, c_anchorCenter, 800, 0, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIIceBG1 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 1289, 1080, c_anchorCenter, -1250, -100, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIIceBG4 = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 1289, 1080, c_anchorCenter, -1250, -100, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIIceBG2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uIIceBG2, 180, PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uIIceBG4, 180, PlayerGroupAll());
        gf_MoveIcebg1(gv_uIIntro.lv_uIIceBG1, 4, 1289, 1080, 999.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uIIceBG2, 2, 1289, 1080, 999.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uIIceBG3, -2, 1289, 1080, 999.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uIIceBG4, -2, 1289, 1080, 999.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG1, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG2, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG3, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG4, PlayerGroupAll(), 0.0, 100.0);
        Wait(1.0, c_timeGame);
        gf_Team3UILoadinPregameSavedGamesUI();
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG1, PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG2, PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG3, PlayerGroupAll(), 0.0, 80.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG4, PlayerGroupAll(), 0.0, 80.0);
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uIIceBG1, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uIIceBG2, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uIIceBG3, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uIIceBG4, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 550, 3000, c_anchorCenter, 800, 0, StringToText(""), "Assets\\Textures\\lightcone3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpotlight1 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uISpotlight1, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uISpotlight1, 200, PlayerGroupAll());
        gf_MoveIcebg2(gv_uIIntro.lv_uISpotlight1, 3);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight1, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight1, PlayerGroupAll(), 2.0, 85.0);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 750, 3000, c_anchorCenter, -300, 0, StringToText(""), "Assets\\Textures\\lightcone3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpotlight2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uISpotlight2, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uISpotlight2, 205, PlayerGroupAll());
        gf_MoveIcebg2(gv_uIIntro.lv_uISpotlight2, 8);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight2, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight2, PlayerGroupAll(), 2.0, 80.0);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 2000, 3000, c_anchorCenter, 300, 0, StringToText(""), "Assets\\Textures\\lightcone3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpotlight3 = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight3, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight3, PlayerGroupAll(), 2.0, 70.0);
        libNtve_gf_SetDialogItemBlendMode(gv_uIIntro.lv_uISpotlight3, c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uISpotlight3, 205, PlayerGroupAll());
        gf_MoveIcebg2(gv_uIIntro.lv_uISpotlight3, 8);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 833, 833, c_anchorCenter, 0, 0, StringToText(""), "Intro\\zh-load4.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpinner1 = DialogControlLastCreated();
        gf_SpinDialogItem(gv_uIIntro.lv_uISpinner1, 4, 999.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uISpinner1, -100, 2500, 2500, 1.3);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 833, 833, c_anchorCenter, 0, 0, StringToText(""), "Intro\\zh-load4.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpinner3 = DialogControlLastCreated();
        gf_SpinDialogItem(gv_uIIntro.lv_uISpinner3, 4, 999.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uISpinner3, -100, 2500, 2500, 1.3);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 833, 833, c_anchorCenter, 0, 0, StringToText(""), "Intro\\zh-load4.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uISpinner2 = DialogControlLastCreated();
        gf_SpinDialogItem(gv_uIIntro.lv_uISpinner2, 4, 3.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uISpinner2, -90, 2500, 2500, 2.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpinner2, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.2, c_timeGame);
        gf_MoveIcebg1(gv_uIIntro.lv_uISpinner1, 2, DialogControlGetWidth(gv_uIIntro.lv_uISpinner1, 1), DialogControlGetHeight(gv_uIIntro.lv_uISpinner1, 1), 999.0);
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 800, 800, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\flare2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIIntro.lv_uIGalre1 = DialogControlLastCreated();
        gf_SpinDialogItem(gv_uIIntro.lv_uIGalre1, -3, 99.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre1, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre1, PlayerGroupAll(), 1.0, 0.0);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 3000, 2000, c_anchorCenter, 700, 0, StringToText(""), "Assets\\Textures\\planetviewkaldrsunflare_diff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
        gv_uIIntro.lv_uIGalre2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uIGalre2, 330, PlayerGroupAll());
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre2, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre2, PlayerGroupAll(), 2.0, 0.0);
        libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 3000, 2000, c_anchorCenter, -1400, -300, StringToText(""), "Assets\\Textures\\planetviewkaldrsunflare_diff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
        gv_uIIntro.lv_uIGalre3 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRotation(gv_uIIntro.lv_uIGalre3, 330, PlayerGroupAll());
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre3, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre3, PlayerGroupAll(), 2.0, 30.0);
        if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0010")) {
            libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 450, 143, c_anchorCenter, 0, 0, StringToText(""), "zhpl-intrologo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_uIIntro.lv_uILogo = DialogControlLastCreated();
            DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 2.0, 20.0);
            gf_MoveIcebg1(gv_uIIntro.lv_uILogo, 1, 450, 143, 99.0);
        }
        else {
            if ((GameAttributeGameValue("2") == "0002") && (GameAttributeGameValue("7") == "0011")) {
                libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 450, 143, c_anchorCenter, 0, 0, StringToText(""), "zhl-intrologo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_uIIntro.lv_uILogo = DialogControlLastCreated();
                DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 2.0, 20.0);
                gf_MoveIcebg1(gv_uIIntro.lv_uILogo, 1, 450, 143, 99.0);
            }
            else {
                libNtve_gf_CreateDialogItemImage(gv_uIIntro.lv_uIIntroMainDialog, 300, 95, c_anchorCenter, 0, 0, StringToText(""), "Intro\\zh-logointro.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_uIIntro.lv_uILogo = DialogControlLastCreated();
                DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 2.0, 20.0);
                gf_MoveIcebg1(gv_uIIntro.lv_uILogo, 1, 300, 95, 99.0);
            }
        }
        Wait(0.8, c_timeGame);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpinner3, PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre1, PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre3, PlayerGroupAll(), 6.0, 100.0);
        Wait(0.8, c_timeGame);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre2, PlayerGroupAll(), 0.5, 40.0);
        Wait(0.8, c_timeGame);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre2, PlayerGroupAll(), 0.5, 0.0);
        Wait(0.8, c_timeGame);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIGalre2, PlayerGroupAll(), 3.0, 100.0);
        Wait(1.6, c_timeGame);
        SoundPlay(SoundLink("IntroWoosh", -1), PlayerGroupAll(), 100.0, 0.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight1, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight2, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpotlight3, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG1, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG2, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG3, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIIceBG4, PlayerGroupAll(), 0.5, 100.0);
        gv_uIIntro.lv_uIIceResize = false;
        gv_uIIntro.lv_uISpinners = false;
        gv_uIIntro.lv_uISpotlightmovement = false;
        Wait(0.0625, c_timeGame);
        gv_uIIntro.lv_uIIceResize = true;
        gf_MoveIcebg1(gv_uIIntro.lv_uISpinner1, 350, DialogControlGetWidth(gv_uIIntro.lv_uISpinner1, 1), DialogControlGetHeight(gv_uIIntro.lv_uISpinner1, 1), 2.0);
        gf_MoveIcebg1(gv_uIIntro.lv_uILogo, 800, DialogControlGetWidth(gv_uIIntro.lv_uILogo, 1), DialogControlGetHeight(gv_uIIntro.lv_uILogo, 1), 2.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpinner1, PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpinner2, PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uISpinner3, PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_uIIntro.lv_uILogo, PlayerGroupAll(), 0.1, 100.0);
        Wait(2.0, c_timeGame);
        DialogControlFadeTransparency(gv_uIIntro.lv_uIBlackBG, PlayerGroupAll(), 3.0, 100.0);
        gv_initialVote.lv_iscountdownreadytoshow = true;
        if ((gv_initialVote.lv_teamSelectModeEnabled == true)) {
            DialogSetVisible(gv_initialVote.lv_fullscreenbgdialog, PlayerGroupAll(), true);
            while (!((gv_initialVote.lv_readytoproceedtopregamestats == true))) {
                Wait(0.1, c_timeGame);
            }
        }

        gf_Setboundsformaingame();
        gf_SetNewAlliancesandSettings();
        TriggerEnable(gt_CheckForfeit, true);
        if (((GameAttributeGameValue("2") == "0003") || (gv_testredlinemode == true))) {
            TriggerExecute(gt_RedlineInit, true, false);
            while (!((gv_redlineMode.lv_redlineAllReady == true))) {
                Wait(0.1, c_timeGame);
            }
        }
        else {
            TriggerExecute(gt_PregameStats, true, false);
            Wait(4.0, c_timeGame);
            DialogDestroy(gv_uIIntro.lv_uIIntroMainDialog);
        }
        if ((gv_skipstart == true)) {
            gv_FaceoffTimer -= 30;
        }

    }
    else {
        TriggerEnable(gt_CheckForfeit, true);
        gf_Setboundsformaingame();
        gf_SetNewAlliancesandSettings();
        gv_FaceoffTimer -= 30;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UIInitialintro_Init () {
    gt_UIInitialintro = TriggerCreate("gt_UIInitialintro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zamboni
//--------------------------------------------------------------------------------------------------
bool gt_Zamboni_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(UnitFromId(194), 400.0, 700.0, 200.0);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(UnitFromId(194), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(114)), c_orderQueueReplace);
    Wait(16.0, c_timeGame);
    UnitRemove(UnitFromId(194));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zamboni_Init () {
    gt_Zamboni = TriggerCreate("gt_Zamboni_Func");
    TriggerAddEventMapInit(gt_Zamboni);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Status Hotkey - Down
//--------------------------------------------------------------------------------------------------
bool gt_StatusHotkeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tabStatVars.lv_tabShowCharges[EventPlayer()] <= 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0170D99C"));
    }
    else {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == true)) {
            DialogSetVisible(gv_team3UI.lv_panels[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[2], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[3], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_team3UI.lv_panels[4], PlayerGroupSingle(EventPlayer()), false);
        }

        gv_tabStatVars.lv_tabShowCharges[EventPlayer()] -= 1;
        gf_CreateInstantStatsScreen(EventPlayer());
        gf_ResetTabstatCDs(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatusHotkeyDown_Init () {
    gt_StatusHotkeyDown = TriggerCreate("gt_StatusHotkeyDown_Func");
    TriggerAddEventKeyPressed(gt_StatusHotkeyDown, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Status Hotkey - up
//--------------------------------------------------------------------------------------------------
bool gt_StatusHotkeyup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroy(gv_team3UI.lv_quickStatScreenDialog[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StatusHotkeyup_Init () {
    gt_StatusHotkeyup = TriggerCreate("gt_StatusHotkeyup_Func");
    TriggerAddEventKeyPressed(gt_StatusHotkeyup, c_playerAny, c_keyTab, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PossesionTimeAdd
//--------------------------------------------------------------------------------------------------
bool gt_PossesionTimeAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_running;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_running = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_running == true)) {
        if ((gv_Possession > 0)) {
            gv_inGameStatsPossesionTime[gv_Possession] += 1;
            gv_stats_SkaterPossessionTime[gv_Possession] += 1;
        }

        if ((gv_stoppageOfPlay == false)) {
            gv_stats_SkaterTime[gv_Players[1]] += 1;
            if ((gv_pullGoalie[1] == false)) {
                gv_stats_SkaterTime[gv_Players[2]] += 1;
            }

            gv_stats_SkaterTime[gv_Players[3]] += 1;
            gv_stats_SkaterTime[gv_Players[4]] += 1;
            gv_stats_SkaterTime[gv_Players[5]] += 1;
            if ((gv_pullGoalie[2] == false)) {
                gv_stats_SkaterTime[gv_Players[6]] += 1;
            }

            gv_stats_SkaterTime[gv_Players[7]] += 1;
            gv_stats_SkaterTime[gv_Players[8]] += 1;
        }

        Wait(1.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PossesionTimeAdd_Init () {
    gt_PossesionTimeAdd = TriggerCreate("gt_PossesionTimeAdd_Func");
    TriggerAddEventMapInit(gt_PossesionTimeAdd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AwardGamePlayed
//--------------------------------------------------------------------------------------------------
bool gt_AwardGamePlayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto417188E3_ae = 8;
    int auto417188E3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ranked == true)) {
        gv_statsOK = true;
        auto417188E3_var = 1;
        for ( ; auto417188E3_var <= auto417188E3_ae; auto417188E3_var += 1 ) {
            gv_stats_GamesPlayed[auto417188E3_var] += 1;
            gf_SaveBank(auto417188E3_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AwardGamePlayed_Init () {
    gt_AwardGamePlayed = TriggerCreate("gt_AwardGamePlayed_Func");
    TriggerAddEventTimeElapsed(gt_AwardGamePlayed, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initiate time in net timers
//--------------------------------------------------------------------------------------------------
bool gt_Initiatetimeinnettimers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto482E6DB3_ae = 15;
    int auto482E6DB3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto482E6DB3_var = 1;
    for ( ; auto482E6DB3_var <= auto482E6DB3_ae; auto482E6DB3_var += 1 ) {
        TimerStart(gv_timeinnet.lv_nettimeTimers[auto482E6DB3_var], 99999.0, false, c_timeReal);
        TimerPause(TimerLastStarted(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initiatetimeinnettimers_Init () {
    gt_Initiatetimeinnettimers = TriggerCreate("gt_Initiatetimeinnettimers_Func");
    TriggerAddEventMapInit(gt_Initiatetimeinnettimers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pregame Stats
//--------------------------------------------------------------------------------------------------
bool gt_PregameStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team1Players;
    int lv_team2Players;
    int lv_dialogheight;
    fixed[13] lv_zoom;
    int lv_coloffset1;
    int lv_coloffset2;
    int lv_coloffset3;
    int lv_coloffset4;
    int lv_yoffset;

    // Automatic Variable Declarations
    playergroup auto1D0DCA20_g;
    int auto1D0DCA20_var;
    playergroup auto2D03A605_g;
    int auto2D03A605_var;
    playergroup auto4AB4ED7E_g;
    int auto4AB4ED7E_var;
    playergroup auto425A8C3C_g;
    int auto425A8C3C_var;

    // Variable Initialization
    lv_coloffset1 = 15;
    lv_coloffset2 = 300;
    lv_coloffset3 = 400;
    lv_coloffset4 = 500;
    lv_yoffset = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_BuildPregameStats();
    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(gv_pUCK), false);
    gv_introOver = true;
    if ((GameAttributeGameValue("2") == "0002")) {
        gf_JetFlyby();
        auto2D03A605_g = PlayerGroupActive();
        auto2D03A605_var = -1;
        while (true) {
            auto2D03A605_var = PlayerGroupNextPlayer(auto2D03A605_g, auto2D03A605_var);
            if (auto2D03A605_var < 0) { break; }
            gf_ShowScoreboard3(auto2D03A605_var, true, false);
            CameraSave(auto2D03A605_var);
            CameraLockInput(auto2D03A605_var, true);
            libNtve_gf_SwooshCamera(auto2D03A605_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), -5.0, PointFromId(286), 0.0);
            CameraSetValue(auto2D03A605_var, c_cameraValueHeightOffset, 10.0, 0.0, -1, 10.0);
            CameraLookAt(auto2D03A605_var, libNtve_gf_PointWithZOffset(PointFromId(112), 0.0), 0.0, -1, 10.0);
            CameraLookAt(auto2D03A605_var, libNtve_gf_PointWithZOffset(PointFromId(59), 0.0), 15.0, -1, 10.0);
            CameraSetValue(auto2D03A605_var, c_cameraValueHeightOffset, 5.0, 15.0, -1, 10.0);
            CameraPan(auto2D03A605_var, PointFromId(289), 15.0, -1, 10.0, false);
        }
    }
    else {
        auto1D0DCA20_g = PlayerGroupActive();
        auto1D0DCA20_var = -1;
        while (true) {
            auto1D0DCA20_var = PlayerGroupNextPlayer(auto1D0DCA20_g, auto1D0DCA20_var);
            if (auto1D0DCA20_var < 0) { break; }
            gf_ShowScoreboard3(auto1D0DCA20_var, true, false);
            CameraSave(auto1D0DCA20_var);
            CameraLockInput(auto1D0DCA20_var, true);
            CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
            CameraSetValue(auto1D0DCA20_var, c_cameraValueDistance, (CameraGetDistance(auto1D0DCA20_var)+85
), 0.0, -1, 10.0);
            CameraSetValue(auto1D0DCA20_var, c_cameraValuePitch, 40.0, 0.0, -1, 15.0);
            CameraRestore(auto1D0DCA20_var, 15.0, -1, 10.0);
            if ((gv_skipstart == false)) {
                CameraPan(auto1D0DCA20_var, PointFromId(112), 15.0, -1, 7.0, false);
            }
            else {
                CameraPan(auto1D0DCA20_var, PointFromId(112), 2.0, -1, 7.0, false);
            }
        }
    }
    if ((GameAttributeGameValue("2") == "0001")) {
        DialogSetVisible(gv_uIPregameStats.lv_canvasDialog, PlayerGroupAll(), true);
    }
    else {
        DialogSetVisible(gv_uIPregameStats.lv_canvasDialog, PlayerGroupAll(), false);
    }
    if ((gv_skipstart == false)) {
        Wait(16.0, c_timeGame);
    }
    else {
        Wait(2.0, c_timeGame);
    }
    DialogSetVisible(gv_uIPregameStats.lv_canvasDialog, PlayerGroupAll(), false);
    auto4AB4ED7E_g = PlayerGroupAll();
    auto4AB4ED7E_var = -1;
    while (true) {
        auto4AB4ED7E_var = PlayerGroupNextPlayer(auto4AB4ED7E_g, auto4AB4ED7E_var);
        if (auto4AB4ED7E_var < 0) { break; }
        if ((gv_team3UI.lv_savegamePregamePromptDialog[auto4AB4ED7E_var] != c_invalidDialogId)) {
            DialogDestroy(gv_team3UI.lv_savegamePregamePromptDialog[auto4AB4ED7E_var]);
        }

    }
    Wait(1.0, c_timeGame);
    auto425A8C3C_g = PlayerGroupActive();
    auto425A8C3C_var = -1;
    while (true) {
        auto425A8C3C_var = PlayerGroupNextPlayer(auto425A8C3C_g, auto425A8C3C_var);
        if (auto425A8C3C_var < 0) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), auto425A8C3C_var) == false)) {
            CameraRestore(auto425A8C3C_var, 2.0, -1, 10.0);
            CameraSetBounds(PlayerGroupAll(), RegionFromId(59), true);
            CameraPan(auto425A8C3C_var, UnitGetPosition(gv_Skaters[auto425A8C3C_var]), 2.0, -1, 10.0, false);
            CameraLockInput(auto425A8C3C_var, false);
        }
        else {
            CameraRestore(auto425A8C3C_var, 2.0, -1, 10.0);
            CameraSetBounds(PlayerGroupAll(), RegionFromId(59), true);
            CameraPan(auto425A8C3C_var, PointFromId(112), 2.0, -1, 10.0, false);
            CameraLockInput(auto425A8C3C_var, false);
        }
    }
    Wait(3.0, c_timeGame);
    gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
    gv_canuserotation = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PregameStats_Init () {
    gt_PregameStats = TriggerCreate("gt_PregameStats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period Stats
//--------------------------------------------------------------------------------------------------
bool gt_PeriodStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team1Players;
    int lv_team2Players;
    int lv_dialogheight;
    fixed lv_team1Possesion;
    fixed lv_team2Possesion;
    fixed lv_team1PossesionPct;
    fixed lv_team2PossesionPct;
    int lv_restarttime;
    int lv_text;

    // Automatic Variable Declarations
    playergroup auto8793F8CD_g;
    int auto8793F8CD_var;
    playergroup autoF6C0644D_g;
    int autoF6C0644D_var;
    playergroup autoF1170427_g;
    int autoF1170427_var;
    playergroup auto10A268EB_g;
    int auto10A268EB_var;
    playergroup autoEB7D8B3F_g;
    int autoEB7D8B3F_var;
    playergroup autoEAE1BF08_g;
    int autoEAE1BF08_var;
    playergroup auto7521EE4F_g;
    int auto7521EE4F_var;
    playergroup auto2230C121_g;
    int auto2230C121_var;
    playergroup auto4D9182AA_g;
    int auto4D9182AA_var;
    playergroup auto8260FDFA_g;
    int auto8260FDFA_var;
    playergroup auto4C447C17_g;
    int auto4C447C17_var;
    playergroup auto355EED1E_g;
    int auto355EED1E_var;
    playergroup auto6E9A5A0F_g;
    int auto6E9A5A0F_var;

    // Variable Initialization
    lv_text = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_uIPeriodStats.lv_arestatsbeingdisplayed = true;
    auto8793F8CD_g = PlayerGroupAll();
    auto8793F8CD_var = -1;
    while (true) {
        auto8793F8CD_var = PlayerGroupNextPlayer(auto8793F8CD_g, auto8793F8CD_var);
        if (auto8793F8CD_var < 0) { break; }
        DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupAll(), c_anchorCenter, 0, -9999);
        CameraLockInput(auto8793F8CD_var, true);
    }
    gf_PeriodStatsCasterCam();
    gf_ShowScoreboard2();
    Wait(1.5, c_timeGame);
    autoF6C0644D_g = PlayerGroupAll();
    autoF6C0644D_var = -1;
    while (true) {
        autoF6C0644D_var = PlayerGroupNextPlayer(autoF6C0644D_g, autoF6C0644D_var);
        if (autoF6C0644D_var < 0) { break; }
        DialogControlSetPosition(gv_uIElements.lv_chat, PlayerGroupSingle(autoF6C0644D_var), c_anchorBottomLeft, 8, 35);
        gf_ShowScoreboard3(autoF6C0644D_var, false, false);
    }
    SoundPlay(SoundLink("IntroWoosh", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogCreate(2500, 2500, c_anchorCenter, 0, 0, true);
    gv_uIPeriodStats.lv_canvasDialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIPeriodStats.lv_canvasDialog, false);
    DialogSetVisible(gv_uIPeriodStats.lv_canvasDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 2500, 2500, c_anchorCenter, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_canvasBG = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_canvasBG, 20, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 1289, 1080, c_anchorCenter, 1100, 300, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    gv_uIPeriodStats.lv_iceBG1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 1289, 1080, c_anchorCenter, -1100, -300, StringToText(""), "Intro\\bg2v2.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    gv_uIPeriodStats.lv_iceBG2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_uIPeriodStats.lv_iceBG2, 180, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_iceBG1, 10, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_iceBG2, 10, PlayerGroupAll());
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_iceBG1, -1, 9999.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_iceBG2, 1, 9999.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_iceBG1, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_iceBG2, PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 2500, 2500, c_anchorCenter, 0, -1250, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_topBarBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 2500, 2500, c_anchorCenter, 0, 1250, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_bottomBarBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 2500, 1, c_anchorCenter, 1, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_bottomBarLine = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_topBarBG, PlayerGroupAll(), 0.5, 15.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_bottomBarBG, PlayerGroupAll(), 0.5, 15.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 752, 114, c_anchorCenter, -400, 0, StringToText(""), "Intro\\statsbar-red.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_redbar = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 752, 114, c_anchorCenter, 400, 0, StringToText(""), "Intro\\statsbar-blue.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_bluebar = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    SoundPlay(SoundLink("IntroSlam", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.2, c_timeGame);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 1173, 1173, c_anchorCenter, 0, 0, StringToText(""), "Intro\\stats assets\\stats-circle.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_circle = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_circle, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_circle, PlayerGroupAll(), 0.6, 0.0);
    gf_MoveIcebg1(gv_uIPeriodStats.lv_circle, -600, 3173, 3173, 0.375);
    Wait(0.25, c_timeGame);
    SoundPlay(SoundLink("IntroSlam", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.25, c_timeGame);
    DialogControlSetPosition(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), c_anchorCenter, -1500, 0);
    DialogControlSetPosition(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), c_anchorCenter, 1500, 0);
    DialogControlSetVisible(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    DialogControlSetPosition(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), c_anchorCenter, -1100, 0);
    DialogControlSetPosition(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), c_anchorCenter, 1100, 0);
    Wait(0.0625, c_timeGame);
    DialogControlSetPosition(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), c_anchorCenter, -800, 0);
    DialogControlSetPosition(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), c_anchorCenter, 800, 0);
    Wait(0.0625, c_timeGame);
    DialogControlSetPosition(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), c_anchorCenter, -600, 0);
    DialogControlSetPosition(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), c_anchorCenter, 600, 0);
    Wait(0.0625, c_timeGame);
    DialogControlSetPosition(gv_uIPeriodStats.lv_redbar, PlayerGroupAll(), c_anchorCenter, -400, 0);
    DialogControlSetPosition(gv_uIPeriodStats.lv_bluebar, PlayerGroupAll(), c_anchorCenter, 400, 0);
    Wait(0.1, c_timeGame);
    SoundPlay(SoundLink("IntroWoosh", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 54, 59, c_anchorCenter, -5, 0, StringToText(""), "Intro\\stats assets\\stats-zealicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_zealicon = DialogControlLastCreated();
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_zealicon, PlayerGroupAll(), 0.0, 100.0);
    gf_MoveIcebg1(gv_uIPeriodStats.lv_zealicon, -600, 3054, 3054, 0.375);
    Wait(0.3, c_timeGame);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_zealicon, PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 480, 480, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\genericglow2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 100.0);
    gf_SpinDialogItem2(gv_uIPeriodStats.lv_circle, 1, 9999.0);
    SoundPlay(SoundLink("IntroPoweron", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 576, 250, c_anchorCenter, -370, 100, StringToText(""), "Intro\\stats assets\\stats-glowy.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_glowyred = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 25.88, 25.88), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 40.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 576, 250, c_anchorCenter, 370, 100, StringToText(""), "Intro\\stats assets\\stats-glowy.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_glowyblue = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(29.02, 64.71, 100.00), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 40.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_bottomBarLine, PlayerGroupAll(), 0.5, 0.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_topBarBG, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_circle, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_zealicon, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_bluebar, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_redbar, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_glowyblue, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_glowyred, -32, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_bottomBarBG, 35, 15.0);
    gf_SpinDialogItem3(gv_uIPeriodStats.lv_bottomBarLine, 35, 15.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_iceBG1, PlayerGroupAll(), 1.0, 0.0);
    DialogControlFadeTransparency(gv_uIPeriodStats.lv_iceBG2, PlayerGroupAll(), 1.0, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 204, 116, c_anchorCenter, -150, -485, StringToText(""), "Intro\\stats assets\\stat-score-bg-red.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_redScoreBG = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 204, 116, c_anchorCenter, 150, -485, StringToText(""), "Intro\\stats assets\\stat-score-bg-blue.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_blueScoreBG = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_blueScoreBG, 170, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_redScoreBG, 170, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 1500, 78, c_anchorCenter, -750, -467, StringToText(""), "Intro\\stats assets\\red-banner.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_redbarbg = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 1500, 78, c_anchorCenter, 750, -467, StringToText(""), "Intro\\stats assets\\blue-banner.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_bluebarbg = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_topBarBG, 100, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_bluebarbg, 150, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_redbarbg, 150, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 3000, 315, c_anchorCenter, 0, -300, StringToText(""), "Intro\\stats assets\\scoreshadow1.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_topbarShadow1 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 75.0);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_canvasDialog, 3000, 315, c_anchorCenter, 0, 450, StringToText(""), "Intro\\stats assets\\scoreshadow1.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_topbarShadow2 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 50.0);
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_topbarShadow1, 40, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_uIPeriodStats.lv_topbarShadow2, 40, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_canvasDialog, 150, 100, c_anchorCenter, -157, -493, IntToText(gv_TeamScores[1]), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize40Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_canvasDialog, 150, 100, c_anchorCenter, 157, -493, IntToText(gv_TeamScores[2]), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize40Bold", PlayerGroupAll());
    autoF1170427_g = gv_actualPlayerzonTeam[1];
    autoF1170427_var = -1;
    while (true) {
        autoF1170427_var = PlayerGroupNextPlayer(autoF1170427_g, autoF1170427_var);
        if (autoF1170427_var < 0) { break; }
        lv_team1Players += 1;
    }
    auto10A268EB_g = gv_actualPlayerzonTeam[2];
    auto10A268EB_var = -1;
    while (true) {
        auto10A268EB_var = PlayerGroupNextPlayer(auto10A268EB_g, auto10A268EB_var);
        if (auto10A268EB_var < 0) { break; }
        lv_team2Players += 1;
    }
    lv_dialogheight = (((lv_team1Players + lv_team2Players) * 45) + 60);
    DialogCreate(3000, lv_dialogheight, c_anchorCenter, 0, 50, true);
    gv_uIPeriodStats.lv_mainStatsDialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIPeriodStats.lv_mainStatsDialog, false);
    DialogSetVisible(gv_uIPeriodStats.lv_mainStatsDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_mainStatsDialog, 3000, lv_dialogheight, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uIPeriodStats.lv_mainStatsBG = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 20.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 450, PlayerGroupAll());
    gf_SpinDialogItem4(gv_uIPeriodStats.lv_mainStatsDialog, lv_team1Players, lv_team2Players, true);
    DialogCreate(3000, 600, c_anchorCenter, 0, 50, true);
    gv_uIPeriodStats.lv_statexportdialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIPeriodStats.lv_statexportdialog, false);
    DialogSetVisible(gv_uIPeriodStats.lv_statexportdialog, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_statexportdialog, 3000, 600, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 20.0);
    gf_CreateStatExports(gv_uIPeriodStats.lv_statexportdialog);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_statexportdialog, 200, 50, c_anchorTop, -390, 380, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(47.84, 74.51, 41.57), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_uIPeriodStats.lv_exportSaveGameButtonBG = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_statexportdialog, 200, 50, c_anchorTop, -390, 380, StringExternal("Param/Value/BAEFB7CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_uIPeriodStats.lv_exportSaveGameButtonText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_uIPeriodStats.lv_statexportdialog, 200, 50, c_anchorTop, -390, 380, StringExternal("Param/Value/7B1B193C"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_uIPeriodStats.lv_exportSaveGameButtonHotspot = DialogControlLastCreated();
    autoEB7D8B3F_g = PlayerGroupAll();
    autoEB7D8B3F_var = -1;
    while (true) {
        autoEB7D8B3F_var = PlayerGroupNextPlayer(autoEB7D8B3F_g, autoEB7D8B3F_var);
        if (autoEB7D8B3F_var < 0) { break; }
        if (((gv_testteam3ui == true) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), autoEB7D8B3F_var) == true) && (GameAttributeGameValue("2") == "0002")))) {
            DialogControlSetVisible(gv_uIPeriodStats.lv_exportSaveGameButtonBG, PlayerGroupSingle(autoEB7D8B3F_var), true);
            DialogControlSetVisible(gv_uIPeriodStats.lv_exportSaveGameButtonHotspot, PlayerGroupSingle(autoEB7D8B3F_var), true);
            DialogControlSetVisible(gv_uIPeriodStats.lv_exportSaveGameButtonText, PlayerGroupSingle(autoEB7D8B3F_var), true);
        }

    }
    DialogCreate(3000, 600, c_anchorCenter, 0, 50, true);
    gv_uIPeriodStats.lv_statgraphsdialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIPeriodStats.lv_statgraphsdialog, false);
    DialogSetVisible(gv_uIPeriodStats.lv_statgraphsdialog, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_statgraphsdialog, 3000, 600, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTop, 0, 275, StringExternal("Param/Value/36613133"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    DialogCreate(3000, 600, c_anchorCenter, 0, 50, true);
    gv_uIPeriodStats.lv_shotheatmapdialog = DialogLastCreated();
    DialogSetImageVisible(gv_uIPeriodStats.lv_shotheatmapdialog, false);
    DialogSetVisible(gv_uIPeriodStats.lv_shotheatmapdialog, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_shotheatmapdialog, 3000, 600, c_anchorTop, 0, 0, StringToText(""), "Intro\\blackbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTop, -350, 34, StringExternal("Param/Value/82CF24BB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(gv_uIPeriodStats.lv_shotheatmapdialog, 50, 50, c_anchorTop, 330, 27, StringToText(""), false);
    gv_heatmapVars.lv_plotFilterOnlyGoalsCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 450, 43, StringExternal("Param/Value/77EEBDE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(gv_uIPeriodStats.lv_shotheatmapdialog, c_triggerControlTypePulldown);
    gv_heatmapVars.lv_plotFilterTeamDropdown = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 170, 23);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/654D7526"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A65F8D47"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/21E4C89A"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 2)) {
        DialogControlCreate(gv_uIPeriodStats.lv_shotheatmapdialog, c_triggerControlTypePulldown);
        gv_heatmapVars.lv_plotFilterPeriodDropdown = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -105, 23);
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4C381D93"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/521B0EA2"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9F7D569A"));
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    }
    else {
        if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 3)) {
            DialogControlCreate(gv_uIPeriodStats.lv_shotheatmapdialog, c_triggerControlTypePulldown);
            gv_heatmapVars.lv_plotFilterPeriodDropdown = DialogControlLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -105, 23);
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1826FC23"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5106D466"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0EAF60F4"));
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C947D28B"));
            DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        }
        else {
            if ((gv_uIPeriodStats.lv_timesshownAKAperiod == 4)) {
                DialogControlCreate(gv_uIPeriodStats.lv_shotheatmapdialog, c_triggerControlTypePulldown);
                gv_heatmapVars.lv_plotFilterPeriodDropdown = DialogControlLastCreated();
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -105, 23);
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B9959523"));
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/128BCDE3"));
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7C7BB218"));
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/41DA0CBB"));
                DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/18350C93"));
                DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
            }

        }
    }
    gf_GenerateHeatmap();
    if ((gv_rEDLINE_MODE == true)) {
        gv_uIPeriodStats.lv_teamShots[1] = (gv_redlineMode.lv_shotsonGoal[gv_Players[1]] + gv_redlineMode.lv_shotsonGoal[gv_Players[3]]);
        gv_uIPeriodStats.lv_teamShots[2] = (gv_redlineMode.lv_shotsonGoal[gv_Players[5]] + gv_redlineMode.lv_shotsonGoal[gv_Players[7]]);
    }
    else {
        gv_uIPeriodStats.lv_teamShots[1] = gv_sOG1;
        gv_uIPeriodStats.lv_teamShots[2] = gv_sOG2;
    }
    if ((gv_rEDLINE_MODE == true)) {
        lv_team1Possesion += gv_inGameStatsPossesionTime[gv_Players[1]];
        lv_team1Possesion += gv_inGameStatsPossesionTime[gv_Players[3]];
        lv_team2Possesion += gv_inGameStatsPossesionTime[gv_Players[5]];
        lv_team2Possesion += gv_inGameStatsPossesionTime[gv_Players[7]];
    }
    else {
        autoEAE1BF08_g = gv_actualPlayerzonTeam[1];
        autoEAE1BF08_var = -1;
        while (true) {
            autoEAE1BF08_var = PlayerGroupNextPlayer(autoEAE1BF08_g, autoEAE1BF08_var);
            if (autoEAE1BF08_var < 0) { break; }
            lv_team1Possesion += gv_inGameStatsPossesionTime[autoEAE1BF08_var];
        }
        auto7521EE4F_g = gv_actualPlayerzonTeam[2];
        auto7521EE4F_var = -1;
        while (true) {
            auto7521EE4F_var = PlayerGroupNextPlayer(auto7521EE4F_g, auto7521EE4F_var);
            if (auto7521EE4F_var < 0) { break; }
            lv_team2Possesion += gv_inGameStatsPossesionTime[auto7521EE4F_var];
        }
    }
    if ((lv_team1Possesion == 0.0) && (lv_team2Possesion == 0.0)) {
        gv_uIPeriodStats.lv_teamPossessionPercentage[1] = 0;
        gv_uIPeriodStats.lv_teamPossessionPercentage[2] = 0;
    }
    else {
        lv_team1PossesionPct = ((lv_team1Possesion/(lv_team1Possesion+lv_team2Possesion)) * 100);
        gv_uIPeriodStats.lv_teamPossessionPercentage[1] = FixedToInt(lv_team1PossesionPct);
        gv_uIPeriodStats.lv_teamPossessionPercentage[2] = (100 - FixedToInt(lv_team1PossesionPct));
    }
    gv_uIPeriodStats.lv_teamPasses[1] = 0;
    gv_uIPeriodStats.lv_teamPasses[2] = 0;
    gv_uIPeriodStats.lv_teamSteals[1] = 0;
    gv_uIPeriodStats.lv_teamSteals[2] = 0;
    auto2230C121_g = gv_actualPlayerzonTeam[1];
    auto2230C121_var = -1;
    while (true) {
        auto2230C121_var = PlayerGroupNextPlayer(auto2230C121_g, auto2230C121_var);
        if (auto2230C121_var < 0) { break; }
        if ((gv_rEDLINE_MODE == true) && (auto2230C121_var == gv_Players[2])) {
        }
        else {
            gv_uIPeriodStats.lv_teamPasses[1] += gv_inGameStatsPasses[auto2230C121_var];
        }
    }
    auto4D9182AA_g = gv_actualPlayerzonTeam[2];
    auto4D9182AA_var = -1;
    while (true) {
        auto4D9182AA_var = PlayerGroupNextPlayer(auto4D9182AA_g, auto4D9182AA_var);
        if (auto4D9182AA_var < 0) { break; }
        gv_uIPeriodStats.lv_teamPasses[2] += gv_inGameStatsPasses[auto4D9182AA_var];
    }
    auto8260FDFA_g = gv_actualPlayerzonTeam[1];
    auto8260FDFA_var = -1;
    while (true) {
        auto8260FDFA_var = PlayerGroupNextPlayer(auto8260FDFA_g, auto8260FDFA_var);
        if (auto8260FDFA_var < 0) { break; }
        if ((gv_rEDLINE_MODE == true) && (auto8260FDFA_var == gv_Players[2])) {
        }
        else {
            gv_uIPeriodStats.lv_teamSteals[1] += gv_inGameStatsSteals[auto8260FDFA_var];
        }
    }
    auto4C447C17_g = gv_actualPlayerzonTeam[2];
    auto4C447C17_var = -1;
    while (true) {
        auto4C447C17_var = PlayerGroupNextPlayer(auto4C447C17_g, auto4C447C17_var);
        if (auto4C447C17_var < 0) { break; }
        gv_uIPeriodStats.lv_teamSteals[2] += gv_inGameStatsSteals[auto4C447C17_var];
    }
    libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_canvasDialog, 600, 50, c_anchorCenter, -560, -480, StringExternal("Param/Value/D81E5C85"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/65D57671") + IntToText(gv_uIPeriodStats.lv_teamShots[1]) + StringExternal("Param/Value/9E6D6742") + IntToText(gv_uIPeriodStats.lv_teamPossessionPercentage[1]) + StringExternal("Param/Value/CEDB4911") + IntToText(gv_uIPeriodStats.lv_teamPasses[1]) + StringExternal("Param/Value/E231CF3A") + IntToText(gv_uIPeriodStats.lv_teamSteals[1])), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_canvasDialog, 600, 50, c_anchorCenter, 560, -480, StringExternal("Param/Value/17637DBA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/9A933EB7") + IntToText(gv_uIPeriodStats.lv_teamShots[2]) + StringExternal("Param/Value/E93022E8") + IntToText(gv_uIPeriodStats.lv_teamPossessionPercentage[2]) + StringExternal("Param/Value/1FF65B10") + IntToText(gv_uIPeriodStats.lv_teamPasses[2]) + StringExternal("Param/Value/C99D3E71") + IntToText(gv_uIPeriodStats.lv_teamSteals[2])), PlayerGroupAll());
    if ((gv_rEDLINE_MODE == false)) {
        DialogCreate(350, 50, c_anchorBottom, 0, 30, true);
        gv_uIPeriodStats.lv_switchviewdialog = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(gv_uIPeriodStats.lv_switchviewdialog, false);
        libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "stats-icon-table.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIPeriodStats.lv_switchviewbuttonimages[1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 94.12, 47.06), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
        gv_uIPeriodStats.lv_switchviewbuttonhotspots[1] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 100, 0, StringToText(""), "stats-icon-graph.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIPeriodStats.lv_switchviewbuttonimages[2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 100, 0, StringToText(""), StringToText(""), "");
        gv_uIPeriodStats.lv_switchviewbuttonhotspots[2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 200, 0, StringToText(""), "stats-icon-heatmap.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIPeriodStats.lv_switchviewbuttonimages[3] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 200, 0, StringToText(""), StringToText(""), "");
        gv_uIPeriodStats.lv_switchviewbuttonhotspots[3] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemImage(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 300, 0, StringToText(""), "stats-icon-export.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uIPeriodStats.lv_switchviewbuttonimages[4] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_uIPeriodStats.lv_switchviewdialog, 50, 50, c_anchorTopLeft, 300, 0, StringToText(""), StringToText(""), "");
        gv_uIPeriodStats.lv_switchviewbuttonhotspots[4] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    }

    if ((gv_uIPeriodStats.lv_showindefinitely == false)) {
        DialogCreate(500, 400, c_anchorBottomRight, 0, 0, true);
        gv_uIPeriodStats.lv_nextperioddialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        if ((gv_Period == 2)) {
            libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_nextperioddialog, 300, 50, c_anchorBottomRight, 50, 26, StringExternal("Param/Value/A2A08C79"), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            if ((gv_Period == 3)) {
                libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_nextperioddialog, 300, 50, c_anchorBottomRight, 50, 26, StringExternal("Param/Value/4D998E86"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_nextperioddialog, 300, 50, c_anchorBottomRight, 50, 26, StringExternal("Param/Value/7943D99C"), ColorWithAlpha(0,0,0,0), false, 2.0);
            }
        }
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20", PlayerGroupAll());
        if ((GameAttributeGameValue("2") == "0002")) {
            gf_VisualStatTimer(66);
            Wait(66.0, c_timeGame);
        }
        else {
            gf_VisualStatTimer(24);
            Wait(24.0, c_timeGame);
        }
        gv_uIPeriodStats.lv_arestatsbeingdisplayed = false;
        DialogDestroy(gv_uIPeriodStats.lv_canvasDialog);
        DialogDestroy(gv_uIPeriodStats.lv_mainStatsDialog);
        DialogDestroy(gv_uIPeriodStats.lv_nextperioddialog);
        DialogDestroy(gv_uIPeriodStats.lv_statexportdialog);
        DialogDestroy(gv_uIPeriodStats.lv_switchviewdialog);
        DialogDestroy(gv_uIPeriodStats.lv_statgraphsdialog);
        DialogDestroy(gv_uIPeriodStats.lv_shotheatmapdialog);
        DialogDestroy(gv_heatmapVars.lv_heatmapDialogContainer);
        gf_ShowScoreboard();
        DialogSetVisible(gv_optionsViewController, PlayerGroupAll(), true);
        auto6E9A5A0F_g = PlayerGroupAll();
        auto6E9A5A0F_var = -1;
        while (true) {
            auto6E9A5A0F_var = PlayerGroupNextPlayer(auto6E9A5A0F_g, auto6E9A5A0F_var);
            if (auto6E9A5A0F_var < 0) { break; }
            CameraLockInput(auto6E9A5A0F_var, false);
            if ((libNtve_gf_DialogItemIsChecked(gv_optionsItems[10], auto6E9A5A0F_var) == true)) {
                DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto6E9A5A0F_var), c_anchorBottom, 0, -20);
                DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto6E9A5A0F_var), c_anchorBottomRight, 0, 0);
                DialogSetPosition(gv_PowerBarDialog[auto6E9A5A0F_var], c_anchorBottom, 0, 300);
            }
            else {
                UISetFrameVisible(PlayerGroupSingle(auto6E9A5A0F_var), c_syncFrameTypeAllianceButton, false);
                DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto6E9A5A0F_var), c_anchorBottom, 0, -9999);
                DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto6E9A5A0F_var), c_anchorBottomRight, 0, -9999);
                DialogSetPosition(gv_PowerBarDialog[auto6E9A5A0F_var], c_anchorBottom, 0, 150);
            }
        }
    }
    else {
        DialogControlFadeTransparency(gv_uIPeriodStats.lv_canvasBG, PlayerGroupAll(), 1.0, 25.0);
        if ((gv_rEDLINE_MODE == false)) {
            DialogCreate(500, 500, c_anchorBottomRight, 0, 0, true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 50, c_anchorBottomRight, 30, 30, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(11.76, 27.45, 51.76), PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorBottomRight, 30, 28, StringExternal("Param/Value/A571E00D"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorBottomRight, 30, 30, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_uIPeriodStats.lv_giantCloseButton = DialogControlLastCreated();
            auto355EED1E_g = PlayerGroupAll();
            auto355EED1E_var = -1;
            while (true) {
                auto355EED1E_var = PlayerGroupNextPlayer(auto355EED1E_g, auto355EED1E_var);
                if (auto355EED1E_var < 0) { break; }
                UISetFrameVisible(PlayerGroupSingle(auto355EED1E_var), c_syncFrameTypeAllianceButton, false);
                DialogControlSetPosition(gv_uIElements.lv_commandPanel, PlayerGroupSingle(auto355EED1E_var), c_anchorBottom, 0, -9999);
                DialogControlSetPosition(gv_uIElements.lv_menubar, PlayerGroupSingle(auto355EED1E_var), c_anchorBottomRight, 0, -9999);
            }
        }
        else {
            if ((gv_TeamScores[1] > gv_TeamScores[2])) {
                gv_uIPeriodStats.lv_winningteamred1blue2 = 1;
            }
            else {
                gv_uIPeriodStats.lv_winningteamred1blue2 = 2;
            }
            if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 1)) {
                gv_redlineMode.lv_statsWins[gv_Players[1]] += 1;
                gv_redlineMode.lv_statsWins[gv_Players[3]] += 1;
                gv_redlineMode.lv_statsLosses[gv_Players[5]] += 1;
                gv_redlineMode.lv_statsLosses[gv_Players[7]] += 1;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/239BCCC5"));
            }
            else {
                if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 2)) {
                    gv_redlineMode.lv_statsWins[gv_Players[5]] += 1;
                    gv_redlineMode.lv_statsWins[gv_Players[7]] += 1;
                    gv_redlineMode.lv_statsLosses[gv_Players[1]] += 1;
                    gv_redlineMode.lv_statsLosses[gv_Players[3]] += 1;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A43DB49D"));
                }

            }
            lv_restarttime = 16;
            DialogCreate(500, 400, c_anchorBottomRight, 0, 0, true);
            gv_uIPeriodStats.lv_nextperioddialog = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_CreateDialogItemLabel(gv_uIPeriodStats.lv_nextperioddialog, 300, 50, c_anchorBottomRight, 50, 26, StringExternal("Param/Value/5C69BBE9"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20", PlayerGroupAll());
            lv_text = DialogControlLastCreated();
            while ((lv_restarttime > 0)) {
                TextExpressionSetToken("Param/Expression/96C43D6B", "A", IntToText(lv_restarttime));
                libNtve_gf_SetDialogItemText(lv_text, TextExpressionAssemble("Param/Expression/96C43D6B"), PlayerGroupAll());
                lv_restarttime -= 1;
                Wait(1.0, c_timeGame);
            }
            gf_RestartRedlineGame();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodStats_Init () {
    gt_PeriodStats = TriggerCreate("gt_PeriodStats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Period Stats - Save Game Button
//--------------------------------------------------------------------------------------------------
bool gt_PeriodStatsSaveGameButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_uIPeriodStats.lv_exportSaveGameButtonHotspot))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromFlag(gv_Banks[EventPlayer()], "SavedGame", "HasGameSaved", true);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "Period", gv_Period);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "ScoreOne", gv_TeamScores[1]);
    BankValueSetFromInt(gv_Banks[EventPlayer()], "SavedGame", "ScoreTwo", gv_TeamScores[2]);
    BankValueSetFromFixed(gv_Banks[EventPlayer()], "SavedGame", "Time", TimerGetRemaining(gv_Timer));
    BankSave(gv_Banks[EventPlayer()]);
    TextExpressionSetToken("Param/Expression/8176AF65", "A", IntToText(gv_Period));
    TextExpressionSetToken("Param/Expression/8176AF65", "B", IntToText(gv_TeamScores[1]));
    TextExpressionSetToken("Param/Expression/8176AF65", "C", IntToText(gv_TeamScores[2]));
    TextExpressionSetToken("Param/Expression/8176AF65", "D", IntToText(FixedToInt(TimerGetRemaining(gv_Timer))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/8176AF65"));
    SoundPlayForPlayer(SoundLink("UI_BNet_Promote", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodStatsSaveGameButton_Init () {
    gt_PeriodStatsSaveGameButton = TriggerCreate("gt_PeriodStatsSaveGameButton_Func");
    TriggerAddEventDialogControl(gt_PeriodStatsSaveGameButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Heatmap Filter
//--------------------------------------------------------------------------------------------------
bool gt_ToggleHeatmapFilter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_actionPlayer;
    int lv_actionTeam;
    int lv_actionPeriod;
    bool lv_actionOnlyGoals;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_heatmapVars.lv_plotFilterOnlyGoalsCheckbox) || (EventDialogControl() == gv_heatmapVars.lv_plotFilterPeriodDropdown) || (EventDialogControl() == gv_heatmapVars.lv_plotFilterTeamDropdown)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_actionPlayer = EventPlayer();
    if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterTeamDropdown, lv_actionPlayer) == 1)) {
        lv_actionTeam = 3;
    }
    else {
        if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterTeamDropdown, lv_actionPlayer) == 2)) {
            lv_actionTeam = 1;
        }
        else {
            if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterTeamDropdown, lv_actionPlayer) == 3)) {
                lv_actionTeam = 2;
            }

        }
    }
    if ((gv_heatmapVars.lv_plotFilterPeriodDropdown != c_invalidDialogControlId)) {
        if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterPeriodDropdown, lv_actionPlayer) == 1)) {
            lv_actionPeriod = 0;
        }
        else {
            if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterPeriodDropdown, lv_actionPlayer) == 2)) {
                lv_actionPeriod = 1;
            }
            else {
                if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterPeriodDropdown, lv_actionPlayer) == 3)) {
                    lv_actionPeriod = 2;
                }
                else {
                    if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterPeriodDropdown, lv_actionPlayer) == 4)) {
                        lv_actionPeriod = 3;
                    }
                    else {
                        if ((DialogControlGetSelectedItem(gv_heatmapVars.lv_plotFilterPeriodDropdown, lv_actionPlayer) == 5)) {
                            lv_actionPeriod = 4;
                        }

                    }
                }
            }
        }
    }
    else {
        lv_actionPeriod = 0;
    }
    if ((libNtve_gf_DialogItemIsChecked(gv_heatmapVars.lv_plotFilterOnlyGoalsCheckbox, lv_actionPlayer) == true)) {
        lv_actionOnlyGoals = true;
    }
    else {
        lv_actionOnlyGoals = false;
    }
    gf_FilterPlots(lv_actionPlayer, lv_actionTeam, lv_actionPeriod, lv_actionOnlyGoals);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleHeatmapFilter_Init () {
    gt_ToggleHeatmapFilter = TriggerCreate("gt_ToggleHeatmapFilter_Func");
    TriggerAddEventDialogControl(gt_ToggleHeatmapFilter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(gt_ToggleHeatmapFilter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Stat Views
//--------------------------------------------------------------------------------------------------
bool gt_ChangeStatViews_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[1]) || (EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[2]) || (EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[3]) || (EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIPeriodStats.lv_mainStatsDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_uIPeriodStats.lv_statexportdialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_uIPeriodStats.lv_statgraphsdialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_uIPeriodStats.lv_shotheatmapdialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_heatmapVars.lv_heatmapDialogContainer, PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[1], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[2], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[3], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[4], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[1])) {
        libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[1], Color(0.00, 94.12, 47.06), PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_uIPeriodStats.lv_mainStatsDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        if ((EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[2])) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[2], Color(0.00, 94.12, 47.06), PlayerGroupSingle(EventPlayer()));
            DialogSetVisible(gv_uIPeriodStats.lv_statgraphsdialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            if ((EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[3])) {
                libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[3], Color(0.00, 94.12, 47.06), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_uIPeriodStats.lv_shotheatmapdialog, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_heatmapVars.lv_heatmapDialogContainer, PlayerGroupSingle(EventPlayer()), true);
            }
            else {
                if ((EventDialogControl() == gv_uIPeriodStats.lv_switchviewbuttonhotspots[4])) {
                    libNtve_gf_SetDialogItemDesaturationColor(gv_uIPeriodStats.lv_switchviewbuttonimages[4], Color(0.00, 94.12, 47.06), PlayerGroupSingle(EventPlayer()));
                    DialogSetVisible(gv_uIPeriodStats.lv_statexportdialog, PlayerGroupSingle(EventPlayer()), true);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeStatViews_Init () {
    gt_ChangeStatViews = TriggerCreate("gt_ChangeStatViews_Func");
    TriggerAddEventDialogControl(gt_ChangeStatViews, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Game Button
//--------------------------------------------------------------------------------------------------
bool gt_LeaveGameButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_uIPeriodStats.lv_giantCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 1) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, false, false);
    }
    else {
        if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 2) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)) {
            GameOver(EventPlayer(), c_gameOverVictory, false, false);
        }
        else {
            if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 1) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)) {
                GameOver(EventPlayer(), c_gameOverDefeat, false, false);
            }
            else {
                if ((gv_uIPeriodStats.lv_winningteamred1blue2 == 2) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
                    GameOver(EventPlayer(), c_gameOverDefeat, false, false);
                }
                else {
                    GameOver(EventPlayer(), c_gameOverVictory, false, false);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveGameButton_Init () {
    gt_LeaveGameButton = TriggerCreate("gt_LeaveGameButton_Func");
    TriggerAddEventDialogControl(gt_LeaveGameButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateSwapOutDialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateSwapOutDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_benchSwapButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_swapDialogOpen[EventPlayer()] == false)) {
        DialogCreate(400, 300, c_anchorCenter, 0, 0, true);
        gv_benchSwapDialog2[EventPlayer()] = DialogLastCreated();
        gv_swapDialogOpen[EventPlayer()] = true;
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        if ((EventPlayer() == gv_team1Captain)) {
            TextExpressionSetToken("Param/Expression/02F32A0A", "A", PlayerName(gv_Players[1]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 50, StringToText(""), TextExpressionAssemble("Param/Expression/02F32A0A"), "");
            gv_benchSwapOptionsButton1 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/57DA4065", "A", PlayerName(gv_Players[2]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 100, StringToText(""), TextExpressionAssemble("Param/Expression/57DA4065"), "");
            gv_benchSwapOptionsButton2 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/BEF2FC34", "A", PlayerName(gv_Players[3]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 150, StringToText(""), TextExpressionAssemble("Param/Expression/BEF2FC34"), "");
            gv_benchSwapOptionsButton3 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/5C7E2138", "A", PlayerName(gv_Players[4]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 200, StringToText(""), TextExpressionAssemble("Param/Expression/5C7E2138"), "");
            gv_benchSwapOptionsButton4 = DialogControlLastCreated();
        }

        if ((EventPlayer() == gv_team2Captain)) {
            TextExpressionSetToken("Param/Expression/4A6358B0", "A", PlayerName(gv_Players[5]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 50, StringToText(""), TextExpressionAssemble("Param/Expression/4A6358B0"), "");
            gv_benchSwapOptionsButton7 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/250BF610", "A", PlayerName(gv_Players[6]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 100, StringToText(""), TextExpressionAssemble("Param/Expression/250BF610"), "");
            gv_benchSwapOptionsButton8 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/A026F5CC", "A", PlayerName(gv_Players[7]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 150, StringToText(""), TextExpressionAssemble("Param/Expression/A026F5CC"), "");
            gv_benchSwapOptionsButton9 = DialogControlLastCreated();
            TextExpressionSetToken("Param/Expression/EA73EED5", "A", PlayerName(gv_Players[8]));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 200, StringToText(""), TextExpressionAssemble("Param/Expression/EA73EED5"), "");
            gv_benchSwapOptionsButton10 = DialogControlLastCreated();
        }

    }
    else {
        DialogDestroy(gv_benchSwapDialog2[EventPlayer()]);
        DialogDestroy(gv_benchSwapDialog3[EventPlayer()]);
        gv_swapDialogOpen[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSwapOutDialog_Init () {
    gt_CreateSwapOutDialog = TriggerCreate("gt_CreateSwapOutDialog_Func");
    TriggerAddEventDialogControl(gt_CreateSwapOutDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateSwapOutDialog 2a
//--------------------------------------------------------------------------------------------------
bool gt_CreateSwapOutDialog2a_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchSwapOptionsButton1) || (EventDialogControl() == gv_benchSwapOptionsButton2) || (EventDialogControl() == gv_benchSwapOptionsButton3) || (EventDialogControl() == gv_benchSwapOptionsButton4)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton1)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[1];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton2)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[2];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton3)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[3];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton4)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[4];
    }

    DialogDestroy(gv_benchSwapDialog2[EventPlayer()]);
    DialogCreate(400, 200, c_anchorCenter, 0, 0, true);
    gv_benchSwapDialog3[EventPlayer()] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    TextExpressionSetToken("Param/Expression/C233CF7E", "A", PlayerName(gv_benchPlayers[1]));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 50, StringToText(""), TextExpressionAssemble("Param/Expression/C233CF7E"), "");
    gv_benchSwapOptionsButton5 = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/949465A7", "A", PlayerName(gv_benchPlayers[2]));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 100, StringToText(""), TextExpressionAssemble("Param/Expression/949465A7"), "");
    gv_benchSwapOptionsButton6 = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSwapOutDialog2a_Init () {
    gt_CreateSwapOutDialog2a = TriggerCreate("gt_CreateSwapOutDialog2a_Func");
    TriggerAddEventDialogControl(gt_CreateSwapOutDialog2a, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateSwapOutDialog 2b
//--------------------------------------------------------------------------------------------------
bool gt_CreateSwapOutDialog2b_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchSwapOptionsButton7) || (EventDialogControl() == gv_benchSwapOptionsButton8) || (EventDialogControl() == gv_benchSwapOptionsButton9) || (EventDialogControl() == gv_benchSwapOptionsButton10)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton7)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[5];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton8)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[6];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton9)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[7];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton10)) {
        gv_playerSubOutChoice[EventPlayer()] = gv_Players[8];
    }

    DialogDestroy(gv_benchSwapDialog2[EventPlayer()]);
    DialogCreate(400, 200, c_anchorCenter, 0, 0, true);
    gv_benchSwapDialog3[EventPlayer()] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    TextExpressionSetToken("Param/Expression/3187A702", "A", PlayerName(gv_benchPlayers[3]));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 50, StringToText(""), TextExpressionAssemble("Param/Expression/3187A702"), "");
    gv_benchSwapOptionsButton11 = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/ED869457", "A", PlayerName(gv_benchPlayers[4]));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 100, StringToText(""), TextExpressionAssemble("Param/Expression/ED869457"), "");
    gv_benchSwapOptionsButton12 = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSwapOutDialog2b_Init () {
    gt_CreateSwapOutDialog2b = TriggerCreate("gt_CreateSwapOutDialog2b_Func");
    TriggerAddEventDialogControl(gt_CreateSwapOutDialog2b, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateSwapOutDialog 3a
//--------------------------------------------------------------------------------------------------
bool gt_CreateSwapOutDialog3a_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchSwapOptionsButton5) || (EventDialogControl() == gv_benchSwapOptionsButton6)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton5)) {
        PlayerGroupRemove(gv_teamPlayersGroup1, gv_playerSubOutChoice[EventPlayer()]);
        PlayerGroupAdd(gv_teamPlayersGroup1, gv_benchPlayers[1]);
        TextExpressionSetToken("Param/Expression/690B74FD", "A", PlayerName(gv_benchPlayers[1]));
        TextExpressionSetToken("Param/Expression/690B74FD", "B", PlayerName(gv_playerSubOutChoice[EventPlayer()]));
        UIDisplayMessage(gv_actualPlayerzonTeam[1], c_messageAreaObjective, TextExpressionAssemble("Param/Expression/690B74FD"));
        gv_benchPlayers[1] = gv_playerSubOutChoice[EventPlayer()];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton6)) {
        PlayerGroupRemove(gv_teamPlayersGroup1, gv_playerSubOutChoice[EventPlayer()]);
        PlayerGroupAdd(gv_teamPlayersGroup1, gv_benchPlayers[2]);
        TextExpressionSetToken("Param/Expression/E12055D7", "A", PlayerName(gv_benchPlayers[2]));
        TextExpressionSetToken("Param/Expression/E12055D7", "B", PlayerName(gv_playerSubOutChoice[EventPlayer()]));
        UIDisplayMessage(gv_actualPlayerzonTeam[1], c_messageAreaObjective, TextExpressionAssemble("Param/Expression/E12055D7"));
        gv_benchPlayers[2] = gv_playerSubOutChoice[EventPlayer()];
    }

    DialogDestroy(gv_benchSwapDialog3[EventPlayer()]);
    DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(EventPlayer()), false);
    gv_swapDialogOpen[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSwapOutDialog3a_Init () {
    gt_CreateSwapOutDialog3a = TriggerCreate("gt_CreateSwapOutDialog3a_Func");
    TriggerAddEventDialogControl(gt_CreateSwapOutDialog3a, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateSwapOutDialog 3b
//--------------------------------------------------------------------------------------------------
bool gt_CreateSwapOutDialog3b_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_benchSwapOptionsButton11) || (EventDialogControl() == gv_benchSwapOptionsButton12)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton11)) {
        PlayerGroupRemove(gv_teamPlayersGroup2, gv_playerSubOutChoice[EventPlayer()]);
        PlayerGroupAdd(gv_teamPlayersGroup2, gv_benchPlayers[3]);
        TextExpressionSetToken("Param/Expression/268E4811", "A", PlayerName(gv_benchPlayers[3]));
        TextExpressionSetToken("Param/Expression/268E4811", "B", PlayerName(gv_playerSubOutChoice[EventPlayer()]));
        UIDisplayMessage(gv_actualPlayerzonTeam[2], c_messageAreaObjective, TextExpressionAssemble("Param/Expression/268E4811"));
        gv_benchPlayers[3] = gv_playerSubOutChoice[EventPlayer()];
    }

    if ((EventDialogControl() == gv_benchSwapOptionsButton12)) {
        PlayerGroupRemove(gv_teamPlayersGroup2, gv_playerSubOutChoice[EventPlayer()]);
        PlayerGroupAdd(gv_teamPlayersGroup2, gv_benchPlayers[4]);
        TextExpressionSetToken("Param/Expression/B235646F", "A", PlayerName(gv_benchPlayers[4]));
        TextExpressionSetToken("Param/Expression/B235646F", "B", PlayerName(gv_playerSubOutChoice[EventPlayer()]));
        UIDisplayMessage(gv_actualPlayerzonTeam[2], c_messageAreaObjective, TextExpressionAssemble("Param/Expression/B235646F"));
        gv_benchPlayers[4] = gv_playerSubOutChoice[EventPlayer()];
    }

    DialogDestroy(gv_benchSwapDialog3[EventPlayer()]);
    DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(EventPlayer()), false);
    gv_swapDialogOpen[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSwapOutDialog3b_Init () {
    gt_CreateSwapOutDialog3b = TriggerCreate("gt_CreateSwapOutDialog3b_Func");
    TriggerAddEventDialogControl(gt_CreateSwapOutDialog3b, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Click Record
//--------------------------------------------------------------------------------------------------
bool gt_RightClickRecord_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_antiCheat.lv_rightClickDown[EventPlayer()][2] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightClickRecord_Init () {
    gt_RightClickRecord = TriggerCreate("gt_RightClickRecord_Func");
    TriggerAddEventMouseClicked(gt_RightClickRecord, c_playerAny, c_mouseButtonRight, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cursor Override
//--------------------------------------------------------------------------------------------------
bool gt_CursorOverride_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitAbilityExists(EventUnit(), "Check") == true) || (UnitGetType(EventUnit()) == "ShapeHockeyStick") || (UnitGetType(EventUnit()) == "ShapeHockeyPuck")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCursor(EventUnit(), "Arrow_Prot");
    UnitSetState(EventUnit(), c_unitStateHighlightable, false);
    UnitSetState(EventUnit(), c_unitStateTooltipable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CursorOverride_Init () {
    gt_CursorOverride = TriggerCreate("gt_CursorOverride_Func");
    TriggerAddEventUnitRegion(gt_CursorOverride, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test
//--------------------------------------------------------------------------------------------------
bool gt_Test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ischeckingon = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DA8577F0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Test_Init () {
    gt_Test = TriggerCreate("gt_Test_Func");
    TriggerAddEventChatMessage(gt_Test, c_playerAny, "moo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Field
//--------------------------------------------------------------------------------------------------
bool gt_ForceField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_angle;
    point lv_oldpoint;
    bool lv_saved;
    int lv_temp;
    fixed lv_loopcount;

    // Automatic Variable Declarations
    unitgroup auto133C14C9_g;
    int auto133C14C9_u;
    unit auto133C14C9_var;
    unitgroup auto07461EDF_g;
    int auto07461EDF_u;
    unit auto07461EDF_var;
    unitgroup autoD80A296E_g;
    int autoD80A296E_u;
    unit autoD80A296E_var;
    unitgroup auto0879CBB9_g;
    int auto0879CBB9_u;
    unit auto0879CBB9_var;
    unitgroup auto732BDC9F_g;
    int auto732BDC9F_u;
    unit auto732BDC9F_var;
    unitgroup auto49B9558D_g;
    int auto49B9558D_u;
    unit auto49B9558D_var;
    unitgroup auto3056CCF2_g;
    int auto3056CCF2_u;
    unit auto3056CCF2_var;
    unitgroup auto5A5A986D_g;
    int auto5A5A986D_u;
    unit auto5A5A986D_var;
    unitgroup autoF6246BC6_g;
    int autoF6246BC6_u;
    unit autoF6246BC6_var;
    unitgroup auto5A47C77F_g;
    int auto5A47C77F_u;
    unit auto5A47C77F_var;
    unitgroup autoB0782767_g;
    int autoB0782767_u;
    unit autoB0782767_var;
    unitgroup auto166AE507_g;
    int auto166AE507_u;
    unit auto166AE507_var;
    unitgroup autoD4B18B77_g;
    int autoD4B18B77_u;
    unit autoD4B18B77_var;
    unitgroup auto5B2A289E_g;
    int auto5B2A289E_u;
    unit auto5B2A289E_var;
    unitgroup auto93A0445C_g;
    int auto93A0445C_u;
    unit auto93A0445C_var;
    unitgroup auto0852DC5F_g;
    int auto0852DC5F_u;
    unit auto0852DC5F_var;
    unitgroup auto50ED384E_g;
    int auto50ED384E_u;
    unit auto50ED384E_var;
    unitgroup auto0A103B4A_g;
    int auto0A103B4A_u;
    unit auto0A103B4A_var;
    unitgroup autoC4825F2B_g;
    int autoC4825F2B_u;
    unit autoC4825F2B_var;
    const int auto5CD6402D_ae = 35;
    int auto5CD6402D_var;
    unitgroup auto0CB26F33_g;
    int auto0CB26F33_u;
    unit auto0CB26F33_var;
    unitgroup auto19E99182_g;
    int auto19E99182_u;
    unit auto19E99182_var;
    const int auto4622CFF6_ae = 35;
    int auto4622CFF6_var;
    unitgroup auto4840F2AD_g;
    int auto4840F2AD_u;
    unit auto4840F2AD_var;
    unitgroup auto5F685334_g;
    int auto5F685334_u;
    unit auto5F685334_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Sentry_ForceFieldLaunch", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if (((PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPY) || (PlayerHandle(EventPlayer()) == gv_hANDLE_ENTROPYEU) || (gv_testskins == true))) {
        SoundPlayForPlayer(SoundLink("Sentry_HallucinationLaunchSmall", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Sentry_HallucinationLaunchLarge", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        auto133C14C9_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto133C14C9_u = UnitGroupCount(auto133C14C9_g, c_unitCountAll);
        for (;; auto133C14C9_u -= 1) {
            auto133C14C9_var = UnitGroupUnitFromEnd(auto133C14C9_g, auto133C14C9_u);
            if (auto133C14C9_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto133C14C9_var), "SetTintColor {255,255,255 7.000000}");
            gf_SpinShield2(auto133C14C9_var);
        }
    }
    else {
        if ((PlayerHandle(EventPlayer()) == gv_hANDLE_CERVANTEZ)) {
            autoC4825F2B_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            autoC4825F2B_u = UnitGroupCount(autoC4825F2B_g, c_unitCountAll);
            for (;; autoC4825F2B_u -= 1) {
                autoC4825F2B_var = UnitGroupUnitFromEnd(autoC4825F2B_g, autoC4825F2B_u);
                if (autoC4825F2B_var == null) { break; }
                ActorSend(libNtve_gf_MainActorofUnit(autoC4825F2B_var), "SetTintColor 255,128,128");
            }
        }
        else {
            if ((PlayerHandle(EventPlayer()) == gv_hANDLE_MOFOWH)) {
                auto0A103B4A_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                auto0A103B4A_u = UnitGroupCount(auto0A103B4A_g, c_unitCountAll);
                for (;; auto0A103B4A_u -= 1) {
                    auto0A103B4A_var = UnitGroupUnitFromEnd(auto0A103B4A_g, auto0A103B4A_u);
                    if (auto0A103B4A_var == null) { break; }
                    ActorSend(libNtve_gf_MainActorofUnit(auto0A103B4A_var), "SetTintColor {0,255,0 2.000000}");
                }
            }
            else {
                if ((PlayerHandle(EventPlayer()) == gv_hANDLE_COUNTRYKEN)) {
                    auto50ED384E_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                    auto50ED384E_u = UnitGroupCount(auto50ED384E_g, c_unitCountAll);
                    for (;; auto50ED384E_u -= 1) {
                        auto50ED384E_var = UnitGroupUnitFromEnd(auto50ED384E_g, auto50ED384E_u);
                        if (auto50ED384E_var == null) { break; }
                        ActorSend(libNtve_gf_MainActorofUnit(auto50ED384E_var), "SetTintColor {249,0,249 2.000000}");
                    }
                }
                else {
                    if ((PlayerHandle(EventPlayer()) == gv_hANDLE_CRUSH)) {
                        auto0852DC5F_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                        auto0852DC5F_u = UnitGroupCount(auto0852DC5F_g, c_unitCountAll);
                        for (;; auto0852DC5F_u -= 1) {
                            auto0852DC5F_var = UnitGroupUnitFromEnd(auto0852DC5F_g, auto0852DC5F_u);
                            if (auto0852DC5F_var == null) { break; }
                            ActorSend(libNtve_gf_MainActorofUnit(auto0852DC5F_var), "SetTintColor {0,255,255 2.000000}");
                            gf_SpinShield2(auto0852DC5F_var);
                        }
                    }
                    else {
                        if ((PlayerHandle(EventPlayer()) == gv_hANDLE_ALERTEYES)) {
                            auto93A0445C_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                            auto93A0445C_u = UnitGroupCount(auto93A0445C_g, c_unitCountAll);
                            for (;; auto93A0445C_u -= 1) {
                                auto93A0445C_var = UnitGroupUnitFromEnd(auto93A0445C_g, auto93A0445C_u);
                                if (auto93A0445C_var == null) { break; }
                                ActorSend(libNtve_gf_MainActorofUnit(auto93A0445C_var), "SetTintColor {255,128,0 2.000000}");
                            }
                        }
                        else {
                            if (((PlayerHandle(EventPlayer()) == gv_hANDLE_LEEROY_EU) || (PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR1))) {
                                auto5B2A289E_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                auto5B2A289E_u = UnitGroupCount(auto5B2A289E_g, c_unitCountAll);
                                for (;; auto5B2A289E_u -= 1) {
                                    auto5B2A289E_var = UnitGroupUnitFromEnd(auto5B2A289E_g, auto5B2A289E_u);
                                    if (auto5B2A289E_var == null) { break; }
                                    ActorSend(libNtve_gf_MainActorofUnit(auto5B2A289E_var), "SetTintColor {255,255,0 2.000000}");
                                }
                            }
                            else {
                                if ((gv_shieldcolor[EventPlayer()] == 1)) {
                                    autoD4B18B77_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                    autoD4B18B77_u = UnitGroupCount(autoD4B18B77_g, c_unitCountAll);
                                    for (;; autoD4B18B77_u -= 1) {
                                        autoD4B18B77_var = UnitGroupUnitFromEnd(autoD4B18B77_g, autoD4B18B77_u);
                                        if (autoD4B18B77_var == null) { break; }
                                        ActorSend(libNtve_gf_MainActorofUnit(autoD4B18B77_var), "SetTintColor {0,0,255 2.000000}");
                                    }
                                }
                                else {
                                    if ((gv_shieldcolor[EventPlayer()] == 2)) {
                                        auto166AE507_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                        auto166AE507_u = UnitGroupCount(auto166AE507_g, c_unitCountAll);
                                        for (;; auto166AE507_u -= 1) {
                                            auto166AE507_var = UnitGroupUnitFromEnd(auto166AE507_g, auto166AE507_u);
                                            if (auto166AE507_var == null) { break; }
                                            ActorSend(libNtve_gf_MainActorofUnit(auto166AE507_var), "SetTintColor {255,0,0 2.000000}");
                                        }
                                    }
                                    else {
                                        if ((gv_shieldcolor[EventPlayer()] == 3)) {
                                            autoB0782767_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                            autoB0782767_u = UnitGroupCount(autoB0782767_g, c_unitCountAll);
                                            for (;; autoB0782767_u -= 1) {
                                                autoB0782767_var = UnitGroupUnitFromEnd(autoB0782767_g, autoB0782767_u);
                                                if (autoB0782767_var == null) { break; }
                                                ActorSend(libNtve_gf_MainActorofUnit(autoB0782767_var), "SetTintColor {255,128,0 2.000000}");
                                            }
                                        }
                                        else {
                                            if ((gv_shieldcolor[EventPlayer()] == 4)) {
                                                auto5A47C77F_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                auto5A47C77F_u = UnitGroupCount(auto5A47C77F_g, c_unitCountAll);
                                                for (;; auto5A47C77F_u -= 1) {
                                                    auto5A47C77F_var = UnitGroupUnitFromEnd(auto5A47C77F_g, auto5A47C77F_u);
                                                    if (auto5A47C77F_var == null) { break; }
                                                    ActorSend(libNtve_gf_MainActorofUnit(auto5A47C77F_var), "SetTintColor {255,255,0 2.000000}");
                                                }
                                            }
                                            else {
                                                if ((gv_shieldcolor[EventPlayer()] == 5)) {
                                                    autoF6246BC6_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                    autoF6246BC6_u = UnitGroupCount(autoF6246BC6_g, c_unitCountAll);
                                                    for (;; autoF6246BC6_u -= 1) {
                                                        autoF6246BC6_var = UnitGroupUnitFromEnd(autoF6246BC6_g, autoF6246BC6_u);
                                                        if (autoF6246BC6_var == null) { break; }
                                                        ActorSend(libNtve_gf_MainActorofUnit(autoF6246BC6_var), "SetTintColor {0,255,0 2.000000}");
                                                    }
                                                }
                                                else {
                                                    if ((gv_shieldcolor[EventPlayer()] == 6)) {
                                                        auto5A5A986D_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                        auto5A5A986D_u = UnitGroupCount(auto5A5A986D_g, c_unitCountAll);
                                                        for (;; auto5A5A986D_u -= 1) {
                                                            auto5A5A986D_var = UnitGroupUnitFromEnd(auto5A5A986D_g, auto5A5A986D_u);
                                                            if (auto5A5A986D_var == null) { break; }
                                                            ActorSend(libNtve_gf_MainActorofUnit(auto5A5A986D_var), "SetTintColor {0,128,0 2.000000}");
                                                        }
                                                    }
                                                    else {
                                                        if ((gv_shieldcolor[EventPlayer()] == 7)) {
                                                            auto3056CCF2_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                            auto3056CCF2_u = UnitGroupCount(auto3056CCF2_g, c_unitCountAll);
                                                            for (;; auto3056CCF2_u -= 1) {
                                                                auto3056CCF2_var = UnitGroupUnitFromEnd(auto3056CCF2_g, auto3056CCF2_u);
                                                                if (auto3056CCF2_var == null) { break; }
                                                                ActorSend(libNtve_gf_MainActorofUnit(auto3056CCF2_var), "SetTintColor {128,0,128 2.000000}");
                                                            }
                                                        }
                                                        else {
                                                            if ((gv_shieldcolor[EventPlayer()] == 8)) {
                                                                auto49B9558D_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                                auto49B9558D_u = UnitGroupCount(auto49B9558D_g, c_unitCountAll);
                                                                for (;; auto49B9558D_u -= 1) {
                                                                    auto49B9558D_var = UnitGroupUnitFromEnd(auto49B9558D_g, auto49B9558D_u);
                                                                    if (auto49B9558D_var == null) { break; }
                                                                    ActorSend(libNtve_gf_MainActorofUnit(auto49B9558D_var), "SetTintColor {255,0,128 2.000000}");
                                                                }
                                                            }
                                                            else {
                                                                if ((gv_shieldcolor[EventPlayer()] == 9)) {
                                                                    auto732BDC9F_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                                    auto732BDC9F_u = UnitGroupCount(auto732BDC9F_g, c_unitCountAll);
                                                                    for (;; auto732BDC9F_u -= 1) {
                                                                        auto732BDC9F_var = UnitGroupUnitFromEnd(auto732BDC9F_g, auto732BDC9F_u);
                                                                        if (auto732BDC9F_var == null) { break; }
                                                                        ActorSend(libNtve_gf_MainActorofUnit(auto732BDC9F_var), "SetTintColor {128,64,0 2.000000}");
                                                                    }
                                                                }
                                                                else {
                                                                    if ((gv_shieldcolor[EventPlayer()] == 10)) {
                                                                        auto0879CBB9_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                                        auto0879CBB9_u = UnitGroupCount(auto0879CBB9_g, c_unitCountAll);
                                                                        for (;; auto0879CBB9_u -= 1) {
                                                                            auto0879CBB9_var = UnitGroupUnitFromEnd(auto0879CBB9_g, auto0879CBB9_u);
                                                                            if (auto0879CBB9_var == null) { break; }
                                                                            ActorSend(libNtve_gf_MainActorofUnit(auto0879CBB9_var), "SetTintColor {0,0,0 2.000000}");
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ((gv_shieldcolor[EventPlayer()] == 11)) {
                                                                            autoD80A296E_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                                            autoD80A296E_u = UnitGroupCount(autoD80A296E_g, c_unitCountAll);
                                                                            for (;; autoD80A296E_u -= 1) {
                                                                                autoD80A296E_var = UnitGroupUnitFromEnd(autoD80A296E_g, autoD80A296E_u);
                                                                                if (autoD80A296E_var == null) { break; }
                                                                                ActorSend(libNtve_gf_MainActorofUnit(autoD80A296E_var), "SetTintColor {128,128,128 2.000000}");
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ((gv_shieldcolor[EventPlayer()] == 12)) {
                                                                                auto07461EDF_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                                                                                auto07461EDF_u = UnitGroupCount(auto07461EDF_g, c_unitCountAll);
                                                                                for (;; auto07461EDF_u -= 1) {
                                                                                    auto07461EDF_var = UnitGroupUnitFromEnd(auto07461EDF_g, auto07461EDF_u);
                                                                                    if (auto07461EDF_var == null) { break; }
                                                                                    ActorSend(libNtve_gf_MainActorofUnit(auto07461EDF_var), "SetTintColor {244,172,4 2.000000}");
                                                                                }
                                                                            }

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[2])) {
        lv_temp = gv_Players[2];
        gv_goalieBlocking[lv_temp] = true;
        UnitSetScale(gv_Skaters[gv_Players[2]], 50.0, 50.0, 50.0);
        UnitSetScale(gv_Sticks[gv_Players[2]], 100.0, 100.0, 100.0);
        RegionSetCenter(RegionFromId(22), UnitGetPosition(gv_Skaters[gv_Players[2]]));
        auto4622CFF6_var = 0;
        for ( ; auto4622CFF6_var <= auto4622CFF6_ae; auto4622CFF6_var += 1 ) {
            if ((gv_Skaters[gv_Players[2]] != null) && (gv_cancelForcefield[1] == false)) {
                Wait(0.0, c_timeReal);
                lv_loopcount += 1.0;
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false)) {
                    lv_oldpoint = RegionGetCenter(RegionFromId(22));
                    RegionSetCenter(RegionFromId(22), UnitGetPosition(gv_Skaters[gv_Players[2]]));
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == true) && (gv_Possession == -1)) {
                        lv_angle = AngleBetweenPoints(lv_oldpoint, RegionGetCenter(RegionFromId(22)));
                        while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == false)) {
                            UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.1, lv_angle), false);
                        }
                        if ((gv_Shootout == false) && (lv_saved == false) && (gv_ShootingPlayer != 0) && ((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) {
                            if ((gv_potentialSOG == true)) {
                                gf_Collision2(2);
                                gf_HeatmapLogLastShotasaRealShot();
                                gv_onTargetRedNet = false;
                                gv_potentialSOG = false;
                                gv_doNotIncreaseSOG = true;
                                gv_inGameStatsGoalieBlock[gv_Players[2]] += 1;
                                gv_stats_OverallGoalieBlocks[gv_Players[2]] += 1;
                                gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO")-1500)/50)));
                                BankValueSetFromFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                gf_SaveBank(gv_Players[2]);
                                lv_saved = true;
                            }

                        }

                        gv_puckMagnitude = DistanceBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1)));
                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.25), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, RegionFromId(22), "circle"));
                        UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_pUCK, 0) + (UnitGetCustomValue(gv_Skaters[gv_Players[2]], 0) * 1.2)));
                        UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_pUCK, 1) + (UnitGetCustomValue(gv_Skaters[gv_Players[2]], 1) * 1.2)));
                    }

                }

                auto4840F2AD_g = UnitGroup("ForceField", gv_Players[2], RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                auto4840F2AD_u = UnitGroupCount(auto4840F2AD_g, c_unitCountAll);
                for (;; auto4840F2AD_u -= 1) {
                    auto4840F2AD_var = UnitGroupUnitFromEnd(auto4840F2AD_g, auto4840F2AD_u);
                    if (auto4840F2AD_var == null) { break; }
                    UnitSetPosition(auto4840F2AD_var, UnitGetPosition(gv_Skaters[gv_Players[2]]), true);
                }
            }

        }
        RegionSetCenter(RegionFromId(22), PointFromId(332));
        if ((gv_pullGoalie[1] == false)) {
            if ((gv_unitSetType[gv_Players[2]] == 1)) {
                UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
            }

            if ((((gv_jerseyVars.lv_jerseysareonforteam[1] == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)) || ((gv_jerseyVars.lv_jerseysareonforteam[2] == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)))) {
                if ((gv_unitSetType[gv_Players[2]] == 2)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 120.0, 120.0, 120.0);
                }

                if (((gv_unitSetType[gv_Players[2]] == 3) || (gv_unitSetType[gv_Players[2]] == 15))) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 130.0, 130.0, 130.0);
                }

                if (((gv_unitSetType[gv_Players[2]] == 4) || (gv_unitSetType[gv_Players[2]] == 12))) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 90.0, 90.0, 100.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 5)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 250.0, 250.0, 280.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 6)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 130.0, 130.0, 130.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 7)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 8)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 9)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
                }

                if (((gv_unitSetType[gv_Players[2]] == 10) || (gv_unitSetType[gv_Players[2]] == 13) || (gv_unitSetType[gv_Players[2]] == 17) || (gv_unitSetType[gv_Players[2]] == 21))) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 90.0, 90.0, 140.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 14)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 110.0, 110.0, 110.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 18)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 120.0, 120.0, 120.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 19)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[2]] == 20)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 130.0, 130.0, 130.0);
                }

                if ((PlayerHandle(gv_Players[2]) == gv_hANDLE_PORNHACK)) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 250.0, 250.0, 250.0);
                }

            }
            else {
                if ((((gv_jerseyVars.lv_jerseysareonforteam[1] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)) || ((gv_jerseyVars.lv_jerseysareonforteam[2] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)))) {
                    UnitSetScale(gv_Skaters[gv_Players[2]], 160.0, 160.0, 160.0);
                }

            }
            UnitSetScale(gv_Sticks[gv_Players[2]], 390.0, 390.0, 220.0);
        }

        SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_goalieBlocking[lv_temp] = false;
        if ((gv_cancelForcefield[1] == true)) {
            auto5F685334_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            auto5F685334_u = UnitGroupCount(auto5F685334_g, c_unitCountAll);
            for (;; auto5F685334_u -= 1) {
                auto5F685334_var = UnitGroupUnitFromEnd(auto5F685334_g, auto5F685334_u);
                if (auto5F685334_var == null) { break; }
                UnitKill(auto5F685334_var);
            }
            UnitAbilityAddCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NewForceField", "NewGoalieBlock", (((35.0 - lv_loopcount) / 35.0) * -10.0));
        }

    }
    else {
        lv_temp = gv_Players[6];
        gv_goalieBlocking[lv_temp] = true;
        UnitSetScale(gv_Skaters[gv_Players[6]], 50.0, 50.0, 50.0);
        UnitSetScale(gv_Sticks[gv_Players[6]], 100.0, 100.0, 100.0);
        RegionSetCenter(RegionFromId(23), UnitGetPosition(gv_Skaters[gv_Players[6]]));
        auto5CD6402D_var = 0;
        for ( ; auto5CD6402D_var <= auto5CD6402D_ae; auto5CD6402D_var += 1 ) {
            if ((gv_Skaters[gv_Players[6]] != null) && (gv_cancelForcefield[2] == false)) {
                Wait(0.0, c_timeReal);
                lv_loopcount += 1.0;
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == false)) {
                    lv_oldpoint = RegionGetCenter(RegionFromId(23));
                    RegionSetCenter(RegionFromId(23), UnitGetPosition(gv_Skaters[gv_Players[6]]));
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == true) && (gv_Possession == -1)) {
                        lv_angle = AngleBetweenPoints(lv_oldpoint, RegionGetCenter(RegionFromId(23)));
                        while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == false)) {
                            UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.1, lv_angle), false);
                        }
                        if ((gv_Shootout == false) && (lv_saved == false) && (gv_ShootingPlayer != 0) && ((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
                            if ((gv_potentialSOG == true)) {
                                gf_Collision2(1);
                                gf_HeatmapLogLastShotasaRealShot();
                                gv_onTargetBlueNet = false;
                                gv_potentialSOG = false;
                                gv_doNotIncreaseSOG = true;
                                gv_inGameStatsGoalieBlock[gv_Players[6]] += 1;
                                gv_stats_OverallGoalieBlocks[gv_Players[6]] += 1;
                                gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO")-1500)/50)));
                                if ((gv_ranked == true)) {
                                    BankValueSetFromFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                    gf_SaveBank(gv_Players[6]);
                                }

                                lv_saved = true;
                            }

                        }

                        gv_puckMagnitude = DistanceBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1)));
                        gf_ApplySaveGoalieSound(gv_Players[6], true);
                        gf_ApplyForcePolarNoMomentum(gv_pUCK, (gv_puckMagnitude * 0.25), gf_CalculateBounceAngleMovingCircleOnPost(gv_pUCK, gv_puckAngle, RegionFromId(23), "circle"));
                        UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_pUCK, 0) + (UnitGetCustomValue(gv_Skaters[gv_Players[6]], 0) * 1.2)));
                        UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_pUCK, 1) + (UnitGetCustomValue(gv_Skaters[gv_Players[6]], 1) * 1.2)));
                    }

                }

                auto0CB26F33_g = UnitGroup("ForceField", gv_Players[6], RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
                auto0CB26F33_u = UnitGroupCount(auto0CB26F33_g, c_unitCountAll);
                for (;; auto0CB26F33_u -= 1) {
                    auto0CB26F33_var = UnitGroupUnitFromEnd(auto0CB26F33_g, auto0CB26F33_u);
                    if (auto0CB26F33_var == null) { break; }
                    UnitSetPosition(auto0CB26F33_var, UnitGetPosition(gv_Skaters[gv_Players[6]]), true);
                }
            }

        }
        RegionSetCenter(RegionFromId(23), PointFromId(332));
        if ((gv_pullGoalie[2] == false)) {
            if ((gv_unitSetType[gv_Players[6]] == 1)) {
                UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
            }

            if ((((gv_jerseyVars.lv_jerseysareonforteam[1] == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)) || ((gv_jerseyVars.lv_jerseysareonforteam[2] == false) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)))) {
                if ((gv_unitSetType[gv_Players[6]] == 2)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 120.0, 120.0, 120.0);
                }

                if (((gv_unitSetType[gv_Players[6]] == 3) || (gv_unitSetType[gv_Players[6]] == 15))) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 130.0, 130.0, 130.0);
                }

                if (((gv_unitSetType[gv_Players[6]] == 4) || (gv_unitSetType[gv_Players[6]] == 12))) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 90.0, 90.0, 100.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 5)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 250.0, 250.0, 280.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 6)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 130.0, 130.0, 130.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 7)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 8)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 9)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
                }

                if (((gv_unitSetType[gv_Players[6]] == 10) || (gv_unitSetType[gv_Players[6]] == 13) || (gv_unitSetType[gv_Players[6]] == 17) || (gv_unitSetType[gv_Players[6]] == 21))) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 90.0, 90.0, 140.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 14)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 110.0, 110.0, 110.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 18)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 120.0, 120.0, 120.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 19)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
                }

                if ((gv_unitSetType[gv_Players[6]] == 20)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 130.0, 130.0, 130.0);
                }

                if ((PlayerHandle(gv_Players[6]) == gv_hANDLE_PORNHACK)) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 250.0, 250.0, 250.0);
                }

            }
            else {
                if ((((gv_jerseyVars.lv_jerseysareonforteam[1] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)) || ((gv_jerseyVars.lv_jerseysareonforteam[2] == true) && (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)))) {
                    UnitSetScale(gv_Skaters[gv_Players[6]], 160.0, 160.0, 160.0);
                }

            }
            UnitSetScale(gv_Sticks[gv_Players[6]], 390.0, 390.0, 220.0);
        }

        SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_goalieBlocking[lv_temp] = false;
        if ((gv_cancelForcefield[2] == true)) {
            auto19E99182_g = UnitGroup("ForceField", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            auto19E99182_u = UnitGroupCount(auto19E99182_g, c_unitCountAll);
            for (;; auto19E99182_u -= 1) {
                auto19E99182_var = UnitGroupUnitFromEnd(auto19E99182_g, auto19E99182_u);
                if (auto19E99182_var == null) { break; }
                UnitKill(auto19E99182_var);
            }
            UnitAbilityAddCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NewForceField", "NewGoalieBlock", (((35.0 - lv_loopcount) / 35.0) * -10.0));
        }

        gv_cancelForcefield[2] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceField_Init () {
    gt_ForceField = TriggerCreate("gt_ForceField_Func");
    TriggerAddEventPlayerEffectUsed(gt_ForceField, c_playerAny, "ForceField");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Goalie Stop
//--------------------------------------------------------------------------------------------------
bool gt_GoalieStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_Players[2]) || (EventPlayer() == gv_Players[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_isCheckingInProgress[EventPlayer()] == true)) {
        UnitSetCustomValue(EventUnit(), 0, (UnitGetCustomValue(EventUnit(), 0)*gv_goalieStopSpeed));
        UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1)*gv_goalieStopSpeed));
    }
    else {
        UnitSetCustomValue(EventUnit(), 0, (UnitGetCustomValue(EventUnit(), 0)*0.8));
        UnitSetCustomValue(EventUnit(), 1, (UnitGetCustomValue(EventUnit(), 1)*0.8));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoalieStop_Init () {
    gt_GoalieStop = TriggerCreate("gt_GoalieStop_Func");
    TriggerAddEventUnitOrder(gt_GoalieStop, null, AbilityCommand("stop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop
//--------------------------------------------------------------------------------------------------
bool gt_Stop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pullGoalie[1] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stopG1 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stop_Init () {
    gt_Stop = TriggerCreate("gt_Stop_Func");
    TriggerAddEventUnitOrder(gt_Stop, UnitRefFromVariable("gv_Skaters[gv_Players[2]]"), AbilityCommand("stop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop 2
//--------------------------------------------------------------------------------------------------
bool gt_Stop2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pullGoalie[2] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stopG2 = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stop2_Init () {
    gt_Stop2 = TriggerCreate("gt_Stop2_Func");
    TriggerAddEventUnitOrder(gt_Stop2, UnitRefFromVariable("gv_Skaters[gv_Players[6]]"), AbilityCommand("stop", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p1
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp1_Init () {
    gt_StoreMouseLocationsp1 = TriggerCreate("gt_StoreMouseLocationsp1_Func");
    TriggerEnable(gt_StoreMouseLocationsp1, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp1, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p2
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp2_Init () {
    gt_StoreMouseLocationsp2 = TriggerCreate("gt_StoreMouseLocationsp2_Func");
    TriggerEnable(gt_StoreMouseLocationsp2, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp2, 2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p3
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp3_Init () {
    gt_StoreMouseLocationsp3 = TriggerCreate("gt_StoreMouseLocationsp3_Func");
    TriggerEnable(gt_StoreMouseLocationsp3, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp3, 3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p4
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp4_Init () {
    gt_StoreMouseLocationsp4 = TriggerCreate("gt_StoreMouseLocationsp4_Func");
    TriggerEnable(gt_StoreMouseLocationsp4, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp4, 4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p5
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp5_Init () {
    gt_StoreMouseLocationsp5 = TriggerCreate("gt_StoreMouseLocationsp5_Func");
    TriggerEnable(gt_StoreMouseLocationsp5, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp5, 5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p6
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp6_Init () {
    gt_StoreMouseLocationsp6 = TriggerCreate("gt_StoreMouseLocationsp6_Func");
    TriggerEnable(gt_StoreMouseLocationsp6, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp6, 6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p7
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp7_Init () {
    gt_StoreMouseLocationsp7 = TriggerCreate("gt_StoreMouseLocationsp7_Func");
    TriggerEnable(gt_StoreMouseLocationsp7, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp7, 7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p8
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp8_Init () {
    gt_StoreMouseLocationsp8 = TriggerCreate("gt_StoreMouseLocationsp8_Func");
    TriggerEnable(gt_StoreMouseLocationsp8, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp8, 8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p9
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp9_Init () {
    gt_StoreMouseLocationsp9 = TriggerCreate("gt_StoreMouseLocationsp9_Func");
    TriggerEnable(gt_StoreMouseLocationsp9, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp9, 9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p10
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp10_Init () {
    gt_StoreMouseLocationsp10 = TriggerCreate("gt_StoreMouseLocationsp10_Func");
    TriggerEnable(gt_StoreMouseLocationsp10, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp10, 10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p11
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp11_Init () {
    gt_StoreMouseLocationsp11 = TriggerCreate("gt_StoreMouseLocationsp11_Func");
    TriggerEnable(gt_StoreMouseLocationsp11, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp11, 11);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p12
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp12_Init () {
    gt_StoreMouseLocationsp12 = TriggerCreate("gt_StoreMouseLocationsp12_Func");
    TriggerEnable(gt_StoreMouseLocationsp12, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp12, 12);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p13
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp13_Init () {
    gt_StoreMouseLocationsp13 = TriggerCreate("gt_StoreMouseLocationsp13_Func");
    TriggerEnable(gt_StoreMouseLocationsp13, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp13, 13);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p14
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp14_Init () {
    gt_StoreMouseLocationsp14 = TriggerCreate("gt_StoreMouseLocationsp14_Func");
    TriggerEnable(gt_StoreMouseLocationsp14, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp14, 14);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StoreMouseLocations p15
//--------------------------------------------------------------------------------------------------
bool gt_StoreMouseLocationsp15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePositions[EventPlayer()] = libNtve_gf_PointFromXYZ(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld(), EventMouseMovedPosZWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StoreMouseLocationsp15_Init () {
    gt_StoreMouseLocationsp15 = TriggerCreate("gt_StoreMouseLocationsp15_Func");
    TriggerEnable(gt_StoreMouseLocationsp15, false);
    TriggerAddEventMouseMoved(gt_StoreMouseLocationsp15, 15);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check which players to track mouse position
//--------------------------------------------------------------------------------------------------
bool gt_Checkwhichplayerstotrackmouseposition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_looprunning;
    int lv_enumplayer;

    // Automatic Variable Declarations
    playergroup autoF1886844_g;
    playergroup auto819EB726_g;

    // Variable Initialization
    lv_looprunning = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_looprunning == true)) {
        autoF1886844_g = gv_actualPlayerzonTeam[1];
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(autoF1886844_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((((gv_Skaters[lv_enumplayer] != null) && (UnitAbilityExists(gv_Skaters[lv_enumplayer], "NewOneTimer") == true)) || ((gv_Players[2] == lv_enumplayer) && (gv_options_CursorBoost[lv_enumplayer] == true)))) {
                TriggerEnable(gv_mouselocationtriggers[lv_enumplayer], true);
            }
            else {
                TriggerEnable(gv_mouselocationtriggers[lv_enumplayer], false);
            }
        }
        auto819EB726_g = gv_actualPlayerzonTeam[2];
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(auto819EB726_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((((gv_Skaters[lv_enumplayer] != null) && (UnitAbilityExists(gv_Skaters[lv_enumplayer], "NewOneTimer") == true)) || ((gv_Players[6] == lv_enumplayer) && (gv_options_CursorBoost[lv_enumplayer] == true)))) {
                TriggerEnable(gv_mouselocationtriggers[lv_enumplayer], true);
            }
            else {
                TriggerEnable(gv_mouselocationtriggers[lv_enumplayer], false);
            }
        }
        Wait(3.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkwhichplayerstotrackmouseposition_Init () {
    gt_Checkwhichplayerstotrackmouseposition = TriggerCreate("gt_Checkwhichplayerstotrackmouseposition_Func");
    TriggerAddEventMapInit(gt_Checkwhichplayerstotrackmouseposition);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p1
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower_Init () {
    gt_DecreaseShotPower = TriggerCreate("gt_DecreaseShotPower_Func");
    TriggerEnable(gt_DecreaseShotPower, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower, UnitRefFromVariable("gv_Skaters[1]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p2
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower2_Init () {
    gt_DecreaseShotPower2 = TriggerCreate("gt_DecreaseShotPower2_Func");
    TriggerEnable(gt_DecreaseShotPower2, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower2, UnitRefFromVariable("gv_Skaters[2]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p3
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower5_Init () {
    gt_DecreaseShotPower5 = TriggerCreate("gt_DecreaseShotPower5_Func");
    TriggerEnable(gt_DecreaseShotPower5, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower5, UnitRefFromVariable("gv_Skaters[3]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p4
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower6_Init () {
    gt_DecreaseShotPower6 = TriggerCreate("gt_DecreaseShotPower6_Func");
    TriggerEnable(gt_DecreaseShotPower6, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower6, UnitRefFromVariable("gv_Skaters[4]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p5
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower7_Init () {
    gt_DecreaseShotPower7 = TriggerCreate("gt_DecreaseShotPower7_Func");
    TriggerEnable(gt_DecreaseShotPower7, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower7, UnitRefFromVariable("gv_Skaters[5]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p6
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower8_Init () {
    gt_DecreaseShotPower8 = TriggerCreate("gt_DecreaseShotPower8_Func");
    TriggerEnable(gt_DecreaseShotPower8, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower8, UnitRefFromVariable("gv_Skaters[6]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p7
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower9_Init () {
    gt_DecreaseShotPower9 = TriggerCreate("gt_DecreaseShotPower9_Func");
    TriggerEnable(gt_DecreaseShotPower9, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower9, UnitRefFromVariable("gv_Skaters[7]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p8
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower10_Init () {
    gt_DecreaseShotPower10 = TriggerCreate("gt_DecreaseShotPower10_Func");
    TriggerEnable(gt_DecreaseShotPower10, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower10, UnitRefFromVariable("gv_Skaters[8]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p9
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower11_Init () {
    gt_DecreaseShotPower11 = TriggerCreate("gt_DecreaseShotPower11_Func");
    TriggerEnable(gt_DecreaseShotPower11, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower11, UnitRefFromVariable("gv_Skaters[9]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p10
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower12_Init () {
    gt_DecreaseShotPower12 = TriggerCreate("gt_DecreaseShotPower12_Func");
    TriggerEnable(gt_DecreaseShotPower12, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower12, UnitRefFromVariable("gv_Skaters[10]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p11
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower13_Init () {
    gt_DecreaseShotPower13 = TriggerCreate("gt_DecreaseShotPower13_Func");
    TriggerEnable(gt_DecreaseShotPower13, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower13, UnitRefFromVariable("gv_Skaters[11]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p12
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower14_Init () {
    gt_DecreaseShotPower14 = TriggerCreate("gt_DecreaseShotPower14_Func");
    TriggerEnable(gt_DecreaseShotPower14, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower14, UnitRefFromVariable("gv_Skaters[12]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p13
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower15_Init () {
    gt_DecreaseShotPower15 = TriggerCreate("gt_DecreaseShotPower15_Func");
    TriggerEnable(gt_DecreaseShotPower15, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower15, UnitRefFromVariable("gv_Skaters[13]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p14
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower16_Init () {
    gt_DecreaseShotPower16 = TriggerCreate("gt_DecreaseShotPower16_Func");
    TriggerEnable(gt_DecreaseShotPower16, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower16, UnitRefFromVariable("gv_Skaters[14]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shot Power p15
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShotPower17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_windingUp[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_decreaseShotPower[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShotPower17_Init () {
    gt_DecreaseShotPower17 = TriggerCreate("gt_DecreaseShotPower17_Func");
    TriggerEnable(gt_DecreaseShotPower17, false);
    TriggerAddEventUnitOrder(gt_DecreaseShotPower17, UnitRefFromVariable("gv_Skaters[15]"), AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shot Power
//--------------------------------------------------------------------------------------------------
bool gt_ShotPower2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_TempReal;
    fixed lv_TempReal2;
    fixed lv_TempReal3;
    fixed lv_shotPowerAtTime;
    int lv_shotPowerAtTime2;
    int lv_chargeID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_TempReal2 = 0.11;
    lv_TempReal3 = 0.94;
    lv_shotPowerAtTime2 = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_Possession == lv_shotPowerAtTime2))) {
            return false;
        }

        if (!((UnitCheckAbilCmdState(gv_Skaters[lv_shotPowerAtTime2], AbilityCommand("PingMarkerCreate", 0), c_cmdStateExecuting) == false))) {
            return false;
        }

        if (!((UnitCheckAbilCmdState(gv_Skaters[lv_shotPowerAtTime2], AbilityCommand("RemoteShield", 0), c_cmdStateExecuting) == false))) {
            return false;
        }

        if (!((UnitIsSelected(gv_Skaters[lv_shotPowerAtTime2], lv_shotPowerAtTime2) == true))) {
            return false;
        }

        if (!((gv_windingUp[lv_shotPowerAtTime2] == false))) {
            return false;
        }

        if (!(((gv_Shootout == false) || ((gv_ShootoutShooting == true) && (gv_ShootoutShooting2 == true))))) {
            return false;
        }

        if (!((gv_loading == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_antiCheat.lv_shotChargeID[EventPlayer()] += 1;
    lv_chargeID = gv_antiCheat.lv_shotChargeID[EventPlayer()];
    DialogSetVisible(gv_PowerBarDialog[lv_shotPowerAtTime2], PlayerGroupSingle(lv_shotPowerAtTime2), true);
    gv_windingUp[lv_shotPowerAtTime2] = true;
    gv_ShotCount[lv_shotPowerAtTime2] = true;
    gv_ShotPower[lv_shotPowerAtTime2] = 0.0;
    while ((gv_ShotCount[lv_shotPowerAtTime2] == true) && (gv_antiCheat.lv_shotChargeID[EventPlayer()] == lv_chargeID)) {
        gv_ShotCount2[lv_shotPowerAtTime2] = true;
        Wait(0.0, c_timeReal);
        if ((gv_powershot == false)) {
            gv_ShotPower[lv_shotPowerAtTime2] += lv_TempReal2;
        }
        else {
            gv_ShotPower[lv_shotPowerAtTime2] += (lv_TempReal2*2);
        }
        lv_TempReal3 *= 1.0015;
        if ((gv_rEDLINE_MODE == true) && (gv_redlinePowerups.lv_powerupCD2Shotpower[lv_shotPowerAtTime2] > 0)) {
            gv_ShotPower[lv_shotPowerAtTime2] += (lv_TempReal2*1.01);
        }

        lv_TempReal2 *= lv_TempReal3;
        if ((lv_TempReal3 > 1.0)) {
            lv_TempReal3 = 1.0;
        }

        if ((gv_decreaseShotPower[lv_shotPowerAtTime2] == true)) {
            gv_decreaseShotPower[lv_shotPowerAtTime2] = false;
            lv_shotPowerAtTime = gv_ShotPower[lv_shotPowerAtTime2];
            gv_ShotPower[lv_shotPowerAtTime2] = 0.0;
            lv_TempReal2 = 0.07;
            lv_TempReal3 = 0.95;
            while ((gv_ShotPower[lv_shotPowerAtTime2] <= (lv_shotPowerAtTime - (gv_rIGHT_CLICK_SHOT_POWER_DECREASE_PERCENTAGE/20)))) {
                gv_ShotPower[lv_shotPowerAtTime2] += lv_TempReal2;
                lv_TempReal3 *= 1.0015;
                lv_TempReal2 *= lv_TempReal3;
                if ((lv_TempReal3 > 1.0)) {
                    lv_TempReal3 = 1.0;
                }

                if ((gv_rEDLINE_MODE == true) && (gv_redlinePowerups.lv_powerupCD2Shotpower[lv_shotPowerAtTime2] > 0)) {
                    gv_ShotPower[lv_shotPowerAtTime2] += (lv_TempReal2*1.01);
                }

            }
        }

        if ((gv_powershot == false)) {
            if ((gv_ShotPower[lv_shotPowerAtTime2] > 3.0)) {
                gv_ShotPower[lv_shotPowerAtTime2] = 3.0;
            }

        }
        else {
            if ((gv_ShotPower[lv_shotPowerAtTime2] > 6.0)) {
                gv_ShotPower[lv_shotPowerAtTime2] = 6.0;
            }

        }
        if ((gv_powershot == false)) {
            lv_TempReal = (gv_ShotPower[lv_shotPowerAtTime2]/3);
        }
        else {
            lv_TempReal = (gv_ShotPower[lv_shotPowerAtTime2]/6);
        }
        if ((lv_TempReal > 1.0)) {
            lv_TempReal = 1.0;
        }

        DialogControlSetSize(gv_PowerBarImage[lv_shotPowerAtTime2], PlayerGroupAll(), (FixedToInt((654*lv_TempReal))+1), 20);
        if ((gv_ShotPower[lv_shotPowerAtTime2] >= 3.0) && (gv_powershot == false)) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_PowerBarImage[lv_shotPowerAtTime2], Color(80.78, 0.00, 0.00), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemDesaturationColor(gv_PowerBarImage[lv_shotPowerAtTime2], Color(0.00, 75.69, 0.00), PlayerGroupAll());
        }
        if ((gv_ShotCount[lv_shotPowerAtTime2] == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShotPower2_Init () {
    gt_ShotPower2 = TriggerCreate("gt_ShotPower2_Func");
    TriggerAddEventMouseClicked(gt_ShotPower2, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shoot Puck
//--------------------------------------------------------------------------------------------------
bool gt_ShootPuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_LocReal;
    int lv_player;
    point lv_targetPoint;
    point lv_point;
    fixed lv_ipm;
    fixed lv_angle;
    fixed lv_puckRescue;
    int lv_puckRescueAttempts;
    point lv_puckRescueInitialPosition;

    // Automatic Variable Declarations
    const int autoBB85FF05_ae = 32;
    int autoBB85FF05_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_antiCheat.lv_leftClickSpread[EventPlayer()] -= 1;
    if ((gv_windingUp[EventPlayer()] == true) && (gv_Possession == EventPlayer())) {
        if ((EventPlayer() != c_playerAny)) {
            lv_player = EventPlayer();
            lv_targetPoint = libNtve_gf_PointFromXYZ(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld(), EventMouseClickedPosZWorld());
            gf_LogHeatmapTempContainerSOG(lv_player, UnitGetPosition(gv_Skaters[lv_player]), false, AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
        }
        else {
            lv_player = gv_playerOneTimering;
            lv_targetPoint = gv_mousePositions[lv_player];
            gf_LogHeatmapTempContainerSOG(lv_player, UnitGetPosition(gv_Skaters[lv_player]), true, AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
        }
        gv_windingUp[lv_player] = false;
        gv_ShotCount[lv_player] = false;
        gv_ShotCount2[lv_player] = false;
        gv_decreaseShotPower[lv_player] = false;
        if ((gv_Possession == lv_player)) {
            gf_MeterRemove(true);
        }
        else {
            gf_MeterRemove(false);
            return true;
        }
        libNtve_gf_MakeUnitFacePoint(gv_Skaters[lv_player], lv_targetPoint, 0.1);
        gv_Shoot[lv_player] = true;
        gv_Possession = -1;
        if ((gv_ShootingPlayer == lv_player)) {
        }
        else {
            gv_lastPass = gv_ShootingPlayer;
        }
        gv_ShootingPlayer = lv_player;
        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == true)) {
            while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == true)) {
                UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 90.0), false);
            }
        }

        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == true)) {
            while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == true)) {
                UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 0.0), false);
            }
        }

        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == true)) {
            while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == true)) {
                UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 270.0), false);
            }
        }

        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == true)) {
            while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == true)) {
                UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 180.0), false);
            }
        }

        if (((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == true))) {
            lv_puckRescue = 0.05;
            lv_puckRescueAttempts = 0;
            lv_puckRescueInitialPosition = UnitGetPosition(gv_pUCK);
            while (((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(17)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(48)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(47)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(39)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(24)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(16)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(5)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(19)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(50)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(51)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(37)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(38)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(6)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(7)) == true))) {
                UnitSetPosition(gv_pUCK, PointWithOffsetPolar(lv_puckRescueInitialPosition, lv_puckRescue, AngleBetweenPoints(lv_puckRescueInitialPosition, UnitGetPosition(gv_Skaters[gv_ShootingPlayer]))), false);
                lv_puckRescue += 0.05;
                lv_puckRescueAttempts += 1;
            }
        }

        UnitSetCustomValue(gv_pUCK, 0, (UnitGetCustomValue(gv_Skaters[lv_player], 0)*0.25));
        UnitSetCustomValue(gv_pUCK, 1, (UnitGetCustomValue(gv_Skaters[lv_player], 1)*0.25));
        if ((gv_Shootout == true)) {
            gv_ShootoutShooting2 = false;
        }

        lv_LocReal = DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_player]), lv_targetPoint);
        lv_LocReal = (lv_LocReal*.08);
        lv_LocReal = (lv_LocReal * (1 + (gv_ShotPower[lv_player] * 2.0)));
        if ((gv_powershot == false)) {
            if ((lv_LocReal > 2.4)) {
                lv_LocReal = 2.4;
            }
            else {
                if ((lv_LocReal < 0.4)) {
                    lv_LocReal = 0.4;
                }

            }
        }
        else {
            if ((lv_LocReal > 4.8)) {
                lv_LocReal = 4.8;
            }
            else {
                if ((lv_LocReal < 0.4)) {
                    lv_LocReal = 0.4;
                }

            }
        }
        PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
        SoundPlayAtPoint(SoundLink("HockeyShot", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (lv_LocReal*30), 0.0);
        UnitSetCustomValue(gv_pUCK, 3, 0.98);
        UnitSetCustomValue(gv_pUCK, 4, 0.5);
        lv_LocReal = (lv_LocReal+(gv_ShotPower[lv_player]*1.25));
        if ((gv_powershot == false)) {
            if ((lv_LocReal > 6.0)) {
                lv_LocReal = 6.0;
                gf_FullchargeAnimation();
            }

        }
        else {
            if ((lv_LocReal > 12.0)) {
                lv_LocReal = 12.0;
                gf_FullchargeAnimation();
            }

        }
        lv_angle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint);
        gf_ApplyForcePolar(gv_pUCK, (lv_LocReal*.25), AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
        gv_doNotIncreaseSOG = false;
        gv_potentialSOG = gf_CheckPotentialSOG();
        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(32)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(34)) == false)) {
            lv_point = UnitGetPosition(gv_pUCK);
            lv_ipm = lv_LocReal;
            lv_angle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint);
            autoBB85FF05_var = 1;
            for ( ; autoBB85FF05_var <= autoBB85FF05_ae; autoBB85FF05_var += 1 ) {
                if (((RegionContainsPoint(RegionFromId(3), lv_point) == true) || (RegionContainsPoint(RegionFromId(41), lv_point) == true) || (RegionContainsPoint(RegionFromId(4), lv_point) == true) || (RegionContainsPoint(RegionFromId(40), lv_point) == true) || (RegionContainsPoint(RegionFromId(16), lv_point) == true) || (RegionContainsPoint(RegionFromId(5), lv_point) == true) || (RegionContainsPoint(RegionFromId(6), lv_point) == true) || (RegionContainsPoint(RegionFromId(7), lv_point) == true))) {
                    if (((RegionContainsPoint(RegionFromId(4), lv_point) == true) || (RegionContainsPoint(RegionFromId(40), lv_point) == true) || (RegionContainsPoint(RegionFromId(6), lv_point) == true) || (RegionContainsPoint(RegionFromId(7), lv_point) == true))) {
                        if (((EventPlayer() == gv_Players[1]) || (EventPlayer() == gv_Players[2]) || (EventPlayer() == gv_Players[3]) || (EventPlayer() == gv_Players[4]))) {
                            gv_stats_Shots[EventPlayer()] += 1;
                            gf_SaveBank(EventPlayer());
                            gv_potentialUnshot = EventPlayer();
                        }

                    }
                    else {
                        if (((RegionContainsPoint(RegionFromId(3), lv_point) == true) || (RegionContainsPoint(RegionFromId(41), lv_point) == true) || (RegionContainsPoint(RegionFromId(16), lv_point) == true) || (RegionContainsPoint(RegionFromId(5), lv_point) == true))) {
                            if ((gv_Shootout == false) && ((EventPlayer() == gv_Players[5]) || (EventPlayer() == gv_Players[6]) || (EventPlayer() == gv_Players[7]) || (EventPlayer() == gv_Players[8]))) {
                                gv_stats_Shots[EventPlayer()] += 1;
                                if ((gv_ranked == true)) {
                                    gf_SaveBank(EventPlayer());
                                }

                                gv_potentialUnshot = EventPlayer();
                            }

                        }

                    }
                    break;
                }
                else {
                    lv_point = PointWithOffsetPolar(lv_point, lv_ipm, lv_angle);
                    lv_ipm *= UnitGetCustomValue(gv_pUCK, 3);
                }
            }
        }

        if (((lv_player == gv_Players[2]) && (gv_pullGoalie[1] == false)) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true)) {
            Wait(0.5, c_timeGame);
            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true) && (gv_stoppageOfPlay == false)) {
                TriggerExecute(gt_LeftGoal, true, false);
                TriggerExecute(gt_RightGoal, true, false);
            }

        }
        else {
            if (((lv_player == gv_Players[6]) && (gv_pullGoalie[2] == false)) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true)) {
                Wait(0.5, c_timeGame);
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true) && (gv_stoppageOfPlay == false)) {
                    TriggerExecute(gt_RightGoal, true, false);
                    TriggerExecute(gt_LeftGoal, true, false);
                }

            }
            else {
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true)) {
                    TriggerExecute(gt_RightGoal, true, false);
                    TriggerExecute(gt_LeftGoal, true, false);
                }
                else {
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true)) {
                        TriggerExecute(gt_RightGoal, true, false);
                        TriggerExecute(gt_LeftGoal, true, false);
                    }

                }
            }
        }
        gf_CheckIfCanPossess(EventPlayer(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShootPuck_Init () {
    gt_ShootPuck = TriggerCreate("gt_ShootPuck_Func");
    TriggerAddEventMouseClicked(gt_ShootPuck, c_playerAny, c_mouseButtonLeft, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Steal Puck
//--------------------------------------------------------------------------------------------------
bool gt_StealPuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_locReal;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_antiCheat.lv_leftClickDown[EventPlayer()][2] += 1;
    gv_antiCheat.lv_leftClickSpread[EventPlayer()] += 1;
    lv_player = EventPlayer();
    if ((gv_Possession != lv_player) && (gv_Shoot[lv_player] == false) && (gv_StealDelay[lv_player] == false) && (UnitIsSelected(gv_Skaters[lv_player], lv_player) == true) && (gv_loading == false) && (gv_stealBlockedTime[lv_player] == 0) && (gv_redlineMode.lv_ghosted[lv_player] == false) && (gv_cannotblockonetimer[lv_player] == false)) {
    }
    else {
        return true;
    }
    gv_Steal[lv_player] = true;
    gv_StealDelay[lv_player] = true;
    if ((gv_oneTiming[lv_player] == false)) {
        gv_StealShow[lv_player] = true;
    }

    PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
    if ((gv_Possession != -1) && (!(((gv_Possession == gv_Players[2]) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) && (ModI(gv_Period, 2) == 1)))) && (!(((gv_Possession == gv_Players[2]) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(14)) == true) && (ModI(gv_Period, 2) != 1)))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(14)) == true) && (gv_Possession == gv_Players[6]) && (ModI(gv_Period, 2) == 1)))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(13)) == true) && (gv_Possession == gv_Players[6]) && (ModI(gv_Period, 2) != 1)))) && (((((gv_pullGoalie[1] == false) && (gv_Possession == gv_Players[2])) || ((gv_pullGoalie[2] == false) && (gv_Possession == gv_Players[6]))) && ((RegionContainsPoint(RegionCircle(PointFromId(7), 2.17), gv_stickTipPoint[lv_player]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Sticks[gv_Possession]), 2.0), gv_stickTipPoint[lv_player]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[gv_Possession]), 1.75), gv_stickTipPoint[lv_player]) == true))) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Sticks[gv_Possession]), 2.0), gv_stickTipPoint[lv_player]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[gv_Possession]), 0.95), gv_stickTipPoint[lv_player]) == true) || ((((gv_pullGoalie[1] == false) && (lv_player == gv_Players[2])) || ((gv_pullGoalie[2] == false) && (lv_player == gv_Players[6]))) && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[lv_player]), 1.75), PointFromId(7)) == true)) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[lv_player]), 0.95), PointFromId(7)) == true)) && (gv_stoppageOfPlay == false) && (gv_FaceoffTimer == 0) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[lv_player], RegionFromId(3)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(64)) == true)))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[lv_player], RegionFromId(4)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(63)) == true))))) {
        gv_playerNoCheck[gv_Possession] = true;
        gv_windingUp[gv_Possession] = false;
        gv_ShotCount[gv_Possession] = false;
        gv_ShotCount2[gv_Possession] = false;
        gv_Shoot[gv_Possession] = false;
        DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
        DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
        gf_CheckResetFaceoffTimer();
        if ((((gv_pullGoalie[1] == false) && (lv_player == gv_Players[2]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true) && (ModI(gv_Period, 2) == 1)) || ((gv_pullGoalie[1] == false) && (lv_player == gv_Players[2]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true) && (ModI(gv_Period, 2) != 1)) || ((gv_pullGoalie[2] == false) && (lv_player == gv_Players[6]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true) && (ModI(gv_Period, 2) == 1)) || ((gv_pullGoalie[2] == false) && (lv_player == gv_Players[6]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true) && (ModI(gv_Period, 2) != 1)))) {
            gv_lastPass = 0;
            gv_ShootingPlayer = lv_player;
            gv_inGameStatsTurnovers[gv_Possession] += 1;
            gv_stats_Turnovers[gv_Possession] += 1;
            if ((gv_ranked == true)) {
                gf_SaveBank(gv_Possession);
            }

            gv_inGameStatsSteals[lv_player] += 1;
            gv_stats_Steals[lv_player] += 1;
            if ((gv_ranked == true)) {
                gf_SaveBank(lv_player);
            }

        }
        else {
            if (((((gv_Players[gv_Possession] == gv_Players[1]) || (gv_Players[gv_Possession] == gv_Players[2]) || (gv_Players[gv_Possession] == gv_Players[3]) || (gv_Players[gv_Possession] == gv_Players[4])) && ((gv_Players[lv_player] == gv_Players[5]) || (gv_Players[lv_player] == gv_Players[6]) || (gv_Players[lv_player] == gv_Players[7]) || (gv_Players[lv_player] == gv_Players[8]))) || (((gv_Players[gv_Possession] == gv_Players[5]) || (gv_Players[gv_Possession] == gv_Players[6]) || (gv_Players[gv_Possession] == gv_Players[7]) || (gv_Players[gv_Possession] == gv_Players[8])) && ((gv_Players[lv_player] == gv_Players[1]) || (gv_Players[lv_player] == gv_Players[2]) || (gv_Players[lv_player] == gv_Players[3]) || (gv_Players[lv_player] == gv_Players[4]))))) {
                if ((((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true) && ((gv_Players[lv_player] == gv_Players[1]) || (gv_Players[lv_player] == gv_Players[2]) || (gv_Players[lv_player] == gv_Players[3]) || (gv_Players[lv_player] == gv_Players[4]))) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true) && ((gv_Players[lv_player] == gv_Players[5]) || (gv_Players[lv_player] == gv_Players[6]) || (gv_Players[lv_player] == gv_Players[7]) || (gv_Players[lv_player] == gv_Players[8]))))) {
                    gv_stats_DefensivePoints[lv_player] += 1;
                }

                gv_lastPass = 0;
                gv_ShootingPlayer = 0;
                gv_inGameStatsTurnovers[gv_Possession] += 1;
                gv_stats_Turnovers[gv_Possession] += 1;
                if ((gv_ranked == true)) {
                    gf_SaveBank(gv_Possession);
                }

                gv_inGameStatsSteals[lv_player] += 1;
                gv_stats_Steals[lv_player] += 1;
                if ((gv_ranked == true)) {
                    gf_SaveBank(lv_player);
                }

            }

        }
        gv_Possession = lv_player;
        if ((gv_oneTiming[lv_player] == true)) {
            UnitAbilityShow(gv_Skaters[lv_player], "NewOneTimer", true);
            gv_oneTiming[lv_player] = false;
            UnitBehaviorRemove(gv_Skaters[lv_player], "OneNEWTiming", 1);
        }

        if ((gv_Shootout == true)) {
            gf_RotateShootout(false);
        }

    }

    SoundPlayAtPoint(SoundLink("HockeySteal", -1), PlayerGroupAll(), UnitGetPosition(gv_Skaters[lv_player]), 0.0, (60), 0.0);
    Wait(0.25, c_timeGame);
    gv_StealShow[lv_player] = false;
    Wait(0.5, c_timeGame);
    gv_Steal[lv_player] = false;
    gv_StealDelay[lv_player] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StealPuck_Init () {
    gt_StealPuck = TriggerCreate("gt_StealPuck_Func");
    TriggerAddEventMouseClicked(gt_StealPuck, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check
//--------------------------------------------------------------------------------------------------
bool gt_Check_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_cancel;
    bool lv_isGoalieBlock;
    int lv_i;
    int lv_enumint;

    // Automatic Variable Declarations
    const int autoFA243159_ae = 20;
    const int autoFA243159_ai = 1;
    int autoB9179864_ae;
    const int autoB9179864_ai = 1;
    const int auto03415FB7_ae = 32;
    const int auto03415FB7_ai = 1;
    int auto7E324D7C_ae;
    const int auto7E324D7C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsed() == "UnknownEffect"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerNoCheck[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = false;
    SoundPlayAtPointForPlayer(SoundLink("HockeyBoost", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, 80.0, 0.0);
    libNtve_gf_CreateModelAtPoint("PhoenixAirSplashAttackImpact", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    if ((((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
        gv_isCheckingInProgress[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
        if ((gv_options_CursorBoost[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] == false)) {
            if ((UnitOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0) == null)) {
                if (((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(14)) == true))) {
                    gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1.0, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                }
                else {
                    gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.8, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
                }
            }
            else {
                if (((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(14)) == true))) {
                    gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), OrderGetTargetPosition(UnitOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0))));
                }
                else {
                    gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.8, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), OrderGetTargetPosition(UnitOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0))));
                }
            }
        }
        else {
            UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(AbilityCommand("move", 0), gv_mousePositions[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]), c_orderQueueReplace);
            if (((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitCaster), RegionFromId(14)) == true))) {
                gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), gv_mousePositions[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
            }
            else {
                gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.8, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), gv_mousePositions[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
            }
        }
        gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = 32;
        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[2])) {
            gv_stopG1 = false;
        }

        if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[6])) {
            gv_stopG2 = false;
        }

        gf_Checkanimationgoalie(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        if ((gv_ischeckingon == true)) {
            gf_CheckingCollisionGoalie(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        }

        lv_enumint = 1;
        for ( ; ( (auto03415FB7_ai >= 0 && lv_enumint <= auto03415FB7_ae) || (auto03415FB7_ai < 0 && lv_enumint >= auto03415FB7_ae) ) ; lv_enumint += auto03415FB7_ai ) {
            if ((gv_stopG1 == true) && (UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[2])) {
                break;
            }

            if ((gv_stopG2 == true) && (UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == gv_Players[6])) {
                break;
            }

            Wait(0.0, c_timeGame);
            gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] -= 1;
            if ((!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) && (gv_Possession == gv_Players[2])))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(14)) == true) && (gv_Possession == gv_Players[6])))) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 5.0)) == true) && (DistanceBetweenPoints(gv_interpolationPoints[1], UnitGetPosition(gv_Skaters[EventPlayer()])) < 3.0) && (gv_stoppageOfPlay == false) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false) || (EventPlayer() == gv_Players[2])) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == false) || (EventPlayer() == gv_Players[6])) && (gv_Shoot[EventPlayer()] == false)) {
                if ((gv_Possession == EventPlayer())) {
                    lv_cancel = true;
                }

                if ((lv_cancel == false)) {
                    auto7E324D7C_ae = gv_numOfRelevantIPs;
                    lv_i = 1;
                    for ( ; ( (auto7E324D7C_ai >= 0 && lv_i <= auto7E324D7C_ae) || (auto7E324D7C_ai < 0 && lv_i >= auto7E324D7C_ae) ) ; lv_i += auto7E324D7C_ai ) {
                        if (((gv_Possession == -1) || ((gv_Possession != -1) && (gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] >= gv_playerCheckCount[gv_Possession]))) && ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.75), gv_interpolationPoints[lv_i]) == true) || (((gv_Possession == -1) && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Sticks[EventPlayer()]), 1.3), gv_interpolationPoints[lv_i]) == true)) || ((gv_Possession != -1) && (DistanceBetweenPoints(gv_stickTipPoint[EventPlayer()], UnitGetPosition(gv_Skaters[gv_Possession])) <= 2.0) && (DistanceBetweenPoints(UnitGetPosition(gv_Skaters[EventPlayer()]), UnitGetPosition(gv_Skaters[gv_Possession])) <= 1.75) && (RegionContainsPoint(RegionCircle(gv_stickTipPoint[EventPlayer()], 2.17), gv_interpolationPoints[lv_i]) == true) && (DistanceBetweenPoints(UnitGetPosition(gv_Sticks[EventPlayer()]), gv_interpolationPoints[lv_i]) <= 2.17)))) && (gv_playerNoCheck[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] == false)) {
                            if ((gv_Possession != -1)) {
                                gv_windingUp[gv_Possession] = false;
                                gv_ShotCount[gv_Possession] = false;
                                gv_ShotCount2[gv_Possession] = false;
                                gv_decreaseShotPower[gv_Possession] = false;
                                gv_Shoot[gv_Possession] = false;
                                DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
                                DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
                            }

                            if ((((EventPlayer() == gv_Players[2]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true)) || ((EventPlayer() == gv_Players[6]) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true)))) {
                                if ((gv_Shootout == false)) {
                                    gv_inGameStatsGoalieBlock[EventPlayer()] += 1;
                                    gv_stats_OverallGoalieBlocks[EventPlayer()] += 1;
                                    gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[EventPlayer()], "Stats", "GoalieELO")-1500)/50)));
                                    BankValueSetFromFixed(gv_Banks[EventPlayer()], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[EventPlayer()], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                    gf_SaveBank(EventPlayer());
                                }

                            }
                            else {
                                if ((gv_Possession > 0) && ((((gv_Players[gv_Possession] == gv_Players[1]) || (gv_Players[gv_Possession] == gv_Players[2]) || (gv_Players[gv_Possession] == gv_Players[3]) || (gv_Players[gv_Possession] == gv_Players[4])) && ((gv_Players[EventPlayer()] == gv_Players[5]) || (gv_Players[EventPlayer()] == gv_Players[6]) || (gv_Players[EventPlayer()] == gv_Players[7]) || (gv_Players[EventPlayer()] == gv_Players[8]))) || (((gv_Players[gv_Possession] == gv_Players[5]) || (gv_Players[gv_Possession] == gv_Players[6]) || (gv_Players[gv_Possession] == gv_Players[7]) || (gv_Players[gv_Possession] == gv_Players[8])) && ((gv_Players[EventPlayer()] == gv_Players[1]) || (gv_Players[EventPlayer()] == gv_Players[2]) || (gv_Players[EventPlayer()] == gv_Players[3]) || (gv_Players[EventPlayer()] == gv_Players[4]))))) {
                                    gv_lastPass = 0;
                                    gv_ShootingPlayer = 0;
                                    gv_inGameStatsTurnovers[gv_Possession] += 1;
                                    gv_stats_Turnovers[gv_Possession] += 1;
                                    gf_SaveBank(gv_Possession);
                                    gv_inGameStatsSteals[EventPlayer()] += 1;
                                    gv_stats_Steals[EventPlayer()] += 1;
                                    gf_SaveBank(EventPlayer());
                                }

                            }
                            gv_Possession = EventPlayer();
                            gv_onTargetRedNet = false;
                            gv_onTargetBlueNet = false;
                            UnitSetCustomValue(gv_pUCK, 0, 0.0);
                            UnitSetCustomValue(gv_pUCK, 1, 0.0);
                            if ((((EventPlayer() == gv_Players[2]) && ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(3)) == true))) || ((EventPlayer() == gv_Players[6]) && ((libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[EventPlayer()], RegionFromId(4)) == true))))) {
                                gf_ApplySaveGoalieSound(EventPlayer(), false);
                            }

                            gf_CheckResetFaceoffTimer();
                            if ((gv_Shootout == true)) {
                                gf_RotateShootout(false);
                            }

                            break;
                        }

                    }
                }

            }

        }
    }
    else {
        gv_isCheckingInProgress[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
        gf_BoostStealAnimation(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_Sticks[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]);
        gf_ApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.6, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = 20;
        if ((gv_ischeckingon == true)) {
            gf_CheckingCollisionSkater(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        }

        gf_Checkanimationskater(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        lv_enumint = 1;
        for ( ; ( (autoFA243159_ai >= 0 && lv_enumint <= autoFA243159_ae) || (autoFA243159_ai < 0 && lv_enumint >= autoFA243159_ae) ) ; lv_enumint += autoFA243159_ai ) {
            Wait(0.0, c_timeGame);
            gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] -= 1;
            if ((!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) && (gv_Possession == gv_Players[2])))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(14)) == true) && (gv_Possession == gv_Players[6])))) && (DistanceBetweenPoints(gv_interpolationPoints[1], UnitGetPosition(gv_Skaters[EventPlayer()])) < 4.5) && (gv_stoppageOfPlay == false) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false) || (EventPlayer() == gv_Players[2])) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == false) || (EventPlayer() == gv_Players[6])) && (gv_Shoot[EventPlayer()] == false)) {
                if ((gv_Possession == EventPlayer())) {
                    lv_cancel = true;
                }

                if ((lv_cancel == false)) {
                    autoB9179864_ae = gv_numOfRelevantIPs;
                    lv_i = 1;
                    for ( ; ( (autoB9179864_ai >= 0 && lv_i <= autoB9179864_ae) || (autoB9179864_ai < 0 && lv_i >= autoB9179864_ae) ) ; lv_i += autoB9179864_ai ) {
                        if (((gv_Possession == -1) || ((gv_Possession != -1) && (gv_playerCheckCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] >= gv_playerCheckCount[gv_Possession]))) && ((RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[EventPlayer()]), 1.2), gv_interpolationPoints[lv_i]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Sticks[EventPlayer()]), 1.2), gv_interpolationPoints[lv_i]) == true) || (RegionContainsPoint(RegionCircle(gv_stickTipPoint[EventPlayer()], 1.2), gv_interpolationPoints[lv_i]) == true)) && (gv_playerNoCheck[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] == false) && (gv_redlineMode.lv_ghosted[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] == false)) {
                            if (((gv_Possession == -1) || (gv_cannotblockonetimer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] == false))) {
                                if ((gv_Possession != -1)) {
                                    if (((((gv_Players[gv_Possession] == gv_Players[1]) || (gv_Players[gv_Possession] == gv_Players[2]) || (gv_Players[gv_Possession] == gv_Players[3]) || (gv_Players[gv_Possession] == gv_Players[4])) && ((gv_Players[EventPlayer()] == gv_Players[5]) || (gv_Players[EventPlayer()] == gv_Players[6]) || (gv_Players[EventPlayer()] == gv_Players[7]) || (gv_Players[EventPlayer()] == gv_Players[8]))) || (((gv_Players[gv_Possession] == gv_Players[5]) || (gv_Players[gv_Possession] == gv_Players[6]) || (gv_Players[gv_Possession] == gv_Players[7]) || (gv_Players[gv_Possession] == gv_Players[8])) && ((gv_Players[EventPlayer()] == gv_Players[1]) || (gv_Players[EventPlayer()] == gv_Players[2]) || (gv_Players[EventPlayer()] == gv_Players[3]) || (gv_Players[EventPlayer()] == gv_Players[4]))))) {
                                        if ((((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true) && ((gv_Players[EventPlayer()] == gv_Players[1]) || (gv_Players[EventPlayer()] == gv_Players[2]) || (gv_Players[EventPlayer()] == gv_Players[3]) || (gv_Players[EventPlayer()] == gv_Players[4]))) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true) && ((gv_Players[EventPlayer()] == gv_Players[5]) || (gv_Players[EventPlayer()] == gv_Players[6]) || (gv_Players[EventPlayer()] == gv_Players[7]) || (gv_Players[EventPlayer()] == gv_Players[8]))))) {
                                            gv_stats_DefensivePoints[EventPlayer()] += 1;
                                        }

                                        gv_lastPass = 0;
                                        gv_ShootingPlayer = 0;
                                        gv_inGameStatsTurnovers[gv_Possession] += 1;
                                        gv_stats_Turnovers[gv_Possession] += 1;
                                        if ((gv_ranked == true)) {
                                            gf_SaveBank(gv_Possession);
                                        }

                                        gv_inGameStatsSteals[EventPlayer()] += 1;
                                        gv_stats_Steals[EventPlayer()] += 1;
                                        if ((gv_ranked == true)) {
                                            gf_SaveBank(EventPlayer());
                                        }

                                    }

                                    gv_windingUp[gv_Possession] = false;
                                    gv_ShotCount[gv_Possession] = false;
                                    gv_ShotCount2[gv_Possession] = false;
                                    gv_decreaseShotPower[gv_Possession] = false;
                                    gv_Shoot[gv_Possession] = false;
                                    DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
                                    DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
                                }

                                gv_Possession = EventPlayer();
                                gv_onTargetRedNet = false;
                                gv_onTargetBlueNet = false;
                                gv_potentialSOG = false;
                                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                                break;
                            }

                        }

                    }
                }

            }

        }
    }
    gv_playerNoCheck[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = false;
    gv_isCheckingInProgress[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Check_Init () {
    gt_Check = TriggerCreate("gt_Check_Func");
    TriggerAddEventPlayerEffectUsed(gt_Check, c_playerAny, "UnknownEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shoot Puck One Timer
//--------------------------------------------------------------------------------------------------
bool gt_ShootPuck3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_LocReal;
    int lv_player;
    point lv_targetPoint;
    point lv_point;
    fixed lv_ipm;
    fixed lv_angle;
    int lv_i;
    int lv_iNT;

    // Automatic Variable Declarations
    playergroup auto8689221D_g;
    const int auto71138874_ae = 32;
    const int auto71138874_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_Possession != -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8689221D_g = PlayerGroupActive();
    lv_iNT = -1;
    while (true) {
        lv_iNT = PlayerGroupNextPlayer(auto8689221D_g, lv_iNT);
        if (lv_iNT < 0) { break; }
        if ((gv_oneTiming[lv_iNT] == true) && (gv_Possession == lv_iNT)) {
            lv_player = lv_iNT;
            DialogSetVisible(gv_PowerBarDialog[lv_player], PlayerGroupSingle(lv_player), false);
            lv_targetPoint = gv_mousePositions[lv_player];
            gv_windingUp[lv_player] = false;
            gv_ShotCount[lv_player] = false;
            gv_ShotCount2[lv_player] = false;
            gv_decreaseShotPower[lv_player] = false;
            gf_CancelOneTimer(lv_player);
            libNtve_gf_MakeUnitFacePoint(gv_Skaters[lv_player], lv_targetPoint, 0.1);
            gv_Shoot[lv_player] = true;
            gv_Possession = -1;
            if ((gv_ShootingPlayer == lv_player)) {
            }
            else {
                gv_lastPass = gv_ShootingPlayer;
            }
            gv_ShootingPlayer = lv_player;
            gf_LogHeatmapTempContainerSOG(lv_player, UnitGetPosition(gv_Skaters[lv_player]), true, AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == true)) {
                while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(11)) == true)) {
                    UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 90.0), false);
                }
            }

            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == true)) {
                while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(12)) == true)) {
                    UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 0.0), false);
                }
            }

            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == true)) {
                while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(1)) == true)) {
                    UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 270.0), false);
                }
            }

            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == true)) {
                while ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(2)) == true)) {
                    UnitSetPosition(gv_pUCK, PointWithOffsetPolar(UnitGetPosition(gv_pUCK), 0.05, 180.0), false);
                }
            }

            UnitSetCustomValue(gv_pUCK, 0, ((UnitGetCustomValue(gv_Skaters[lv_player], 0)+.01)*0.25));
            UnitSetCustomValue(gv_pUCK, 1, ((UnitGetCustomValue(gv_Skaters[lv_player], 1)+.01)*0.25));
            if ((gv_Shootout == true)) {
                gv_ShootoutShooting2 = false;
            }

            lv_LocReal = DistanceBetweenPoints(UnitGetPosition(gv_Skaters[lv_player]), lv_targetPoint);
            lv_LocReal = (lv_LocReal*.08);
            if ((lv_LocReal > 2.4)) {
                lv_LocReal = 2.4;
            }

            PointSet(PointFromId(7), UnitGetPosition(gv_pUCK));
            SoundPlayAtPoint(SoundLink("HockeyShot", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (lv_LocReal*30), 0.0);
            if ((gv_lastPass != 0)) {
                gf_FastFire();
            }

            UnitSetCustomValue(gv_pUCK, 3, 0.98);
            UnitSetCustomValue(gv_pUCK, 4, 0.5);
            lv_LocReal = (lv_LocReal+(gv_lastPuckVelocity*1.25));
            lv_angle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint);
            if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(32)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(34)) == false)) {
                lv_point = UnitGetPosition(gv_pUCK);
                lv_ipm = lv_LocReal;
                lv_angle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint);
                lv_i = 1;
                for ( ; ( (auto71138874_ai >= 0 && lv_i <= auto71138874_ae) || (auto71138874_ai < 0 && lv_i >= auto71138874_ae) ) ; lv_i += auto71138874_ai ) {
                    if (((RegionContainsPoint(RegionFromId(3), lv_point) == true) || (RegionContainsPoint(RegionFromId(41), lv_point) == true) || (RegionContainsPoint(RegionFromId(4), lv_point) == true) || (RegionContainsPoint(RegionFromId(40), lv_point) == true) || (RegionContainsPoint(RegionFromId(16), lv_point) == true) || (RegionContainsPoint(RegionFromId(5), lv_point) == true) || (RegionContainsPoint(RegionFromId(6), lv_point) == true) || (RegionContainsPoint(RegionFromId(7), lv_point) == true))) {
                        if (((RegionContainsPoint(RegionFromId(4), lv_point) == true) || (RegionContainsPoint(RegionFromId(40), lv_point) == true) || (RegionContainsPoint(RegionFromId(6), lv_point) == true) || (RegionContainsPoint(RegionFromId(7), lv_point) == true))) {
                            if (((EventPlayer() == gv_Players[1]) || (EventPlayer() == gv_Players[2]) || (EventPlayer() == gv_Players[3]) || (EventPlayer() == gv_Players[4]))) {
                                gv_stats_Shots[EventPlayer()] += 1;
                                gf_SaveBank(EventPlayer());
                                gv_potentialUnshot = EventPlayer();
                            }

                        }
                        else {
                            if (((RegionContainsPoint(RegionFromId(3), lv_point) == true) || (RegionContainsPoint(RegionFromId(41), lv_point) == true) || (RegionContainsPoint(RegionFromId(16), lv_point) == true) || (RegionContainsPoint(RegionFromId(5), lv_point) == true))) {
                                if (((EventPlayer() == gv_Players[5]) || (EventPlayer() == gv_Players[6]) || (EventPlayer() == gv_Players[7]) || (EventPlayer() == gv_Players[8]))) {
                                    gv_stats_Shots[EventPlayer()] += 1;
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(EventPlayer());
                                    }

                                    gv_potentialUnshot = EventPlayer();
                                }

                            }

                        }
                        break;
                    }
                    else {
                        lv_point = PointWithOffsetPolar(lv_point, lv_ipm, lv_angle);
                        lv_ipm *= UnitGetCustomValue(gv_pUCK, 3);
                    }
                }
            }

            gf_Definewhocantblockonetimer(lv_player, AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
            gf_ApplyForcePolar(gv_pUCK, (lv_LocReal*.25), AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_targetPoint));
            gv_doNotIncreaseSOG = false;
            gv_potentialSOG = gf_CheckPotentialSOG();
            if (((lv_player == gv_Players[2]) && (gv_pullGoalie[1] == false)) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true)) {
                Wait(0.5, c_timeGame);
                if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true) && (gv_stoppageOfPlay == false)) {
                    TriggerExecute(gt_LeftGoal, true, false);
                    TriggerExecute(gt_RightGoal, true, false);
                }

            }
            else {
                if (((lv_player == gv_Players[6]) && (gv_pullGoalie[2] == false)) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true)) {
                    Wait(0.5, c_timeGame);
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true) && (gv_stoppageOfPlay == false)) {
                        TriggerExecute(gt_LeftGoal, true, false);
                        TriggerExecute(gt_RightGoal, true, false);
                    }

                }
                else {
                    if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true)) {
                        TriggerExecute(gt_LeftGoal, true, false);
                        TriggerExecute(gt_RightGoal, true, false);
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true)) {
                            TriggerExecute(gt_LeftGoal, true, false);
                            TriggerExecute(gt_RightGoal, true, false);
                        }

                    }
                }
            }
            gf_CheckIfCanPossess(lv_player, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShootPuck3_Init () {
    gt_ShootPuck3 = TriggerCreate("gt_ShootPuck3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New One Timer
//--------------------------------------------------------------------------------------------------
bool gt_ShootPuck2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("HockeyOnetimerQueue", -1), c_maxPlayers, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, 80.0, 0.0);
    gv_onetimerPersonalSounds[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = SoundLastPlayed();
    SoundPlayAtPointForPlayer(SoundLink("HockeyOnetimerQueue", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, 80.0, 0.0);
    gv_onetimerAllySounds[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = SoundLastPlayed();
    gv_oneTiming[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
    UnitAbilityShow(gv_Skaters[EventPlayer()], "NewOneTimer", false);
    Wait(3.0, c_timeGame);
    UnitAbilityShow(gv_Skaters[EventPlayer()], "NewOneTimer", true);
    gv_oneTiming[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShootPuck2_Init () {
    gt_ShootPuck2 = TriggerCreate("gt_ShootPuck2_Func");
    TriggerAddEventPlayerEffectUsed(gt_ShootPuck2, c_playerAny, "ApplyOneTiming");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel One Timer
//--------------------------------------------------------------------------------------------------
bool gt_CancelOneTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_oneTiming[EventPlayer()] == true)) {
        UnitAbilityShow(gv_Skaters[EventPlayer()], "NewOneTimer", true);
        gv_oneTiming[EventPlayer()] = false;
        UnitBehaviorRemove(gv_Skaters[EventPlayer()], "OneNEWTiming", 1);
        SoundStop(gv_onetimerPersonalSounds[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], true);
        SoundStop(gv_onetimerAllySounds[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelOneTimer_Init () {
    gt_CancelOneTimer = TriggerCreate("gt_CancelOneTimer_Func");
    TriggerAddEventPlayerEffectUsed(gt_CancelOneTimer, c_playerAny, "ApplyCancelOneTiming");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Used
//--------------------------------------------------------------------------------------------------
bool gt_PingUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_Possession))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_windingUp[gv_Possession] = false;
    gv_ShotCount[gv_Possession] = false;
    gv_ShotCount2[gv_Possession] = false;
    gv_decreaseShotPower[gv_Possession] = false;
    DialogSetVisible(gv_PowerBarDialog[gv_Possession], PlayerGroupSingle(gv_Possession), false);
    DialogControlSetSize(gv_PowerBarImage[gv_Possession], PlayerGroupAll(), 1, 22);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingUsed_Init () {
    gt_PingUsed = TriggerCreate("gt_PingUsed_Func");
    TriggerAddEventUnitAbility(gt_PingUsed, null, AbilityCommand("PingMarkerCreate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Ping to Allies
//--------------------------------------------------------------------------------------------------
bool gt_RevealPingtoAllies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PingMarker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_MainActorofUnit(EventUnit()), false);
    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(UnitGetOwner(EventUnit())), libNtve_gf_MainActorofUnit(EventUnit()), true);
    gf_ShowHideActorForPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())), libNtve_gf_MainActorofUnit(EventUnit()), true);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "SetOpacity 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealPingtoAllies_Init () {
    gt_RevealPingtoAllies = TriggerCreate("gt_RevealPingtoAllies_Func");
    TriggerAddEventUnitRegion(gt_RevealPingtoAllies, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spacebar
//--------------------------------------------------------------------------------------------------
bool gt_Spacebar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((BankValueGetAsFlag(gv_Banks[EventPlayer()], "Options", "space") == false))) {
            return false;
        }

        if (!((gv_singleDraft.lv_shouldwecheckforleavers == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() != gv_Players[2]) && (EventPlayer() != gv_Players[6])) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_Skaters[EventPlayer()]), true, false);
    }

    if (((gv_Shootout == true) || ((gv_Shootout == false) && (ModI(gv_Period, 2) == 1))) && (EventPlayer() == gv_Players[2]) && (gv_pullGoalie[1] == false)) {
        CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(29)), 0.5, -1, 10.0, false);
    }

    if ((gv_Shootout == false) && (ModI(gv_Period, 2) != 1) && (EventPlayer() == gv_Players[2]) && (gv_pullGoalie[1] == false)) {
        CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(30)), 0.5, -1, 10.0, false);
    }

    if (((gv_Shootout == true) || ((gv_Shootout == false) && (ModI(gv_Period, 2) == 1))) && (EventPlayer() == gv_Players[6]) && (gv_pullGoalie[2] == false)) {
        CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(30)), 0.5, -1, 10.0, false);
    }

    if ((gv_Shootout == false) && (ModI(gv_Period, 2) != 1) && (EventPlayer() == gv_Players[6]) && (gv_pullGoalie[2] == false)) {
        CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(29)), 0.5, -1, 10.0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spacebar_Init () {
    gt_Spacebar = TriggerCreate("gt_Spacebar_Func");
    TriggerAddEventKeyPressed(gt_Spacebar, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Spacebar
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSpacebar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((BankValueGetAsFlag(gv_Banks[EventPlayer()], "Options", "space") == false)) {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Options", "space", true);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2AFE3FF2"));
    }
    else {
        BankValueSetFromFlag(gv_Banks[EventPlayer()], "Options", "space", false);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/802FEDB0"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSpacebar_Init () {
    gt_ToggleSpacebar = TriggerCreate("gt_ToggleSpacebar_Func");
    TriggerAddEventChatMessage(gt_ToggleSpacebar, c_playerAny, "-togglespace", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Release Spacebar
//--------------------------------------------------------------------------------------------------
bool gt_ReleaseSpacebar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_Skaters[EventPlayer()]), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReleaseSpacebar_Init () {
    gt_ReleaseSpacebar = TriggerCreate("gt_ReleaseSpacebar_Func");
    TriggerAddEventKeyPressed(gt_ReleaseSpacebar, c_playerAny, c_keySpace, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuperFlail
//--------------------------------------------------------------------------------------------------
bool gt_SuperFlail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38095E7F_g;
    int auto38095E7F_u;
    unit auto38095E7F_var;

    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38095E7F_g = UnitGroupSearch(null, c_playerAny, PointFromId(112), 100.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38095E7F_u = UnitGroupCount(auto38095E7F_g, c_unitCountAll);
    for (;; auto38095E7F_u -= 1) {
        auto38095E7F_var = UnitGroupUnitFromEnd(auto38095E7F_g, auto38095E7F_u);
        if (auto38095E7F_var == null) { break; }
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto38095E7F_var), c_animNameDefault, "Flail", 0, c_animTimeDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuperFlail_Init () {
    gt_SuperFlail = TriggerCreate("gt_SuperFlail_Func");
    TriggerAddEventKeyPressed(gt_SuperFlail, c_playerAny, c_keyQ, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Rotate
//--------------------------------------------------------------------------------------------------
bool gt_MapRotate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto152E0361_g;
    int auto152E0361_u;
    unit auto152E0361_var;

    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == gv_hANDLE_CREATOR2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_spinning == false)) {
        gv_spinning = true;
    }
    else {
        gv_spinning = false;
    }
    while ((gv_spinning == true)) {
        auto152E0361_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto152E0361_u = UnitGroupCount(auto152E0361_g, c_unitCountAll);
        for (;; auto152E0361_u -= 1) {
            auto152E0361_var = UnitGroupUnitFromEnd(auto152E0361_g, auto152E0361_u);
            if (auto152E0361_var == null) { break; }
            UnitSetFacing(auto152E0361_var, (UnitGetFacing(auto152E0361_var)+10), 0.0);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapRotate_Init () {
    gt_MapRotate = TriggerCreate("gt_MapRotate_Func");
    TriggerAddEventKeyPressed(gt_MapRotate, c_playerAny, c_keyF7, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Goal
//--------------------------------------------------------------------------------------------------
bool gt_LeftGoal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    bool lv_goalWasAssisted;

    // Automatic Variable Declarations
    unitgroup auto2B62BAEF_g;
    int auto2B62BAEF_u;
    unit auto2B62BAEF_var;
    playergroup autoA8058810_g;
    int autoA8058810_var;
    playergroup autoF1072DFC_g;
    int autoF1072DFC_var;
    playergroup autoC5FCFEE8_g;
    int autoC5FCFEE8_var;
    playergroup autoD85E2AA0_g;
    int autoD85E2AA0_var;
    playergroup auto7B555D4B_g;
    int auto7B555D4B_var;
    playergroup autoEE4A628E_g;
    int autoEE4A628E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_goalsAllowed == true))) {
            return false;
        }

        if (!((((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true) && ((gv_Shootout == true) || (ModI(gv_Period, 2) == 1))) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true) && (ModI(gv_Period, 2) == 0) && (gv_Shootout == false))))) {
            return false;
        }

        if (!(((gv_dunkmode == true) || ((gv_Possession == -1) && (gv_dunkmode == false))))) {
            return false;
        }

        if (!((gv_stoppageOfPlay == false))) {
            return false;
        }

        if (!(((gv_Shootout == false) || ((gv_Shootout == true) && (ModI(gv_shootout, 2) == 0) && (gv_rotateShootout == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_potentialSOG = false;
    if ((gv_powerplay.lv_powerplayMode == true)) {
        UnitAbilityEnable(gv_Skaters[gv_Players[2]], "GoalieRecall", false);
        UnitAbilityEnable(gv_Skaters[gv_Players[6]], "GoalieRecall", false);
        if ((gv_powerplay.lv_powerplayLimitTime[2] > 0.0) && (gv_pullGoalie[2] == true)) {
            gv_powerplay.lv_powerplayLimitTime[2] = 0.0;
            TimerRestart(gv_powerplay.lv_powerplayTimers[2]);
            TimerPause(gv_powerplay.lv_powerplayTimers[2], true);
        }

        if ((gv_powerplay.lv_powerplayLimitTime[1] > 0.0) && (gv_pullGoalie[1] == true)) {
            gv_powerplay.lv_powerplayLimitTime[1] = 0.0;
            TimerRestart(gv_powerplay.lv_powerplayTimers[1]);
            TimerPause(gv_powerplay.lv_powerplayTimers[1], true);
        }

    }

    if ((gv_rEDLINE_MODE == true)) {
        gf_RedlineGoalScoredUpdater();
        TextExpressionSetToken("Param/Expression/17E4751D", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/17E4751D"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/946A42B8", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/946A42B8"), PlayerGroupAll());
        return true;
    }

    gv_potentialUnshot = 0;
    if ((gf_ShooterIsTeam2() == true) && (gv_lastPass != 0) && ((gv_lastPass == gv_Players[5]) || (gv_lastPass == gv_Players[6]) || (gv_lastPass == gv_Players[7]) || (gv_lastPass == gv_Players[8]))) {
        gv_inGameStatsAssists[gv_lastPass] += 1;
        gv_stats_Assists[gv_lastPass] += 1;
        lv_goalWasAssisted = true;
        if ((gv_ranked == true)) {
            gf_SaveBank(gv_lastPass);
        }

    }

    DialogSetVisible(gv_puckMarker, PlayerGroupAll(), false);
    if ((gv_Shootout == true)) {
        gv_shootoutScore[2] += 1;
        gv_stats_SSgoals[gv_ShootingPlayer] += 1;
        if ((gv_ranked == true)) {
            gf_SaveBank(gv_ShootingPlayer);
        }

    }
    else {
        gv_TeamScores[2] += 1;
        TextExpressionSetToken("Param/Expression/A1E7A640", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/A1E7A640"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/4FE7E902", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/4FE7E902"), PlayerGroupAll());
    }
    libNtve_gf_AttachActorToUnit(gv_pUCK, "MineralCrystalGlow", "Ref_Chest");
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "LightOmniWhiteLarge", "Ref_Chest");
    auto2B62BAEF_g = gv_PlayerUnits;
    auto2B62BAEF_u = UnitGroupCount(auto2B62BAEF_g, c_unitCountAll);
    for (;; auto2B62BAEF_u -= 1) {
        auto2B62BAEF_var = UnitGroupUnitFromEnd(auto2B62BAEF_g, auto2B62BAEF_u);
        if (auto2B62BAEF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto2B62BAEF_var, false);
    }
    gv_spotlight = libNtve_gf_ActorLastCreated();
    gv_stoppageOfPlay = true;
    gv_Possession = -1;
    gv_NoCount = true;
    TimerPause(gv_Timer, true);
    if ((gv_testteam3ui == true)) {
        autoA8058810_g = PlayerGroupAll();
        autoA8058810_var = -1;
        while (true) {
            autoA8058810_var = PlayerGroupNextPlayer(autoA8058810_g, autoA8058810_var);
            if (autoA8058810_var < 0) { break; }
            gf_StartGoalFollow(autoA8058810_var, gv_Skaters[gv_ShootingPlayer]);
        }
    }
    else {
        autoF1072DFC_g = GameAttributePlayersForTeam(3);
        autoF1072DFC_var = -1;
        while (true) {
            autoF1072DFC_var = PlayerGroupNextPlayer(autoF1072DFC_g, autoF1072DFC_var);
            if (autoF1072DFC_var < 0) { break; }
            gf_StartGoalFollow(autoF1072DFC_var, gv_Skaters[gv_ShootingPlayer]);
        }
    }
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_GoalScored);
    }
    else {
        gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_GoalScored);
    }
    if ((gv_Shootout == false)) {
        gf_Collision2(2);
        gv_onTargetRedNet = false;
        if (((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
            TextExpressionSetToken("Param/Expression/9DAFEFF2", "A", PlayerName(gv_ShootingPlayer));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/9DAFEFF2"));
            gv_wasgoalowngoal = true;
        }
        else {
            gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
            gv_stats_Goals[gv_ShootingPlayer] += 1;
            gf_HeatmapLogLastShotasaRealShot();
            gf_HeatmapConvertLastRealShottoGoal();
            if ((gv_ranked == true)) {
                gf_SaveBank(gv_ShootingPlayer);
            }

            if ((gv_pullGoalie[1] == false)) {
                gv_inGameStatsGoalieAllow[gv_Players[2]] += 1;
                gv_stats_OverallGoalieLets[gv_Players[2]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[1]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[3]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[4]] += 1;
                gv_eLOCompressionFactor = Pow(1.01, (((BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO")-1500)/50)));
                BankValueSetFromFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[2]], "Stats", "GoalieELO") - (10.0 * gv_eLOCompressionFactor)));
                if ((gv_ranked == true)) {
                    gf_SaveBank(gv_Players[2]);
                }

            }

            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 01", 0, c_animTimeDefault);
            if ((lv_goalWasAssisted == true)) {
                TextExpressionSetToken("Param/Expression/A597EDFA", "A", PlayerName(gv_ShootingPlayer));
                TextExpressionSetToken("Param/Expression/A597EDFA", "B", PlayerName(gv_lastPass));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/A597EDFA"));
            }
            else {
                TextExpressionSetToken("Param/Expression/DD32AF26", "A", PlayerName(gv_ShootingPlayer));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/DD32AF26"));
            }
        }
    }

    if ((gv_Shootout == true)) {
        gv_shootoutGoal = true;
        gv_ShootoutShooting = false;
    }

    TriggerExecute(gt_GoalSpecial, true, true);
    if ((gv_goldenGoal == true)) {
        gv_stats_WinningGoals[gv_ShootingPlayer] += 1;
        gv_stats_OvertimeGoals[gv_ShootingPlayer] += 1;
        gv_uIPeriodStats.lv_showindefinitely = true;
        TriggerExecute(gt_PeriodStats, true, false);
        TriggerExecute(gt_GameEnd, true, false);
        return true;
    }

    if ((gv_TeamScores[2] == (gv_TeamScores[1] + 10))) {
        gv_uIPeriodStats.lv_showindefinitely = true;
        TriggerExecute(gt_PeriodStats, true, false);
        TriggerExecute(gt_GameEnd, true, false);
        return true;
    }

    if ((gv_Shootout == false)) {
        Wait(8.0, c_timeGame);
        gf_EndHatTrickAnimation();
        if ((gv_testteam3ui == true)) {
            autoC5FCFEE8_g = PlayerGroupAll();
            autoC5FCFEE8_var = -1;
            while (true) {
                autoC5FCFEE8_var = PlayerGroupNextPlayer(autoC5FCFEE8_g, autoC5FCFEE8_var);
                if (autoC5FCFEE8_var < 0) { break; }
                gf_EndGoalFollow(autoC5FCFEE8_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        else {
            autoD85E2AA0_g = GameAttributePlayersForTeam(3);
            autoD85E2AA0_var = -1;
            while (true) {
                autoD85E2AA0_var = PlayerGroupNextPlayer(autoD85E2AA0_g, autoD85E2AA0_var);
                if (autoD85E2AA0_var < 0) { break; }
                gf_EndGoalFollow(autoD85E2AA0_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        ActorSend(lv_actor, "Destroy");
        ActorSend(gv_spotlight, "Destroy");
        gv_stoppageOfPlay = false;
        if ((gv_duckHuntScoreON == true)) {
            TriggerExecute(gt_DuckHuntScore, true, false);
            gv_duckHuntScoreON = false;
        }

        UnitSetCustomValue(gv_pUCK, 0, 0.0);
        UnitSetCustomValue(gv_pUCK, 1, 0.0);
        gv_NoCount = false;
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
            TriggerExecute(gt_RandomizeUnits2, true, false);
        }
        else {
            TriggerExecute(gt_RandomizeUnits, true, false);
        }
        gv_FaceoffTimer = 7;
        gv_Possession = -1;
        UnitSetPosition(gv_pUCK, PointFromId(112), false);
        gv_warpigcelebration.lv_isrunning = false;
        gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
        if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        else {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        Wait(3.0, c_timeGame);
    }
    else {
        Wait(8.0, c_timeGame);
        if ((gv_testteam3ui == true)) {
            auto7B555D4B_g = PlayerGroupAll();
            auto7B555D4B_var = -1;
            while (true) {
                auto7B555D4B_var = PlayerGroupNextPlayer(auto7B555D4B_g, auto7B555D4B_var);
                if (auto7B555D4B_var < 0) { break; }
                gf_EndGoalFollow(auto7B555D4B_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        else {
            autoEE4A628E_g = GameAttributePlayersForTeam(3);
            autoEE4A628E_var = -1;
            while (true) {
                autoEE4A628E_var = PlayerGroupNextPlayer(autoEE4A628E_g, autoEE4A628E_var);
                if (autoEE4A628E_var < 0) { break; }
                gf_EndGoalFollow(autoEE4A628E_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        ActorSend(lv_actor, "Destroy");
        ActorSend(gv_spotlight, "Destroy");
        DialogSetVisible(gv_puckMarker, PlayerGroupAll(), true);
        gv_stoppageOfPlay = false;
        UnitSetCustomValue(gv_pUCK, 0, 0.0);
        UnitSetCustomValue(gv_pUCK, 1, 0.0);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        gv_Possession = -1;
        gv_shootoutGoal = false;
        gf_RotateShootout(true);
        Wait(1.5, c_timeGame);
        gv_warpigcelebration.lv_isrunning = false;
        if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        else {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeftGoal_Init () {
    gt_LeftGoal = TriggerCreate("gt_LeftGoal_Func");
    TriggerAddEventUnitRegion(gt_LeftGoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_LeftGoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Goal
//--------------------------------------------------------------------------------------------------
bool gt_RightGoal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    bool lv_goalWasAssisted;

    // Automatic Variable Declarations
    playergroup autoBEC3DD7D_g;
    int autoBEC3DD7D_var;
    playergroup auto4B37AD5B_g;
    int auto4B37AD5B_var;
    playergroup auto1B50D5D8_g;
    int auto1B50D5D8_var;
    playergroup autoB74B3C1D_g;
    int autoB74B3C1D_var;
    playergroup autoAFA03B38_g;
    int autoAFA03B38_var;
    playergroup autoF118B84C_g;
    int autoF118B84C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_goalsAllowed == true))) {
            return false;
        }

        if (!((((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true) && (ModI(gv_Period, 2) == 0) && (gv_Shootout == false)) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true) && ((ModI(gv_Period, 2) == 1) || (gv_Shootout == true)))))) {
            return false;
        }

        if (!((gv_stoppageOfPlay == false))) {
            return false;
        }

        if (!(((gv_dunkmode == true) || ((gv_Possession == -1) && (gv_dunkmode == false))))) {
            return false;
        }

        if (!(((gv_Shootout == false) || ((gv_Shootout == true) && (ModI(gv_shootout, 2) == 1) && (gv_rotateShootout == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_potentialSOG = false;
    if ((gv_powerplay.lv_powerplayMode == true)) {
        UnitAbilityEnable(gv_Skaters[gv_Players[2]], "GoalieRecall", false);
        UnitAbilityEnable(gv_Skaters[gv_Players[6]], "GoalieRecall", false);
        if ((gv_powerplay.lv_powerplayLimitTime[2] > 0.0) && (gv_pullGoalie[2] == true)) {
            gv_powerplay.lv_powerplayLimitTime[2] = 0.0;
            TimerRestart(gv_powerplay.lv_powerplayTimers[2]);
            TimerPause(gv_powerplay.lv_powerplayTimers[2], true);
        }

        if ((gv_powerplay.lv_powerplayLimitTime[1] > 0.0) && (gv_pullGoalie[1] == true)) {
            gv_powerplay.lv_powerplayLimitTime[1] = 0.0;
            TimerRestart(gv_powerplay.lv_powerplayTimers[1]);
            TimerPause(gv_powerplay.lv_powerplayTimers[1], true);
        }

    }

    if ((gv_rEDLINE_MODE == true)) {
        gf_RedlineGoalScoredUpdater();
        TextExpressionSetToken("Param/Expression/A999076C", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/A999076C"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/9A00E424", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/9A00E424"), PlayerGroupAll());
        return true;
    }

    gv_potentialUnshot = 0;
    if ((gv_lastPass != 0) && ((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4])) && ((gv_lastPass == gv_Players[1]) || (gv_lastPass == gv_Players[2]) || (gv_lastPass == gv_Players[3]) || (gv_lastPass == gv_Players[4]))) {
        gv_inGameStatsAssists[gv_lastPass] += 1;
        gv_stats_Assists[gv_lastPass] += 1;
        lv_goalWasAssisted = true;
        if ((gv_ranked == true)) {
            gf_SaveBank(gv_lastPass);
        }

    }

    DialogSetVisible(gv_puckMarker, PlayerGroupAll(), false);
    if ((gv_Shootout == true)) {
        gv_shootoutScore[1] += 1;
        gv_stats_SSgoals[gv_ShootingPlayer] += 1;
        if ((gv_ranked == true)) {
            gf_SaveBank(gv_ShootingPlayer);
        }

    }
    else {
        gv_TeamScores[1] += 1;
        TextExpressionSetToken("Param/Expression/D58CB6FD", "A", IntToText(gv_TeamScores[1]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem1, TextExpressionAssemble("Param/Expression/D58CB6FD"), PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/E1F8141D", "A", IntToText(gv_TeamScores[2]));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogItem2, TextExpressionAssemble("Param/Expression/E1F8141D"), PlayerGroupAll());
    }
    libNtve_gf_AttachActorToUnit(gv_pUCK, "MineralCrystalGlow", "Ref_Chest");
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachActorToUnit(gv_Skaters[gv_ShootingPlayer], "LightOmniWhiteLarge", "Ref_Chest");
    gv_spotlight = libNtve_gf_ActorLastCreated();
    gv_stoppageOfPlay = true;
    gv_Possession = -1;
    gv_NoCount = true;
    TimerPause(gv_Timer, true);
    if ((gv_testteam3ui == true)) {
        autoBEC3DD7D_g = PlayerGroupAll();
        autoBEC3DD7D_var = -1;
        while (true) {
            autoBEC3DD7D_var = PlayerGroupNextPlayer(autoBEC3DD7D_g, autoBEC3DD7D_var);
            if (autoBEC3DD7D_var < 0) { break; }
            gf_StartGoalFollow(autoBEC3DD7D_var, gv_Skaters[gv_ShootingPlayer]);
        }
    }
    else {
        auto4B37AD5B_g = GameAttributePlayersForTeam(3);
        auto4B37AD5B_var = -1;
        while (true) {
            auto4B37AD5B_var = PlayerGroupNextPlayer(auto4B37AD5B_g, auto4B37AD5B_var);
            if (auto4B37AD5B_var < 0) { break; }
            gf_StartGoalFollow(auto4B37AD5B_var, gv_Skaters[gv_ShootingPlayer]);
        }
    }
    if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
        gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_GoalScored);
    }
    else {
        gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_GoalScored);
    }
    if ((gv_Shootout == false)) {
        gf_Collision2(1);
        gv_onTargetBlueNet = false;
        gv_potentialSOG = false;
        if (((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
            gv_inGameStatsGoals[gv_ShootingPlayer] += 1;
            gv_stats_Goals[gv_ShootingPlayer] += 1;
            if ((gv_ranked == true)) {
                gf_SaveBank(gv_ShootingPlayer);
            }

            gf_HeatmapLogLastShotasaRealShot();
            gf_HeatmapConvertLastRealShottoGoal();
            if ((gv_pullGoalie[2] == false)) {
                gv_inGameStatsGoalieAllow[gv_Players[6]] += 1;
                gv_stats_OverallGoalieLets[gv_Players[6]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[5]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[7]] += 1;
                gv_stats_OverallDefensiveLets[gv_Players[8]] += 1;
                gv_eLOCompressionFactor = Pow(1.01, (((BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO")-1500)/50)));
                BankValueSetFromFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[gv_Players[6]], "Stats", "GoalieELO") - (10.0 * gv_eLOCompressionFactor)));
                if ((gv_ranked == true)) {
                    gf_SaveBank(gv_Players[6]);
                }

            }

            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_Skaters[gv_ShootingPlayer]), c_animNameDefault, "Dance 00", 0, c_animTimeDefault);
            if ((lv_goalWasAssisted == true)) {
                TextExpressionSetToken("Param/Expression/89C2D89E", "A", PlayerName(gv_ShootingPlayer));
                TextExpressionSetToken("Param/Expression/89C2D89E", "B", PlayerName(gv_lastPass));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/89C2D89E"));
            }
            else {
                TextExpressionSetToken("Param/Expression/46DD202B", "A", PlayerName(gv_ShootingPlayer));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/46DD202B"));
            }
        }
        else {
            TextExpressionSetToken("Param/Expression/ADD8755B", "A", PlayerName(gv_ShootingPlayer));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/ADD8755B"));
            gv_wasgoalowngoal = true;
        }
    }

    if ((gv_Shootout == true)) {
        gv_shootoutGoal = true;
        gv_ShootoutShooting = false;
    }

    TriggerExecute(gt_GoalSpecial, true, true);
    if ((gv_goldenGoal == true)) {
        gv_stats_WinningGoals[gv_ShootingPlayer] += 1;
        gv_stats_OvertimeGoals[gv_ShootingPlayer] += 1;
        gv_uIPeriodStats.lv_showindefinitely = true;
        TriggerExecute(gt_PeriodStats, true, false);
        TriggerExecute(gt_GameEnd, true, false);
        return true;
    }

    if ((gv_TeamScores[1] == (gv_TeamScores[2] + 10))) {
        gv_uIPeriodStats.lv_showindefinitely = true;
        TriggerExecute(gt_PeriodStats, true, false);
        TriggerExecute(gt_GameEnd, true, false);
        return true;
    }

    if ((gv_Shootout == false)) {
        Wait(8.0, c_timeGame);
        gf_EndHatTrickAnimation();
        if ((gv_testteam3ui == true)) {
            auto1B50D5D8_g = PlayerGroupAll();
            auto1B50D5D8_var = -1;
            while (true) {
                auto1B50D5D8_var = PlayerGroupNextPlayer(auto1B50D5D8_g, auto1B50D5D8_var);
                if (auto1B50D5D8_var < 0) { break; }
                gf_EndGoalFollow(auto1B50D5D8_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        else {
            autoB74B3C1D_g = GameAttributePlayersForTeam(3);
            autoB74B3C1D_var = -1;
            while (true) {
                autoB74B3C1D_var = PlayerGroupNextPlayer(autoB74B3C1D_g, autoB74B3C1D_var);
                if (autoB74B3C1D_var < 0) { break; }
                gf_EndGoalFollow(autoB74B3C1D_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        ActorSend(lv_actor, "Destroy");
        ActorSend(gv_spotlight, "Destroy");
        gv_stoppageOfPlay = false;
        if ((gv_duckHuntScoreON == true)) {
            TriggerExecute(gt_DuckHuntScore, true, false);
            gv_duckHuntScoreON = false;
        }

        UnitSetCustomValue(gv_pUCK, 0, 0.0);
        UnitSetCustomValue(gv_pUCK, 1, 0.0);
        gv_NoCount = false;
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        if (((gv_testredlinemode == true) || (GameAttributeGameValue("2") == "0003"))) {
            TriggerExecute(gt_RandomizeUnits2, true, false);
        }
        else {
            TriggerExecute(gt_RandomizeUnits, true, false);
        }
        gv_FaceoffTimer = 7;
        gv_Possession = -1;
        UnitSetPosition(gv_pUCK, PointFromId(112), false);
        gv_warpigcelebration.lv_isrunning = false;
        gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
        if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        else {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        Wait(3.0, c_timeGame);
    }
    else {
        Wait(8.0, c_timeGame);
        if ((gv_testteam3ui == true)) {
            autoAFA03B38_g = PlayerGroupAll();
            autoAFA03B38_var = -1;
            while (true) {
                autoAFA03B38_var = PlayerGroupNextPlayer(autoAFA03B38_g, autoAFA03B38_var);
                if (autoAFA03B38_var < 0) { break; }
                gf_EndGoalFollow(autoAFA03B38_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        else {
            autoF118B84C_g = GameAttributePlayersForTeam(3);
            autoF118B84C_var = -1;
            while (true) {
                autoF118B84C_var = PlayerGroupNextPlayer(autoF118B84C_g, autoF118B84C_var);
                if (autoF118B84C_var < 0) { break; }
                gf_EndGoalFollow(autoF118B84C_var, gv_Skaters[gv_ShootingPlayer]);
            }
        }
        ActorSend(lv_actor, "Destroy");
        ActorSend(gv_spotlight, "Destroy");
        DialogSetVisible(gv_puckMarker, PlayerGroupAll(), true);
        gv_stoppageOfPlay = false;
        UnitSetCustomValue(gv_pUCK, 0, 0.0);
        UnitSetCustomValue(gv_pUCK, 1, 0.0);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        gv_Possession = -1;
        gv_shootoutGoal = false;
        gf_RotateShootout(true);
        Wait(1.5, c_timeGame);
        gv_warpigcelebration.lv_isrunning = false;
        if (((ModI(gv_Period, 2) == 1) || (gv_Shootout == true))) {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
        else {
            gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RightGoal_Init () {
    gt_RightGoal = TriggerCreate("gt_RightGoal_Func");
    TriggerAddEventUnitRegion(gt_RightGoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_RightGoal, UnitRefFromVariable("gv_pUCK"), RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Units
//--------------------------------------------------------------------------------------------------
bool gt_RandomizeUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_LocInt;
    int[6] lv_positionsTakenT1;
    int[6] lv_positionsTakenT2;
    int[6] lv_playersOnT1;
    int[6] lv_playersOnT2;
    int lv_i;
    int lv_t1;
    int lv_t2;
    bool lv_playersOptedInGoalie;
    bool lv_allPlayersOptOutGoalie;
    int lv_slotidfinder;

    // Automatic Variable Declarations
    const int autoF7FEBABB_ae = 8;
    int autoF7FEBABB_var;
    playergroup autoFB9C4C0C_g;
    int autoFB9C4C0C_var;
    playergroup autoE6C192A3_g;
    int autoE6C192A3_var;
    int autoE2C17D79_ae;
    const int autoE2C17D79_ai = 1;
    const int auto78489247_ae = 5;
    int auto78489247_var;
    int autoB34BED90_ae;
    const int autoB34BED90_ai = 1;
    int auto8B79C810_ae;
    const int auto8B79C810_ai = 1;
    const int auto891D7EEB_ae = 5;
    int auto891D7EEB_var;
    int autoBD20A04F_ae;
    const int autoBD20A04F_ai = 1;
    const int auto886D02EC_ae = 8;
    int auto886D02EC_var;

    // Variable Initialization
    lv_allPlayersOptOutGoalie = true;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(gv_teamPlayersGroup1) < 4) && (PlayerStatus(gv_benchPlayers[1]) == c_playerStatusActive)) {
        PlayerGroupAdd(gv_teamPlayersGroup1, gv_benchPlayers[1]);
    }
    else {
        if ((PlayerGroupCount(gv_teamPlayersGroup1) < 4) && (PlayerStatus(gv_benchPlayers[2]) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_teamPlayersGroup1, gv_benchPlayers[2]);
        }

    }
    if ((PlayerGroupCount(gv_teamPlayersGroup2) < 4) && (PlayerStatus(gv_benchPlayers[3]) == c_playerStatusActive)) {
        PlayerGroupAdd(gv_teamPlayersGroup2, gv_benchPlayers[3]);
    }
    else {
        if ((PlayerGroupCount(gv_teamPlayersGroup2) < 4) && (PlayerStatus(gv_benchPlayers[4]) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_teamPlayersGroup2, gv_benchPlayers[4]);
        }

    }
    autoF7FEBABB_var = 1;
    for ( ; autoF7FEBABB_var <= autoF7FEBABB_ae; autoF7FEBABB_var += 1 ) {
        gv_Players[autoF7FEBABB_var] = 0;
        gv_goalieBlocking[autoF7FEBABB_var] = false;
    }
    autoFB9C4C0C_g = gv_teamPlayersGroup1;
    autoFB9C4C0C_var = -1;
    while (true) {
        autoFB9C4C0C_var = PlayerGroupNextPlayer(autoFB9C4C0C_g, autoFB9C4C0C_var);
        if (autoFB9C4C0C_var < 0) { break; }
        if ((PlayerStatus(autoFB9C4C0C_var) == c_playerStatusActive)) {
            lv_t1 += 1;
            lv_playersOnT1[lv_t1] = autoFB9C4C0C_var;
        }

    }
    autoE6C192A3_g = gv_teamPlayersGroup2;
    autoE6C192A3_var = -1;
    while (true) {
        autoE6C192A3_var = PlayerGroupNextPlayer(autoE6C192A3_g, autoE6C192A3_var);
        if (autoE6C192A3_var < 0) { break; }
        if ((PlayerStatus(autoE6C192A3_var) == c_playerStatusActive)) {
            lv_t2 += 1;
            lv_playersOnT2[lv_t2] = autoE6C192A3_var;
        }

    }
    autoE2C17D79_ae = lv_t1;
    lv_LocInt = 1;
    for ( ; ( (autoE2C17D79_ai >= 0 && lv_LocInt <= autoE2C17D79_ae) || (autoE2C17D79_ai < 0 && lv_LocInt >= autoE2C17D79_ae) ) ; lv_LocInt += autoE2C17D79_ai ) {
        if ((gv_options_OptInGoalie[lv_playersOnT1[lv_LocInt]] == true)) {
            lv_playersOptedInGoalie = true;
        }

        if ((gv_options_OptOutGoalie[lv_playersOnT1[lv_LocInt]] == false)) {
            lv_allPlayersOptOutGoalie = false;
        }

    }
    if ((lv_playersOptedInGoalie == true)) {
        lv_LocInt = RandomInt(1, lv_t1);
        while ((gv_options_OptInGoalie[lv_playersOnT1[lv_LocInt]] == false)) {
            lv_LocInt = RandomInt(1, lv_t1);
        }
        lv_positionsTakenT1[lv_LocInt] = 1;
        gv_Players[2] = lv_playersOnT1[lv_LocInt];
    }
    else {
        if ((lv_t1 > 1)) {
            if ((lv_allPlayersOptOutGoalie == false)) {
                lv_LocInt = RandomInt(1, lv_t1);
                while ((gv_options_OptOutGoalie[lv_playersOnT1[lv_LocInt]] == true)) {
                    lv_LocInt = RandomInt(1, lv_t1);
                }
                lv_positionsTakenT1[lv_LocInt] = 1;
                gv_Players[2] = lv_playersOnT1[lv_LocInt];
            }
            else {
                gf_IncrementGoalieQueue(true, false);
                gv_Players[2] = gv_goaliePositionQueue.lv_currentlySelectedGoalieT1;
                gv_invulnerableToGoalie[1] = gv_goaliePositionQueue.lv_currentlySelectedGoalieT1;
                auto78489247_var = 1;
                for ( ; auto78489247_var <= auto78489247_ae; auto78489247_var += 1 ) {
                    if ((lv_playersOnT1[auto78489247_var] == gv_goaliePositionQueue.lv_currentlySelectedGoalieT1)) {
                        lv_positionsTakenT1[auto78489247_var] = 1;
                    }

                }
            }
        }

    }
    autoB34BED90_ae = lv_t1;
    lv_i = 1;
    for ( ; ( (autoB34BED90_ai >= 0 && lv_i <= autoB34BED90_ae) || (autoB34BED90_ai < 0 && lv_i >= autoB34BED90_ae) ) ; lv_i += autoB34BED90_ai ) {
        if ((lv_playersOptedInGoalie == true) && (lv_t1 == 1)) {
            break;
        }

        if ((lv_i != 2)) {
            lv_LocInt = RandomInt(1, lv_t1);
            while ((lv_positionsTakenT1[lv_LocInt] != 0)) {
                lv_LocInt = RandomInt(1, lv_t1);
            }
            lv_positionsTakenT1[lv_LocInt] = 1;
            gv_Players[lv_i] = lv_playersOnT1[lv_LocInt];
        }

    }
    lv_playersOptedInGoalie = false;
    lv_allPlayersOptOutGoalie = true;
    auto8B79C810_ae = lv_t2;
    lv_LocInt = 1;
    for ( ; ( (auto8B79C810_ai >= 0 && lv_LocInt <= auto8B79C810_ae) || (auto8B79C810_ai < 0 && lv_LocInt >= auto8B79C810_ae) ) ; lv_LocInt += auto8B79C810_ai ) {
        if ((gv_options_OptInGoalie[lv_playersOnT2[lv_LocInt]] == true)) {
            lv_playersOptedInGoalie = true;
        }

        if ((gv_options_OptOutGoalie[lv_playersOnT2[lv_LocInt]] == false)) {
            lv_allPlayersOptOutGoalie = false;
        }

    }
    if ((lv_playersOptedInGoalie == true)) {
        lv_LocInt = RandomInt(1, lv_t2);
        while ((gv_options_OptInGoalie[lv_playersOnT2[lv_LocInt]] == false)) {
            lv_LocInt = RandomInt(1, lv_t2);
        }
        lv_positionsTakenT2[lv_LocInt] = 1;
        gv_Players[6] = lv_playersOnT2[lv_LocInt];
    }
    else {
        if ((lv_t2 > 1)) {
            if ((lv_allPlayersOptOutGoalie == false)) {
                lv_LocInt = RandomInt(1, lv_t2);
                while ((gv_options_OptOutGoalie[lv_playersOnT2[lv_LocInt]] == true)) {
                    lv_LocInt = RandomInt(1, lv_t2);
                }
                lv_positionsTakenT2[lv_LocInt] = 1;
                gv_Players[6] = lv_playersOnT2[lv_LocInt];
            }
            else {
                gf_IncrementGoalieQueue(false, true);
                gv_Players[6] = gv_goaliePositionQueue.lv_currentlySelectedGoalieT2;
                gv_invulnerableToGoalie[2] = gv_goaliePositionQueue.lv_currentlySelectedGoalieT2;
                auto891D7EEB_var = 1;
                for ( ; auto891D7EEB_var <= auto891D7EEB_ae; auto891D7EEB_var += 1 ) {
                    if ((lv_playersOnT2[auto891D7EEB_var] == gv_goaliePositionQueue.lv_currentlySelectedGoalieT2)) {
                        lv_positionsTakenT2[auto891D7EEB_var] = 1;
                    }

                }
            }
        }

    }
    autoBD20A04F_ae = (lv_t2 + 4);
    lv_i = 5;
    for ( ; ( (autoBD20A04F_ai >= 0 && lv_i <= autoBD20A04F_ae) || (autoBD20A04F_ai < 0 && lv_i >= autoBD20A04F_ae) ) ; lv_i += autoBD20A04F_ai ) {
        if ((lv_playersOptedInGoalie == true) && (lv_t2 == 1)) {
            break;
        }

        if ((lv_i != 6)) {
            lv_LocInt = RandomInt(1, lv_t2);
            while ((lv_positionsTakenT2[lv_LocInt] != 0)) {
                lv_LocInt = RandomInt(1, lv_t2);
            }
            lv_positionsTakenT2[lv_LocInt] = 1;
            gv_Players[lv_i] = lv_playersOnT2[lv_LocInt];
        }

    }
    auto886D02EC_var = 1;
    for ( ; auto886D02EC_var <= auto886D02EC_ae; auto886D02EC_var += 1 ) {
        if ((PlayerStatus(gv_Players[auto886D02EC_var]) == c_playerStatusLeft)) {
            gv_Players[auto886D02EC_var] = 0;
        }

    }
    if ((gv_faceoffHoldTrigger == false)) {
        TriggerExecute(gt_CreateUnits, true, false);
    }

    return true;
    if ((lv_LocInt == 1)) {
        lv_LocInt = gv_Players[1];
        gv_Players[1] = gv_Players[2];
        gv_Players[2] = lv_LocInt;
        lv_LocInt = 0;
    }

    if ((lv_LocInt == 2)) {
        lv_LocInt = gv_Players[2];
        gv_Players[2] = gv_Players[3];
        gv_Players[3] = lv_LocInt;
        lv_LocInt = 0;
    }

    if ((lv_LocInt == 3)) {
        lv_LocInt = gv_Players[2];
        gv_Players[2] = gv_Players[4];
        gv_Players[4] = lv_LocInt;
        lv_LocInt = 0;
    }

    lv_LocInt = RandomInt(1, 3);
    if ((lv_LocInt == 1)) {
        lv_LocInt = gv_Players[5];
        gv_Players[5] = gv_Players[6];
        gv_Players[6] = lv_LocInt;
        lv_LocInt = 0;
    }

    if ((lv_LocInt == 2)) {
        lv_LocInt = gv_Players[6];
        gv_Players[6] = gv_Players[7];
        gv_Players[7] = lv_LocInt;
        lv_LocInt = 0;
    }

    if ((lv_LocInt == 3)) {
        lv_LocInt = gv_Players[6];
        gv_Players[6] = gv_Players[8];
        gv_Players[8] = lv_LocInt;
        lv_LocInt = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomizeUnits_Init () {
    gt_RandomizeUnits = TriggerCreate("gt_RandomizeUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Units Redline
//--------------------------------------------------------------------------------------------------
bool gt_RandomizeUnits2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_team1Skaters;
    playergroup lv_team2Skaters;
    int lv_enumplayer;
    int lv_int;

    // Automatic Variable Declarations
    const int auto99861AA9_ae = 15;
    int auto99861AA9_var;
    playergroup autoCB86DD1D_g;
    playergroup auto569A59E0_g;
    playergroup auto27C37664_g;
    playergroup auto5EFD2677_g;

    // Variable Initialization
    lv_team1Skaters = PlayerGroupEmpty();
    lv_team2Skaters = PlayerGroupEmpty();
    lv_int = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto99861AA9_var = 1;
    for ( ; auto99861AA9_var <= auto99861AA9_ae; auto99861AA9_var += 1 ) {
        gv_Players[auto99861AA9_var] = 0;
    }
    gv_Players[2] = gv_redlineMode.lv_permagoalie;
    autoCB86DD1D_g = gv_actualPlayerzonTeam[1];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoCB86DD1D_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((PlayerStatus(lv_enumplayer) == c_playerStatusActive) && (lv_enumplayer != gv_redlineMode.lv_permagoalie)) {
            PlayerGroupAdd(lv_team1Skaters, lv_enumplayer);
        }

    }
    auto569A59E0_g = gv_actualPlayerzonTeam[2];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto569A59E0_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((PlayerStatus(lv_enumplayer) == c_playerStatusActive) && (lv_enumplayer != gv_redlineMode.lv_permagoalie)) {
            PlayerGroupAdd(lv_team2Skaters, lv_enumplayer);
        }

    }
    auto27C37664_g = lv_team1Skaters;
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto27C37664_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((PlayerStatus(lv_enumplayer) == c_playerStatusActive) && (lv_enumplayer != gv_redlineMode.lv_permagoalie)) {
            gv_Players[lv_int] = lv_enumplayer;
            if ((lv_int == 1)) {
                lv_int = 3;
            }
            else {
                if ((lv_int == 3)) {
                    lv_int = 4;
                }

            }
        }

    }
    lv_int = 5;
    auto5EFD2677_g = lv_team2Skaters;
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto5EFD2677_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((PlayerStatus(lv_enumplayer) == c_playerStatusActive) && (lv_enumplayer != gv_redlineMode.lv_permagoalie)) {
            gv_Players[lv_int] = lv_enumplayer;
            lv_int = 7;
        }

    }
    if ((gv_faceoffHoldTrigger == false)) {
        TriggerExecute(gt_CreateUnits2, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomizeUnits2_Init () {
    gt_RandomizeUnits2 = TriggerCreate("gt_RandomizeUnits2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Units Shootout
//--------------------------------------------------------------------------------------------------
bool gt_RandomizeUnitsShootout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_LocInt;
    bool lv_reset1;
    bool lv_reset2;

    // Automatic Variable Declarations
    playergroup autoD646C1CB_g;
    int autoD646C1CB_var;
    playergroup auto075DB557_g;
    int auto075DB557_var;
    playergroup autoC2D3F663_g;
    int autoC2D3F663_var;
    playergroup autoCCC894C4_g;
    int autoCCC894C4_var;
    const int auto6A174870_ae = 8;
    int auto6A174870_var;
    playergroup auto66F6005B_g;
    int auto66F6005B_var;
    playergroup autoF11D19B3_g;
    int autoF11D19B3_var;

    // Variable Initialization
    lv_reset1 = true;
    lv_reset2 = true;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD646C1CB_g = gv_teamPlayersGroup1;
    autoD646C1CB_var = -1;
    while (true) {
        autoD646C1CB_var = PlayerGroupNextPlayer(autoD646C1CB_g, autoD646C1CB_var);
        if (autoD646C1CB_var < 0) { break; }
        if ((PlayerStatus(autoD646C1CB_var) == c_playerStatusActive) && (gv_ShootoutWent[autoD646C1CB_var] == false)) {
            lv_reset1 = false;
            break;
        }

    }
    if ((lv_reset1 == true)) {
        auto075DB557_g = gv_teamPlayersGroup1;
        auto075DB557_var = -1;
        while (true) {
            auto075DB557_var = PlayerGroupNextPlayer(auto075DB557_g, auto075DB557_var);
            if (auto075DB557_var < 0) { break; }
            gv_ShootoutWent[auto075DB557_var] = false;
        }
    }

    autoC2D3F663_g = gv_teamPlayersGroup2;
    autoC2D3F663_var = -1;
    while (true) {
        autoC2D3F663_var = PlayerGroupNextPlayer(autoC2D3F663_g, autoC2D3F663_var);
        if (autoC2D3F663_var < 0) { break; }
        if ((PlayerStatus(autoC2D3F663_var) == c_playerStatusActive) && (gv_ShootoutWent[autoC2D3F663_var] == false)) {
            lv_reset2 = false;
            break;
        }

    }
    if ((lv_reset2 == true)) {
        autoCCC894C4_g = gv_teamPlayersGroup2;
        autoCCC894C4_var = -1;
        while (true) {
            autoCCC894C4_var = PlayerGroupNextPlayer(autoCCC894C4_g, autoCCC894C4_var);
            if (autoCCC894C4_var < 0) { break; }
            gv_ShootoutWent[autoCCC894C4_var] = false;
        }
    }

    UnitSetPosition(gv_pUCK, PointFromId(112), false);
    UnitSetCustomValue(gv_pUCK, 0, 0.0);
    UnitSetCustomValue(gv_pUCK, 1, 0.0);
    gv_Possession = -1;
    gv_ShootoutShooting2 = true;
    auto6A174870_var = 1;
    for ( ; auto6A174870_var <= auto6A174870_ae; auto6A174870_var += 1 ) {
        gv_Players[auto6A174870_var] = 0;
    }
    if ((gv_ShootoutTeamBool == true)) {
        gv_ShootoutTeamBool = false;
        if ((PlayerGroupCount(gv_teamPlayersGroup1) > 0)) {
            autoF11D19B3_g = gv_teamPlayersGroup1;
            autoF11D19B3_var = -1;
            while (true) {
                autoF11D19B3_var = PlayerGroupNextPlayer(autoF11D19B3_g, autoF11D19B3_var);
                if (autoF11D19B3_var < 0) { break; }
                if ((PlayerStatus(autoF11D19B3_var) == c_playerStatusActive) && (gv_ShootoutWent[autoF11D19B3_var] == false)) {
                    gv_ShootoutShooting = true;
                    gv_ShootoutWent[autoF11D19B3_var] = true;
                    gv_Players[1] = autoF11D19B3_var;
                    gv_Players[5] = 0;
                    TriggerExecute(gt_RandomizeUnitsShootoutGoalie, true, false);
                    return true;
                }

            }
        }
        else {
            gv_ShootoutShooting = true;
            TriggerExecute(gt_RandomizeUnitsShootoutGoalie, true, false);
            return true;
        }
    }
    else {
        gv_ShootoutTeamBool = true;
        if ((PlayerGroupCount(gv_teamPlayersGroup2) > 0)) {
            auto66F6005B_g = gv_teamPlayersGroup2;
            auto66F6005B_var = -1;
            while (true) {
                auto66F6005B_var = PlayerGroupNextPlayer(auto66F6005B_g, auto66F6005B_var);
                if (auto66F6005B_var < 0) { break; }
                if ((PlayerStatus(auto66F6005B_var) == c_playerStatusActive) && (gv_ShootoutWent[auto66F6005B_var] == false)) {
                    gv_ShootoutShooting = true;
                    gv_ShootoutWent[auto66F6005B_var] = true;
                    gv_Players[5] = auto66F6005B_var;
                    gv_Players[1] = 0;
                    TriggerExecute(gt_RandomizeUnitsShootoutGoalie, true, false);
                    return true;
                }

            }
        }
        else {
            gv_ShootoutShooting = true;
            TriggerExecute(gt_RandomizeUnitsShootoutGoalie, true, false);
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomizeUnitsShootout_Init () {
    gt_RandomizeUnitsShootout = TriggerCreate("gt_RandomizeUnitsShootout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Units Shootout Goalie
//--------------------------------------------------------------------------------------------------
bool gt_RandomizeUnitsShootoutGoalie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_LocInt;
    int[6] lv_playersOnT1;
    int[6] lv_playersOnT2;
    int lv_i;
    int lv_t1;
    int lv_t2;
    bool lv_playersOptedInGoalie;
    bool lv_allPlayersOptOutGoalie;

    // Automatic Variable Declarations
    playergroup auto99A7E393_g;
    int auto99A7E393_var;
    int auto3E74CA0C_ae;
    const int auto3E74CA0C_ai = 1;
    playergroup autoF213F0FB_g;
    int autoF213F0FB_var;
    int auto78EA8E76_ae;
    const int auto78EA8E76_ai = 1;

    // Variable Initialization
    lv_allPlayersOptOutGoalie = true;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_Players[1] == 0)) {
        autoF213F0FB_g = gv_teamPlayersGroup1;
        autoF213F0FB_var = -1;
        while (true) {
            autoF213F0FB_var = PlayerGroupNextPlayer(autoF213F0FB_g, autoF213F0FB_var);
            if (autoF213F0FB_var < 0) { break; }
            if ((PlayerStatus(autoF213F0FB_var) == c_playerStatusActive)) {
                lv_t1 += 1;
                lv_playersOnT1[lv_t1] = autoF213F0FB_var;
            }

        }
        auto78EA8E76_ae = lv_t1;
        lv_LocInt = 1;
        for ( ; ( (auto78EA8E76_ai >= 0 && lv_LocInt <= auto78EA8E76_ae) || (auto78EA8E76_ai < 0 && lv_LocInt >= auto78EA8E76_ae) ) ; lv_LocInt += auto78EA8E76_ai ) {
            if ((gv_options_OptInGoalie[lv_playersOnT1[lv_LocInt]] == true)) {
                lv_playersOptedInGoalie = true;
            }

            if ((gv_options_OptOutGoalie[lv_playersOnT1[lv_LocInt]] == false)) {
                lv_allPlayersOptOutGoalie = false;
            }

        }
        if ((lv_t1 == 1)) {
            gv_Players[2] = lv_playersOnT1[1];
        }
        else {
            if ((lv_playersOptedInGoalie == true)) {
                lv_LocInt = RandomInt(1, lv_t1);
                while ((gv_options_OptInGoalie[lv_playersOnT1[lv_LocInt]] == false)) {
                    lv_LocInt = RandomInt(1, lv_t1);
                }
                gv_Players[2] = lv_playersOnT1[lv_LocInt];
            }
            else {
                if ((lv_t1 > 1)) {
                    if ((lv_allPlayersOptOutGoalie == false)) {
                        lv_LocInt = RandomInt(1, lv_t1);
                        while ((gv_options_OptOutGoalie[lv_playersOnT1[lv_LocInt]] == true)) {
                            lv_LocInt = RandomInt(1, lv_t1);
                        }
                        gv_Players[2] = lv_playersOnT1[lv_LocInt];
                    }
                    else {
                        lv_LocInt = RandomInt(1, lv_t1);
                        while ((gv_invulnerableToGoalie[1] == lv_playersOnT1[lv_LocInt])) {
                            lv_LocInt = RandomInt(1, lv_t1);
                        }
                        gv_Players[2] = lv_playersOnT1[lv_LocInt];
                        gv_invulnerableToGoalie[1] = lv_playersOnT1[lv_LocInt];
                        UIDisplayMessage(PlayerGroupSingle(lv_playersOnT1[lv_LocInt]), c_messageAreaDebug, StringExternal("Param/Value/F23FEED8"));
                    }
                }

            }
        }
    }
    else {
        auto99A7E393_g = gv_teamPlayersGroup2;
        auto99A7E393_var = -1;
        while (true) {
            auto99A7E393_var = PlayerGroupNextPlayer(auto99A7E393_g, auto99A7E393_var);
            if (auto99A7E393_var < 0) { break; }
            if ((PlayerStatus(auto99A7E393_var) == c_playerStatusActive)) {
                lv_t2 += 1;
                lv_playersOnT2[lv_t2] = auto99A7E393_var;
            }

        }
        auto3E74CA0C_ae = lv_t2;
        lv_LocInt = 1;
        for ( ; ( (auto3E74CA0C_ai >= 0 && lv_LocInt <= auto3E74CA0C_ae) || (auto3E74CA0C_ai < 0 && lv_LocInt >= auto3E74CA0C_ae) ) ; lv_LocInt += auto3E74CA0C_ai ) {
            if ((gv_options_OptInGoalie[lv_playersOnT2[lv_LocInt]] == true)) {
                lv_playersOptedInGoalie = true;
            }

            if ((gv_options_OptOutGoalie[lv_playersOnT2[lv_LocInt]] == false)) {
                lv_allPlayersOptOutGoalie = false;
            }

        }
        if ((lv_t2 == 1)) {
            gv_Players[6] = lv_playersOnT2[1];
        }
        else {
            if ((lv_playersOptedInGoalie == true)) {
                lv_LocInt = RandomInt(1, lv_t2);
                while ((gv_options_OptInGoalie[lv_playersOnT2[lv_LocInt]] == false)) {
                    lv_LocInt = RandomInt(1, lv_t2);
                }
                gv_Players[6] = lv_playersOnT2[lv_LocInt];
            }
            else {
                if ((lv_t2 > 1)) {
                    if ((lv_allPlayersOptOutGoalie == false)) {
                        lv_LocInt = RandomInt(1, lv_t2);
                        while ((gv_options_OptOutGoalie[lv_playersOnT2[lv_LocInt]] == true)) {
                            lv_LocInt = RandomInt(1, lv_t2);
                        }
                        gv_Players[6] = lv_playersOnT2[lv_LocInt];
                    }
                    else {
                        lv_LocInt = RandomInt(1, lv_t2);
                        while ((gv_invulnerableToGoalie[2] == lv_playersOnT2[lv_LocInt])) {
                            lv_LocInt = RandomInt(1, lv_t2);
                        }
                        gv_Players[6] = lv_playersOnT2[lv_LocInt];
                        gv_invulnerableToGoalie[2] = lv_playersOnT2[lv_LocInt];
                        UIDisplayMessage(PlayerGroupSingle(lv_playersOnT2[lv_LocInt]), c_messageAreaDebug, StringExternal("Param/Value/B8D545F5"));
                    }
                }

            }
        }
    }
    TriggerExecute(gt_CreateUnitsShootout, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomizeUnitsShootoutGoalie_Init () {
    gt_RandomizeUnitsShootoutGoalie = TriggerCreate("gt_RandomizeUnitsShootoutGoalie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Units Redline
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnits2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerName;
    string lv_unitType1;
    string lv_unitType2;

    // Automatic Variable Declarations
    const int auto8A808808_ae = 14;
    int auto8A808808_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lasttouchedby = -1;
    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    TriggerExecute(gt_RemoveUnits, true, true);
    gv_ShootingPlayer = 0;
    auto8A808808_var = 1;
    for ( ; auto8A808808_var <= auto8A808808_ae; auto8A808808_var += 1 ) {
        gf_SetCooldownsandChargesforUnit(auto8A808808_var);
        if ((PlayerHandle(auto8A808808_var) == gv_hANDLE_CERVANTEZ)) {
            lv_playerName = StringExternal("Param/Value/7753201B");
        }
        else {
            TextExpressionSetToken("Param/Expression/DB0AC322", "A", PlayerName(auto8A808808_var));
            lv_playerName = TextExpressionAssemble("Param/Expression/DB0AC322");
        }
        TextTagDestroy(gv_TextTags[auto8A808808_var]);
        lv_unitType1 = "Zealot";
        lv_unitType2 = "Immortal";
        if ((gv_unitSetType[auto8A808808_var] == 2)) {
            lv_unitType1 = "SpaceDiablo";
            lv_unitType2 = "Queen";
        }

        if ((gv_unitSetType[auto8A808808_var] == 3)) {
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[auto8A808808_var] == 4)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[auto8A808808_var] == 5)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Sentry";
        }

        if ((gv_unitSetType[auto8A808808_var] == 6)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[auto8A808808_var] == 7)) {
            lv_unitType1 = "Hydralisk";
        }

        if ((gv_unitSetType[auto8A808808_var] == 8)) {
            lv_unitType1 = "DarkTemplar";
        }

        if ((gv_unitSetType[auto8A808808_var] == 9)) {
            lv_unitType1 = "StoneZealot";
            lv_unitType2 = "Stalker";
        }

        if ((gv_unitSetType[auto8A808808_var] == 10)) {
            lv_unitType1 = "WidowMine";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto8A808808_var] == 12)) {
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[auto8A808808_var] == 13)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto8A808808_var] == 14)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[auto8A808808_var] == 15)) {
            lv_unitType1 = "HighTemplar";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[auto8A808808_var] == 16)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[auto8A808808_var] == 17)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto8A808808_var] == 18)) {
        }

        if ((gv_unitSetType[auto8A808808_var] == 19)) {
            lv_unitType2 = "PhotonCannon";
        }

        if ((gv_unitSetType[auto8A808808_var] == 20)) {
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[auto8A808808_var] == 21)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((PlayerStatus(auto8A808808_var) == c_playerStatusActive) && ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], auto8A808808_var) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], auto8A808808_var) == true))) {
            if ((gv_Players[2] == auto8A808808_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto8A808808_var, PointFromId(149), PointFromId(112));
                    CameraPan(auto8A808808_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto8A808808_var, PointFromId(150), PointFromId(112));
                    CameraPan(auto8A808808_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(7), libNtve_gf_ConvertPlayerColorToColor(7)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 60.78, 0.00));
            }

            if ((gv_Players[1] == auto8A808808_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP2OT[1], PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP13[1], PointFromId(112));
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                CameraPan(auto8A808808_var, PointFromId(112), 2.0, -1, 10.0, false);
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[3] == auto8A808808_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP2OT[3], PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP13[3], PointFromId(112));
                }
                CameraPan(auto8A808808_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[5] == auto8A808808_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP2OT[2], PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP13[2], PointFromId(112));
                }
                CameraPan(auto8A808808_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[7] == auto8A808808_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP2OT[4], PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto8A808808_var, gv_redlineMode.lv_rLFaceoffStartPointsP13[4], PointFromId(112));
                }
                CameraPan(auto8A808808_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            TextTagSetFontSize(TextTagLastCreated(), 20);
            TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
            if ((gv_nameTagShow[auto8A808808_var] == false)) {
                TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto8A808808_var), false);
            }

            gv_TextTags[auto8A808808_var] = TextTagLastCreated();
            if ((PlayerStatus(auto8A808808_var) == c_playerStatusActive)) {
                if ((gv_playerRank[auto8A808808_var] == 0)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scBronze.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 1)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scSilver.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 2)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scGold.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 3)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scPlatinum.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 4)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scDiamond.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 5)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scMasters2.dds");
                }

                if ((gv_playerRank[auto8A808808_var] == 6)) {
                    gf_CreateBadgeTextTag(UnitLastCreated(), auto8A808808_var, "scGrandMaster2.dds");
                }

            }

            gv_Skaters[auto8A808808_var] = UnitLastCreated();
            UnitAbilityShow(gv_Skaters[auto8A808808_var], "GoalieRecall", false);
            UnitAbilityShow(gv_Skaters[auto8A808808_var], "SkaterWarpIn", false);
            UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
            UnitGroupAdd(gv_stufftomove, UnitLastCreated());
            UnitSelect(UnitLastCreated(), auto8A808808_var, true);
            if (((gv_Players[2] == auto8A808808_var) || (gv_Players[6] == auto8A808808_var))) {
                UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                UnitCreate(1, "ShapeHockeyStick", 0, auto8A808808_var, PointFromId(112), 270.0);
                UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                gv_Sticks[auto8A808808_var] = UnitLastCreated();
            }
            else {
                UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                UnitCreate(1, "ShapeHockeyStick", 0, auto8A808808_var, PointFromId(112), 270.0);
                gv_Sticks[auto8A808808_var] = UnitLastCreated();
            }
        }

    }
    gf_CreateUnitsColor();
    gf_ApplyCustomizations();
    gf_Team3UIUpdateLimitedAccess();
    gf_Setpowerplaynotavailable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnits2_Init () {
    gt_CreateUnits2 = TriggerCreate("gt_CreateUnits2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Units
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerName;
    string lv_unitType1;
    string lv_unitType2;

    // Automatic Variable Declarations
    const int autoB3A39E5A_ae = 14;
    int autoB3A39E5A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lasttouchedby = -1;
    if ((PlayerStatus(gv_team1Captain) == c_playerStatusLeft)) {
        gv_team1Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[1]);
    }

    if ((PlayerStatus(gv_team2Captain) == c_playerStatusLeft)) {
        gv_team2Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[2]);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    if (((PlayerStatus(gv_benchPlayers[1]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[2]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), false);
    }
    if (((PlayerStatus(gv_benchPlayers[3]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[4]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), false);
    }
    TriggerExecute(gt_RemoveUnits, true, true);
    gv_ShootingPlayer = 0;
    autoB3A39E5A_var = 1;
    for ( ; autoB3A39E5A_var <= autoB3A39E5A_ae; autoB3A39E5A_var += 1 ) {
        gf_SetCooldownsandChargesforUnit(autoB3A39E5A_var);
        if ((PlayerHandle(autoB3A39E5A_var) == gv_hANDLE_CERVANTEZ)) {
            lv_playerName = StringExternal("Param/Value/7611007C");
        }
        else {
            TextExpressionSetToken("Param/Expression/7B4C2445", "A", PlayerName(autoB3A39E5A_var));
            lv_playerName = TextExpressionAssemble("Param/Expression/7B4C2445");
        }
        TextTagDestroy(gv_TextTags[autoB3A39E5A_var]);
        lv_unitType1 = "Zealot";
        lv_unitType2 = "Immortal";
        if ((gv_unitSetType[autoB3A39E5A_var] == 2) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "SpaceDiablo";
            lv_unitType2 = "Queen";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 3) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 4) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 5) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Sentry";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 6) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 7) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "Hydralisk";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 8) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 9) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "StoneZealot";
            lv_unitType2 = "Stalker";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 10) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "WidowMine";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 12) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 13) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 14) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 15) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "HighTemplar";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 16) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 17) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 18) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 19) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "PhotonCannon";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 20) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoB3A39E5A_var] == 21) && (gv_skinTest[autoB3A39E5A_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((PlayerStatus(autoB3A39E5A_var) == c_playerStatusActive)) {
            if ((gv_Players[2] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(149), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(150), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[1] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointWithOffset(PointFromId(112), -5.0, 0.0), PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointWithOffset(PointFromId(112), 5.0, 0.0), PointFromId(112));
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[3] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    CameraPan(autoB3A39E5A_var, PointFromId(145), 2.0, -1, 10.0, false);
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(145), PointFromId(112));
                }
                else {
                    CameraPan(autoB3A39E5A_var, PointFromId(148), 2.0, -1, 10.0, false);
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(148), PointFromId(112));
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[4] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(147), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(147), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(146), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(146), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[6] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(150), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(149), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[5] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointWithOffset(PointFromId(112), 5.0, 0.0), PointFromId(112));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointWithOffset(PointFromId(112), -5.0, 0.0), PointFromId(112));
                }
                CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[7] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(148), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(148), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(145), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(145), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[8] == autoB3A39E5A_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(146), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(146), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoB3A39E5A_var, PointFromId(147), PointFromId(112));
                    CameraPan(autoB3A39E5A_var, PointFromId(147), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if (((gv_Players[1] == autoB3A39E5A_var) || (gv_Players[2] == autoB3A39E5A_var) || (gv_Players[3] == autoB3A39E5A_var) || (gv_Players[4] == autoB3A39E5A_var) || (gv_Players[5] == autoB3A39E5A_var) || (gv_Players[6] == autoB3A39E5A_var) || (gv_Players[7] == autoB3A39E5A_var) || (gv_Players[8] == autoB3A39E5A_var))) {
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagSetFontSize(TextTagLastCreated(), 20);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                if ((gv_nameTagShow[autoB3A39E5A_var] == false)) {
                    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoB3A39E5A_var), false);
                }

                gv_TextTags[autoB3A39E5A_var] = TextTagLastCreated();
                if ((PlayerStatus(autoB3A39E5A_var) == c_playerStatusActive)) {
                    if ((gv_playerRank[autoB3A39E5A_var] == 0)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scBronze.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 1)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scSilver.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 2)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scGold.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 3)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scPlatinum.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 4)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scDiamond.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 5)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scMasters2.dds");
                    }

                    if ((gv_playerRank[autoB3A39E5A_var] == 6)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoB3A39E5A_var, "scGrandMaster2.dds");
                    }

                }

                gv_Skaters[autoB3A39E5A_var] = UnitLastCreated();
                if ((gv_powerplay.lv_powerplayMode == true)) {
                    UnitAbilityShow(gv_Skaters[autoB3A39E5A_var], "GoalieRecall", false);
                    UnitAbilityEnable(gv_Skaters[autoB3A39E5A_var], "SkaterWarpIn", false);
                }
                else {
                    UnitAbilityShow(gv_Skaters[autoB3A39E5A_var], "GoalieRecall", false);
                    UnitAbilityShow(gv_Skaters[autoB3A39E5A_var], "SkaterWarpIn", false);
                }
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), autoB3A39E5A_var, true);
                if (((gv_Players[2] == autoB3A39E5A_var) || (gv_Players[6] == autoB3A39E5A_var))) {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoB3A39E5A_var, PointFromId(112), 270.0);
                    UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                    gv_Sticks[autoB3A39E5A_var] = UnitLastCreated();
                }
                else {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoB3A39E5A_var, PointFromId(112), 270.0);
                    gv_Sticks[autoB3A39E5A_var] = UnitLastCreated();
                }
            }
            else {
                if ((gv_benchPlayers[1] == autoB3A39E5A_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(669), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(671), PointFromId(112));
                    }
                    CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/C939C98C", "A", PlayerName(autoB3A39E5A_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/C939C98C"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoB3A39E5A_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoB3A39E5A_var), false);
                    }

                    gv_TextTags[autoB3A39E5A_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[2] == autoB3A39E5A_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(670), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(672), PointFromId(112));
                    }
                    CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/818F0E82", "A", PlayerName(autoB3A39E5A_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/818F0E82"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoB3A39E5A_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoB3A39E5A_var), false);
                    }

                    gv_TextTags[autoB3A39E5A_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[3] == autoB3A39E5A_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(671), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(669), PointFromId(112));
                    }
                    CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/8B1509F7", "A", PlayerName(autoB3A39E5A_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/8B1509F7"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoB3A39E5A_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoB3A39E5A_var), false);
                    }

                    gv_TextTags[autoB3A39E5A_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[4] == autoB3A39E5A_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(672), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoB3A39E5A_var, PointFromId(670), PointFromId(112));
                    }
                    CameraPan(autoB3A39E5A_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/66A2D7CA", "A", PlayerName(autoB3A39E5A_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/66A2D7CA"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoB3A39E5A_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoB3A39E5A_var), false);
                    }

                    gv_TextTags[autoB3A39E5A_var] = TextTagLastCreated();
                }

            }
        }

    }
    gf_CreateUnitsColor();
    gf_ApplyCustomizations();
    gf_Team3UIUpdateLimitedAccess();
    gf_ApplyPPReadyAnimation();
    gf_UpdateCDRemoteShild(gv_Players[2], gv_Skaters[gv_Players[2]]);
    gf_UpdateCDRemoteShild(gv_Players[6], gv_Skaters[gv_Players[6]]);
    gf_Setpowerplaynotavailable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnits_Init () {
    gt_CreateUnits = TriggerCreate("gt_CreateUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Units FOL
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnitsFOL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerName;
    string lv_unitType1;
    string lv_unitType2;

    // Automatic Variable Declarations
    const int auto224B4864_ae = 14;
    int auto224B4864_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lasttouchedby = -1;
    if ((PlayerStatus(gv_team1Captain) == c_playerStatusLeft)) {
        gv_team1Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[1]);
    }

    if ((PlayerStatus(gv_team2Captain) == c_playerStatusLeft)) {
        gv_team2Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[2]);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    if (((PlayerStatus(gv_benchPlayers[1]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[2]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), false);
    }
    if (((PlayerStatus(gv_benchPlayers[3]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[4]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), false);
    }
    TriggerExecute(gt_RemoveUnits, true, true);
    gv_ShootingPlayer = 0;
    auto224B4864_var = 1;
    for ( ; auto224B4864_var <= auto224B4864_ae; auto224B4864_var += 1 ) {
        gf_SetCooldownsandChargesforUnit(auto224B4864_var);
        if ((PlayerHandle(auto224B4864_var) == gv_hANDLE_CERVANTEZ)) {
            lv_playerName = StringExternal("Param/Value/1E4B03FE");
        }
        else {
            lv_playerName = PlayerName(auto224B4864_var);
        }
        TextTagDestroy(gv_TextTags[auto224B4864_var]);
        lv_unitType1 = "Zealot";
        lv_unitType2 = "Immortal";
        if ((gv_unitSetType[auto224B4864_var] == 2) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "SpaceDiablo";
            lv_unitType2 = "Queen";
        }

        if ((gv_unitSetType[auto224B4864_var] == 3) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[auto224B4864_var] == 4) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[auto224B4864_var] == 5) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Sentry";
        }

        if ((gv_unitSetType[auto224B4864_var] == 6) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[auto224B4864_var] == 7) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "Hydralisk";
        }

        if ((gv_unitSetType[auto224B4864_var] == 8) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
        }

        if ((gv_unitSetType[auto224B4864_var] == 9) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "StoneZealot";
            lv_unitType2 = "Stalker";
        }

        if ((gv_unitSetType[auto224B4864_var] == 10) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "WidowMine";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto224B4864_var] == 12) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[auto224B4864_var] == 13) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto224B4864_var] == 14) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[auto224B4864_var] == 15) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "HighTemplar";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[auto224B4864_var] == 16) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[auto224B4864_var] == 17) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[auto224B4864_var] == 18) && (gv_skinTest[auto224B4864_var] == 0)) {
        }

        if ((gv_unitSetType[auto224B4864_var] == 19) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "PhotonCannon";
        }

        if ((gv_unitSetType[auto224B4864_var] == 20) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[auto224B4864_var] == 21) && (gv_skinTest[auto224B4864_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((PlayerStatus(auto224B4864_var) == c_playerStatusActive)) {
            if ((gv_Players[2] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(149), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(150), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[1] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(114), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(114), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(116), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(116), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[3] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(117), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(117), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(120), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(120), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[4] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(119), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(119), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(121), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(121), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[6] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(150), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(149), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[5] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(116), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(116), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(114), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(114), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[7] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(120), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(120), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(117), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(117), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[8] == auto224B4864_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(121), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(121), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, auto224B4864_var, PointFromId(119), PointFromId(3));
                    CameraPan(auto224B4864_var, PointFromId(119), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if (((gv_Players[1] == auto224B4864_var) || (gv_Players[2] == auto224B4864_var) || (gv_Players[3] == auto224B4864_var) || (gv_Players[4] == auto224B4864_var) || (gv_Players[5] == auto224B4864_var) || (gv_Players[6] == auto224B4864_var) || (gv_Players[7] == auto224B4864_var) || (gv_Players[8] == auto224B4864_var))) {
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagSetFontSize(TextTagLastCreated(), 20);
                TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                if ((gv_nameTagShow[auto224B4864_var] == false)) {
                    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto224B4864_var), false);
                }

                gv_TextTags[auto224B4864_var] = TextTagLastCreated();
                if ((PlayerStatus(auto224B4864_var) == c_playerStatusActive)) {
                    if ((PlayerStatus(auto224B4864_var) == c_playerStatusActive)) {
                        if ((gv_playerRank[auto224B4864_var] == 0)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scBronze.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 1)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scSilver.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 2)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scGold.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 3)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scPlatinum.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 4)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scDiamond.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 5)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scMasters2.dds");
                        }

                        if ((gv_playerRank[auto224B4864_var] == 6)) {
                            gf_CreateBadgeTextTag(UnitLastCreated(), auto224B4864_var, "scGrandMaster2.dds");
                        }

                    }

                }

                gv_Skaters[auto224B4864_var] = UnitLastCreated();
                if ((gv_powerplay.lv_powerplayMode == true)) {
                    UnitAbilityShow(gv_Skaters[auto224B4864_var], "GoalieRecall", false);
                    UnitAbilityEnable(gv_Skaters[auto224B4864_var], "SkaterWarpIn", false);
                }
                else {
                    UnitAbilityShow(gv_Skaters[auto224B4864_var], "GoalieRecall", false);
                    UnitAbilityShow(gv_Skaters[auto224B4864_var], "SkaterWarpIn", false);
                }
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), auto224B4864_var, true);
                if (((gv_Players[2] == auto224B4864_var) || (gv_Players[6] == auto224B4864_var))) {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, auto224B4864_var, PointFromId(112), 270.0);
                    UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                    gv_Sticks[auto224B4864_var] = UnitLastCreated();
                }
                else {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, auto224B4864_var, PointFromId(112), 270.0);
                    gv_Sticks[auto224B4864_var] = UnitLastCreated();
                }
            }
            else {
                if ((gv_benchPlayers[1] == auto224B4864_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(669), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(671), PointFromId(112));
                    }
                    CameraPan(auto224B4864_var, PointFromId(3), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/F77CC6E5", "A", PlayerName(auto224B4864_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/F77CC6E5"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[auto224B4864_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto224B4864_var), false);
                    }

                    gv_TextTags[auto224B4864_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[2] == auto224B4864_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(670), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(672), PointFromId(112));
                    }
                    CameraPan(auto224B4864_var, PointFromId(3), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/B99EF655", "A", PlayerName(auto224B4864_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/B99EF655"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[auto224B4864_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto224B4864_var), false);
                    }

                    gv_TextTags[auto224B4864_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[3] == auto224B4864_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(671), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(669), PointFromId(112));
                    }
                    CameraPan(auto224B4864_var, PointFromId(3), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/C4CAB0F0", "A", PlayerName(auto224B4864_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/C4CAB0F0"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[auto224B4864_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto224B4864_var), false);
                    }

                    gv_TextTags[auto224B4864_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[4] == auto224B4864_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(672), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, auto224B4864_var, PointFromId(670), PointFromId(112));
                    }
                    CameraPan(auto224B4864_var, PointFromId(3), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/E94DA9A4", "A", PlayerName(auto224B4864_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/E94DA9A4"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[auto224B4864_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto224B4864_var), false);
                    }

                    gv_TextTags[auto224B4864_var] = TextTagLastCreated();
                }

            }
        }

    }
    gf_CreateUnitsColor();
    gf_ApplyCustomizations();
    gf_Team3UIUpdateLimitedAccess();
    gf_ApplyPPReadyAnimation();
    gf_UpdateCDRemoteShild(gv_Players[2], gv_Skaters[gv_Players[2]]);
    gf_UpdateCDRemoteShild(gv_Players[6], gv_Skaters[gv_Players[6]]);
    gf_Setpowerplaynotavailable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnitsFOL_Init () {
    gt_CreateUnitsFOL = TriggerCreate("gt_CreateUnitsFOL_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Units FOR
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnitsFOR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerName;
    string lv_unitType1;
    string lv_unitType2;

    // Automatic Variable Declarations
    const int autoE753E667_ae = 14;
    int autoE753E667_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lasttouchedby = -1;
    if ((PlayerStatus(gv_team1Captain) == c_playerStatusLeft)) {
        gv_team1Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[1]);
    }

    if ((PlayerStatus(gv_team2Captain) == c_playerStatusLeft)) {
        gv_team2Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[2]);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    if (((PlayerStatus(gv_benchPlayers[1]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[2]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), false);
    }
    if (((PlayerStatus(gv_benchPlayers[3]) == c_playerStatusActive) || (PlayerStatus(gv_benchPlayers[4]) == c_playerStatusActive))) {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), true);
    }
    else {
        DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), false);
    }
    TriggerExecute(gt_RemoveUnits, true, true);
    gv_ShootingPlayer = 0;
    autoE753E667_var = 1;
    for ( ; autoE753E667_var <= autoE753E667_ae; autoE753E667_var += 1 ) {
        gf_SetCooldownsandChargesforUnit(autoE753E667_var);
        if ((PlayerHandle(autoE753E667_var) == gv_hANDLE_CERVANTEZ)) {
            lv_playerName = StringExternal("Param/Value/EB9ED4A8");
        }
        else {
            lv_playerName = PlayerName(autoE753E667_var);
        }
        TextTagDestroy(gv_TextTags[autoE753E667_var]);
        lv_unitType1 = "Zealot";
        lv_unitType2 = "Immortal";
        if ((gv_unitSetType[autoE753E667_var] == 2) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "SpaceDiablo";
            lv_unitType2 = "Queen";
        }

        if ((gv_unitSetType[autoE753E667_var] == 3) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoE753E667_var] == 4) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoE753E667_var] == 5) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Sentry";
        }

        if ((gv_unitSetType[autoE753E667_var] == 6) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoE753E667_var] == 7) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "Hydralisk";
        }

        if ((gv_unitSetType[autoE753E667_var] == 8) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
        }

        if ((gv_unitSetType[autoE753E667_var] == 9) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "StoneZealot";
            lv_unitType2 = "Stalker";
        }

        if ((gv_unitSetType[autoE753E667_var] == 10) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "WidowMine";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoE753E667_var] == 12) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoE753E667_var] == 13) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoE753E667_var] == 14) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoE753E667_var] == 15) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "HighTemplar";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoE753E667_var] == 16) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoE753E667_var] == 17) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoE753E667_var] == 18) && (gv_skinTest[autoE753E667_var] == 0)) {
        }

        if ((gv_unitSetType[autoE753E667_var] == 19) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "PhotonCannon";
        }

        if ((gv_unitSetType[autoE753E667_var] == 20) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoE753E667_var] == 21) && (gv_skinTest[autoE753E667_var] == 0)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((PlayerStatus(autoE753E667_var) == c_playerStatusActive)) {
            if ((gv_Players[2] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(149), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(150), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[1] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(122), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(122), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(123), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(123), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[3] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(124), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(124), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(125), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(125), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[4] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(127), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(127), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(126), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(126), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            }

            if ((gv_Players[6] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(150), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(150), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(149), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(149), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[5] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    CameraPan(autoE753E667_var, PointFromId(123), 2.0, -1, 10.0, false);
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(123), PointFromId(113));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(122), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(122), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[7] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(125), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(125), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(124), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(124), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if ((gv_Players[8] == autoE753E667_var)) {
                if ((ModI(gv_Period, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(126), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(126), 2.0, -1, 10.0, false);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, c_unitCreateIgnorePlacement, autoE753E667_var, PointFromId(127), PointFromId(113));
                    CameraPan(autoE753E667_var, PointFromId(127), 2.0, -1, 10.0, false);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            }

            if (((gv_Players[1] == autoE753E667_var) || (gv_Players[2] == autoE753E667_var) || (gv_Players[3] == autoE753E667_var) || (gv_Players[4] == autoE753E667_var) || (gv_Players[5] == autoE753E667_var) || (gv_Players[6] == autoE753E667_var) || (gv_Players[7] == autoE753E667_var) || (gv_Players[8] == autoE753E667_var))) {
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagSetFontSize(TextTagLastCreated(), 20);
                TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                if ((gv_nameTagShow[autoE753E667_var] == false)) {
                    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoE753E667_var), false);
                }

                gv_TextTags[autoE753E667_var] = TextTagLastCreated();
                if ((PlayerStatus(autoE753E667_var) == c_playerStatusActive)) {
                    if ((gv_playerRank[autoE753E667_var] == 0)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scBronze.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 1)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scSilver.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 2)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scGold.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 3)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scPlatinum.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 4)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scDiamond.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 5)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scMasters2.dds");
                    }

                    if ((gv_playerRank[autoE753E667_var] == 6)) {
                        gf_CreateBadgeTextTag(UnitLastCreated(), autoE753E667_var, "scGrandMaster2.dds");
                    }

                }

                gv_Skaters[autoE753E667_var] = UnitLastCreated();
                if ((gv_powerplay.lv_powerplayMode == true)) {
                    UnitAbilityShow(gv_Skaters[autoE753E667_var], "GoalieRecall", false);
                    UnitAbilityEnable(gv_Skaters[autoE753E667_var], "SkaterWarpIn", false);
                }
                else {
                    UnitAbilityShow(gv_Skaters[autoE753E667_var], "GoalieRecall", false);
                    UnitAbilityShow(gv_Skaters[autoE753E667_var], "SkaterWarpIn", false);
                }
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), autoE753E667_var, true);
                if (((gv_Players[2] == autoE753E667_var) || (gv_Players[6] == autoE753E667_var))) {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoE753E667_var, PointFromId(112), 270.0);
                    UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                    gv_Sticks[autoE753E667_var] = UnitLastCreated();
                }
                else {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoE753E667_var, PointFromId(112), 270.0);
                    gv_Sticks[autoE753E667_var] = UnitLastCreated();
                }
            }
            else {
                if ((gv_benchPlayers[1] == autoE753E667_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(669), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(671), PointFromId(112));
                    }
                    CameraPan(autoE753E667_var, PointFromId(113), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/E7B030E3", "A", PlayerName(autoE753E667_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/E7B030E3"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoE753E667_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoE753E667_var), false);
                    }

                    gv_TextTags[autoE753E667_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[2] == autoE753E667_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(670), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(672), PointFromId(112));
                    }
                    CameraPan(autoE753E667_var, PointFromId(113), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/4F2348D6", "A", PlayerName(autoE753E667_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/4F2348D6"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoE753E667_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoE753E667_var), false);
                    }

                    gv_TextTags[autoE753E667_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[3] == autoE753E667_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(671), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(669), PointFromId(112));
                    }
                    CameraPan(autoE753E667_var, PointFromId(113), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/E4819008", "A", PlayerName(autoE753E667_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/E4819008"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoE753E667_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoE753E667_var), false);
                    }

                    gv_TextTags[autoE753E667_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[4] == autoE753E667_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(672), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoE753E667_var, PointFromId(670), PointFromId(112));
                    }
                    CameraPan(autoE753E667_var, PointFromId(113), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/BE305264", "A", PlayerName(autoE753E667_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/BE305264"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagSetFadedTransparency(TextTagLastCreated(), c_textTagFadeAll, 80.0);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoE753E667_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoE753E667_var), false);
                    }

                    gv_TextTags[autoE753E667_var] = TextTagLastCreated();
                }

            }
        }

    }
    gf_CreateUnitsColor();
    gf_ApplyCustomizations();
    gf_Team3UIUpdateLimitedAccess();
    gf_ApplyPPReadyAnimation();
    gf_UpdateCDRemoteShild(gv_Players[2], gv_Skaters[gv_Players[2]]);
    gf_UpdateCDRemoteShild(gv_Players[6], gv_Skaters[gv_Players[6]]);
    gf_Setpowerplaynotavailable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnitsFOR_Init () {
    gt_CreateUnitsFOR = TriggerCreate("gt_CreateUnitsFOR_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faceoff Hold
//--------------------------------------------------------------------------------------------------
bool gt_FaceoffHold_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_looprunning;

    // Automatic Variable Declarations
    playergroup auto5FDB2EC0_g;
    int auto5FDB2EC0_var;
    playergroup auto2EC5F6BD_g;
    int auto2EC5F6BD_var;
    playergroup auto30A5791F_g;
    int auto30A5791F_var;
    playergroup auto82205FB5_g;
    int auto82205FB5_var;
    playergroup auto7D5D7577_g;
    int auto7D5D7577_var;
    playergroup autoC9E909B7_g;
    int autoC9E909B7_var;
    playergroup auto4969DFE3_g;
    int auto4969DFE3_var;
    playergroup auto3C2FB5A4_g;
    int auto3C2FB5A4_var;
    playergroup auto96B9149F_g;
    int auto96B9149F_var;
    playergroup auto8001BDDB_g;
    int auto8001BDDB_var;
    playergroup auto2C4D14C8_g;
    int auto2C4D14C8_var;
    playergroup autoADB69321_g;
    int autoADB69321_var;

    // Variable Initialization
    lv_looprunning = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_looprunning == true)) {
        if ((gv_Shootout == false) && (GameAttributeGameValue("2") != "0003") && (gv_testredlinemode == false)) {
            if ((gv_stoppageOfPlay == false) && (((ModI(gv_Period, 2) == 1) && (gv_Possession == gv_Players[2]) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(3)) == true))) || ((ModI(gv_Period, 2) != 1) && (gv_Possession == gv_Players[6]) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(3)) == true))) || ((gv_Possession == -1) && (gv_puckMagnitude <= 0.0) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == true)))) && (gv_goalsAllowed == true)) {
                gv_FaceoffHoldTimer[1] += 1;
            }
            else {
                if (((gv_stoppageOfPlay == true) || ((ModI(gv_Period, 2) == 1) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))) || ((ModI(gv_Period, 2) != 1) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))))) {
                    gv_FaceoffHoldTimer[1] = 0;
                }

            }
            if ((gv_stoppageOfPlay == false) && (((ModI(gv_Period, 2) == 1) && (gv_Possession == gv_Players[6]) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(4)) == true))) || ((ModI(gv_Period, 2) != 1) && (gv_Possession == gv_Players[2]) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(4)) == true))) || ((gv_Possession == -1) && (gv_puckMagnitude <= 0.0) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == true)))) && (gv_goalsAllowed == true)) {
                gv_FaceoffHoldTimer[2] += 1;
            }
            else {
                if (((gv_stoppageOfPlay == true) || ((ModI(gv_Period, 2) == 1) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))) || ((ModI(gv_Period, 2) != 1) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))))) {
                    gv_FaceoffHoldTimer[2] = 0;
                }

            }
            if ((gv_FaceoffHoldTimer[1] > 17)) {
                if ((gv_Possession > -1)) {
                    gv_windingUp[gv_Possession] = false;
                }

                gf_SetGoalLighting(ge_GoalSide_LeftGoal, ge_GameplayEvent_GoalieHold);
                gf_RandomizeFaceoffHoldLocations();
                gv_Possession = -1;
                gv_FaceoffHoldTimer[1] = 0;
                gv_NoCount = true;
                gv_stoppageOfPlay = true;
                TimerPause(gv_Timer, true);
                SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                if ((gv_testteam3ui == true)) {
                    auto30A5791F_g = PlayerGroupAll();
                    auto30A5791F_var = -1;
                    while (true) {
                        auto30A5791F_var = PlayerGroupNextPlayer(auto30A5791F_g, auto30A5791F_var);
                        if (auto30A5791F_var < 0) { break; }
                        gf_StopPuckCam(auto30A5791F_var, false);
                    }
                }
                else {
                    auto5FDB2EC0_g = GameAttributePlayersForTeam(3);
                    auto5FDB2EC0_var = -1;
                    while (true) {
                        auto5FDB2EC0_var = PlayerGroupNextPlayer(auto5FDB2EC0_g, auto5FDB2EC0_var);
                        if (auto5FDB2EC0_var < 0) { break; }
                        gf_StopPuckCam(auto5FDB2EC0_var, false);
                    }
                    auto2EC5F6BD_g = PlayerGroupActive();
                    auto2EC5F6BD_var = -1;
                    while (true) {
                        auto2EC5F6BD_var = PlayerGroupNextPlayer(auto2EC5F6BD_g, auto2EC5F6BD_var);
                        if (auto2EC5F6BD_var < 0) { break; }
                        if ((gv_team3UI.lv_limitedAccess[auto2EC5F6BD_var] == true)) {
                            gf_StopPuckCam(auto2EC5F6BD_var, false);
                        }

                    }
                }
                UnitSetPosition(gv_pUCK, PointFromId(2), false);
                DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
                DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
                DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
                DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/2BC1C2BC"));
                Wait(5.0, c_timeGame);
                gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
                gv_NoCount = false;
                gv_stoppageOfPlay = false;
                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                UnitSetPosition(gv_pUCK, PointFromId(3), false);
                if ((gv_testteam3ui == true)) {
                    autoC9E909B7_g = PlayerGroupAll();
                    autoC9E909B7_var = -1;
                    while (true) {
                        autoC9E909B7_var = PlayerGroupNextPlayer(autoC9E909B7_g, autoC9E909B7_var);
                        if (autoC9E909B7_var < 0) { break; }
                        gf_StartPuckCam(autoC9E909B7_var);
                    }
                }
                else {
                    auto82205FB5_g = GameAttributePlayersForTeam(3);
                    auto82205FB5_var = -1;
                    while (true) {
                        auto82205FB5_var = PlayerGroupNextPlayer(auto82205FB5_g, auto82205FB5_var);
                        if (auto82205FB5_var < 0) { break; }
                        gf_StartPuckCam(auto82205FB5_var);
                    }
                    auto7D5D7577_g = PlayerGroupActive();
                    auto7D5D7577_var = -1;
                    while (true) {
                        auto7D5D7577_var = PlayerGroupNextPlayer(auto7D5D7577_g, auto7D5D7577_var);
                        if (auto7D5D7577_var < 0) { break; }
                        if ((gv_team3UI.lv_limitedAccess[auto7D5D7577_var] == true)) {
                            gf_StartPuckCam(auto7D5D7577_var);
                        }

                    }
                }
                gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
                gv_faceoffHoldTrigger = true;
                TriggerExecute(gt_RandomizeUnits, true, true);
                gv_faceoffHoldTrigger = false;
                TriggerExecute(gt_CreateUnitsFOL, true, false);
                gv_FaceoffTimer = 7;
            }

            if ((gv_FaceoffHoldTimer[2] > 17)) {
                if ((gv_Possession > -1)) {
                    gv_windingUp[gv_Possession] = false;
                }

                gf_SetGoalLighting(ge_GoalSide_RightGoal, ge_GameplayEvent_GoalieHold);
                gf_RandomizeFaceoffHoldLocations();
                gv_Possession = -1;
                gv_FaceoffHoldTimer[2] = 0;
                gv_NoCount = true;
                gv_stoppageOfPlay = true;
                TimerPause(gv_Timer, true);
                SoundPlay(SoundLink("HockeyBuzzer", -1), PlayerGroupAll(), 100.0, 0.0);
                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                if ((gv_testteam3ui == true)) {
                    auto96B9149F_g = PlayerGroupAll();
                    auto96B9149F_var = -1;
                    while (true) {
                        auto96B9149F_var = PlayerGroupNextPlayer(auto96B9149F_g, auto96B9149F_var);
                        if (auto96B9149F_var < 0) { break; }
                        gf_StopPuckCam(auto96B9149F_var, false);
                    }
                }
                else {
                    auto4969DFE3_g = GameAttributePlayersForTeam(3);
                    auto4969DFE3_var = -1;
                    while (true) {
                        auto4969DFE3_var = PlayerGroupNextPlayer(auto4969DFE3_g, auto4969DFE3_var);
                        if (auto4969DFE3_var < 0) { break; }
                        gf_StopPuckCam(auto4969DFE3_var, false);
                    }
                    auto3C2FB5A4_g = PlayerGroupActive();
                    auto3C2FB5A4_var = -1;
                    while (true) {
                        auto3C2FB5A4_var = PlayerGroupNextPlayer(auto3C2FB5A4_g, auto3C2FB5A4_var);
                        if (auto3C2FB5A4_var < 0) { break; }
                        if ((gv_team3UI.lv_limitedAccess[auto3C2FB5A4_var] == true)) {
                            gf_StopPuckCam(auto3C2FB5A4_var, false);
                        }

                    }
                }
                UnitSetPosition(gv_pUCK, PointFromId(2), false);
                DialogSetVisible(gv_PowerBarDialog[gv_Players[2]], PlayerGroupSingle(gv_Players[2]), false);
                DialogControlSetSize(gv_PowerBarImage[gv_Players[2]], PlayerGroupAll(), 1, 22);
                DialogSetVisible(gv_PowerBarDialog[gv_Players[6]], PlayerGroupSingle(gv_Players[6]), false);
                DialogControlSetSize(gv_PowerBarImage[gv_Players[6]], PlayerGroupAll(), 1, 22);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/183C51E2"));
                Wait(5.0, c_timeGame);
                gf_SetGoalLighting(ge_GoalSide_BothGoals, ge_GameplayEvent_FaceoffStartReverttonormalstate);
                gv_NoCount = false;
                gv_stoppageOfPlay = false;
                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                UnitSetPosition(gv_pUCK, PointFromId(113), false);
                if ((gv_testteam3ui == true)) {
                    autoADB69321_g = PlayerGroupAll();
                    autoADB69321_var = -1;
                    while (true) {
                        autoADB69321_var = PlayerGroupNextPlayer(autoADB69321_g, autoADB69321_var);
                        if (autoADB69321_var < 0) { break; }
                        gf_StartPuckCam(autoADB69321_var);
                    }
                }
                else {
                    auto8001BDDB_g = GameAttributePlayersForTeam(3);
                    auto8001BDDB_var = -1;
                    while (true) {
                        auto8001BDDB_var = PlayerGroupNextPlayer(auto8001BDDB_g, auto8001BDDB_var);
                        if (auto8001BDDB_var < 0) { break; }
                        gf_StartPuckCam(auto8001BDDB_var);
                    }
                    auto2C4D14C8_g = PlayerGroupActive();
                    auto2C4D14C8_var = -1;
                    while (true) {
                        auto2C4D14C8_var = PlayerGroupNextPlayer(auto2C4D14C8_g, auto2C4D14C8_var);
                        if (auto2C4D14C8_var < 0) { break; }
                        if ((gv_team3UI.lv_limitedAccess[auto2C4D14C8_var] == true)) {
                            gf_StartPuckCam(auto2C4D14C8_var);
                        }

                    }
                }
                gf_FaceoffBotDrop(UnitGetPosition(gv_pUCK), false);
                gv_faceoffHoldTrigger = true;
                TriggerExecute(gt_RandomizeUnits, true, true);
                gv_faceoffHoldTrigger = false;
                TriggerExecute(gt_CreateUnitsFOR, true, false);
                gv_FaceoffTimer = 7;
            }

        }

        if ((gv_Possession != -1)) {
            gv_lasttouchedby = gv_Possession;
        }

        Wait(0.25, c_timeReal);
        if ((gv_gameispaused == true)) {
            gv_FaceoffHoldTimer[1] = 0;
            gv_FaceoffHoldTimer[2] = 0;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FaceoffHold_Init () {
    gt_FaceoffHold = TriggerCreate("gt_FaceoffHold_Func");
    TriggerAddEventMapInit(gt_FaceoffHold);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faceoff Winner
//--------------------------------------------------------------------------------------------------
bool gt_FaceoffWinner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_checkFaceoffWinner == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_checkFaceoffWinner = false;
    if ((gv_Possession == -1)) {
        if (((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
            gv_stats_FaceoffWins[gv_Players[1]] += 1;
        }
        else {
            if (((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) {
                gv_stats_FaceoffWins[gv_Players[5]] += 1;
            }

        }
    }
    else {
        if (((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))) {
            gv_stats_FaceoffWins[gv_Players[1]] += 1;
        }
        else {
            if (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))) {
                gv_stats_FaceoffWins[gv_Players[5]] += 1;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FaceoffWinner_Init () {
    gt_FaceoffWinner = TriggerCreate("gt_FaceoffWinner_Func");
    TriggerAddEventUnitRegion(gt_FaceoffWinner, UnitRefFromVariable("gv_pUCK"), RegionFromId(42), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveUnits
//--------------------------------------------------------------------------------------------------
bool gt_RemoveUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto137D0827_ae = 14;
    int auto137D0827_var;
    unitgroup auto3F425A40_g;
    int auto3F425A40_u;
    unit auto3F425A40_var;
    unitgroup auto8E40DC83_g;
    int auto8E40DC83_u;
    unit auto8E40DC83_var;
    unitgroup auto08932F0C_g;
    int auto08932F0C_u;
    unit auto08932F0C_var;
    unitgroup autoFC94DCA0_g;
    int autoFC94DCA0_u;
    unit autoFC94DCA0_var;
    unitgroup autoD49F90C5_g;
    int autoD49F90C5_u;
    unit autoD49F90C5_var;
    unitgroup autoE56264C7_g;
    int autoE56264C7_u;
    unit autoE56264C7_var;
    unitgroup auto60812BA5_g;
    int auto60812BA5_u;
    unit auto60812BA5_var;
    unitgroup auto9FEB42B5_g;
    int auto9FEB42B5_u;
    unit auto9FEB42B5_var;
    unitgroup auto10E9A084_g;
    int auto10E9A084_u;
    unit auto10E9A084_var;
    unitgroup auto8E662CF0_g;
    int auto8E662CF0_u;
    unit auto8E662CF0_var;
    unitgroup auto3E4D3829_g;
    int auto3E4D3829_u;
    unit auto3E4D3829_var;
    unitgroup auto38A6E5F3_g;
    int auto38A6E5F3_u;
    unit auto38A6E5F3_var;
    unitgroup auto45B3E461_g;
    int auto45B3E461_u;
    unit auto45B3E461_var;
    unitgroup auto694CAC7C_g;
    int auto694CAC7C_u;
    unit auto694CAC7C_var;
    unitgroup auto1A3B1710_g;
    int auto1A3B1710_u;
    unit auto1A3B1710_var;
    unitgroup autoD6312C06_g;
    int autoD6312C06_u;
    unit autoD6312C06_var;
    unitgroup autoED70B975_g;
    int autoED70B975_u;
    unit autoED70B975_var;
    unitgroup autoCBAAADD5_g;
    int autoCBAAADD5_u;
    unit autoCBAAADD5_var;
    unitgroup autoA773D0CF_g;
    int autoA773D0CF_u;
    unit autoA773D0CF_var;
    unitgroup auto732B6CC4_g;
    int auto732B6CC4_u;
    unit auto732B6CC4_var;
    unitgroup auto783691CD_g;
    int auto783691CD_u;
    unit auto783691CD_var;
    unitgroup auto2E6DD454_g;
    int auto2E6DD454_u;
    unit auto2E6DD454_var;
    unitgroup auto04EFFCD2_g;
    int auto04EFFCD2_u;
    unit auto04EFFCD2_var;
    unitgroup autoA1069294_g;
    int autoA1069294_u;
    unit autoA1069294_var;
    unitgroup auto5653CDBF_g;
    int auto5653CDBF_u;
    unit auto5653CDBF_var;
    unitgroup autoC74AFED2_g;
    int autoC74AFED2_u;
    unit autoC74AFED2_var;
    unitgroup auto4B1EF9EA_g;
    int auto4B1EF9EA_u;
    unit auto4B1EF9EA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIElements.lv_chargebarDialog, PlayerGroupAll(), false);
    auto137D0827_var = 1;
    for ( ; auto137D0827_var <= auto137D0827_ae; auto137D0827_var += 1 ) {
        gv_Skaters[auto137D0827_var] = null;
        gv_Sticks[auto137D0827_var] = null;
    }
    auto3F425A40_g = UnitGroupSearch("HighTemplar", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F425A40_u = UnitGroupCount(auto3F425A40_g, c_unitCountAll);
    for (;; auto3F425A40_u -= 1) {
        auto3F425A40_var = UnitGroupUnitFromEnd(auto3F425A40_g, auto3F425A40_u);
        if (auto3F425A40_var == null) { break; }
        UnitRemove(auto3F425A40_var);
    }
    auto8E40DC83_g = UnitGroupSearch("HybridReaver", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E40DC83_u = UnitGroupCount(auto8E40DC83_g, c_unitCountAll);
    for (;; auto8E40DC83_u -= 1) {
        auto8E40DC83_var = UnitGroupUnitFromEnd(auto8E40DC83_g, auto8E40DC83_u);
        if (auto8E40DC83_var == null) { break; }
        UnitRemove(auto8E40DC83_var);
    }
    auto08932F0C_g = UnitGroupSearch("WidowMine", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08932F0C_u = UnitGroupCount(auto08932F0C_g, c_unitCountAll);
    for (;; auto08932F0C_u -= 1) {
        auto08932F0C_var = UnitGroupUnitFromEnd(auto08932F0C_g, auto08932F0C_u);
        if (auto08932F0C_var == null) { break; }
        UnitRemove(auto08932F0C_var);
    }
    autoFC94DCA0_g = UnitGroupSearch("Ultralisk", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFC94DCA0_u = UnitGroupCount(autoFC94DCA0_g, c_unitCountAll);
    for (;; autoFC94DCA0_u -= 1) {
        autoFC94DCA0_var = UnitGroupUnitFromEnd(autoFC94DCA0_g, autoFC94DCA0_u);
        if (autoFC94DCA0_var == null) { break; }
        UnitRemove(autoFC94DCA0_var);
    }
    autoD49F90C5_g = UnitGroupSearch("Stalker", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD49F90C5_u = UnitGroupCount(autoD49F90C5_g, c_unitCountAll);
    for (;; autoD49F90C5_u -= 1) {
        autoD49F90C5_var = UnitGroupUnitFromEnd(autoD49F90C5_g, autoD49F90C5_u);
        if (autoD49F90C5_var == null) { break; }
        UnitRemove(autoD49F90C5_var);
    }
    autoE56264C7_g = UnitGroupSearch("StoneZealot", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE56264C7_u = UnitGroupCount(autoE56264C7_g, c_unitCountAll);
    for (;; autoE56264C7_u -= 1) {
        autoE56264C7_var = UnitGroupUnitFromEnd(autoE56264C7_g, autoE56264C7_u);
        if (autoE56264C7_var == null) { break; }
        UnitRemove(autoE56264C7_var);
    }
    auto60812BA5_g = UnitGroupSearch("Hydralisk", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60812BA5_u = UnitGroupCount(auto60812BA5_g, c_unitCountAll);
    for (;; auto60812BA5_u -= 1) {
        auto60812BA5_var = UnitGroupUnitFromEnd(auto60812BA5_g, auto60812BA5_u);
        if (auto60812BA5_var == null) { break; }
        UnitRemove(auto60812BA5_var);
    }
    auto9FEB42B5_g = UnitGroupSearch("PhotonCannon", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FEB42B5_u = UnitGroupCount(auto9FEB42B5_g, c_unitCountAll);
    for (;; auto9FEB42B5_u -= 1) {
        auto9FEB42B5_var = UnitGroupUnitFromEnd(auto9FEB42B5_g, auto9FEB42B5_u);
        if (auto9FEB42B5_var == null) { break; }
        UnitRemove(auto9FEB42B5_var);
    }
    auto10E9A084_g = UnitGroupSearch("SiegeTank", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto10E9A084_u = UnitGroupCount(auto10E9A084_g, c_unitCountAll);
    for (;; auto10E9A084_u -= 1) {
        auto10E9A084_var = UnitGroupUnitFromEnd(auto10E9A084_g, auto10E9A084_u);
        if (auto10E9A084_var == null) { break; }
        UnitRemove(auto10E9A084_var);
    }
    auto8E662CF0_g = UnitGroupSearch("DarkTemplar", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E662CF0_u = UnitGroupCount(auto8E662CF0_g, c_unitCountAll);
    for (;; auto8E662CF0_u -= 1) {
        auto8E662CF0_var = UnitGroupUnitFromEnd(auto8E662CF0_g, auto8E662CF0_u);
        if (auto8E662CF0_var == null) { break; }
        UnitRemove(auto8E662CF0_var);
    }
    auto3E4D3829_g = UnitGroupSearch("Sentry", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3E4D3829_u = UnitGroupCount(auto3E4D3829_g, c_unitCountAll);
    for (;; auto3E4D3829_u -= 1) {
        auto3E4D3829_var = UnitGroupUnitFromEnd(auto3E4D3829_g, auto3E4D3829_u);
        if (auto3E4D3829_var == null) { break; }
        UnitRemove(auto3E4D3829_var);
    }
    auto38A6E5F3_g = UnitGroupSearch("Marine", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38A6E5F3_u = UnitGroupCount(auto38A6E5F3_g, c_unitCountAll);
    for (;; auto38A6E5F3_u -= 1) {
        auto38A6E5F3_var = UnitGroupUnitFromEnd(auto38A6E5F3_g, auto38A6E5F3_u);
        if (auto38A6E5F3_var == null) { break; }
        UnitRemove(auto38A6E5F3_var);
    }
    auto45B3E461_g = UnitGroupSearch("Thor", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45B3E461_u = UnitGroupCount(auto45B3E461_g, c_unitCountAll);
    for (;; auto45B3E461_u -= 1) {
        auto45B3E461_var = UnitGroupUnitFromEnd(auto45B3E461_g, auto45B3E461_u);
        if (auto45B3E461_var == null) { break; }
        UnitRemove(auto45B3E461_var);
    }
    auto694CAC7C_g = UnitGroupSearch("PrisonZealot", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto694CAC7C_u = UnitGroupCount(auto694CAC7C_g, c_unitCountAll);
    for (;; auto694CAC7C_u -= 1) {
        auto694CAC7C_var = UnitGroupUnitFromEnd(auto694CAC7C_g, auto694CAC7C_u);
        if (auto694CAC7C_var == null) { break; }
        UnitRemove(auto694CAC7C_var);
    }
    auto1A3B1710_g = UnitGroupSearch("Archon", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A3B1710_u = UnitGroupCount(auto1A3B1710_g, c_unitCountAll);
    for (;; auto1A3B1710_u -= 1) {
        auto1A3B1710_var = UnitGroupUnitFromEnd(auto1A3B1710_g, auto1A3B1710_u);
        if (auto1A3B1710_var == null) { break; }
        UnitRemove(auto1A3B1710_var);
    }
    autoD6312C06_g = UnitGroupSearch("SpaceDiablo", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6312C06_u = UnitGroupCount(autoD6312C06_g, c_unitCountAll);
    for (;; autoD6312C06_u -= 1) {
        autoD6312C06_var = UnitGroupUnitFromEnd(autoD6312C06_g, autoD6312C06_u);
        if (autoD6312C06_var == null) { break; }
        UnitRemove(autoD6312C06_var);
    }
    autoED70B975_g = UnitGroupSearch("Queen", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED70B975_u = UnitGroupCount(autoED70B975_g, c_unitCountAll);
    for (;; autoED70B975_u -= 1) {
        autoED70B975_var = UnitGroupUnitFromEnd(autoED70B975_g, autoED70B975_u);
        if (autoED70B975_var == null) { break; }
        UnitRemove(autoED70B975_var);
    }
    autoCBAAADD5_g = UnitGroupSearch("Zealot", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCBAAADD5_u = UnitGroupCount(autoCBAAADD5_g, c_unitCountAll);
    for (;; autoCBAAADD5_u -= 1) {
        autoCBAAADD5_var = UnitGroupUnitFromEnd(autoCBAAADD5_g, autoCBAAADD5_u);
        if (autoCBAAADD5_var == null) { break; }
        UnitRemove(autoCBAAADD5_var);
    }
    autoA773D0CF_g = UnitGroupSearch("Immortal", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA773D0CF_u = UnitGroupCount(autoA773D0CF_g, c_unitCountAll);
    for (;; autoA773D0CF_u -= 1) {
        autoA773D0CF_var = UnitGroupUnitFromEnd(autoA773D0CF_g, autoA773D0CF_u);
        if (autoA773D0CF_var == null) { break; }
        UnitRemove(autoA773D0CF_var);
    }
    auto732B6CC4_g = UnitGroupSearch("ChangelingZergling", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto732B6CC4_u = UnitGroupCount(auto732B6CC4_g, c_unitCountAll);
    for (;; auto732B6CC4_u -= 1) {
        auto732B6CC4_var = UnitGroupUnitFromEnd(auto732B6CC4_g, auto732B6CC4_u);
        if (auto732B6CC4_var == null) { break; }
        UnitRemove(auto732B6CC4_var);
    }
    auto783691CD_g = UnitGroupSearch("ShapeHockeyStick", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, 0, 0), 0);
    auto783691CD_u = UnitGroupCount(auto783691CD_g, c_unitCountAll);
    for (;; auto783691CD_u -= 1) {
        auto783691CD_var = UnitGroupUnitFromEnd(auto783691CD_g, auto783691CD_u);
        if (auto783691CD_var == null) { break; }
        UnitRemove(auto783691CD_var);
    }
    auto2E6DD454_g = UnitGroupSearch("ForceField", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2E6DD454_u = UnitGroupCount(auto2E6DD454_g, c_unitCountAll);
    for (;; auto2E6DD454_u -= 1) {
        auto2E6DD454_var = UnitGroupUnitFromEnd(auto2E6DD454_g, auto2E6DD454_u);
        if (auto2E6DD454_var == null) { break; }
        UnitRemove(auto2E6DD454_var);
    }
    auto04EFFCD2_g = UnitGroupSearch("RemoteForceField", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto04EFFCD2_u = UnitGroupCount(auto04EFFCD2_g, c_unitCountAll);
    for (;; auto04EFFCD2_u -= 1) {
        auto04EFFCD2_var = UnitGroupUnitFromEnd(auto04EFFCD2_g, auto04EFFCD2_u);
        if (auto04EFFCD2_var == null) { break; }
        UnitRemove(auto04EFFCD2_var);
    }
    autoA1069294_g = UnitGroupSearch("TarsonisTiger", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA1069294_u = UnitGroupCount(autoA1069294_g, c_unitCountAll);
    for (;; autoA1069294_u -= 1) {
        autoA1069294_var = UnitGroupUnitFromEnd(autoA1069294_g, autoA1069294_u);
        if (autoA1069294_var == null) { break; }
        UnitRemove(autoA1069294_var);
    }
    auto5653CDBF_g = UnitGroupSearch("TarsonisMonster", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5653CDBF_u = UnitGroupCount(auto5653CDBF_g, c_unitCountAll);
    for (;; auto5653CDBF_u -= 1) {
        auto5653CDBF_var = UnitGroupUnitFromEnd(auto5653CDBF_g, auto5653CDBF_u);
        if (auto5653CDBF_var == null) { break; }
        UnitRemove(auto5653CDBF_var);
    }
    autoC74AFED2_g = UnitGroupSearch("DuckHunter2", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC74AFED2_u = UnitGroupCount(autoC74AFED2_g, c_unitCountAll);
    for (;; autoC74AFED2_u -= 1) {
        autoC74AFED2_var = UnitGroupUnitFromEnd(autoC74AFED2_g, autoC74AFED2_u);
        if (autoC74AFED2_var == null) { break; }
        UnitRemove(autoC74AFED2_var);
    }
    auto4B1EF9EA_g = UnitGroupSearch("LongboltMissileWeapon", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B1EF9EA_u = UnitGroupCount(auto4B1EF9EA_g, c_unitCountAll);
    for (;; auto4B1EF9EA_u -= 1) {
        auto4B1EF9EA_var = UnitGroupUnitFromEnd(auto4B1EF9EA_g, auto4B1EF9EA_u);
        if (auto4B1EF9EA_var == null) { break; }
        UnitRemove(auto4B1EF9EA_var);
    }
    gv_pullGoalie[1] = false;
    gv_pullGoalie[2] = false;
    RegionSetCenter(RegionFromId(22), PointFromId(332));
    RegionSetCenter(RegionFromId(23), PointFromId(332));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveUnits_Init () {
    gt_RemoveUnits = TriggerCreate("gt_RemoveUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shootout Timer
//--------------------------------------------------------------------------------------------------
bool gt_ShooutoutTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(gv_Timer) <= 0) || (gv_ShootoutShooting2 == false) || (gv_gameOver == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_Timer, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShooutoutTimer_Init () {
    gt_ShooutoutTimer = TriggerCreate("gt_ShooutoutTimer_Func");
    TriggerEnable(gt_ShooutoutTimer, false);
    TriggerAddEventTimePeriodic(gt_ShooutoutTimer, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Units Shootout
//--------------------------------------------------------------------------------------------------
bool gt_CreateUnitsShootout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerName;
    unit lv_LocUnit;
    int lv_LocTextTag;
    string lv_unitType1;
    string lv_unitType2;

    // Automatic Variable Declarations
    const int auto19DBAFE7_ae = 15;
    int auto19DBAFE7_var;
    const int autoDA9033F8_ae = 14;
    int autoDA9033F8_var;

    // Variable Initialization
    lv_LocTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    auto19DBAFE7_var = 1;
    for ( ; auto19DBAFE7_var <= auto19DBAFE7_ae; auto19DBAFE7_var += 1 ) {
        gv_team3UI.lv_limitedAccess[auto19DBAFE7_var] = false;
    }
    gf_Team3UIUpdateLimitedAccess();
    gv_lasttouchedby = -1;
    if ((PlayerStatus(gv_team1Captain) == c_playerStatusLeft)) {
        gv_team1Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[1]);
    }

    if ((PlayerStatus(gv_team2Captain) == c_playerStatusLeft)) {
        gv_team2Captain = gf_RandomPlayerFromPlayerGroup(gv_actualPlayerzonTeam[2]);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team1Captain), false);
    DialogSetVisible(gv_benchSwapDialog, PlayerGroupSingle(gv_team2Captain), false);
    TriggerExecute(gt_RemoveUnits, true, true);
    gv_ShootingPlayer = 0;
    gv_ShootouttimerCount = false;
    autoDA9033F8_var = 1;
    for ( ; autoDA9033F8_var <= autoDA9033F8_ae; autoDA9033F8_var += 1 ) {
        gf_SetCooldownsandChargesforUnit(autoDA9033F8_var);
        if ((PlayerHandle(autoDA9033F8_var) == gv_hANDLE_CERVANTEZ)) {
            lv_playerName = StringExternal("Param/Value/A54C0AD8");
        }
        else {
            lv_playerName = PlayerName(autoDA9033F8_var);
        }
        CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
        TextTagDestroy(gv_TextTags[autoDA9033F8_var]);
        lv_unitType1 = "Zealot";
        lv_unitType2 = "Immortal";
        if ((gv_unitSetType[autoDA9033F8_var] == 2)) {
            lv_unitType1 = "SpaceDiablo";
            lv_unitType2 = "Queen";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 3)) {
            lv_unitType1 = "PrisonZealot";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 4)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 5)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Sentry";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 6)) {
            lv_unitType1 = "Marine";
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 7)) {
            lv_unitType1 = "Hydralisk";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 8)) {
            lv_unitType1 = "DarkTemplar";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 9)) {
            lv_unitType1 = "StoneZealot";
            lv_unitType2 = "Stalker";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 10)) {
            lv_unitType1 = "WidowMine";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 12)) {
            lv_unitType2 = "Thor";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 13)) {
            lv_unitType1 = "DarkTemplar";
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 14)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 15)) {
            lv_unitType1 = "HighTemplar";
            lv_unitType2 = "Archon";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 16)) {
            lv_unitType1 = "HighTemplar";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 17)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 18)) {
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 19)) {
            lv_unitType2 = "PhotonCannon";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 20)) {
            lv_unitType2 = "SiegeTank";
        }

        if ((gv_unitSetType[autoDA9033F8_var] == 21)) {
            lv_unitType2 = "Ultralisk";
        }

        if ((PlayerStatus(autoDA9033F8_var) == c_playerStatusActive) && ((gv_Players[1] == autoDA9033F8_var) || (gv_Players[5] == autoDA9033F8_var) || (gv_Players[2] == autoDA9033F8_var) || (gv_Players[6] == autoDA9033F8_var))) {
            if ((gv_Players[1] == autoDA9033F8_var)) {
                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointWithOffset(PointFromId(112), -10.0, 0.0), PointFromId(112));
                lv_LocUnit = UnitLastCreated();
                CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoDA9033F8_var) == true)) {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                }
                else {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                }
                lv_LocTextTag = TextTagLastCreated();
                TextExpressionSetToken("Param/Expression/1E8FABE5", "A", PlayerName(autoDA9033F8_var));
                TextExpressionSetToken("Param/Expression/1E8FABE5", "B", IntToText(gv_stats_SSgoals[autoDA9033F8_var]));
                TextExpressionSetToken("Param/Expression/1E8FABE5", "C", IntToText(gv_stats_SSattempts[autoDA9033F8_var]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/1E8FABE5"));
                gv_stats_SSattempts[autoDA9033F8_var] += 1;
                if ((gv_ranked == true)) {
                    gf_SaveBank(autoDA9033F8_var);
                }

            }

            if ((gv_Players[5] == autoDA9033F8_var)) {
                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointWithOffset(PointFromId(112), 10.0, 0.0), PointFromId(112));
                lv_LocUnit = UnitLastCreated();
                CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoDA9033F8_var) == true)) {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                }
                else {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                }
                lv_LocTextTag = TextTagLastCreated();
                TextExpressionSetToken("Param/Expression/F044AF6B", "A", PlayerName(autoDA9033F8_var));
                TextExpressionSetToken("Param/Expression/F044AF6B", "B", IntToText(gv_stats_SSgoals[autoDA9033F8_var]));
                TextExpressionSetToken("Param/Expression/F044AF6B", "C", IntToText(gv_stats_SSattempts[autoDA9033F8_var]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/F044AF6B"));
                gv_stats_SSattempts[autoDA9033F8_var] += 1;
                if ((gv_ranked == true)) {
                    gf_SaveBank(autoDA9033F8_var);
                }

            }

            if ((gv_Players[2] == autoDA9033F8_var)) {
                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, 0, autoDA9033F8_var, PointFromId(149), PointFromId(112));
                lv_LocUnit = UnitLastCreated();
                CameraPan(autoDA9033F8_var, PointFromId(149), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoDA9033F8_var) == true)) {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                }
                else {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                }
                lv_LocTextTag = TextTagLastCreated();
            }

            if ((gv_Players[6] == autoDA9033F8_var)) {
                libNtve_gf_UnitCreateFacingPoint(1, lv_unitType2, 0, autoDA9033F8_var, PointFromId(150), PointFromId(112));
                lv_LocUnit = UnitLastCreated();
                CameraPan(autoDA9033F8_var, PointFromId(150), 2.0, -1, 10.0, false);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                TextTagCreate(lv_playerName, 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], autoDA9033F8_var) == true)) {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                }
                else {
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                }
                lv_LocTextTag = TextTagLastCreated();
            }

            if (((gv_Players[1] == autoDA9033F8_var) || (gv_Players[2] == autoDA9033F8_var) || (gv_Players[3] == autoDA9033F8_var) || (gv_Players[4] == autoDA9033F8_var) || (gv_Players[5] == autoDA9033F8_var) || (gv_Players[6] == autoDA9033F8_var) || (gv_Players[7] == autoDA9033F8_var) || (gv_Players[8] == autoDA9033F8_var))) {
                TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                TextTagSetFontSize(TextTagLastCreated(), 20);
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                if ((gv_nameTagShow[autoDA9033F8_var] == false)) {
                    TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDA9033F8_var), false);
                }

                gv_TextTags[autoDA9033F8_var] = TextTagLastCreated();
                gv_Skaters[autoDA9033F8_var] = UnitLastCreated();
                UnitAbilityShow(gv_Skaters[autoDA9033F8_var], "GoalieRecall", false);
                UnitAbilityShow(gv_Skaters[autoDA9033F8_var], "SkaterWarpIn", false);
                UnitGroupAdd(gv_PlayerUnits, UnitLastCreated());
                UnitGroupAdd(gv_stufftomove, UnitLastCreated());
                UnitSelect(UnitLastCreated(), autoDA9033F8_var, true);
                if (((gv_Players[2] == autoDA9033F8_var) || (gv_Players[6] == autoDA9033F8_var))) {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.86);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoDA9033F8_var, PointFromId(112), 270.0);
                    UnitSetScale(UnitLastCreated(), 390.0, 390.0, 220.0);
                    gv_Sticks[autoDA9033F8_var] = UnitLastCreated();
                }
                else {
                    UnitSetCustomValue(UnitLastCreated(), 3, 0.97);
                    UnitSetCustomValue(UnitLastCreated(), 4, 1.0);
                    UnitCreate(1, "ShapeHockeyStick", 0, autoDA9033F8_var, PointFromId(112), 270.0);
                    gv_Sticks[autoDA9033F8_var] = UnitLastCreated();
                }
            }
            else {
                if ((gv_benchPlayers[1] == autoDA9033F8_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(669), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(671), PointFromId(112));
                    }
                    CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/CDFAFB20", "A", PlayerName(autoDA9033F8_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/CDFAFB20"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoDA9033F8_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDA9033F8_var), false);
                    }

                    gv_TextTags[autoDA9033F8_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[2] == autoDA9033F8_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(670), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(672), PointFromId(112));
                    }
                    CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(1), libNtve_gf_ConvertPlayerColorToColor(1)));
                    TextExpressionSetToken("Param/Expression/FF171940", "A", PlayerName(autoDA9033F8_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/FF171940"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoDA9033F8_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDA9033F8_var), false);
                    }

                    gv_TextTags[autoDA9033F8_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[3] == autoDA9033F8_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(671), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(669), PointFromId(112));
                    }
                    CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/0615A5D5", "A", PlayerName(autoDA9033F8_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/0615A5D5"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoDA9033F8_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDA9033F8_var), false);
                    }

                    gv_TextTags[autoDA9033F8_var] = TextTagLastCreated();
                }

                if ((gv_benchPlayers[4] == autoDA9033F8_var)) {
                    if ((ModI(gv_Period, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(672), PointFromId(112));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, lv_unitType1, 0, autoDA9033F8_var, PointFromId(670), PointFromId(112));
                    }
                    CameraPan(autoDA9033F8_var, PointFromId(112), 2.0, -1, 10.0, false);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(2), libNtve_gf_ConvertPlayerColorToColor(2)));
                    TextExpressionSetToken("Param/Expression/C5954D4A", "A", PlayerName(autoDA9033F8_var));
                    TextTagCreate(TextExpressionAssemble("Param/Expression/C5954D4A"), 24, PointFromId(7), 5.0, true, false, PlayerGroupAll());
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
                    TextTagSetFontSize(TextTagLastCreated(), 20);
                    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 3.0);
                    if ((gv_nameTagShow[autoDA9033F8_var] == false)) {
                        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDA9033F8_var), false);
                    }

                    gv_TextTags[autoDA9033F8_var] = TextTagLastCreated();
                }

            }
        }

    }
    gf_CreateUnitsColor();
    gf_ApplyCustomizations();
    if ((gv_Players[1] != 0)) {
        libNtve_gf_AttachActorToUnit(gv_Skaters[gv_Players[1]], "ShapeX", "Ref_Foot Left Rear");
    }
    else {
        libNtve_gf_AttachActorToUnit(gv_Skaters[gv_Players[5]], "ShapeX", "Ref_Foot Left Rear");
    }
    gv_shootoutNoBackLineLeagueMode = libNtve_gf_ActorLastCreated();
    ActorSend(gv_shootoutNoBackLineLeagueMode, "SetVisibility");
    gv_shootout += 1;
    gv_shootoutCheckScore1 = gv_shootoutScore[1];
    gv_shootoutCheckScore2 = gv_shootoutScore[2];
    TimerStart(gv_Timer, gv_shootoutSecondsAllowed, false, c_timeReal);
    TimerPause(gv_Timer, true);
    TriggerExecute(gt_UpdateTime, true, false);
    gf_CheckBeginShootoutClock();
    gf_Setpowerplaynotavailable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateUnitsShootout_Init () {
    gt_CreateUnitsShootout = TriggerCreate("gt_CreateUnitsShootout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckShootoutRotate
//--------------------------------------------------------------------------------------------------
bool gt_CheckShootoutRotate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_int == 0)) {
        if ((((gv_ShootoutShooting == true) && (TimerGetRemaining(gv_Timer) <= 0)) || ((gv_ShootoutShooting == true) && (gv_ShootoutShooting2 == false) && (UnitGetCustomValue(gv_pUCK, 0) == 0.0) && (UnitGetCustomValue(gv_pUCK, 1) == 0.0)))) {
            gf_RotateShootout(false);
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckShootoutRotate_Init () {
    gt_CheckShootoutRotate = TriggerCreate("gt_CheckShootoutRotate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End
//--------------------------------------------------------------------------------------------------
bool gt_GameEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_LocInt1;
    int lv_LocInt2;
    fixed lv_locReal;
    fixed lv_locReal2;

    // Automatic Variable Declarations
    const int auto76AA30EF_ae = 8;
    int auto76AA30EF_var;
    playergroup auto11704CB0_g;
    int auto11704CB0_var;
    playergroup autoDF0C5983_g;
    int autoDF0C5983_var;
    const int autoE7C95584_ae = 8;
    int autoE7C95584_var;
    playergroup auto0C66F717_g;
    int auto0C66F717_var;
    playergroup auto44F6A05E_g;
    int auto44F6A05E_var;
    playergroup auto52DB2E66_g;
    int auto52DB2E66_var;
    playergroup autoAAC78CE9_g;
    int autoAAC78CE9_var;
    const int autoA7C7553A_ae = 8;
    int autoA7C7553A_var;
    const int auto9A2DEE3C_ae = 8;
    int auto9A2DEE3C_var;
    playergroup auto8DD7E383_g;
    int auto8DD7E383_var;
    playergroup autoDB28F042_g;
    int autoDB28F042_var;
    playergroup auto0C7D0863_g;
    int auto0C7D0863_var;
    playergroup auto43934A7B_g;
    int auto43934A7B_var;
    const int auto7F39510B_ae = 4;
    int auto7F39510B_var;

    // Variable Initialization
    lv_LocInt1 = 1;
    lv_LocInt2 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_rEDLINE_MODE == false)) {
        gv_gameOver = true;
        SoundPlay(SoundLink("TArmoryCraneStand03", -1), PlayerGroupAll(), 100.0, 0.0);
        if ((gv_Shootout == true)) {
            auto76AA30EF_var = 1;
            for ( ; auto76AA30EF_var <= auto76AA30EF_ae; auto76AA30EF_var += 1 ) {
                gv_Players[auto76AA30EF_var] = 0;
            }
            auto11704CB0_g = gv_actualPlayerzonTeam[1];
            auto11704CB0_var = -1;
            while (true) {
                auto11704CB0_var = PlayerGroupNextPlayer(auto11704CB0_g, auto11704CB0_var);
                if (auto11704CB0_var < 0) { break; }
                gv_Players[lv_LocInt1] = auto11704CB0_var;
                lv_LocInt1 += 1;
            }
            autoDF0C5983_g = gv_actualPlayerzonTeam[2];
            autoDF0C5983_var = -1;
            while (true) {
                autoDF0C5983_var = PlayerGroupNextPlayer(autoDF0C5983_g, autoDF0C5983_var);
                if (autoDF0C5983_var < 0) { break; }
                gv_Players[lv_LocInt2] = autoDF0C5983_var;
                lv_LocInt2 += 1;
            }
        }

        if ((gv_TeamScores[1] > gv_TeamScores[2])) {
            gv_uIPeriodStats.lv_winningteamred1blue2 = 1;
            if ((gv_ranked == true)) {
                auto9A2DEE3C_var = 1;
                for ( ; auto9A2DEE3C_var <= auto9A2DEE3C_ae; auto9A2DEE3C_var += 1 ) {
                    gv_playerTotalPoints[gv_Players[auto9A2DEE3C_var]] = gf_GetTotalPlayerPoints(gv_Players[auto9A2DEE3C_var]);
                    gv_stats_Points[gv_Players[auto9A2DEE3C_var]] += gv_playerTotalPoints[gv_Players[auto9A2DEE3C_var]];
                    gf_SaveBank(gv_Players[auto9A2DEE3C_var]);
                }
                lv_locReal = 0.0;
                auto8DD7E383_g = gv_actualPlayerzonTeam[1];
                auto8DD7E383_var = -1;
                while (true) {
                    auto8DD7E383_var = PlayerGroupNextPlayer(auto8DD7E383_g, auto8DD7E383_var);
                    if (auto8DD7E383_var < 0) { break; }
                    lv_locReal = (lv_locReal+IntToFixed(gv_playerTotalPoints[auto8DD7E383_var]));
                }
                autoDB28F042_g = gv_actualPlayerzonTeam[1];
                autoDB28F042_var = -1;
                while (true) {
                    autoDB28F042_var = PlayerGroupNextPlayer(autoDB28F042_g, autoDB28F042_var);
                    if (autoDB28F042_var < 0) { break; }
                    lv_locReal2 = 0.0;
                    if ((lv_locReal != 0.0)) {
                        lv_locReal2 = (IntToFixed(gv_playerTotalPoints[autoDB28F042_var]) / lv_locReal);
                        lv_locReal2 = (lv_locReal2*1.5);
                    }

                    gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
                    if ((gv_eloDifference1 > 1600.0)) {
                        gv_eloDifference1 = 1600.0;
                    }

                    BankValueSetFromFixed(gv_Banks[autoDB28F042_var], "stats", "elo2", (gv_eloOLD[autoDB28F042_var]+(((1000.0 / gv_team1ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                    gv_eloChange[autoDB28F042_var] = ((((1000.0 / gv_team1ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                    BankSave(gv_Banks[autoDB28F042_var]);
                }
                lv_locReal = 0.0;
                auto0C7D0863_g = gv_actualPlayerzonTeam[2];
                auto0C7D0863_var = -1;
                while (true) {
                    auto0C7D0863_var = PlayerGroupNextPlayer(auto0C7D0863_g, auto0C7D0863_var);
                    if (auto0C7D0863_var < 0) { break; }
                    lv_locReal = (lv_locReal+gv_playerTotalPoints[auto0C7D0863_var]);
                }
                auto43934A7B_g = gv_actualPlayerzonTeam[2];
                auto43934A7B_var = -1;
                while (true) {
                    auto43934A7B_var = PlayerGroupNextPlayer(auto43934A7B_g, auto43934A7B_var);
                    if (auto43934A7B_var < 0) { break; }
                    lv_locReal2 = 0.0;
                    if ((lv_locReal != 0.0)) {
                        lv_locReal2 = (1-(gv_playerTotalPoints[auto43934A7B_var] / lv_locReal));
                        lv_locReal2 = (lv_locReal2 / 3.0);
                    }

                    gv_eloDifference1 = (gv_team1ELO-gv_team2ELO);
                    if ((gv_eloDifference1 > 1600.0)) {
                        gv_eloDifference1 = 1600.0;
                    }

                    BankValueSetFromFixed(gv_Banks[auto43934A7B_var], "stats", "elo2", (gv_eloOLD[auto43934A7B_var]-(((1000.0 / gv_team1ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                    gv_eloChange[auto43934A7B_var] = (-(((1000.0 / gv_team1ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                    BankSave(gv_Banks[auto43934A7B_var]);
                }
                auto7F39510B_var = 1;
                for ( ; auto7F39510B_var <= auto7F39510B_ae; auto7F39510B_var += 1 ) {
                    gv_stats_GamesWon[gv_Players[auto7F39510B_var]] += 1;
                    gf_SaveBank(gv_Players[auto7F39510B_var]);
                }
            }

            Wait(5.0, c_timeGame);
        }
        else {
            gv_uIPeriodStats.lv_winningteamred1blue2 = 2;
            if ((gv_ranked == true)) {
                autoE7C95584_var = 1;
                for ( ; autoE7C95584_var <= autoE7C95584_ae; autoE7C95584_var += 1 ) {
                    gv_playerTotalPoints[gv_Players[autoE7C95584_var]] = gf_GetTotalPlayerPoints(gv_Players[autoE7C95584_var]);
                    gv_stats_Points[gv_Players[autoE7C95584_var]] += gv_playerTotalPoints[gv_Players[autoE7C95584_var]];
                    if ((gv_ranked == true)) {
                        gf_SaveBank(gv_Players[autoE7C95584_var]);
                    }

                }
                lv_locReal = 0.0;
                auto0C66F717_g = gv_actualPlayerzonTeam[2];
                auto0C66F717_var = -1;
                while (true) {
                    auto0C66F717_var = PlayerGroupNextPlayer(auto0C66F717_g, auto0C66F717_var);
                    if (auto0C66F717_var < 0) { break; }
                    lv_locReal = (lv_locReal+gv_playerTotalPoints[auto0C66F717_var]);
                }
                auto44F6A05E_g = gv_actualPlayerzonTeam[2];
                auto44F6A05E_var = -1;
                while (true) {
                    auto44F6A05E_var = PlayerGroupNextPlayer(auto44F6A05E_g, auto44F6A05E_var);
                    if (auto44F6A05E_var < 0) { break; }
                    lv_locReal2 = 0.0;
                    if ((lv_locReal != 0.0)) {
                        lv_locReal2 = (gv_playerTotalPoints[auto44F6A05E_var] / lv_locReal);
                        lv_locReal2 = (lv_locReal2*1.5);
                    }

                    gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
                    if ((gv_eloDifference1 > 1600.0)) {
                        gv_eloDifference1 = 1600.0;
                    }

                    BankValueSetFromFixed(gv_Banks[auto44F6A05E_var], "stats", "elo2", (gv_eloOLD[auto44F6A05E_var]+(((1000.0 / gv_team2ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                    gv_eloChange[auto44F6A05E_var] = ((((1000.0 / gv_team2ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                    if ((gv_ranked == true)) {
                        BankSave(gv_Banks[auto44F6A05E_var]);
                    }

                }
                lv_locReal = 0.0;
                auto52DB2E66_g = gv_actualPlayerzonTeam[1];
                auto52DB2E66_var = -1;
                while (true) {
                    auto52DB2E66_var = PlayerGroupNextPlayer(auto52DB2E66_g, auto52DB2E66_var);
                    if (auto52DB2E66_var < 0) { break; }
                    lv_locReal = (lv_locReal+gv_playerTotalPoints[auto52DB2E66_var]);
                }
                autoAAC78CE9_g = gv_actualPlayerzonTeam[1];
                autoAAC78CE9_var = -1;
                while (true) {
                    autoAAC78CE9_var = PlayerGroupNextPlayer(autoAAC78CE9_g, autoAAC78CE9_var);
                    if (autoAAC78CE9_var < 0) { break; }
                    lv_locReal2 = 0.0;
                    if ((lv_locReal != 0.0)) {
                        lv_locReal2 = (1-(gv_playerTotalPoints[autoAAC78CE9_var] / lv_locReal));
                        lv_locReal2 = (lv_locReal2 / 3.0);
                    }

                    gv_eloDifference1 = (gv_team2ELO-gv_team1ELO);
                    if ((gv_eloDifference1 > 1600.0)) {
                        gv_eloDifference1 = 1600.0;
                    }

                    BankValueSetFromFixed(gv_Banks[autoAAC78CE9_var], "stats", "elo2", (gv_eloOLD[autoAAC78CE9_var]-(((1000.0 / gv_team2ELO))*((50-((gv_eloDifference1 / 80.0))+1))*lv_locReal2)));
                    gv_eloChange[autoAAC78CE9_var] = (-(((1000.0 / gv_team2ELO))*((50-(((gv_eloDifference1) / 80.0))+1))*lv_locReal2));
                    if ((gv_ranked == true)) {
                        BankSave(gv_Banks[autoAAC78CE9_var]);
                    }

                }
                autoA7C7553A_var = 5;
                for ( ; autoA7C7553A_var <= autoA7C7553A_ae; autoA7C7553A_var += 1 ) {
                    gv_stats_GamesWon[gv_Players[autoA7C7553A_var]] += 1;
                    if ((gv_ranked == true)) {
                        gf_SaveBank(gv_Players[autoA7C7553A_var]);
                    }

                }
            }

            Wait(5.0, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameEnd_Init () {
    gt_GameEnd = TriggerCreate("gt_GameEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Forfeit
//--------------------------------------------------------------------------------------------------
bool gt_CheckForfeit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerChecked;
    int lv_LocInt1;
    int lv_LocInt2;

    // Automatic Variable Declarations
    playergroup autoAA5052D3_g;
    int autoAA5052D3_var;
    playergroup auto733C429B_g;
    int auto733C429B_var;
    playergroup auto5EBB1915_g;
    int auto5EBB1915_var;
    playergroup auto0DB8E5D6_g;
    int auto0DB8E5D6_var;

    // Variable Initialization
    lv_LocInt1 = 1;
    lv_LocInt2 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_actualPlayerzonTeam[2], EventPlayer()) == true)) && (gv_playerforfeit == false)) {
        if ((gv_Period < 3)) {
            gv_playerforfeit = true;
            gv_playerforfeit2[EventPlayer()] = true;
            gv_ranked = false;
            if ((PlayerGroupHasPlayer(gv_actualPlayerzonTeam[1], EventPlayer()) == true)) {
                auto5EBB1915_g = gv_actualPlayerzonTeam[1];
                auto5EBB1915_var = -1;
                while (true) {
                    auto5EBB1915_var = PlayerGroupNextPlayer(auto5EBB1915_g, auto5EBB1915_var);
                    if (auto5EBB1915_var < 0) { break; }
                    BankValueSetFromFixed(gv_Banks[auto5EBB1915_var], "stats", "elo2", gv_eloOLD[auto5EBB1915_var]);
                    BankSave(gv_Banks[auto5EBB1915_var]);
                }
                auto0DB8E5D6_g = gv_actualPlayerzonTeam[2];
                auto0DB8E5D6_var = -1;
                while (true) {
                    auto0DB8E5D6_var = PlayerGroupNextPlayer(auto0DB8E5D6_g, auto0DB8E5D6_var);
                    if (auto0DB8E5D6_var < 0) { break; }
                    BankValueSetFromFixed(gv_Banks[auto0DB8E5D6_var], "stats", "elo2", (gv_eloOLD[auto0DB8E5D6_var]+5));
                    BankSave(gv_Banks[auto0DB8E5D6_var]);
                }
            }
            else {
                autoAA5052D3_g = gv_actualPlayerzonTeam[2];
                autoAA5052D3_var = -1;
                while (true) {
                    autoAA5052D3_var = PlayerGroupNextPlayer(autoAA5052D3_g, autoAA5052D3_var);
                    if (autoAA5052D3_var < 0) { break; }
                    BankValueSetFromFixed(gv_Banks[autoAA5052D3_var], "stats", "elo2", gv_eloOLD[autoAA5052D3_var]);
                    BankSave(gv_Banks[autoAA5052D3_var]);
                }
                auto733C429B_g = gv_actualPlayerzonTeam[1];
                auto733C429B_var = -1;
                while (true) {
                    auto733C429B_var = PlayerGroupNextPlayer(auto733C429B_g, auto733C429B_var);
                    if (auto733C429B_var < 0) { break; }
                    BankValueSetFromFixed(gv_Banks[auto733C429B_var], "stats", "elo2", (gv_eloOLD[auto733C429B_var]+5));
                    BankSave(gv_Banks[auto733C429B_var]);
                }
            }
        }

    }

    gf_SetGrayname(EventPlayer());
    gf_ForfeitValidate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckForfeit_Init () {
    gt_CheckForfeit = TriggerCreate("gt_CheckForfeit_Func");
    TriggerEnable(gt_CheckForfeit, false);
    TriggerAddEventPlayerLeft(gt_CheckForfeit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test leave animation 2
//--------------------------------------------------------------------------------------------------
bool gt_Testleaveanimation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC4895DA2_ae = 8;
    int autoC4895DA2_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4895DA2_var = 1;
    for ( ; autoC4895DA2_var <= autoC4895DA2_ae; autoC4895DA2_var += 1 ) {
        if ((UnitGetOwner(gv_Skaters[autoC4895DA2_var]) == EventPlayer()) && (UnitIsAlive(gv_Skaters[EventPlayer()]) == true)) {
            gf_Removeleaveranimation(autoC4895DA2_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Testleaveanimation2_Init () {
    gt_Testleaveanimation2 = TriggerCreate("gt_Testleaveanimation2_Func");
    TriggerAddEventPlayerLeft(gt_Testleaveanimation2, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Post Sound
//--------------------------------------------------------------------------------------------------
bool gt_PostSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PointSet(PointFromId(7), UnitGetPosition(EventUnit()));
    SoundPlayAtPoint(SoundLink("HockeyPost", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
    if ((gv_stoppageOfPlay == false)) {
        SoundPlay(SoundLink("CrowdGasp", -1), PlayerGroupAll(), 60.0, 1.5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostSound_Init () {
    gt_PostSound = TriggerCreate("gt_PostSound_Func");
    TriggerAddEventUnitRegion(gt_PostSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PostSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_PostSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PostSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Net Sound
//--------------------------------------------------------------------------------------------------
bool gt_NetSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PointSet(PointFromId(7), UnitGetPosition(EventUnit()));
    if (((EventUnitRegion() == RegionFromId(39)) || (EventUnitRegion() == RegionFromId(24)) || (EventUnitRegion() == RegionFromId(37)) || (EventUnitRegion() == RegionFromId(38)))) {
        SoundPlayAtPoint(SoundLink("HockeyPost", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
    }
    else {
        if ((UnitGetHeight(EventUnit()) > 0.3)) {
            libNtve_gf_CreateModelAtPoint("PhoenixAirSplashAttackImpact", PointFromId(7));
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            SoundPlayAtPoint(SoundLink("Zealot_AttackLaunch", -1), PlayerGroupAll(), PointFromId(7), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
        }
        else {
            SoundPlayAtPoint(SoundLink("HockeyPost", -1), PlayerGroupAll(), UnitGetPosition(gv_pUCK), 0.0, (gf_VectorMagnitude(UnitGetCustomValue(gv_pUCK, 0), UnitGetCustomValue(gv_pUCK, 1), UnitGetCustomValue(gv_pUCK, 2))*40), 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NetSound_Init () {
    gt_NetSound = TriggerCreate("gt_NetSound_Func");
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(50), true);
    TriggerAddEventUnitRegion(gt_NetSound, UnitRefFromVariable("gv_pUCK"), RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Puck Enters Top Wall
//--------------------------------------------------------------------------------------------------
bool gt_PostSound2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PostSound2_Init () {
    gt_PostSound2 = TriggerCreate("gt_PostSound2_Func");
    TriggerAddEventUnitRegion(gt_PostSound2, UnitRefFromVariable("gv_pUCK"), RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Puck
//--------------------------------------------------------------------------------------------------
bool gt_AddPuck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4D1E46CB_g;
    int auto4D1E46CB_u;
    unit auto4D1E46CB_var;
    unitgroup auto7A66C83A_g;
    int auto7A66C83A_u;
    unit auto7A66C83A_var;
    unitgroup autoB5C780D3_g;
    int autoB5C780D3_u;
    unit autoB5C780D3_var;
    unitgroup autoF2586C04_g;
    int autoF2586C04_u;
    unit autoF2586C04_var;
    unitgroup auto96C4F9BA_g;
    int auto96C4F9BA_u;
    unit auto96C4F9BA_var;
    unitgroup auto1348EC4C_g;
    int auto1348EC4C_u;
    unit auto1348EC4C_var;
    unitgroup autoE23C2BFE_g;
    int autoE23C2BFE_u;
    unit autoE23C2BFE_var;
    unitgroup auto99830A00_g;
    int auto99830A00_u;
    unit auto99830A00_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4D1E46CB_g = UnitGroupSearch("DestructibleWallVerticalLF", 0, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4D1E46CB_u = UnitGroupCount(auto4D1E46CB_g, c_unitCountAll);
    for (;; auto4D1E46CB_u -= 1) {
        auto4D1E46CB_var = UnitGroupUnitFromEnd(auto4D1E46CB_g, auto4D1E46CB_u);
        if (auto4D1E46CB_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, auto4D1E46CB_var);
        UnitSetCustomValue(auto4D1E46CB_var, 3, 0.001);
        UnitSetCustomValue(auto4D1E46CB_var, 4, 99999.0);
    }
    auto7A66C83A_g = UnitGroupSearch("DestructibleWallStraightVertical", 0, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7A66C83A_u = UnitGroupCount(auto7A66C83A_g, c_unitCountAll);
    for (;; auto7A66C83A_u -= 1) {
        auto7A66C83A_var = UnitGroupUnitFromEnd(auto7A66C83A_g, auto7A66C83A_u);
        if (auto7A66C83A_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, auto7A66C83A_var);
        UnitSetCustomValue(auto7A66C83A_var, 3, 0.001);
        UnitSetCustomValue(auto7A66C83A_var, 4, 99999.0);
    }
    autoB5C780D3_g = UnitGroupSearch("DestructibleWallStraightHorizontalBF", 0, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB5C780D3_u = UnitGroupCount(autoB5C780D3_g, c_unitCountAll);
    for (;; autoB5C780D3_u -= 1) {
        autoB5C780D3_var = UnitGroupUnitFromEnd(autoB5C780D3_g, autoB5C780D3_u);
        if (autoB5C780D3_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, autoB5C780D3_var);
        UnitSetCustomValue(autoB5C780D3_var, 3, 0.001);
        UnitSetCustomValue(autoB5C780D3_var, 4, 99999.0);
    }
    autoF2586C04_g = UnitGroupSearch("DestructibleWallStraightHorizontal", 0, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF2586C04_u = UnitGroupCount(autoF2586C04_g, c_unitCountAll);
    for (;; autoF2586C04_u -= 1) {
        autoF2586C04_var = UnitGroupUnitFromEnd(autoF2586C04_g, autoF2586C04_u);
        if (autoF2586C04_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, autoF2586C04_var);
        UnitSetCustomValue(autoF2586C04_var, 3, 0.001);
        UnitSetCustomValue(autoF2586C04_var, 4, 99999.0);
    }
    auto96C4F9BA_g = UnitGroupSearch("DestructibleWallCorner90TR", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto96C4F9BA_u = UnitGroupCount(auto96C4F9BA_g, c_unitCountAll);
    for (;; auto96C4F9BA_u -= 1) {
        auto96C4F9BA_var = UnitGroupUnitFromEnd(auto96C4F9BA_g, auto96C4F9BA_u);
        if (auto96C4F9BA_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, auto96C4F9BA_var);
        UnitSetCustomValue(auto96C4F9BA_var, 3, 0.001);
        UnitSetCustomValue(auto96C4F9BA_var, 4, 99999.0);
    }
    auto1348EC4C_g = UnitGroupSearch("DestructibleWallCorner90LT", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1348EC4C_u = UnitGroupCount(auto1348EC4C_g, c_unitCountAll);
    for (;; auto1348EC4C_u -= 1) {
        auto1348EC4C_var = UnitGroupUnitFromEnd(auto1348EC4C_g, auto1348EC4C_u);
        if (auto1348EC4C_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, auto1348EC4C_var);
        UnitSetCustomValue(auto1348EC4C_var, 3, 0.001);
        UnitSetCustomValue(auto1348EC4C_var, 4, 99999.0);
    }
    autoE23C2BFE_g = UnitGroupSearch("DestructibleWallCorner90LB", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE23C2BFE_u = UnitGroupCount(autoE23C2BFE_g, c_unitCountAll);
    for (;; autoE23C2BFE_u -= 1) {
        autoE23C2BFE_var = UnitGroupUnitFromEnd(autoE23C2BFE_g, autoE23C2BFE_u);
        if (autoE23C2BFE_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, autoE23C2BFE_var);
        UnitSetCustomValue(autoE23C2BFE_var, 3, 0.001);
        UnitSetCustomValue(autoE23C2BFE_var, 4, 99999.0);
    }
    auto99830A00_g = UnitGroupSearch("DestructibleWallCorner90BR", c_playerAny, PointFromId(1), 500.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99830A00_u = UnitGroupCount(auto99830A00_g, c_unitCountAll);
    for (;; auto99830A00_u -= 1) {
        auto99830A00_var = UnitGroupUnitFromEnd(auto99830A00_g, auto99830A00_u);
        if (auto99830A00_var == null) { break; }
        UnitGroupAdd(gv_WallUnits, auto99830A00_var);
        UnitSetCustomValue(auto99830A00_var, 3, 0.001);
        UnitSetCustomValue(auto99830A00_var, 4, 99999.0);
    }
    UnitGroupAdd(gv_ProjectileGroup, gv_pUCK);
    UnitGroupAdd(gv_stufftomove, gv_pUCK);
    UnitSetCustomValue(gv_pUCK, 3, 0.98);
    UnitSetCustomValue(gv_pUCK, 4, 0.5);
    UnitSetCustomValue(gv_pUCK, 6, 0.99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddPuck_Init () {
    gt_AddPuck = TriggerCreate("gt_AddPuck_Func");
    TriggerAddEventMapInit(gt_AddPuck);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hockey Stick
//--------------------------------------------------------------------------------------------------
bool gt_HockeyStick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xOffset;
    fixed lv_yOffset;
    fixed[21] lv_yOffset3;
    fixed[21] lv_yOffset2;
    fixed lv_RealInt;
    fixed[21] lv_RealInt2;
    unit lv_OtherUnit;
    int lv_i;
    int lv_i5;
    fixed lv_i3;
    fixed lv_i4;
    bool lv_goaliePickupWasSave;
    bool lv_tryNewStickAngle;
    int lv_iNT;
    bool lv_newset;
    bool lv_catchghoststick;
    fixed lv_lSA;
    fixed lv_rI;

    // Automatic Variable Declarations
    playergroup auto1CE6D024_g;
    int auto836660E8_ae;
    const int auto836660E8_ai = 1;
    int autoC2E5D3F9_ae;
    const int autoC2E5D3F9_ai = 1;
    int auto56A8F674_ae;
    const int auto56A8F674_ai = 1;
    int autoF30E3CAA_ae;
    const int autoF30E3CAA_ai = 1;
    int auto58C9F032_ae;
    const int auto58C9F032_ai = 1;
    int auto4D6D9BE7_ae;
    const int auto4D6D9BE7_ai = 1;
    int auto9E4274A6_ae;
    const int auto9E4274A6_ai = 1;
    int autoB92614CD_ae;
    const int autoB92614CD_ai = 1;
    int auto8CDB1111_ae;
    const int auto8CDB1111_ai = 1;
    int auto4AE4CE62_ae;
    const int auto4AE4CE62_ai = 1;
    int autoDEB97F03_ae;
    const int autoDEB97F03_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_ShootPuck3, true, false);
    auto1CE6D024_g = PlayerGroupActive();
    lv_iNT = -1;
    while (true) {
        lv_iNT = PlayerGroupNextPlayer(auto1CE6D024_g, lv_iNT);
        if (lv_iNT < 0) { break; }
        if ((gv_Skaters[lv_iNT] != null)) {
            PointSet(PointFromId(115), UnitGetPosition(gv_Skaters[lv_iNT]));
            lv_RealInt = UnitGetFacing(gv_Skaters[lv_iNT]);
            lv_yOffset = (gv_goaliestickoffset*Sin(lv_RealInt));
            lv_xOffset = (gv_goaliestickoffset*Cos(lv_RealInt));
            PointSet(PointFromId(115), PointWithOffset(PointFromId(115), lv_xOffset, lv_yOffset));
            lv_tryNewStickAngle = false;
            if (((RegionContainsPoint(RegionFromId(45), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(46), PointFromId(115)) == true))) {
                if (((RegionContainsPoint(RegionFromId(18), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(8), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(20), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(21), PointFromId(115)) == true))) {
                    PointSet(PointFromId(115), UnitGetPosition(gv_Skaters[lv_iNT]));
                    lv_tryNewStickAngle = true;
                    lv_i3 = (Floor(((UnitGetFacing(gv_Skaters[lv_iNT]) + 90.0) / 180.0)) * 180.0);
                    lv_i4 = (Floor(((UnitGetFacing(gv_Skaters[lv_iNT]) - 90.0) / 180.0)) * 180.0);
                }
                else {
                    if (((RegionContainsPoint(RegionFromId(17), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(19), PointFromId(115)) == true))) {
                        PointSet(PointFromId(115), UnitGetPosition(gv_Skaters[lv_iNT]));
                        lv_tryNewStickAngle = true;
                        lv_i3 = ((Floor((UnitGetFacing(gv_Skaters[lv_iNT]) / 180.0)) * 180.0) + 90.0);
                        lv_i4 = ((Floor((UnitGetFacing(gv_Skaters[lv_iNT]) / 180.0)) * 180.0) - 90.0);
                    }
                    else {
                        if (((RegionContainsPoint(RegionFromId(24), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(39), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(38), PointFromId(115)) == true) || (RegionContainsPoint(RegionFromId(37), PointFromId(115)) == true))) {
                            if ((RegionContainsPoint(RegionFromId(24), PointFromId(115)) == true)) {
                                lv_i3 = AngleBetweenPoints(RegionGetCenter(RegionFromId(3)), UnitGetPosition(gv_Skaters[lv_iNT]));
                                lv_i4 = lv_i3;
                            }
                            else {
                                if ((RegionContainsPoint(RegionFromId(39), PointFromId(115)) == true)) {
                                    lv_i3 = AngleBetweenPoints(RegionGetCenter(RegionFromId(3)), UnitGetPosition(gv_Skaters[lv_iNT]));
                                    lv_i4 = lv_i3;
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(38), PointFromId(115)) == true)) {
                                        lv_i3 = AngleBetweenPoints(RegionGetCenter(RegionFromId(4)), UnitGetPosition(gv_Skaters[lv_iNT]));
                                        lv_i4 = lv_i3;
                                    }
                                    else {
                                        if ((RegionContainsPoint(RegionFromId(37), PointFromId(115)) == true)) {
                                            lv_i3 = AngleBetweenPoints(RegionGetCenter(RegionFromId(4)), UnitGetPosition(gv_Skaters[lv_iNT]));
                                            lv_i4 = lv_i3;
                                        }

                                    }
                                }
                            }
                            PointSet(PointFromId(115), UnitGetPosition(gv_Skaters[lv_iNT]));
                            lv_tryNewStickAngle = true;
                        }

                    }
                }
                if ((lv_tryNewStickAngle == true)) {
                    lv_RealInt = lv_i3;
                    lv_yOffset = (gv_goaliestickoffset*Sin(lv_RealInt));
                    lv_xOffset = (gv_goaliestickoffset*Cos(lv_RealInt));
                    PointSet(PointFromId(115), PointWithOffset(PointFromId(115), lv_xOffset, lv_yOffset));
                    if ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(3)) == true)) {
                        if ((((RegionContainsPoint(RegionFromId(18), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(17), PointFromId(115)) == true)) || ((RegionContainsPoint(RegionFromId(24), PointFromId(115)) == true)))) {
                            lv_RealInt = 315.0;
                            lv_newset = true;
                        }
                        else {
                            if ((RegionContainsPoint(RegionFromId(18), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(17), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(24), PointFromId(115)) != true)) {
                                lv_RealInt = 270.0;
                                lv_newset = true;
                            }
                            else {
                                if ((((RegionContainsPoint(RegionFromId(8), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(17), PointFromId(115)) == true)) || ((RegionContainsPoint(RegionFromId(39), PointFromId(115)) == true)))) {
                                    lv_RealInt = 45.0;
                                    lv_newset = true;
                                }
                                else {
                                    if ((RegionContainsPoint(RegionFromId(8), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(17), PointFromId(115)) != true)) {
                                        lv_RealInt = 90.0;
                                        lv_newset = true;
                                    }
                                    else {
                                        if (((RegionContainsPoint(RegionFromId(8), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(18), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(17), PointFromId(115)) == true))) {
                                            lv_RealInt = 0.0;
                                            lv_newset = true;
                                        }

                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true)) {
                            if ((((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(20), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(19), PointFromId(115)) == true)) || ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(38), PointFromId(115)) == true)))) {
                                lv_RealInt = 225.0;
                                lv_newset = true;
                            }
                            else {
                                if ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(20), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(19), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(38), PointFromId(115)) != true)) {
                                    lv_RealInt = 270.0;
                                    lv_newset = true;
                                }
                                else {
                                    if ((((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(21), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(19), PointFromId(115)) == true)) || ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(37), PointFromId(115)) == true)))) {
                                        lv_RealInt = 135.0;
                                        lv_newset = true;
                                    }
                                    else {
                                        if ((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(21), PointFromId(115)) == true) && (RegionContainsPoint(RegionFromId(19), PointFromId(115)) != true)) {
                                            lv_RealInt = 90.0;
                                            lv_newset = true;
                                        }
                                        else {
                                            if (((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (RegionContainsPoint(RegionFromId(21), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(20), PointFromId(115)) != true) && (RegionContainsPoint(RegionFromId(19), PointFromId(115)) == true))) {
                                                lv_RealInt = 180.0;
                                                lv_newset = true;
                                            }

                                        }
                                    }
                                }
                            }
                        }

                    }
                    if ((lv_newset == true)) {
                        lv_yOffset = (gv_goaliestickoffset*Sin(lv_RealInt));
                        lv_xOffset = (gv_goaliestickoffset*Cos(lv_RealInt));
                        PointSet(PointFromId(115), PointWithOffset(PointFromId(115), lv_xOffset, lv_yOffset));
                    }

                }

            }

            if ((lv_tryNewStickAngle == false)) {
                auto836660E8_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (auto836660E8_ai >= 0 && lv_i5 <= auto836660E8_ae) || (auto836660E8_ai < 0 && lv_i5 >= auto836660E8_ae) ) ; lv_i5 += auto836660E8_ai ) {
                    gv_sTICKIP[lv_i5] = PointInterpolate(gv_lastSkaterPos[lv_iNT], UnitGetPosition(gv_Skaters[lv_iNT]), (IntToFixed(lv_i5) / IntToFixed(gv_ofStickInterpolationChecks)));
                    if ((AbsF((lv_RealInt - gv_lastStickAngle[lv_iNT])) > 180.0)) {
                        if ((lv_RealInt >= 0.0)) {
                            lv_rI = (lv_RealInt - 180.0);
                        }
                        else {
                            lv_rI = (lv_RealInt + 180.0);
                        }
                        if ((gv_lastStickAngle[lv_iNT] >= 0.0)) {
                            lv_lSA = (gv_lastStickAngle[lv_iNT] - 180.0);
                        }
                        else {
                            lv_lSA = (gv_lastStickAngle[lv_iNT] + 180.0);
                        }
                        lv_RealInt2[lv_i5] = (gv_lastStickAngle[lv_iNT]+((lv_rI-lv_lSA)*(IntToFixed(lv_i5) / IntToFixed(gv_ofStickInterpolationChecks))));
                    }
                    else {
                        lv_RealInt2[lv_i5] = (gv_lastStickAngle[lv_iNT]+((lv_RealInt-gv_lastStickAngle[lv_iNT])*(IntToFixed(lv_i5) / IntToFixed(gv_ofStickInterpolationChecks))));
                    }
                    lv_yOffset2[lv_i5] = (gv_goaliestickoffset*Sin(lv_RealInt2[lv_i5]));
                    lv_yOffset3[lv_i5] = (gv_goaliestickoffset*Cos(lv_RealInt2[lv_i5]));
                    gv_sTICKIP[lv_i5] = PointWithOffset(gv_sTICKIP[lv_i5], lv_yOffset3[lv_i5], lv_yOffset2[lv_i5]);
                }
            }

            gv_lastStickAngle[lv_iNT] = lv_RealInt;
            gv_lastSkaterPos[lv_iNT] = UnitGetPosition(gv_Skaters[lv_iNT]);
            if (((gv_Shoot[lv_iNT] == true) || (gv_StealShow[lv_iNT] == true))) {
                lv_RealInt += 135.0;
                autoC2E5D3F9_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (autoC2E5D3F9_ai >= 0 && lv_i5 <= autoC2E5D3F9_ae) || (autoC2E5D3F9_ai < 0 && lv_i5 >= autoC2E5D3F9_ae) ) ; lv_i5 += autoC2E5D3F9_ai ) {
                    lv_RealInt2[lv_i5] += 135.0;
                }
            }
            else {
                lv_RealInt += 90.0;
                auto56A8F674_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (auto56A8F674_ai >= 0 && lv_i5 <= auto56A8F674_ae) || (auto56A8F674_ai < 0 && lv_i5 >= auto56A8F674_ae) ) ; lv_i5 += auto56A8F674_ai ) {
                    lv_RealInt2[lv_i5] += 90.0;
                }
            }
            if ((UnitGetType(gv_Sticks[lv_iNT]) == "ShapeHockeyStick")) {
                UnitSetPosition(gv_Sticks[lv_iNT], PointFromId(115), true);
                UnitSetFacing(gv_Sticks[lv_iNT], lv_RealInt, 0.03);
            }

            if ((((lv_iNT == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((lv_iNT == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                lv_xOffset = (gv_goaliestickoffset*lv_xOffset);
                lv_yOffset = (gv_goaliestickoffset*lv_yOffset);
                autoF30E3CAA_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (autoF30E3CAA_ai >= 0 && lv_i5 <= autoF30E3CAA_ae) || (autoF30E3CAA_ai < 0 && lv_i5 >= autoF30E3CAA_ae) ) ; lv_i5 += autoF30E3CAA_ai ) {
                    lv_yOffset3[lv_i5] = (gv_goaliestickoffset*lv_yOffset3[lv_i5]);
                    lv_yOffset2[lv_i5] = (gv_goaliestickoffset*lv_yOffset2[lv_i5]);
                }
            }
            else {
                lv_xOffset = (.75*lv_xOffset);
                lv_yOffset = (.75*lv_yOffset);
                auto58C9F032_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (auto58C9F032_ai >= 0 && lv_i5 <= auto58C9F032_ae) || (auto58C9F032_ai < 0 && lv_i5 >= auto58C9F032_ae) ) ; lv_i5 += auto58C9F032_ai ) {
                    lv_yOffset3[lv_i5] = (.75*lv_yOffset3[lv_i5]);
                    lv_yOffset2[lv_i5] = (.75*lv_yOffset2[lv_i5]);
                }
            }
            PointSet(PointFromId(115), PointWithOffset(PointFromId(115), lv_xOffset, lv_yOffset));
            if ((lv_tryNewStickAngle == false)) {
                auto9E4274A6_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (auto9E4274A6_ai >= 0 && lv_i5 <= auto9E4274A6_ae) || (auto9E4274A6_ai < 0 && lv_i5 >= auto9E4274A6_ae) ) ; lv_i5 += auto9E4274A6_ai ) {
                    gv_sTICKIP[lv_i5] = PointWithOffset(gv_sTICKIP[lv_i5], lv_yOffset3[lv_i5], lv_yOffset2[lv_i5]);
                }
            }
            else {
                auto4D6D9BE7_ae = (gv_ofStickInterpolationChecks - 1);
                lv_i5 = 1;
                for ( ; ( (auto4D6D9BE7_ai >= 0 && lv_i5 <= auto4D6D9BE7_ae) || (auto4D6D9BE7_ai < 0 && lv_i5 >= auto4D6D9BE7_ae) ) ; lv_i5 += auto4D6D9BE7_ai ) {
                    gv_sTICKIP[lv_i5] = PointFromId(115);
                }
            }
            gv_stickTipPoint[lv_iNT] = Point(PointGetX(PointFromId(115)), PointGetY(PointFromId(115)));
            if ((gv_Possession == lv_iNT) && (gv_Shoot[lv_iNT] == false)) {
                UnitSetPosition(gv_pUCK, PointFromId(115), true);
                gv_interpolationPoints[1] = UnitGetPosition(gv_pUCK);
                gv_numOfRelevantIPs = 1;
                if ((gv_oneTimering[lv_iNT] == true)) {
                    gv_playerOneTimering = lv_iNT;
                    gv_oneTimering[lv_iNT] = false;
                    gf_FastFire();
                    TriggerExecute(gt_ShootPuck, false, false);
                }

            }

            if ((gv_stoppageOfPlay == false) && (gv_Possession == -1) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(3)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(64)) == true)))) && (!(((libNtve_gf_UnitInRegion(gv_Skaters[lv_iNT], RegionFromId(4)) == true) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(63)) == true))))) {
                if ((((lv_iNT == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((lv_iNT == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                    if ((gv_FaceoffTimer == 0) && (gv_GoalieBlockBool[lv_iNT] == false) && (gv_goalieBlocking[lv_iNT] == false) && (gv_Possession == -1) && (gv_Shoot[lv_iNT] == false) && (DistanceBetweenPoints(gv_interpolationPoints[1], PointFromId(115)) < 5.5) && (((gv_rEDLINE_MODE == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(3)) == false) && (libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(4)) == false)) || (gv_rEDLINE_MODE == true)) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(22)) == false) || (lv_iNT == gv_Players[2])) && ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(23)) == false) || (lv_iNT == gv_Players[6]))) {
                        auto4AE4CE62_ae = gv_numOfRelevantIPs;
                        lv_i = 1;
                        for ( ; ( (auto4AE4CE62_ai >= 0 && lv_i <= auto4AE4CE62_ae) || (auto4AE4CE62_ai < 0 && lv_i >= auto4AE4CE62_ae) ) ; lv_i += auto4AE4CE62_ai ) {
                            lv_catchghoststick = false;
                            autoDEB97F03_ae = (gv_ofStickInterpolationChecks - 1);
                            lv_i5 = 1;
                            for ( ; ( (autoDEB97F03_ai >= 0 && lv_i5 <= autoDEB97F03_ae) || (autoDEB97F03_ai < 0 && lv_i5 >= autoDEB97F03_ae) ) ; lv_i5 += autoDEB97F03_ai ) {
                                if ((RegionContainsPoint(RegionCircle(gv_sTICKIP[lv_i5], 1.3), gv_interpolationPoints[lv_i]) == true)) {
                                    lv_catchghoststick = true;
                                }

                            }
                            if (((lv_catchghoststick == true) || (RegionContainsPoint(RegionCircle(PointFromId(115), 1.3), gv_interpolationPoints[lv_i]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[lv_iNT]), 1.75), gv_interpolationPoints[lv_i]) == true)) && (gv_redlineMode.lv_ghosted[lv_iNT] == false)) {
                                if ((PlayerStatus(gv_ShootingPlayer) == c_playerStatusActive) && (lv_iNT != gv_ShootingPlayer) && ((lv_iNT == gv_Players[1]) || (lv_iNT == gv_Players[2]) || (lv_iNT == gv_Players[3]) || (lv_iNT == gv_Players[4])) && ((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
                                    gv_inGameStatsPasses[gv_ShootingPlayer] += 1;
                                    gv_stats_Passes[gv_ShootingPlayer] += 1;
                                    gv_inGameStatsPassedTo[lv_iNT] += 1;
                                }

                                if ((PlayerStatus(gv_ShootingPlayer) == c_playerStatusActive) && (lv_iNT != gv_ShootingPlayer) && ((lv_iNT == gv_Players[5]) || (lv_iNT == gv_Players[6]) || (lv_iNT == gv_Players[7]) || (lv_iNT == gv_Players[8])) && ((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) {
                                    gv_inGameStatsPasses[gv_ShootingPlayer] += 1;
                                    gv_stats_Passes[gv_ShootingPlayer] += 1;
                                    gv_inGameStatsPassedTo[lv_iNT] += 1;
                                }

                                lv_goaliePickupWasSave = false;
                                if ((gv_Shootout == false) && (gv_ShootingPlayer != 0) && (((lv_iNT == gv_Players[2]) && (gf_ShooterIsTeam2() == true)) || ((lv_iNT == gv_Players[6]) && (gf_ShooterIsTeam1() == true)))) {
                                    if ((gf_ShooterIsTeam2() == true) && (((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_ShootingPlayer], RegionFromId(32)) == false) && (ModI(gv_Period, 2) == 1)) || ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(14)) == true) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_ShootingPlayer], RegionFromId(34)) == false) && (ModI(gv_Period, 2) != 1))) && (gv_doNotIncreaseSOG == false)) {
                                        gf_Collision2(2);
                                        gf_HeatmapLogLastShotasaRealShot();
                                        lv_goaliePickupWasSave = true;
                                    }

                                    if ((gf_ShooterIsTeam1() == true) && (((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(13)) == true) && (ModI(gv_Period, 2) != 1) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_ShootingPlayer], RegionFromId(32)) == false)) || ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[6]], RegionFromId(14)) == true) && (ModI(gv_Period, 2) == 1) && (libNtve_gf_UnitInRegion(gv_Skaters[gv_ShootingPlayer], RegionFromId(34)) == false))) && (gv_doNotIncreaseSOG == false)) {
                                        gf_Collision2(1);
                                        gf_HeatmapLogLastShotasaRealShot();
                                        lv_goaliePickupWasSave = true;
                                    }

                                    if ((lv_goaliePickupWasSave == true)) {
                                        gf_ApplySaveGoalieSound(lv_iNT, false);
                                        gv_inGameStatsGoalieBlock[lv_iNT] += 1;
                                        gv_stats_OverallGoalieBlocks[lv_iNT] += 1;
                                        gv_eLOCompressionFactor = Pow(1.1, ((-(BankValueGetAsFixed(gv_Banks[lv_iNT], "Stats", "GoalieELO")-1500)/50)));
                                        BankValueSetFromFixed(gv_Banks[lv_iNT], "Stats", "GoalieELO", (BankValueGetAsFixed(gv_Banks[lv_iNT], "Stats", "GoalieELO") + (5.0 * gv_eLOCompressionFactor)));
                                        gf_SaveBank(lv_iNT);
                                    }
                                    else {
                                        if ((gv_lasttouchedby != lv_iNT)) {
                                            gv_stats_Pickups[lv_iNT] += 1;
                                            gv_inGameStatsBlocks[lv_iNT] += 1;
                                        }

                                        gf_SaveBank(lv_iNT);
                                    }
                                }
                                else {
                                    if ((gv_lasttouchedby != lv_iNT)) {
                                        gv_stats_Pickups[lv_iNT] += 1;
                                        gv_inGameStatsBlocks[lv_iNT] += 1;
                                    }

                                    gf_SaveBank(lv_iNT);
                                }
                                gv_Possession = lv_iNT;
                                gv_lasttouchedby = lv_iNT;
                                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                                gv_onTargetRedNet = false;
                                gv_onTargetBlueNet = false;
                                gv_potentialSOG = false;
                                gf_CheckResetFaceoffTimer();
                                if ((gv_Shootout == true)) {
                                    gf_RotateShootout(false);
                                }

                                break;
                            }

                        }
                    }

                }
                else {
                    if ((gv_FaceoffTimer == 0) && (gv_GoalieBlockBool[lv_iNT] == false) && (gv_goalieBlocking[lv_iNT] == false) && (gv_Possession == -1) && (gv_Shoot[lv_iNT] == false) && (DistanceBetweenPoints(gv_interpolationPoints[1], PointFromId(115)) < 5.5)) {
                        autoB92614CD_ae = gv_numOfRelevantIPs;
                        lv_i = 1;
                        for ( ; ( (autoB92614CD_ai >= 0 && lv_i <= autoB92614CD_ae) || (autoB92614CD_ai < 0 && lv_i >= autoB92614CD_ae) ) ; lv_i += autoB92614CD_ai ) {
                            lv_catchghoststick = false;
                            auto8CDB1111_ae = (gv_ofStickInterpolationChecks - 1);
                            lv_i5 = 1;
                            for ( ; ( (auto8CDB1111_ai >= 0 && lv_i5 <= auto8CDB1111_ae) || (auto8CDB1111_ai < 0 && lv_i5 >= auto8CDB1111_ae) ) ; lv_i5 += auto8CDB1111_ai ) {
                                if ((RegionContainsPoint(RegionCircle(gv_sTICKIP[lv_i5], 1.25), gv_interpolationPoints[lv_i]) == true)) {
                                    lv_catchghoststick = true;
                                }

                            }
                            if (((lv_catchghoststick == true) || (RegionContainsPoint(RegionCircle(PointFromId(115), 1.25), gv_interpolationPoints[lv_i]) == true) || (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_Skaters[lv_iNT]), 0.95), gv_interpolationPoints[lv_i]) == true)) && (gv_redlineMode.lv_ghosted[lv_iNT] == false) && (gv_cannotblockonetimer[lv_iNT] == false)) {
                                gv_Shoot[gv_ShootingPlayer] = false;
                                if ((PlayerStatus(gv_ShootingPlayer) == c_playerStatusActive) && (lv_iNT != gv_ShootingPlayer) && ((lv_iNT == gv_Players[1]) || (lv_iNT == gv_Players[2]) || (lv_iNT == gv_Players[3]) || (lv_iNT == gv_Players[4])) && ((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))) {
                                    gv_inGameStatsPasses[gv_ShootingPlayer] += 1;
                                    gv_inGameStatsPassedTo[lv_iNT] += 1;
                                    gv_stats_Passes[gv_ShootingPlayer] += 1;
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(gv_ShootingPlayer);
                                    }

                                }

                                if ((PlayerStatus(gv_ShootingPlayer) == c_playerStatusActive) && (lv_iNT != gv_ShootingPlayer) && ((lv_iNT == gv_Players[5]) || (lv_iNT == gv_Players[6]) || (lv_iNT == gv_Players[7]) || (lv_iNT == gv_Players[8])) && ((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) {
                                    gv_inGameStatsPasses[gv_ShootingPlayer] += 1;
                                    gv_inGameStatsPassedTo[lv_iNT] += 1;
                                    gv_stats_Passes[gv_ShootingPlayer] += 1;
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(gv_ShootingPlayer);
                                    }

                                }

                                gv_Possession = lv_iNT;
                                gv_onTargetRedNet = false;
                                gv_onTargetBlueNet = false;
                                gv_potentialSOG = false;
                                gv_lastPuckVelocity = gv_puckMagnitude;
                                UnitSetCustomValue(gv_pUCK, 0, 0.0);
                                UnitSetCustomValue(gv_pUCK, 1, 0.0);
                                if ((gv_Possession != gv_ShootingPlayer)) {
                                    if ((((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(29)) == true) && ((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4])) && ((gv_ShootingPlayer == gv_Players[5]) || (gv_ShootingPlayer == gv_Players[6]) || (gv_ShootingPlayer == gv_Players[7]) || (gv_ShootingPlayer == gv_Players[8]))) || ((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(30)) == true) && ((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8])) && ((gv_ShootingPlayer == gv_Players[1]) || (gv_ShootingPlayer == gv_Players[2]) || (gv_ShootingPlayer == gv_Players[3]) || (gv_ShootingPlayer == gv_Players[4]))))) {
                                        gv_stats_DefensivePoints[gv_Possession] += 1;
                                        if ((gv_ranked == true)) {
                                            gf_SaveBank(gv_Possession);
                                        }

                                    }

                                    if ((gv_lasttouchedby != lv_iNT)) {
                                        gv_inGameStatsBlocks[lv_iNT] += 1;
                                        gv_stats_Pickups[lv_iNT] += 1;
                                    }

                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(lv_iNT);
                                    }

                                }

                                if ((gv_potentialUnshot > 0) && ((((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4])) && ((gv_potentialUnshot == gv_Players[5]) || (gv_potentialUnshot == gv_Players[6]) || (gv_potentialUnshot == gv_Players[7]) || (gv_potentialUnshot == gv_Players[8]))) || (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8])) && ((gv_potentialUnshot == gv_Players[1]) || (gv_potentialUnshot == gv_Players[2]) || (gv_potentialUnshot == gv_Players[3]) || (gv_potentialUnshot == gv_Players[4]))))) {
                                    gv_stats_DefensivePoints[gv_Possession] += 1;
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(gv_Possession);
                                    }

                                }

                                if ((gv_potentialUnshot != 0) && ((((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4])) && ((gv_potentialUnshot == gv_Players[1]) || (gv_potentialUnshot == gv_Players[2]) || (gv_potentialUnshot == gv_Players[3]) || (gv_potentialUnshot == gv_Players[4]))) || (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8])) && ((gv_potentialUnshot == gv_Players[5]) || (gv_potentialUnshot == gv_Players[6]) || (gv_potentialUnshot == gv_Players[7]) || (gv_potentialUnshot == gv_Players[8]))))) {
                                    gv_stats_Shots[gv_potentialUnshot] -= 1;
                                    if ((gv_ranked == true)) {
                                        gf_SaveBank(gv_potentialUnshot);
                                    }

                                    gv_potentialUnshot = 0;
                                }
                                else {
                                    if ((gv_potentialUnshot != 0) && ((((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4])) && ((gv_potentialUnshot == gv_Players[5]) || (gv_potentialUnshot == gv_Players[6]) || (gv_potentialUnshot == gv_Players[7]) || (gv_potentialUnshot == gv_Players[8]))) || (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8])) && ((gv_potentialUnshot == gv_Players[1]) || (gv_potentialUnshot == gv_Players[2]) || (gv_potentialUnshot == gv_Players[3]) || (gv_potentialUnshot == gv_Players[4]))))) {
                                        gv_potentialUnshot = 0;
                                    }

                                }
                                gf_CheckResetFaceoffTimer();
                                break;
                            }

                        }
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HockeyStick_Init () {
    gt_HockeyStick = TriggerCreate("gt_HockeyStick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Reset Left
//--------------------------------------------------------------------------------------------------
bool gt_UnitsReset2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() != gv_pUCK))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(130)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(52)))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(3)) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(48)) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(47)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), 5.4, AngleBetweenPoints(RegionGetCenter(EventUnitRegion()), UnitGetPosition(EventUnit()))), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitsReset2_Init () {
    gt_UnitsReset2 = TriggerCreate("gt_UnitsReset2_Func");
    TriggerAddEventUnitRegion(gt_UnitsReset2, null, RegionFromId(13), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Reset Right
//--------------------------------------------------------------------------------------------------
bool gt_UnitsReset3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() != gv_pUCK))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(130)))) {
            return false;
        }

        if (!((EventUnit() != UnitFromId(52)))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(4)) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(50)) == true) || (libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(51)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), 5.4, AngleBetweenPoints(RegionGetCenter(EventUnitRegion()), UnitGetPosition(EventUnit()))), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitsReset3_Init () {
    gt_UnitsReset3 = TriggerCreate("gt_UnitsReset3_Func");
    TriggerAddEventUnitRegion(gt_UnitsReset3, null, RegionFromId(14), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckPuckCollisionsAndMove
//--------------------------------------------------------------------------------------------------
bool gt_CheckPuckCollisionsAndMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_puckPoint;
    fixed lv_dx;
    fixed lv_dy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_Possession != -1)) {
        if ((gv_puckWrapping.lv_puckisWrapping != ge_WrappingDirection_NotWrapping)) {
            gf_CancelWrap();
        }

    }
    else {
        lv_puckPoint = UnitGetPosition(gv_pUCK);
        lv_dx = UnitGetCustomValue(gv_pUCK, 0);
        lv_dy = UnitGetCustomValue(gv_pUCK, 1);
        gv_puckMagnitude = DistanceBetweenPoints(UnitGetPosition(gv_pUCK), PointWithOffset(UnitGetPosition(gv_pUCK), lv_dx, lv_dy));
        if (((libNtve_gf_UnitInRegion(gv_pUCK, RegionFromId(60)) == false) || (gv_goalieBlocking[gv_Players[2]] == true) || (gv_goalieBlocking[gv_Players[6]] == true) || (gv_puckMagnitude > 0.7) || (UnitGroupCount(UnitGroup("RemoteForceField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            lv_puckPoint = gf_CheckPuckCollision(lv_puckPoint, 0, 10);
        }
        else {
            lv_puckPoint = PointWithOffset(lv_puckPoint, lv_dx, lv_dy);
            gv_interpolationPoints[1] = lv_puckPoint;
            gv_numOfRelevantIPs = 1;
        }
        gv_puckAngle = AngleBetweenPoints(UnitGetPosition(gv_pUCK), lv_puckPoint);
        UnitSetPosition(gv_pUCK, lv_puckPoint, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckPuckCollisionsAndMove_Init () {
    gt_CheckPuckCollisionsAndMove = TriggerCreate("gt_CheckPuckCollisionsAndMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckSkaterCollisionsAndMove
//--------------------------------------------------------------------------------------------------
bool gt_CheckSkaterCollisionsAndMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_playerPos;
    fixed lv_dx;
    fixed lv_dy;
    unit lv_enumunit;

    // Automatic Variable Declarations
    unitgroup auto406461A0_g;
    int auto406461A0_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto406461A0_g = gv_PlayerUnits;
    auto406461A0_u = UnitGroupCount(auto406461A0_g, c_unitCountAll);
    for (;; auto406461A0_u -= 1) {
        lv_enumunit = UnitGroupUnitFromEnd(auto406461A0_g, auto406461A0_u);
        if (lv_enumunit == null) { break; }
        if (((libNtve_gf_UnitInRegion(lv_enumunit, RegionFromId(60)) == false) || (gv_goalieBlocking[gv_Players[2]] == true) || (gv_goalieBlocking[gv_Players[6]] == true) || (UnitGroupCount(UnitGroup("RemoteForceField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            lv_playerPos = gf_CheckSkaterCollision(lv_enumunit);
        }
        else {
            lv_dx = UnitGetCustomValue(lv_enumunit, 0);
            lv_dy = UnitGetCustomValue(lv_enumunit, 1);
            lv_playerPos = PointWithOffset(UnitGetPosition(lv_enumunit), lv_dx, lv_dy);
        }
        gv_skaterVelocity[UnitGetOwner(lv_enumunit)] = DistanceBetweenPoints(UnitGetPosition(lv_enumunit), PointWithOffset(UnitGetPosition(lv_enumunit), lv_dx, lv_dy));
        UnitSetPosition(lv_enumunit, lv_playerPos, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckSkaterCollisionsAndMove_Init () {
    gt_CheckSkaterCollisionsAndMove = TriggerCreate("gt_CheckSkaterCollisionsAndMove_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdatePossessionTime
//--------------------------------------------------------------------------------------------------
bool gt_UpdatePossessionTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_enumplayer;

    // Automatic Variable Declarations
    const int auto667001FB_ae = 15;
    const int auto667001FB_ai = 1;
    const int auto6D767F0F_ae = 15;
    const int auto6D767F0F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_powerplay.lv_powerplayMode == true)) {
        if (((gv_stoppageOfPlay == true) || (gv_FaceoffTimer > 0) || (gv_gameispaused == true) || (gv_uIPeriodStats.lv_arestatsbeingdisplayed == true))) {
            gf_TogglePowerplayTimers(true);
        }
        else {
            gf_TogglePowerplayTimers(false);
        }
    }

    if ((gv_Possession == -1)) {
        if ((gv_allshotdecreaseareoff == false)) {
            gv_allshotdecreaseareoff = true;
            lv_enumint = 1;
            for ( ; ( (auto667001FB_ai >= 0 && lv_enumint <= auto667001FB_ae) || (auto667001FB_ai < 0 && lv_enumint >= auto667001FB_ae) ) ; lv_enumint += auto667001FB_ai ) {
                if ((TriggerIsEnabled(gv_shotpowertriggers[lv_enumint]) == true)) {
                    TriggerEnable(gv_shotpowertriggers[lv_enumint], false);
                }

            }
        }

    }
    else {
        if (((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[2]) || (gv_Possession == gv_Players[3]) || (gv_Possession == gv_Players[4]))) {
            if ((gv_rEDLINE_MODE == true) && (gv_Possession == gv_Players[2])) {
            }
            else {
                gv_possession[1] += 0.1;
            }
            UnitBehaviorAdd(gv_Skaters[gv_Possession], "NoOneTimer", gv_Skaters[gv_Possession], 1);
            if ((gv_windingUp[gv_Possession] == true) && (TriggerIsEnabled(gv_shotpowertriggers[gv_Possession]) == false)) {
                gv_allshotdecreaseareoff = false;
                TriggerEnable(gv_shotpowertriggers[gv_Possession], true);
            }

        }
        else {
            if (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[6]) || (gv_Possession == gv_Players[7]) || (gv_Possession == gv_Players[8]))) {
                gv_possession[2] += 0.1;
                UnitBehaviorAdd(gv_Skaters[gv_Possession], "NoOneTimer", gv_Skaters[gv_Possession], 1);
                if ((gv_windingUp[gv_Possession] == true) && (TriggerIsEnabled(gv_shotpowertriggers[gv_Possession]) == false)) {
                    gv_allshotdecreaseareoff = false;
                    TriggerEnable(gv_shotpowertriggers[gv_Possession], true);
                }

            }

        }
        if ((gv_rEDLINE_MODE == true)) {
            if (((gv_Possession == gv_Players[1]) || (gv_Possession == gv_Players[3]))) {
                gv_redlineMode.lv_lastteamtohavepossession = 1;
            }
            else {
                if (((gv_Possession == gv_Players[5]) || (gv_Possession == gv_Players[7]))) {
                    gv_redlineMode.lv_lastteamtohavepossession = 2;
                }

            }
            if ((gv_Possession == gv_redlineMode.lv_permagoalie) && (gv_redlineMode.lv_whatteamiscurrentlyghosted == 0) && (gv_redlineMode.lv_searchingforInitialPossession == false) && ((libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_Skaters[gv_Players[2]], RegionFromId(14)) == true))) {
                if ((gv_redlineMode.lv_offensiveTeam == 1) && (gv_redlineMode.lv_lastteamtohavepossession == 1)) {
                    gf_RedlineSetGhosted(1);
                }
                else {
                    if ((gv_redlineMode.lv_offensiveTeam == 2) && (gv_redlineMode.lv_lastteamtohavepossession == 2)) {
                        gf_RedlineSetGhosted(2);
                    }
                    else {
                        if ((gv_redlineMode.lv_offensiveTeam == 1) && (gv_redlineMode.lv_lastteamtohavepossession == 2)) {
                            gf_RedlineSetRoles(2, 1);
                            gf_RedlineSetGhosted(2);
                            SoundPlayForPlayer(SoundLink("RedlineGoalFAIL", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DF46E349"));
                        }
                        else {
                            if ((gv_redlineMode.lv_offensiveTeam == 2) && (gv_redlineMode.lv_lastteamtohavepossession == 1)) {
                                gf_RedlineSetRoles(1, 2);
                                gf_RedlineSetGhosted(1);
                                SoundPlayForPlayer(SoundLink("RedlineGoalFAIL", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
                                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3468847D"));
                            }

                        }
                    }
                }
            }

        }

    }
    if ((gv_stoppageOfPlay == false) && (gv_Period <= 4) && (gv_FaceoffTimer <= 0) && (gv_Shootout == false) && (TimerIsPaused(gv_Timer) == false)) {
        if ((gv_pullGoalie[1] == false) && (PlayerStatus(gv_Players[2]) == c_playerStatusActive) && (TimerIsPaused(gv_timeinnet.lv_nettimeTimers[gv_Players[2]]) == true)) {
            TimerPause(gv_timeinnet.lv_nettimeTimers[gv_Players[2]], false);
        }

        if ((gv_pullGoalie[2] == false) && (PlayerStatus(gv_Players[6]) == c_playerStatusActive) && (TimerIsPaused(gv_timeinnet.lv_nettimeTimers[gv_Players[6]]) == true)) {
            TimerPause(gv_timeinnet.lv_nettimeTimers[gv_Players[6]], false);
        }

    }
    else {
        lv_enumint = 1;
        for ( ; ( (auto6D767F0F_ai >= 0 && lv_enumint <= auto6D767F0F_ae) || (auto6D767F0F_ai < 0 && lv_enumint >= auto6D767F0F_ae) ) ; lv_enumint += auto6D767F0F_ai ) {
            if ((TimerIsPaused(gv_timeinnet.lv_nettimeTimers[gv_Players[lv_enumint]]) == false)) {
                TimerPause(gv_timeinnet.lv_nettimeTimers[gv_Players[lv_enumint]], true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdatePossessionTime_Init () {
    gt_UpdatePossessionTime = TriggerCreate("gt_UpdatePossessionTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Time
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_seconds;
    fixed lv_waitinterval;
    int lv_remainingtime;
    bool lv_terminate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_seconds = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_remainingtime = RoundI(TimerGetRemaining(gv_Timer));
    if ((gv_Shootout == true)) {
        libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/A72FB9DE") + FixedToText(TimerGetRemaining(gv_Timer), 2)), PlayerGroupAll());
        lv_seconds = false;
    }
    else {
        libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/E17194B6") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), (lv_remainingtime - 0))), PlayerGroupAll());
    }
    while (!((TimerGetRemaining(gv_Timer) != lv_remainingtime))) {
        Wait(0.0625, c_timeGame);
    }
    while ((lv_seconds == true)) {
        lv_remainingtime = RoundI(TimerGetRemaining(gv_Timer));
        libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/664F9E3E") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), (lv_remainingtime - 1))), PlayerGroupAll());
        if ((lv_remainingtime <= 11) && (gv_Period < 3) && (gv_Shootout == false)) {
            lv_seconds = false;
        }
        else {
            if ((lv_remainingtime <= 61) && (gv_Period >= 3) && (gv_Shootout == false)) {
                lv_seconds = false;
            }
            else {
                if ((gv_Shootout == true) && (gv_Period >= 3)) {
                    lv_seconds = false;
                }

            }
        }
        libNtve_gf_WaitForTimer(gv_Timer, (lv_remainingtime - 1), false);
    }
    while ((lv_seconds == false) && (lv_terminate == false)) {
        if ((TimerGetRemaining(gv_Timer) < 10.0)) {
            if ((TimerGetRemaining(gv_Timer) <= 0.0)) {
                libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/F9644477") + StringExternal("Param/Value/48E6FE9B")), PlayerGroupAll());
                lv_terminate = true;
            }
            else {
                libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/BEC7B24E") + FixedToText(TimerGetRemaining(gv_Timer), 2)), PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_timer, (StringExternal("Param/Value/00B6E3E8") + FixedToText(TimerGetRemaining(gv_Timer), 2)), PlayerGroupAll());
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTime_Init () {
    gt_UpdateTime = TriggerCreate("gt_UpdateTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Objects/Constant Triggers
//--------------------------------------------------------------------------------------------------
bool gt_MoveObjects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_enumunit;

    // Automatic Variable Declarations
    unitgroup autoCA1D377B_g;
    int autoCA1D377B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_int != 1)) {
        if ((gv_gameispaused == false)) {
            TriggerExecute(gt_PlayerSkate, true, false);
            TriggerExecute(gt_UpdatePossessionTime, true, false);
            TriggerExecute(gt_CheckPuckCollisionsAndMove, true, false);
            TriggerExecute(gt_CheckSkaterCollisionsAndMove, true, false);
            autoCA1D377B_g = gv_stufftomove;
            autoCA1D377B_u = UnitGroupCount(autoCA1D377B_g, c_unitCountAll);
            for (;; autoCA1D377B_u -= 1) {
                lv_enumunit = UnitGroupUnitFromEnd(autoCA1D377B_g, autoCA1D377B_u);
                if (lv_enumunit == null) { break; }
                if ((UnitGetCustomValue(lv_enumunit, 0) < 0.0)) {
                    UnitSetCustomValue(lv_enumunit, 0, (-(-UnitGetCustomValue(lv_enumunit, 0)*UnitGetCustomValue(lv_enumunit, 3))));
                }
                else {
                    UnitSetCustomValue(lv_enumunit, 0, (UnitGetCustomValue(lv_enumunit, 0)*UnitGetCustomValue(lv_enumunit, 3)));
                }
                if ((UnitGetCustomValue(lv_enumunit, 1) < 0.0)) {
                    UnitSetCustomValue(lv_enumunit, 1, (-(-UnitGetCustomValue(lv_enumunit, 1)*UnitGetCustomValue(lv_enumunit, 3))));
                }
                else {
                    UnitSetCustomValue(lv_enumunit, 1, (UnitGetCustomValue(lv_enumunit, 1)*UnitGetCustomValue(lv_enumunit, 3)));
                }
            }
            TriggerExecute(gt_HockeyStick, true, false);
            if ((gv_potentialUnshot != 0) && (gv_puckMagnitude == 0)) {
                gv_potentialUnshot = 0;
            }

            Wait(0.0625, c_timeGame);
        }
        else {
            Wait(0.0625, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveObjects_Init () {
    gt_MoveObjects = TriggerCreate("gt_MoveObjects_Func");
    TriggerAddEventMapInit(gt_MoveObjects);
}

//--------------------------------------------------------------------------------------------------
// Trigger: movespeedtest
//--------------------------------------------------------------------------------------------------
bool gt_movespeedtest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == gv_hANDLE_themusic) || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_movespeedtest == false)) {
        gv_movespeedtest = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/96A12430"));
    }
    else {
        gv_movespeedtest = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/59D1FDD5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_movespeedtest_Init () {
    gt_movespeedtest = TriggerCreate("gt_movespeedtest_Func");
    TriggerAddEventChatMessage(gt_movespeedtest, c_playerAny, "-mstest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Skate
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSkate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uniti;

    // Automatic Variable Declarations
    unitgroup auto70E1BA4A_g;
    int auto70E1BA4A_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_FaceoffTimer <= 0))) {
            return false;
        }

        if (!((gv_FreezeUnits == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto70E1BA4A_g = gv_PlayerUnits;
    auto70E1BA4A_u = UnitGroupCount(auto70E1BA4A_g, c_unitCountAll);
    for (;; auto70E1BA4A_u -= 1) {
        lv_uniti = UnitGroupUnitFromEnd(auto70E1BA4A_g, auto70E1BA4A_u);
        if (lv_uniti == null) { break; }
        if (((UnitGetOwner(lv_uniti) != gv_Players[2]) || ((UnitGetOwner(lv_uniti) == gv_Players[2]) && (gv_pullGoalie[1] == true))) && ((UnitGetOwner(lv_uniti) != gv_Players[6]) || ((UnitGetOwner(lv_uniti) == gv_Players[6]) && (gv_pullGoalie[2] == true)))) {
            if ((UnitBehaviorEnabled(lv_uniti, "SlideStop") == true) && (gv_speedSkateBoolean == false)) {
                UnitSetCustomValue(lv_uniti, 3, 0.8);
            }
            else {
                if ((UnitGetCustomValue(lv_uniti, 0) > 0.0)) {
                    if ((gv_movespeedtest == true)) {
                        UnitSetCustomValue(lv_uniti, 3, 0.9504);
                        if ((gv_Possession == UnitGetOwner(lv_uniti))) {
                            UnitSetCustomValue(lv_uniti, 3, (0.9404 * gv_puckPossessionSlowPercent));
                        }

                    }
                    else {
                        UnitSetCustomValue(lv_uniti, 3, 0.9604);
                        if ((gv_Possession == UnitGetOwner(lv_uniti))) {
                            UnitSetCustomValue(lv_uniti, 3, (0.9604 * gv_puckPossessionSlowPercent));
                        }

                    }
                }
                else {
                    if ((gv_movespeedtest == true)) {
                        UnitSetCustomValue(lv_uniti, 3, 0.95);
                        if ((gv_Possession == UnitGetOwner(lv_uniti))) {
                            UnitSetCustomValue(lv_uniti, 3, (0.94 * gv_puckPossessionSlowPercent));
                        }

                    }
                    else {
                        UnitSetCustomValue(lv_uniti, 3, 0.96);
                        if ((gv_Possession == UnitGetOwner(lv_uniti))) {
                            UnitSetCustomValue(lv_uniti, 3, (0.96 * gv_puckPossessionSlowPercent));
                        }

                    }
                }
            }
        }

        UnitSetPropertyFixed(lv_uniti, c_unitPropMovementSpeed, 0.25);
        if ((gv_goalieBlocking[UnitGetOwner(lv_uniti)] == false) && (UnitOrderIsValid(lv_uniti, UnitOrder(lv_uniti, 0)) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPoint(UnitOrder(lv_uniti, 0))) > 1.0) && (!((UnitOrder(lv_uniti, 0) == null)))) {
            if ((((UnitGetOwner(lv_uniti) == gv_Players[2]) && (gv_pullGoalie[1] == false)) || ((UnitGetOwner(lv_uniti) == gv_Players[6]) && (gv_pullGoalie[2] == false)))) {
                if (((libNtve_gf_UnitInRegion(lv_uniti, RegionFromId(83)) == true) || (libNtve_gf_UnitInRegion(lv_uniti, RegionFromId(84)) == true))) {
                    gf_ApplyForcePolar(lv_uniti, gv_goaliemovespeedincrease, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                }
                else {
                    gf_ApplyForcePolar(lv_uniti, gv_goaliemovespeedoutsidecrease, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                }
            }
            else {
                if ((UnitBehaviorEnabled(lv_uniti, "SlideStop") == true)) {
                    if ((gv_movespeedtest == true)) {
                        gf_ApplyForcePolar(lv_uniti, 0.11, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                    }
                    else {
                        gf_ApplyForcePolar(lv_uniti, 0.08, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                    }
                }
                else {
                    if ((gv_movespeedtest == true)) {
                        gf_ApplyForcePolar(lv_uniti, 0.04, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                    }
                    else {
                        gf_ApplyForcePolar(lv_uniti, 0.025, AngleBetweenPoints(UnitGetPosition(lv_uniti), OrderGetTargetPosition(UnitOrder(lv_uniti, 0))));
                    }
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerSkate_Init () {
    gt_PlayerSkate = TriggerCreate("gt_PlayerSkate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInit_Init();
    gt_Changes_Init();
    gt_HalfCourtTimerTimerExpires_Init();
    gt_HalfCourtTimerPuckentersrightside_Init();
    gt_HalfCourtTimerPuckentersleftside_Init();
    gt_Turnonremoteshield_Init();
    gt_UpdateCDRemoteShield_Init();
    gt_ForceField2_Init();
    gt_Turnonpp_Init();
    gt_Team1SkaterWarpInReady_Init();
    gt_Team2SkaterWarpInReady_Init();
    gt_WarpIn_Init();
    gt_Recall_Init();
    gt_PeriodEnd2_Init();
    gt_Rotate_Init();
    gt_Showgamestats_Init();
    gt_Hidegamestats_Init();
    gt_Turncontrastonoff_Init();
    gt_Turnguidesonoff_Init();
    gt_cmd1_Init();
    gt_cmd2_Init();
    gt_cmd3_Init();
    gt_cmd4_Init();
    gt_altgs_Init();
    gt_altgoalie_Init();
    gt_altgoalie2_Init();
    gt_altgoalie3_Init();
    gt_altgoalie4_Init();
    gt_isranked_Init();
    gt_TextHandles_Init();
    gt_TextMyHandle_Init();
    gt_TextMyHandle2_Init();
    gt_TextMyHandle4_Init();
    gt_TextMyHandle5_Init();
    gt_cmdentered_Init();
    gt_cmdclose_Init();
    gt_hidecmdline_Init();
    gt_modcmds_Init();
    gt_goaliecam_Init();
    gt_noshootout_Init();
    gt_dunkmode_Init();
    gt_soexcited_Init();
    gt_setpowerplay_Init();
    gt_powershot_Init();
    gt_nocds_Init();
    gt_setnamesize_Init();
    gt_setnameshadow_Init();
    gt_setnamecolor_Init();
    gt_setskintest_Init();
    gt_setboostcolor_Init();
    gt_setshieldcolor_Init();
    gt_switch_Init();
    gt_kickplayer_Init();
    gt_resetelo_Init();
    gt_settime_Init();
    gt_setskin_Init();
    gt_setscore_Init();
    gt_setnogoalsmode_Init();
    gt_setperiod_Init();
    gt_testscoareboard_Init();
    gt_testmodelsize_Init();
    gt_v10_Init();
    gt_nametag_Init();
    gt_Igloo_Init();
    gt_Help_Init();
    gt_VoteKick_Init();
    gt_ShowVotekickDialog_Init();
    gt_voteyes_Init();
    gt_voteno_Init();
    gt_executevoteorder_Init();
    gt_votetimerexpired_Init();
    gt_RedlineInit_Init();
    gt_RestartCMD_Init();
    gt_ForceStartForTestingRedline_Init();
    gt_Test1_Init();
    gt_Detectshotsongoal_Init();
    gt_GoalieEntersLeftHalf_Init();
    gt_GoalieEntersRightHalf_Init();
    gt_PuckEntersOOBLeft_Init();
    gt_PuckEntersOOBRight_Init();
    gt_PuckEntersTakebackLeft_Init();
    gt_PuckEntersTakebackRight_Init();
    gt_RedlineIdentifyInitialRoleFaceoff_Init();
    gt_RedlineSelectNewSlot_Init();
    gt_RedlinePressStart_Init();
    gt_RedlineSelectPeriod_Init();
    gt_RedlineSelectInfiniteOT_Init();
    gt_RedlineSelectPowerups_Init();
    gt_RedlineSelectFreeplay_Init();
    gt_RedlineSelectCrease_Init();
    gt_RedlineSelectChecking_Init();
    gt_Jungle_Init();
    gt_Unpausebutton_Init();
    gt_StartPause_Init();
    gt_Checkpuckfollow_Init();
    gt_Puckfollowhotkey_Init();
    gt_Showhidehotkey_Init();
    gt_APMShowHotkey_Init();
    gt_APMHideHotkey_Init();
    gt_PeriodUIOpenClose_Init();
    gt_PeriodUIExecute_Init();
    gt_TimeUIOpenClose_Init();
    gt_TimeUIExecute_Init();
    gt_ScoreUIOpenClose_Init();
    gt_ScoreUIExecute_Init();
    gt_APMUIOpenCloseButton_Init();
    gt_RemakeUIOpenClose_Init();
    gt_Team3UIPregameSavedGamesDialogButtonClick_Init();
    gt_RemakeUIExecuteSave_Init();
    gt_RemakeUIExecuteLoad_Init();
    gt_PauseExecute_Init();
    gt_CasterDanceatTable_Init();
    gt_TigerAttack_Init();
    gt_SaveEncryiption_Init();
    gt_LoadDecryption_Init();
    gt_KeyDialogShow_Init();
    gt_KeyDialogClose_Init();
    gt_KeyDialogSaveTab_Init();
    gt_KeyDialogLoadTab_Init();
    gt_PrizeToggle_Init();
    gt_GoalSpecial_Init();
    gt_GoalTesting_Init();
    gt_DuckHuntKill_Init();
    gt_DuckHuntScore_Init();
    gt_PickupBoard_Init();
    gt_ThowBoard_Init();
    gt_ShusukeBlink_Init();
    gt_Crickets_Init();
    gt_KimskillFireMissile_Init();
    gt_AdeleOnOff_Init();
    gt_JetpackIgnition_Init();
    gt_JetpackRelease_Init();
    gt_YodaAttack_Init();
    gt_YodaFighterselect_Init();
    gt_YodaFighterToss_Init();
    gt_RemoveSwarmUnitsLeft_Init();
    gt_RemoveSwarmUnitsRight_Init();
    gt_ActivateBunker_Init();
    gt_ShootMissileMainShip_Init();
    gt_ShootMissileSmallShip_Init();
    gt_BoostMoney_Init();
    gt_OnetimerMoney_Init();
    gt_CityShootMissile_Init();
    gt_BarryToggle_Init();
    gt_TrackLingcannonMouse_Init();
    gt_FireLingcannon_Init();
    gt_ToggleGoldenStick_Init();
    gt_Toggleninja_Init();
    gt_ToggleMuerteHat_Init();
    gt_ToggleDragonStick_Init();
    gt_ToggleGokuHair_Init();
    gt_AfroOnOff_Init();
    gt_AfroAllow_Init();
    gt_HelmetsOn_Init();
    gt_ToggleStormTrooper_Init();
    gt_ToggleStormTrooperTeam_Init();
    gt_InitializeShop_Init();
    gt_OpenCloseShop_Init();
    gt_TogglePermitOpen_Init();
    gt_InitializeSkins_Init();
    gt_Scroll_Init();
    gt_BuyEquipSkin_Init();
    gt_EquipColor_Init();
    gt_Inject_Init();
    gt_Set_Init();
    gt_VoteClick_Init();
    gt_DraftVoteClick1_Init();
    gt_DraftRoleClick_Init();
    gt_PickaplayerClick_Init();
    gt_PlatformDance_Init();
    gt_CaptainBattleAttack_Init();
    gt_CaptainBattleBurst_Init();
    gt_CaptainBattleMissileOOB_Init();
    gt_CaptainBattleUnitDeath_Init();
    gt_PlatformEasterEgg_Init();
    gt_InitiatePullGoalie_Init();
    gt_CancelPullGoalie_Init();
    gt_PullGoalie_Init();
    gt_CheckForEnablePullGoaliePP_Init();
    gt_PeriodicPullGoaliePinger_Init();
    gt_UpdateTimer_Init();
    gt_ToggleGoalieKeypress_Init();
    gt_ToggleOptions_Init();
    gt_CloseSettingsWindow_Init();
    gt_Changegamelighting_Init();
    gt_ChangeShowHideSnowSettings_Init();
    gt_ChangeShowHideLightSettings_Init();
    gt_ChangeHotkeySettings_Init();
    gt_ShowHideButtons_Init();
    gt_UpdateCDBoost_Init();
    gt_UpdateCDSlidestop_Init();
    gt_UpdateCDOnetimer_Init();
    gt_UpdateCDGoalieshield_Init();
    gt_GoalieOptIn_Init();
    gt_PuckMarkerShowHide_Init();
    gt_NameTagShowHide_Init();
    gt_VerticalCamera_Init();
    gt_MirroredCamera_Init();
    gt_AdjustCameraOptions_Init();
    gt_run3kintro_Init();
    gt_UIInitialintro_Init();
    gt_Zamboni_Init();
    gt_StatusHotkeyDown_Init();
    gt_StatusHotkeyup_Init();
    gt_PossesionTimeAdd_Init();
    gt_AwardGamePlayed_Init();
    gt_Initiatetimeinnettimers_Init();
    gt_PregameStats_Init();
    gt_PeriodStats_Init();
    gt_PeriodStatsSaveGameButton_Init();
    gt_ToggleHeatmapFilter_Init();
    gt_ChangeStatViews_Init();
    gt_LeaveGameButton_Init();
    gt_CreateSwapOutDialog_Init();
    gt_CreateSwapOutDialog2a_Init();
    gt_CreateSwapOutDialog2b_Init();
    gt_CreateSwapOutDialog3a_Init();
    gt_CreateSwapOutDialog3b_Init();
    gt_RightClickRecord_Init();
    gt_CursorOverride_Init();
    gt_Test_Init();
    gt_ForceField_Init();
    gt_GoalieStop_Init();
    gt_Stop_Init();
    gt_Stop2_Init();
    gt_StoreMouseLocationsp1_Init();
    gt_StoreMouseLocationsp2_Init();
    gt_StoreMouseLocationsp3_Init();
    gt_StoreMouseLocationsp4_Init();
    gt_StoreMouseLocationsp5_Init();
    gt_StoreMouseLocationsp6_Init();
    gt_StoreMouseLocationsp7_Init();
    gt_StoreMouseLocationsp8_Init();
    gt_StoreMouseLocationsp9_Init();
    gt_StoreMouseLocationsp10_Init();
    gt_StoreMouseLocationsp11_Init();
    gt_StoreMouseLocationsp12_Init();
    gt_StoreMouseLocationsp13_Init();
    gt_StoreMouseLocationsp14_Init();
    gt_StoreMouseLocationsp15_Init();
    gt_Checkwhichplayerstotrackmouseposition_Init();
    gt_DecreaseShotPower_Init();
    gt_DecreaseShotPower2_Init();
    gt_DecreaseShotPower5_Init();
    gt_DecreaseShotPower6_Init();
    gt_DecreaseShotPower7_Init();
    gt_DecreaseShotPower8_Init();
    gt_DecreaseShotPower9_Init();
    gt_DecreaseShotPower10_Init();
    gt_DecreaseShotPower11_Init();
    gt_DecreaseShotPower12_Init();
    gt_DecreaseShotPower13_Init();
    gt_DecreaseShotPower14_Init();
    gt_DecreaseShotPower15_Init();
    gt_DecreaseShotPower16_Init();
    gt_DecreaseShotPower17_Init();
    gt_ShotPower2_Init();
    gt_ShootPuck_Init();
    gt_StealPuck_Init();
    gt_Check_Init();
    gt_ShootPuck3_Init();
    gt_ShootPuck2_Init();
    gt_CancelOneTimer_Init();
    gt_PingUsed_Init();
    gt_RevealPingtoAllies_Init();
    gt_Spacebar_Init();
    gt_ToggleSpacebar_Init();
    gt_ReleaseSpacebar_Init();
    gt_SuperFlail_Init();
    gt_MapRotate_Init();
    gt_LeftGoal_Init();
    gt_RightGoal_Init();
    gt_RandomizeUnits_Init();
    gt_RandomizeUnits2_Init();
    gt_RandomizeUnitsShootout_Init();
    gt_RandomizeUnitsShootoutGoalie_Init();
    gt_CreateUnits2_Init();
    gt_CreateUnits_Init();
    gt_CreateUnitsFOL_Init();
    gt_CreateUnitsFOR_Init();
    gt_FaceoffHold_Init();
    gt_FaceoffWinner_Init();
    gt_RemoveUnits_Init();
    gt_ShooutoutTimer_Init();
    gt_CreateUnitsShootout_Init();
    gt_CheckShootoutRotate_Init();
    gt_GameEnd_Init();
    gt_CheckForfeit_Init();
    gt_Testleaveanimation2_Init();
    gt_PostSound_Init();
    gt_NetSound_Init();
    gt_PostSound2_Init();
    gt_AddPuck_Init();
    gt_HockeyStick_Init();
    gt_UnitsReset2_Init();
    gt_UnitsReset3_Init();
    gt_CheckPuckCollisionsAndMove_Init();
    gt_CheckSkaterCollisionsAndMove_Init();
    gt_UpdatePossessionTime_Init();
    gt_UpdateTime_Init();
    gt_MoveObjects_Init();
    gt_movespeedtest_Init();
    gt_PlayerSkate_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
